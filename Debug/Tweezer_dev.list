
Tweezer_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a18c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023830  0800a320  0800a320  0001a320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802db50  0802db50  000400d8  2**0
                  CONTENTS
  4 .ARM          00000008  0802db50  0802db50  0003db50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802db58  0802db58  000400d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802db58  0802db58  0003db58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802db5c  0802db5c  0003db5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0802db60  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d64  200000d8  0802dc38  000400d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e3c  0802dc38  00040e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017951  00000000  00000000  00040108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298b  00000000  00000000  00057a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0005a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0005b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e68  00000000  00000000  0005c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b24  00000000  00000000  00082658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec746  00000000  00000000  0009717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001838c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df4  00000000  00000000  00183918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a304 	.word	0x0800a304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800a304 	.word	0x0800a304

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f3c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d013      	beq.n	8000f70 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f4c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f50:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00b      	beq.n	8000f70 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f58:	e000      	b.n	8000f5c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f5a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f9      	beq.n	8000f5a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <movingAvg>:
static void MX_DMA_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	68f9      	ldr	r1, [r7, #12]
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad2      	subs	r2, r2, r3
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	441a      	add	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]
  //return the average
  return *ptrSum / len;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <configure>:
// configures data into an array of 4 individual values
void configure(int* ptr, int D){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
      //int dec = D*100;
		int dec = D;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	613b      	str	r3, [r7, #16]
      ptr += 3;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	330c      	adds	r3, #12
 8000fda:	607b      	str	r3, [r7, #4]
      for(int i = 0; i < 4; i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e029      	b.n	8001036 <configure+0x6e>
            int x = pow(10,i);
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff fa96 	bl	8000514 <__aeabi_i2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	ec43 2b11 	vmov	d1, r2, r3
 8000ff0:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001048 <configure+0x80>
 8000ff4:	f006 fece 	bl	8007d94 <pow>
 8000ff8:	ec53 2b10 	vmov	r2, r3, d0
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fda2 	bl	8000b48 <__aeabi_d2iz>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
            *ptr = (dec/x)%10;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <configure+0x88>)
 8001012:	fb83 2301 	smull	r2, r3, r3, r1
 8001016:	109a      	asrs	r2, r3, #2
 8001018:	17cb      	asrs	r3, r1, #31
 800101a:	1ad2      	subs	r2, r2, r3
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	1aca      	subs	r2, r1, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
            ptr--;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3b04      	subs	r3, #4
 800102e:	607b      	str	r3, [r7, #4]
      for(int i = 0; i < 4; i++){
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b03      	cmp	r3, #3
 800103a:	ddd2      	ble.n	8000fe2 <configure+0x1a>
      }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	00000000 	.word	0x00000000
 800104c:	40240000 	.word	0x40240000
 8001050:	66666667 	.word	0x66666667

08001054 <DisplayUpdate>:
void DisplayUpdate(uint16_t* displayptr, int* dataptr){
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	; 0x40
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
      int LS = 3;
 800105e:	2303      	movs	r3, #3
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint16_t *originaldisplayptr = displayptr;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

      for(int j = 2; j < 6; j++){
 8001066:	2302      	movs	r3, #2
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
 800106a:	e192      	b.n	8001392 <DisplayUpdate+0x33e>
            displayptr = originaldisplayptr;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	607b      	str	r3, [r7, #4]
            switch (*dataptr){
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b09      	cmp	r3, #9
 8001076:	f200 8182 	bhi.w	800137e <DisplayUpdate+0x32a>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <DisplayUpdate+0x2c>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010a9 	.word	0x080010a9
 8001084:	080010e9 	.word	0x080010e9
 8001088:	0800114d 	.word	0x0800114d
 800108c:	0800118d 	.word	0x0800118d
 8001090:	080011cd 	.word	0x080011cd
 8001094:	0800120d 	.word	0x0800120d
 8001098:	0800124d 	.word	0x0800124d
 800109c:	0800128d 	.word	0x0800128d
 80010a0:	080012cd 	.word	0x080012cd
 80010a4:	0800130d 	.word	0x0800130d
                  case 0:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80010a8:	2300      	movs	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
 80010ac:	e018      	b.n	80010e0 <DisplayUpdate+0x8c>
                              *displayptr = Display[i] ^ (X0[i] << LS);
 80010ae:	4a99      	ldr	r2, [pc, #612]	; (8001314 <DisplayUpdate+0x2c0>)
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4997      	ldr	r1, [pc, #604]	; (8001318 <DisplayUpdate+0x2c4>)
 80010ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c0:	4619      	mov	r1, r3
 80010c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4053      	eors	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3302      	adds	r3, #2
 80010d8:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80010da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010dc:	3301      	adds	r3, #1
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
 80010e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d9e3      	bls.n	80010ae <DisplayUpdate+0x5a>
                        }
                        break;
 80010e6:	e14a      	b.n	800137e <DisplayUpdate+0x32a>
                  case 1:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80010e8:	2300      	movs	r3, #0
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
 80010ec:	e02a      	b.n	8001144 <DisplayUpdate+0xf0>
                              *displayptr = Display[i] ^ (X1[i] << LS);
 80010ee:	4a89      	ldr	r2, [pc, #548]	; (8001314 <DisplayUpdate+0x2c0>)
 80010f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4988      	ldr	r1, [pc, #544]	; (800131c <DisplayUpdate+0x2c8>)
 80010fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001100:	4619      	mov	r1, r3
 8001102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	b21b      	sxth	r3, r3
 800110a:	4053      	eors	r3, r2
 800110c:	b21b      	sxth	r3, r3
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	801a      	strh	r2, [r3, #0]
                              printf("LS = %i\n", X1[i] << LS);
 8001114:	4a81      	ldr	r2, [pc, #516]	; (800131c <DisplayUpdate+0x2c8>)
 8001116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800111c:	461a      	mov	r2, r3
 800111e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	4619      	mov	r1, r3
 8001126:	487e      	ldr	r0, [pc, #504]	; (8001320 <DisplayUpdate+0x2cc>)
 8001128:	f005 fdb4 	bl	8006c94 <iprintf>
                              printf("display ptr = %i\n", *displayptr);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	487c      	ldr	r0, [pc, #496]	; (8001324 <DisplayUpdate+0x2d0>)
 8001134:	f005 fdae 	bl	8006c94 <iprintf>
                              displayptr++;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3302      	adds	r3, #2
 800113c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001140:	3301      	adds	r3, #1
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
 8001144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001146:	2b03      	cmp	r3, #3
 8001148:	d9d1      	bls.n	80010ee <DisplayUpdate+0x9a>
                        }
                        break;
 800114a:	e118      	b.n	800137e <DisplayUpdate+0x32a>
                  case 2:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001150:	e018      	b.n	8001184 <DisplayUpdate+0x130>
                              *displayptr = Display[i] ^ (X2[i] << LS);
 8001152:	4a70      	ldr	r2, [pc, #448]	; (8001314 <DisplayUpdate+0x2c0>)
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800115a:	b21a      	sxth	r2, r3
 800115c:	4972      	ldr	r1, [pc, #456]	; (8001328 <DisplayUpdate+0x2d4>)
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001164:	4619      	mov	r1, r3
 8001166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	b21b      	sxth	r3, r3
 800116e:	4053      	eors	r3, r2
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3302      	adds	r3, #2
 800117c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	3301      	adds	r3, #1
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	2b03      	cmp	r3, #3
 8001188:	d9e3      	bls.n	8001152 <DisplayUpdate+0xfe>
                        }
                        break;
 800118a:	e0f8      	b.n	800137e <DisplayUpdate+0x32a>
                  case 3:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001190:	e018      	b.n	80011c4 <DisplayUpdate+0x170>
                              *displayptr = Display[i] ^ (X3[i] << LS);
 8001192:	4a60      	ldr	r2, [pc, #384]	; (8001314 <DisplayUpdate+0x2c0>)
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119a:	b21a      	sxth	r2, r3
 800119c:	4963      	ldr	r1, [pc, #396]	; (800132c <DisplayUpdate+0x2d8>)
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011a4:	4619      	mov	r1, r3
 80011a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4053      	eors	r3, r2
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3302      	adds	r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	3301      	adds	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d9e3      	bls.n	8001192 <DisplayUpdate+0x13e>
                        }
                        break;
 80011ca:	e0d8      	b.n	800137e <DisplayUpdate+0x32a>
                  case 4:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
 80011d0:	e018      	b.n	8001204 <DisplayUpdate+0x1b0>
                              *displayptr = Display[i] ^ (X4[i] << LS);
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <DisplayUpdate+0x2c0>)
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4954      	ldr	r1, [pc, #336]	; (8001330 <DisplayUpdate+0x2dc>)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e4:	4619      	mov	r1, r3
 80011e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4053      	eors	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3302      	adds	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	2b03      	cmp	r3, #3
 8001208:	d9e3      	bls.n	80011d2 <DisplayUpdate+0x17e>
                        }
                        break;
 800120a:	e0b8      	b.n	800137e <DisplayUpdate+0x32a>
                  case 5:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	e018      	b.n	8001244 <DisplayUpdate+0x1f0>
                              *displayptr = Display[i] ^ (X5[i] << LS);
 8001212:	4a40      	ldr	r2, [pc, #256]	; (8001314 <DisplayUpdate+0x2c0>)
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800121a:	b21a      	sxth	r2, r3
 800121c:	4945      	ldr	r1, [pc, #276]	; (8001334 <DisplayUpdate+0x2e0>)
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001224:	4619      	mov	r1, r3
 8001226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	b21b      	sxth	r3, r3
 800122e:	4053      	eors	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	b29a      	uxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3302      	adds	r3, #2
 800123c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	3301      	adds	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d9e3      	bls.n	8001212 <DisplayUpdate+0x1be>
                        }
                        break;
 800124a:	e098      	b.n	800137e <DisplayUpdate+0x32a>
                  case 6:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	e018      	b.n	8001284 <DisplayUpdate+0x230>
                              *displayptr = Display[i] ^ (X6[i] << LS);
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <DisplayUpdate+0x2c0>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	b21a      	sxth	r2, r3
 800125c:	4936      	ldr	r1, [pc, #216]	; (8001338 <DisplayUpdate+0x2e4>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001264:	4619      	mov	r1, r3
 8001266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	b21b      	sxth	r3, r3
 800126e:	4053      	eors	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3302      	adds	r3, #2
 800127c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d9e3      	bls.n	8001252 <DisplayUpdate+0x1fe>
                        }
                        break;
 800128a:	e078      	b.n	800137e <DisplayUpdate+0x32a>
                  case 7:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	e018      	b.n	80012c4 <DisplayUpdate+0x270>
                              *displayptr = Display[i] ^ (X7[i] << LS);
 8001292:	4a20      	ldr	r2, [pc, #128]	; (8001314 <DisplayUpdate+0x2c0>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129a:	b21a      	sxth	r2, r3
 800129c:	4927      	ldr	r1, [pc, #156]	; (800133c <DisplayUpdate+0x2e8>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a4:	4619      	mov	r1, r3
 80012a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4053      	eors	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3302      	adds	r3, #2
 80012bc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d9e3      	bls.n	8001292 <DisplayUpdate+0x23e>
                        }
                        break;
 80012ca:	e058      	b.n	800137e <DisplayUpdate+0x32a>
                  case 8:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e018      	b.n	8001304 <DisplayUpdate+0x2b0>
                              *displayptr = Display[i] ^ (X8[i] << LS);
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <DisplayUpdate+0x2c0>)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4918      	ldr	r1, [pc, #96]	; (8001340 <DisplayUpdate+0x2ec>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e4:	4619      	mov	r1, r3
 80012e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4053      	eors	r3, r2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3302      	adds	r3, #2
 80012fc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9e3      	bls.n	80012d2 <DisplayUpdate+0x27e>
                        }
                        break;
 800130a:	e038      	b.n	800137e <DisplayUpdate+0x32a>
                  case 9:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	e031      	b.n	8001376 <DisplayUpdate+0x322>
 8001312:	bf00      	nop
 8001314:	200000f4 	.word	0x200000f4
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	0800a320 	.word	0x0800a320
 8001324:	0800a32c 	.word	0x0800a32c
 8001328:	20000010 	.word	0x20000010
 800132c:	20000018 	.word	0x20000018
 8001330:	20000020 	.word	0x20000020
 8001334:	20000028 	.word	0x20000028
 8001338:	20000030 	.word	0x20000030
 800133c:	20000038 	.word	0x20000038
 8001340:	20000040 	.word	0x20000040
                              *displayptr = Display[i] ^ (X9[i] << LS);
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <DisplayUpdate+0x350>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134c:	b21a      	sxth	r2, r3
 800134e:	4916      	ldr	r1, [pc, #88]	; (80013a8 <DisplayUpdate+0x354>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001356:	4619      	mov	r1, r3
 8001358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	b21b      	sxth	r3, r3
 8001360:	4053      	eors	r3, r2
 8001362:	b21b      	sxth	r3, r3
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3302      	adds	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	3301      	adds	r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d9e3      	bls.n	8001344 <DisplayUpdate+0x2f0>
                        }
                        break;
 800137c:	bf00      	nop
            }
            LS =  LS + j;
 800137e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001382:	4413      	add	r3, r2
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
            dataptr++;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3304      	adds	r3, #4
 800138a:	603b      	str	r3, [r7, #0]
      for(int j = 2; j < 6; j++){
 800138c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800138e:	3301      	adds	r3, #1
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
 8001392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001394:	2b05      	cmp	r3, #5
 8001396:	f77f ae69 	ble.w	800106c <DisplayUpdate+0x18>
      }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200000f4 	.word	0x200000f4
 80013a8:	20000048 	.word	0x20000048

080013ac <_write>:
//DISPLAYYYYYY^^^^^^^
int _write(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e009      	b.n	80013d6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	60ba      	str	r2, [r7, #8]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fdb0 	bl	8000f30 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbf1      	blt.n	80013c2 <_write+0x16>
  return len;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <generateLuts>:
void generateLuts()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
    for (int i = 0; i < 32; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e03c      	b.n	800146e <generateLuts+0x86>
    {
        double angle = (2 * M_PI * (double)i * k) / 32;
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff f88d 	bl	8000514 <__aeabi_i2d>
 80013fa:	a325      	add	r3, pc, #148	; (adr r3, 8001490 <generateLuts+0xa8>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f8f2 	bl	80005e8 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <generateLuts+0x98>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f8e9 	bl	80005e8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <generateLuts+0x9c>)
 8001424:	f7ff fa0a 	bl	800083c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	e9c7 2300 	strd	r2, r3, [r7]

        cosAngLut[i] = cos(angle);
 8001430:	ed97 0b00 	vldr	d0, [r7]
 8001434:	f006 fb84 	bl	8007b40 <cos>
 8001438:	eeb0 7a40 	vmov.f32	s14, s0
 800143c:	eef0 7a60 	vmov.f32	s15, s1
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <generateLuts+0xa0>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	ed83 7b00 	vstr	d7, [r3]
        sinAngLut[i] = sin(angle);
 800144c:	ed97 0b00 	vldr	d0, [r7]
 8001450:	f006 fc0e 	bl	8007c70 <sin>
 8001454:	eeb0 7a40 	vmov.f32	s14, s0
 8001458:	eef0 7a60 	vmov.f32	s15, s1
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <generateLuts+0xa4>)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < 32; i++)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b1f      	cmp	r3, #31
 8001472:	ddbf      	ble.n	80013f4 <generateLuts+0xc>
    }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000050 	.word	0x20000050
 8001484:	40400000 	.word	0x40400000
 8001488:	20000680 	.word	0x20000680
 800148c:	20000780 	.word	0x20000780
 8001490:	54442d18 	.word	0x54442d18
 8001494:	401921fb 	.word	0x401921fb

08001498 <calcBuffLoc>:
uint32_t calcBuffLoc(uint32_t startPos, uint32_t offSet, uint32_t buffSize)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
    uint32_t newLoc = startPos + offSet;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

    if (newLoc < buffSize)
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d201      	bcs.n	80014b8 <calcBuffLoc+0x20>
    {
        return newLoc;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	e002      	b.n	80014be <calcBuffLoc+0x26>
    }
    else
    {
        return newLoc - buffSize; // Loop Around
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	1ad3      	subs	r3, r2, r3
    }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	0000      	movs	r0, r0
 80014cc:	0000      	movs	r0, r0
	...

080014d0 <constrainAngle>:
float constrainAngle(float x){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
	x= fmod(x,360);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff f82c 	bl	8000538 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001530 <constrainAngle+0x60>
 80014e8:	ec43 2b10 	vmov	d0, r2, r3
 80014ec:	f006 fc16 	bl	8007d1c <fmod>
 80014f0:	ec53 2b10 	vmov	r2, r3, d0
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb4e 	bl	8000b98 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	607b      	str	r3, [r7, #4]
	if (x<0){
 8001500:	edd7 7a01 	vldr	s15, [r7, #4]
 8001504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d507      	bpl.n	800151e <constrainAngle+0x4e>
		x += 360;
 800150e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001512:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001538 <constrainAngle+0x68>
 8001516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800151a:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return x;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ee07 3a90 	vmov	s15, r3
}
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	40768000 	.word	0x40768000
 8001538:	43b40000 	.word	0x43b40000

0800153c <generate_ODR_Buff>:
void generate_ODR_Buff()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001542:	af00      	add	r7, sp, #0
	const uint8_t singlePhaseBuff[TX_BUFF_SIZE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0};
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	4a9c      	ldr	r2, [pc, #624]	; (80017bc <generate_ODR_Buff+0x280>)
 800154a:	4618      	mov	r0, r3
 800154c:	4611      	mov	r1, r2
 800154e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001552:	461a      	mov	r2, r3
 8001554:	f005 fb88 	bl	8006c68 <memcpy>
	//const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 1, 1, 1, 1, 1};//ORIGINAL
	//const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 0, 0, 0, 0, 1};//shorter active period
	//const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 0, 0, 0, 0, 0};//NO BIAS TEST
	const uint8_t biasBuff[BIAS_BUFF_SIZE] = {1, 1, 1, 0, 0, 0, 0, 0};// FOR TESTING ON BREADBOARD
 8001558:	463b      	mov	r3, r7
 800155a:	4a99      	ldr	r2, [pc, #612]	; (80017c0 <generate_ODR_Buff+0x284>)
 800155c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001560:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t tx0Loc, tx1Loc, tx2Loc, tx3Loc, tx4Loc, tx5Loc, tx6Loc, tx7Loc = 0; // 0 ... 512-1: TX buffer locations
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	uint32_t biasLoc = 0;                                                        // 0 ... 8-1: Bias buffer location
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	uint32_t period = 0;                                                         // Period signal current output pin state
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	uint32_t timeBase = 0;                                                       // Timebase signal current output pin state
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	uint32_t adcTrig = 0;                                                        // ADC external trigger signal current output pin state
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint32_t ODRVal = 0;                                                        // Output data register state for all signals combined
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800158e:	e109      	b.n	80017a4 <generate_ODR_Buff+0x268>
	{
		tx0Loc = i;
 8001590:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001594:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		/* Calculate other TX signals LUT location 45 degrees phase shifted */
		tx1Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 1, TX_BUFF_SIZE);
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	2140      	movs	r1, #64	; 0x40
 800159e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015a2:	f7ff ff79 	bl	8001498 <calcBuffLoc>
 80015a6:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		tx2Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 2, TX_BUFF_SIZE);
 80015aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015b4:	f7ff ff70 	bl	8001498 <calcBuffLoc>
 80015b8:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		tx3Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 3, TX_BUFF_SIZE);
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	21c0      	movs	r1, #192	; 0xc0
 80015c2:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015c6:	f7ff ff67 	bl	8001498 <calcBuffLoc>
 80015ca:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		tx4Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 4, TX_BUFF_SIZE);
 80015ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d6:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015da:	f7ff ff5d 	bl	8001498 <calcBuffLoc>
 80015de:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		tx5Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 5, TX_BUFF_SIZE);
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80015ea:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015ee:	f7ff ff53 	bl	8001498 <calcBuffLoc>
 80015f2:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		tx6Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 6, TX_BUFF_SIZE);
 80015f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80015fe:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001602:	f7ff ff49 	bl	8001498 <calcBuffLoc>
 8001606:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
		tx7Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 7, TX_BUFF_SIZE);
 800160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001612:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001616:	f7ff ff3f 	bl	8001498 <calcBuffLoc>
 800161a:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230

		/* calculate debug signals */
		period = (tx0Loc < TX_BUFF_SIZE / 2) ? 0 : 1;
 800161e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	bf8c      	ite	hi
 8001626:	2301      	movhi	r3, #1
 8001628:	2300      	movls	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		timeBase = (tx0Loc % 2) ? 0 : 1; //flips every sample, timebase for debugging
 8001630:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

		/* Calculate ADC external trigger signal */
		adcTrig = ((tx0Loc + 7) % 8) ? 0 : 1; //ADC trigger signal every 8T, Offset by 6 to align ADC trigger (rising edge) on second period when the bias is low.
 8001646:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800164a:	3307      	adds	r3, #7
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		//adcTrig = ((tx0Loc) % 8) ? 0 : 1;
		/* building the OCTL value */
		ODRVal = 0; //Set all pins low default
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

		if (singlePhaseBuff[tx0Loc])
 8001664:	f107 0208 	add.w	r2, r7, #8
 8001668:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <generate_ODR_Buff+0x144>
			ODRVal |= PWM0_Pin;
 8001674:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx1Loc])
 8001680:	f107 0208 	add.w	r2, r7, #8
 8001684:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <generate_ODR_Buff+0x160>
			ODRVal |= PWM45_Pin;
 8001690:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx2Loc])
 800169c:	f107 0208 	add.w	r2, r7, #8
 80016a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <generate_ODR_Buff+0x17c>
			ODRVal |= PWM90_Pin;
 80016ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx3Loc])
 80016b8:	f107 0208 	add.w	r2, r7, #8
 80016bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <generate_ODR_Buff+0x198>
			ODRVal |= PWM135_Pin;
 80016c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx4Loc])
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <generate_ODR_Buff+0x1b4>
			ODRVal |= PWM180_Pin;
 80016e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx5Loc])
 80016f0:	f107 0208 	add.w	r2, r7, #8
 80016f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <generate_ODR_Buff+0x1d0>
			ODRVal |= PWM225_Pin; //STM32l433RCTxP does not have Port C Pin 5
 8001700:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001708:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx6Loc])
 800170c:	f107 0208 	add.w	r2, r7, #8
 8001710:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <generate_ODR_Buff+0x1ec>
			ODRVal |= PWM270_Pin;
 800171c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx7Loc])
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <generate_ODR_Buff+0x208>
			ODRVal |= PWM315_Pin;
 8001738:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (biasBuff[biasLoc])
 8001744:	463a      	mov	r2, r7
 8001746:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <generate_ODR_Buff+0x222>
			ODRVal |= BIAS_Pin; // Bias signal: 8T Period 3T LOW 5T HIGH
 8001752:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (adcTrig)
 800175e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <generate_ODR_Buff+0x236>
			ODRVal |= ADC_TRIG_OUT_Pin; // ADC external trigger signal: 8T Period
 8001766:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
			ODRVal |= TIMEBASE_Pin;     // DBG signal: TimeBase smallest period 1T
		if (period)
			ODRVal |= PERIOD_Pin; // DBG signal: Period is the modulated Sine period. 512/2=256, 256T HIGH followed by 256T LOW*/

		/* Store OCTL value in buffer */
		ODR_Buff[i] = ODRVal;
 8001772:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001776:	b299      	uxth	r1, r3
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <generate_ODR_Buff+0x288>)
 800177a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800177e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		/* Loop over bias signal template buffer when end is reached*/
		biasLoc++;
 8001782:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001786:	3301      	adds	r3, #1
 8001788:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
		if (biasLoc >= BIAS_BUFF_SIZE)
 800178c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001790:	2b07      	cmp	r3, #7
 8001792:	d902      	bls.n	800179a <generate_ODR_Buff+0x25e>
			biasLoc = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 800179a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800179e:	3301      	adds	r3, #1
 80017a0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80017a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80017a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ac:	f4ff aef0 	bcc.w	8001590 <generate_ODR_Buff+0x54>
	}
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0800a340 	.word	0x0800a340
 80017c0:	0800a540 	.word	0x0800a540
 80017c4:	200000fc 	.word	0x200000fc

080017c8 <sensor_signalProcessing>:
void sensor_signalProcessing()
{
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b08a      	sub	sp, #40	; 0x28
 80017ce:	af00      	add	r7, sp, #0
    /*Split even and odd samples */
    int eLoc = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    int oLoc = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < 64; i++)
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	e02c      	b.n	8001838 <sensor_signalProcessing+0x70>
    {
        if (i % 2)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d012      	beq.n	800180e <sensor_signalProcessing+0x46>
        {
            even[eLoc] = (double)processBuff[i];
 80017e8:	4a9f      	ldr	r2, [pc, #636]	; (8001a68 <sensor_signalProcessing+0x2a0>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe7f 	bl	80004f4 <__aeabi_ui2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	489c      	ldr	r0, [pc, #624]	; (8001a6c <sensor_signalProcessing+0x2a4>)
 80017fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fe:	00c9      	lsls	r1, r1, #3
 8001800:	4401      	add	r1, r0
 8001802:	e9c1 2300 	strd	r2, r3, [r1]
            eLoc++;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	3301      	adds	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
 800180c:	e011      	b.n	8001832 <sensor_signalProcessing+0x6a>
        }
        else
        {
            odd[oLoc] = (double)processBuff[i];
 800180e:	4a96      	ldr	r2, [pc, #600]	; (8001a68 <sensor_signalProcessing+0x2a0>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe6c 	bl	80004f4 <__aeabi_ui2d>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4893      	ldr	r0, [pc, #588]	; (8001a70 <sensor_signalProcessing+0x2a8>)
 8001822:	6a39      	ldr	r1, [r7, #32]
 8001824:	00c9      	lsls	r1, r1, #3
 8001826:	4401      	add	r1, r0
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
            oLoc++;
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	3301      	adds	r3, #1
 8001830:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < 64; i++)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b3f      	cmp	r3, #63	; 0x3f
 800183c:	d9cf      	bls.n	80017de <sensor_signalProcessing+0x16>
        }
    }

    /* demodulate: convert sampled signal to sine*/
    for (uint32_t i = 0; i < 32; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	e018      	b.n	8001876 <sensor_signalProcessing+0xae>
    {
        demol[i] = even[i] - odd[i];
 8001844:	4a89      	ldr	r2, [pc, #548]	; (8001a6c <sensor_signalProcessing+0x2a4>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001850:	4a87      	ldr	r2, [pc, #540]	; (8001a70 <sensor_signalProcessing+0x2a8>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fd0c 	bl	8000278 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4883      	ldr	r0, [pc, #524]	; (8001a74 <sensor_signalProcessing+0x2ac>)
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	00c9      	lsls	r1, r1, #3
 800186a:	4401      	add	r1, r0
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint32_t i = 0; i < 32; i++)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	3301      	adds	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b1f      	cmp	r3, #31
 800187a:	d9e3      	bls.n	8001844 <sensor_signalProcessing+0x7c>
    //     sumrealTemp += (double)demolLp[i] * cos(angle);
    //     sumimagTemp += -(double)demolLp[i] * sin(angle);
    // }

    /* Fast dft using precomputed lookup tables for cos and sine part*/
    double sumrealTemp = 0;
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double sumimagTemp = 0;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 2302 	strd	r2, r3, [r7, #8]

    for (uint32_t i = 0; i < 32; i++)
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	e037      	b.n	800190a <sensor_signalProcessing+0x142>
    {
        sumrealTemp += (double)demol[i] * cosAngLut[i];
 800189a:	4a76      	ldr	r2, [pc, #472]	; (8001a74 <sensor_signalProcessing+0x2ac>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a6:	4a74      	ldr	r2, [pc, #464]	; (8001a78 <sensor_signalProcessing+0x2b0>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fe99 	bl	80005e8 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018be:	f7fe fcdd 	bl	800027c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        sumimagTemp += -(double)demol[i] * sinAngLut[i];
 80018ca:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <sensor_signalProcessing+0x2ac>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	4692      	mov	sl, r2
 80018d8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80018dc:	4a67      	ldr	r2, [pc, #412]	; (8001a7c <sensor_signalProcessing+0x2b4>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	4650      	mov	r0, sl
 80018ea:	4659      	mov	r1, fp
 80018ec:	f7fe fe7c 	bl	80005e8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f8:	f7fe fcc0 	bl	800027c <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 2302 	strd	r2, r3, [r7, #8]
    for (uint32_t i = 0; i < 32; i++)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b1f      	cmp	r3, #31
 800190e:	d9c4      	bls.n	800189a <sensor_signalProcessing+0xd2>
    }

    // dft coefficients at the frequency bin of interest (1hz) in complex form
    real = sumrealTemp; //X-axis
 8001910:	495b      	ldr	r1, [pc, #364]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 8001912:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001916:	e9c1 2300 	strd	r2, r3, [r1]
    imag = sumimagTemp; //Y-axis
 800191a:	495a      	ldr	r1, [pc, #360]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 800191c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001920:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate phase
    if (real >= 0 && imag >= 0)
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 8001926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f7ff f8df 	bl	8000af4 <__aeabi_dcmpge>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d026      	beq.n	800198a <sensor_signalProcessing+0x1c2>
 800193c:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f7ff f8d3 	bl	8000af4 <__aeabi_dcmpge>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01a      	beq.n	800198a <sensor_signalProcessing+0x1c2>
    {
        //1-Quadrant (top right) [+, +]
        phaseRad = atan2(imag, real);
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 8001956:	ed93 7b00 	vldr	d7, [r3]
 800195a:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 800195c:	ed93 6b00 	vldr	d6, [r3]
 8001960:	eeb0 1a46 	vmov.f32	s2, s12
 8001964:	eef0 1a66 	vmov.f32	s3, s13
 8001968:	eeb0 0a47 	vmov.f32	s0, s14
 800196c:	eef0 0a67 	vmov.f32	s1, s15
 8001970:	f006 f9d2 	bl	8007d18 <atan2>
 8001974:	eeb0 7a40 	vmov.f32	s14, s0
 8001978:	eef0 7a60 	vmov.f32	s15, s1
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <sensor_signalProcessing+0x2c0>)
 800197e:	ed83 7b00 	vstr	d7, [r3]
        quadrant = 1;
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <sensor_signalProcessing+0x2c4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e0b9      	b.n	8001afe <sensor_signalProcessing+0x336>
    }
    else if (real < 0 && imag >= 0)
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 800198c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f7ff f898 	bl	8000acc <__aeabi_dcmplt>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d026      	beq.n	80019f0 <sensor_signalProcessing+0x228>
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 80019a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f7ff f8a0 	bl	8000af4 <__aeabi_dcmpge>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01a      	beq.n	80019f0 <sensor_signalProcessing+0x228>
    {
        //2-Quadrant (top left) [-, +]
        phaseRad = atan2(imag, real);
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 80019bc:	ed93 7b00 	vldr	d7, [r3]
 80019c0:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 80019c2:	ed93 6b00 	vldr	d6, [r3]
 80019c6:	eeb0 1a46 	vmov.f32	s2, s12
 80019ca:	eef0 1a66 	vmov.f32	s3, s13
 80019ce:	eeb0 0a47 	vmov.f32	s0, s14
 80019d2:	eef0 0a67 	vmov.f32	s1, s15
 80019d6:	f006 f99f 	bl	8007d18 <atan2>
 80019da:	eeb0 7a40 	vmov.f32	s14, s0
 80019de:	eef0 7a60 	vmov.f32	s15, s1
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <sensor_signalProcessing+0x2c0>)
 80019e4:	ed83 7b00 	vstr	d7, [r3]
        quadrant = 2;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <sensor_signalProcessing+0x2c4>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e086      	b.n	8001afe <sensor_signalProcessing+0x336>
    }
    else if (real < 0 && imag < 0)
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 80019f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	f7ff f865 	bl	8000acc <__aeabi_dcmplt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d043      	beq.n	8001a90 <sensor_signalProcessing+0x2c8>
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 8001a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	f7ff f859 	bl	8000acc <__aeabi_dcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d037      	beq.n	8001a90 <sensor_signalProcessing+0x2c8>
    {
        //3-Quadrant (bottom left) [-, -]
        phaseRad = 2 * M_PI + atan2(imag, real);
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 8001a22:	ed93 7b00 	vldr	d7, [r3]
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 8001a28:	ed93 6b00 	vldr	d6, [r3]
 8001a2c:	eeb0 1a46 	vmov.f32	s2, s12
 8001a30:	eef0 1a66 	vmov.f32	s3, s13
 8001a34:	eeb0 0a47 	vmov.f32	s0, s14
 8001a38:	eef0 0a67 	vmov.f32	s1, s15
 8001a3c:	f006 f96c 	bl	8007d18 <atan2>
 8001a40:	ec51 0b10 	vmov	r0, r1, d0
 8001a44:	a306      	add	r3, pc, #24	; (adr r3, 8001a60 <sensor_signalProcessing+0x298>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fc17 	bl	800027c <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <sensor_signalProcessing+0x2c0>)
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]
        quadrant = 3;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <sensor_signalProcessing+0x2c4>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e04e      	b.n	8001afe <sensor_signalProcessing+0x336>
 8001a60:	54442d18 	.word	0x54442d18
 8001a64:	401921fb 	.word	0x401921fb
 8001a68:	200005fc 	.word	0x200005fc
 8001a6c:	20000880 	.word	0x20000880
 8001a70:	20000980 	.word	0x20000980
 8001a74:	20000a80 	.word	0x20000a80
 8001a78:	20000680 	.word	0x20000680
 8001a7c:	20000780 	.word	0x20000780
 8001a80:	20000b80 	.word	0x20000b80
 8001a84:	20000b88 	.word	0x20000b88
 8001a88:	20000b98 	.word	0x20000b98
 8001a8c:	20000058 	.word	0x20000058
    }
    else if (real >= 0 && imag < 0)
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <sensor_signalProcessing+0x408>)
 8001a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f7ff f829 	bl	8000af4 <__aeabi_dcmpge>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02a      	beq.n	8001afe <sensor_signalProcessing+0x336>
 8001aa8:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <sensor_signalProcessing+0x40c>)
 8001aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f7ff f809 	bl	8000acc <__aeabi_dcmplt>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01e      	beq.n	8001afe <sensor_signalProcessing+0x336>
    {
        //4-Quadrant (bottom right) [+, -] #Optimization: do not check last quadrant just use else
        phaseRad = 2 * M_PI + atan2(imag, real);
 8001ac0:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <sensor_signalProcessing+0x40c>)
 8001ac2:	ed93 7b00 	vldr	d7, [r3]
 8001ac6:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <sensor_signalProcessing+0x408>)
 8001ac8:	ed93 6b00 	vldr	d6, [r3]
 8001acc:	eeb0 1a46 	vmov.f32	s2, s12
 8001ad0:	eef0 1a66 	vmov.f32	s3, s13
 8001ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad8:	eef0 0a67 	vmov.f32	s1, s15
 8001adc:	f006 f91c 	bl	8007d18 <atan2>
 8001ae0:	ec51 0b10 	vmov	r0, r1, d0
 8001ae4:	a336      	add	r3, pc, #216	; (adr r3, 8001bc0 <sensor_signalProcessing+0x3f8>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fbc7 	bl	800027c <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4939      	ldr	r1, [pc, #228]	; (8001bd8 <sensor_signalProcessing+0x410>)
 8001af4:	e9c1 2300 	strd	r2, r3, [r1]
        quadrant = 4;
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <sensor_signalProcessing+0x414>)
 8001afa:	2204      	movs	r2, #4
 8001afc:	601a      	str	r2, [r3, #0]
    }

    phaseDeg = (phaseRad * 180) / M_PI; // 0 to 360 degrees
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <sensor_signalProcessing+0x410>)
 8001b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <sensor_signalProcessing+0x418>)
 8001b0a:	f7fe fd6d 	bl	80005e8 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	a32c      	add	r3, pc, #176	; (adr r3, 8001bc8 <sensor_signalProcessing+0x400>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fe8e 	bl	800083c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	492f      	ldr	r1, [pc, #188]	; (8001be4 <sensor_signalProcessing+0x41c>)
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]
    phaseDegDisp = round((phaseRad * 180) / M_PI);
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <sensor_signalProcessing+0x410>)
 8001b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <sensor_signalProcessing+0x418>)
 8001b36:	f7fe fd57 	bl	80005e8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	a321      	add	r3, pc, #132	; (adr r3, 8001bc8 <sensor_signalProcessing+0x400>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe78 	bl	800083c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	ec43 2b17 	vmov	d7, r2, r3
 8001b54:	eeb0 0a47 	vmov.f32	s0, s14
 8001b58:	eef0 0a67 	vmov.f32	s1, s15
 8001b5c:	f006 f840 	bl	8007be0 <round>
 8001b60:	eeb0 7a40 	vmov.f32	s14, s0
 8001b64:	eef0 7a60 	vmov.f32	s15, s1
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <sensor_signalProcessing+0x420>)
 8001b6a:	ed83 7b00 	vstr	d7, [r3]
    }
    else{
    	logcount = 1025;
    }*/
    // Calculate magnitude
    magnitude = sqrt(fabs(real) + fabs(imag));
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <sensor_signalProcessing+0x408>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	4614      	mov	r4, r2
 8001b76:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <sensor_signalProcessing+0x40c>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	4690      	mov	r8, r2
 8001b82:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b86:	4642      	mov	r2, r8
 8001b88:	464b      	mov	r3, r9
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fb75 	bl	800027c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ec43 2b17 	vmov	d7, r2, r3
 8001b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ba2:	f006 f9a5 	bl	8007ef0 <sqrt>
 8001ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8001baa:	eef0 7a60 	vmov.f32	s15, s1
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <sensor_signalProcessing+0x424>)
 8001bb0:	ed83 7b00 	vstr	d7, [r3]
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bbe:	bf00      	nop
 8001bc0:	54442d18 	.word	0x54442d18
 8001bc4:	401921fb 	.word	0x401921fb
 8001bc8:	54442d18 	.word	0x54442d18
 8001bcc:	400921fb 	.word	0x400921fb
 8001bd0:	20000b80 	.word	0x20000b80
 8001bd4:	20000b88 	.word	0x20000b88
 8001bd8:	20000b98 	.word	0x20000b98
 8001bdc:	20000058 	.word	0x20000058
 8001be0:	40668000 	.word	0x40668000
 8001be4:	20000ba0 	.word	0x20000ba0
 8001be8:	20000ba8 	.word	0x20000ba8
 8001bec:	20000b90 	.word	0x20000b90

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf6:	f000 ff4d 	bl	8002a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bfa:	f000 f995 	bl	8001f28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8001bfe:	f000 fb49 	bl	8002294 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c02:	f000 fb79 	bl	80022f8 <MX_GPIO_Init>
  MX_LCD_Init();
 8001c06:	f000 fa49 	bl	800209c <MX_LCD_Init>
  MX_ADC1_Init();
 8001c0a:	f000 f9e1 	bl	8001fd0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001c0e:	f000 fb11 	bl	8002234 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001c12:	f000 fb3f 	bl	8002294 <MX_DMA_Init>
  MX_TIM6_Init();
 8001c16:	f000 fad7 	bl	80021c8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001c1a:	f000 fa85 	bl	8002128 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  generate_ODR_Buff();
 8001c1e:	f7ff fc8d 	bl	800153c <generate_ODR_Buff>
  generateLuts();
 8001c22:	f7ff fbe1 	bl	80013e8 <generateLuts>
  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)&ODR_Buff, (uint32_t)&GPIOC->ODR, TX_BUFF_SIZE);
 8001c26:	49ac      	ldr	r1, [pc, #688]	; (8001ed8 <main+0x2e8>)
 8001c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2c:	4aab      	ldr	r2, [pc, #684]	; (8001edc <main+0x2ec>)
 8001c2e:	48ac      	ldr	r0, [pc, #688]	; (8001ee0 <main+0x2f0>)
 8001c30:	f002 fa0e 	bl	8004050 <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8001c34:	4bab      	ldr	r3, [pc, #684]	; (8001ee4 <main+0x2f4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4baa      	ldr	r3, [pc, #680]	; (8001ee4 <main+0x2f4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c42:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim6);
 8001c44:	48a7      	ldr	r0, [pc, #668]	; (8001ee4 <main+0x2f4>)
 8001c46:	f004 f939 	bl	8005ebc <HAL_TIM_Base_Start>
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples, SAMPLE_BUFF_SIZE);
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	49a6      	ldr	r1, [pc, #664]	; (8001ee8 <main+0x2f8>)
 8001c4e:	48a7      	ldr	r0, [pc, #668]	; (8001eec <main+0x2fc>)
 8001c50:	f001 fad0 	bl	80031f4 <HAL_ADC_Start_DMA>
	for(int i=size-1; i>=0; ){
		  reverse[k++] = data[i--];
	}*/


	for(int i = 0; i < 4; i++){
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	e00a      	b.n	8001c70 <main+0x80>
		  printf("Display = %d \n", Display[i]);
 8001c5a:	4aa5      	ldr	r2, [pc, #660]	; (8001ef0 <main+0x300>)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c62:	4619      	mov	r1, r3
 8001c64:	48a3      	ldr	r0, [pc, #652]	; (8001ef4 <main+0x304>)
 8001c66:	f005 f815 	bl	8006c94 <iprintf>
	for(int i = 0; i < 4; i++){
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	ddf1      	ble.n	8001c5a <main+0x6a>
	}
	int arrNumbers[5] = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
	int pos = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
	  int newAvg = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
	  long sum = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	603b      	str	r3, [r7, #0]
	  int len = sizeof(arrNumbers) / sizeof(int);
 8001c90:	2305      	movs	r3, #5
 8001c92:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)==0){
 8001c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f002 fcd4 	bl	8004648 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <main+0xca>
		  zero = phaseDeg;
 8001ca6:	4b94      	ldr	r3, [pc, #592]	; (8001ef8 <main+0x308>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ff72 	bl	8000b98 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a91      	ldr	r2, [pc, #580]	; (8001efc <main+0x30c>)
 8001cb8:	6013      	str	r3, [r2, #0]
		  /*for(int i=0; i<len; i++){
			  arrNumbers[i] = 0;
		  }*/
	  }
	  if(dataRdyFlag)
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <main+0x310>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0e8      	beq.n	8001c94 <main+0xa4>
	  {
		  sensor_signalProcessing();
 8001cc2:	f7ff fd81 	bl	80017c8 <sensor_signalProcessing>
		  memset(Display, 0x00, 8);
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4889      	ldr	r0, [pc, #548]	; (8001ef0 <main+0x300>)
 8001ccc:	f004 ffda 	bl	8006c84 <memset>
		 		  	  tempf = constrainAngle(phaseDeg-offset);
 8001cd0:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <main+0x308>)
 8001cd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <main+0x314>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc2c 	bl	8000538 <__aeabi_f2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe fac6 	bl	8000278 <__aeabi_dsub>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ff50 	bl	8000b98 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	ee00 3a10 	vmov	s0, r3
 8001cfe:	f7ff fbe7 	bl	80014d0 <constrainAngle>
 8001d02:	eef0 7a40 	vmov.f32	s15, s0
 8001d06:	4b80      	ldr	r3, [pc, #512]	; (8001f08 <main+0x318>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempf *= 100;
 8001d0c:	4b7e      	ldr	r3, [pc, #504]	; (8001f08 <main+0x318>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001f0c <main+0x31c>
 8001d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1a:	4b7b      	ldr	r3, [pc, #492]	; (8001f08 <main+0x318>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempi = (int)tempf;
 8001d20:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <main+0x318>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2a:	ee17 2a90 	vmov	r2, s15
 8001d2e:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <main+0x320>)
 8001d30:	601a      	str	r2, [r3, #0]
		 		  	  tempf = constrainAngle(zero-offset);
 8001d32:	4b72      	ldr	r3, [pc, #456]	; (8001efc <main+0x30c>)
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <main+0x314>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d42:	eeb0 0a67 	vmov.f32	s0, s15
 8001d46:	f7ff fbc3 	bl	80014d0 <constrainAngle>
 8001d4a:	eef0 7a40 	vmov.f32	s15, s0
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <main+0x318>)
 8001d50:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempf *= 100;
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <main+0x318>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001f0c <main+0x31c>
 8001d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d62:	4b69      	ldr	r3, [pc, #420]	; (8001f08 <main+0x318>)
 8001d64:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempi2 = (int)tempf;
 8001d68:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <main+0x318>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d72:	ee17 2a90 	vmov	r2, s15
 8001d76:	4b67      	ldr	r3, [pc, #412]	; (8001f14 <main+0x324>)
 8001d78:	601a      	str	r2, [r3, #0]
		 		  	newAvg = movingAvg(arrNumbers, &sum, pos, len, angleLut[tempi]-angleLut[tempi2]);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <main+0x320>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a66      	ldr	r2, [pc, #408]	; (8001f18 <main+0x328>)
 8001d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d84:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <main+0x324>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4963      	ldr	r1, [pc, #396]	; (8001f18 <main+0x328>)
 8001d8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4639      	mov	r1, r7
 8001d92:	1d38      	adds	r0, r7, #4
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	f7ff f8f0 	bl	8000f7e <movingAvg>
 8001d9e:	61f8      	str	r0, [r7, #28]
		 		  	pos++;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	3301      	adds	r3, #1
 8001da4:	623b      	str	r3, [r7, #32]
		 		  	    if (pos >= len){
 8001da6:	6a3a      	ldr	r2, [r7, #32]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	db01      	blt.n	8001db2 <main+0x1c2>
		 		  	      pos = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
		 		  	    }
		 		  	  configure(data, abs(newAvg));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bfb8      	it	lt
 8001db8:	425b      	neglt	r3, r3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4857      	ldr	r0, [pc, #348]	; (8001f1c <main+0x32c>)
 8001dbe:	f7ff f903 	bl	8000fc8 <configure>
		 		  	  //configure(data, angleLut[tempi]);
		  	  DisplayUpdate(Display, data);
 8001dc2:	4956      	ldr	r1, [pc, #344]	; (8001f1c <main+0x32c>)
 8001dc4:	484a      	ldr	r0, [pc, #296]	; (8001ef0 <main+0x300>)
 8001dc6:	f7ff f945 	bl	8001054 <DisplayUpdate>
		  	  HAL_LCD_Clear(&hlcd);
 8001dca:	4855      	ldr	r0, [pc, #340]	; (8001f20 <main+0x330>)
 8001dcc:	f002 fdab 	bl	8004926 <HAL_LCD_Clear>
		  	  //HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER0, 0xffff, 0x0040);
		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER0, 0xffff, Display[0]|0x0040);
 8001dd0:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <main+0x300>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dde:	2100      	movs	r1, #0
 8001de0:	484f      	ldr	r0, [pc, #316]	; (8001f20 <main+0x330>)
 8001de2:	f002 fd45 	bl	8004870 <HAL_LCD_Write>
		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER2, 0xffff, Display[1]);
 8001de6:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <main+0x300>)
 8001de8:	885b      	ldrh	r3, [r3, #2]
 8001dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dee:	2102      	movs	r1, #2
 8001df0:	484b      	ldr	r0, [pc, #300]	; (8001f20 <main+0x330>)
 8001df2:	f002 fd3d 	bl	8004870 <HAL_LCD_Write>
		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER4, 0xffff, Display[2]);
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <main+0x300>)
 8001df8:	889b      	ldrh	r3, [r3, #4]
 8001dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfe:	2104      	movs	r1, #4
 8001e00:	4847      	ldr	r0, [pc, #284]	; (8001f20 <main+0x330>)
 8001e02:	f002 fd35 	bl	8004870 <HAL_LCD_Write>
		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER6, 0xffff, Display[3]);
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <main+0x300>)
 8001e08:	88db      	ldrh	r3, [r3, #6]
 8001e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0e:	2106      	movs	r1, #6
 8001e10:	4843      	ldr	r0, [pc, #268]	; (8001f20 <main+0x330>)
 8001e12:	f002 fd2d 	bl	8004870 <HAL_LCD_Write>
		  	  HAL_LCD_UpdateDisplayRequest(&hlcd);
 8001e16:	4842      	ldr	r0, [pc, #264]	; (8001f20 <main+0x330>)
 8001e18:	f002 fddb 	bl	80049d2 <HAL_LCD_UpdateDisplayRequest>
		  	if(newAvg>20){
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b14      	cmp	r3, #20
 8001e20:	dd17      	ble.n	8001e52 <main+0x262>
		  			  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2101      	movs	r1, #1
 8001e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2a:	f002 fc25 	bl	8004678 <HAL_GPIO_WritePin>
		  			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2102      	movs	r1, #2
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f002 fc1f 	bl	8004678 <HAL_GPIO_WritePin>
		  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e40:	4838      	ldr	r0, [pc, #224]	; (8001f24 <main+0x334>)
 8001e42:	f002 fc19 	bl	8004678 <HAL_GPIO_WritePin>
		  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e4c:	4835      	ldr	r0, [pc, #212]	; (8001f24 <main+0x334>)
 8001e4e:	f002 fc13 	bl	8004678 <HAL_GPIO_WritePin>
		  			  	  }
		  	if(newAvg<-20){
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f113 0f14 	cmn.w	r3, #20
 8001e58:	da17      	bge.n	8001e8a <main+0x29a>
		  			  			  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e62:	f002 fc09 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2102      	movs	r1, #2
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6e:	f002 fc03 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e78:	482a      	ldr	r0, [pc, #168]	; (8001f24 <main+0x334>)
 8001e7a:	f002 fbfd 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e84:	4827      	ldr	r0, [pc, #156]	; (8001f24 <main+0x334>)
 8001e86:	f002 fbf7 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  	  }
		  	if(newAvg<20 && newAvg>-20){
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b13      	cmp	r3, #19
 8001e8e:	dc1b      	bgt.n	8001ec8 <main+0x2d8>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f113 0f13 	cmn.w	r3, #19
 8001e96:	db17      	blt.n	8001ec8 <main+0x2d8>
		  			  			  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea0:	f002 fbea 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eac:	f002 fbe4 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb6:	481b      	ldr	r0, [pc, #108]	; (8001f24 <main+0x334>)
 8001eb8:	f002 fbde 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec2:	4818      	ldr	r0, [pc, #96]	; (8001f24 <main+0x334>)
 8001ec4:	f002 fbd8 	bl	8004678 <HAL_GPIO_WritePin>
		  			  			  	  }
		  dataRdyFlag = 0;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <main+0x310>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
		  //printf("%i\n\r", (int)phaseDegDisp);
		  HAL_Delay(50);
 8001ece:	2032      	movs	r0, #50	; 0x32
 8001ed0:	f000 fe5c 	bl	8002b8c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)==0){
 8001ed4:	e6de      	b.n	8001c94 <main+0xa4>
 8001ed6:	bf00      	nop
 8001ed8:	200000fc 	.word	0x200000fc
 8001edc:	48000814 	.word	0x48000814
 8001ee0:	20000cb4 	.word	0x20000cb4
 8001ee4:	20000d54 	.word	0x20000d54
 8001ee8:	200004fc 	.word	0x200004fc
 8001eec:	20000bc8 	.word	0x20000bc8
 8001ef0:	200000f4 	.word	0x200000f4
 8001ef4:	0800a548 	.word	0x0800a548
 8001ef8:	20000ba0 	.word	0x20000ba0
 8001efc:	20000060 	.word	0x20000060
 8001f00:	20000bb0 	.word	0x20000bb0
 8001f04:	2000005c 	.word	0x2000005c
 8001f08:	20000c2c 	.word	0x20000c2c
 8001f0c:	42c80000 	.word	0x42c80000
 8001f10:	20000bc4 	.word	0x20000bc4
 8001f14:	20000bc0 	.word	0x20000bc0
 8001f18:	0800a558 	.word	0x0800a558
 8001f1c:	20000d44 	.word	0x20000d44
 8001f20:	20000da0 	.word	0x20000da0
 8001f24:	48000400 	.word	0x48000400

08001f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b096      	sub	sp, #88	; 0x58
 8001f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2244      	movs	r2, #68	; 0x44
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fea4 	bl	8006c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f4e:	f002 fda9 	bl	8004aa4 <HAL_PWREx_ControlVoltageScaling>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f58:	f000 faac 	bl	80024b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f66:	2310      	movs	r3, #16
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f72:	2302      	movs	r3, #2
 8001f74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f82:	2302      	movs	r3, #2
 8001f84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001f86:	2308      	movs	r3, #8
 8001f88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fdde 	bl	8004b50 <HAL_RCC_OscConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001f9a:	f000 fa8b 	bl	80024b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 f9ea 	bl	8005390 <HAL_RCC_ClockConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fc2:	f000 fa77 	bl	80024b4 <Error_Handler>
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3758      	adds	r7, #88	; 0x58
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fd6:	463b      	mov	r3, r7
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
 8001fe4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <MX_ADC1_Init+0xc0>)
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <MX_ADC1_Init+0xc4>)
 8001fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <MX_ADC1_Init+0xc0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ff2:	4b27      	ldr	r3, [pc, #156]	; (8002090 <MX_ADC1_Init+0xc0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <MX_ADC1_Init+0xc0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002006:	2204      	movs	r2, #4
 8002008:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <MX_ADC1_Init+0xc0>)
 800200c:	2200      	movs	r2, #0
 800200e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002012:	2200      	movs	r2, #0
 8002014:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002018:	2201      	movs	r2, #1
 800201a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <MX_ADC1_Init+0xc0>)
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002026:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <MX_ADC1_Init+0xc0>)
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <MX_ADC1_Init+0xc0>)
 800203e:	2200      	movs	r2, #0
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800204a:	4811      	ldr	r0, [pc, #68]	; (8002090 <MX_ADC1_Init+0xc0>)
 800204c:	f000 ff8a 	bl	8002f64 <HAL_ADC_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002056:	f000 fa2d 	bl	80024b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_ADC1_Init+0xc8>)
 800205c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800205e:	2306      	movs	r3, #6
 8002060:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002066:	237f      	movs	r3, #127	; 0x7f
 8002068:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800206a:	2304      	movs	r3, #4
 800206c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002072:	463b      	mov	r3, r7
 8002074:	4619      	mov	r1, r3
 8002076:	4806      	ldr	r0, [pc, #24]	; (8002090 <MX_ADC1_Init+0xc0>)
 8002078:	f001 f94a 	bl	8003310 <HAL_ADC_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002082:	f000 fa17 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000bc8 	.word	0x20000bc8
 8002094:	50040000 	.word	0x50040000
 8002098:	21800100 	.word	0x21800100

0800209c <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <MX_LCD_Init+0x84>)
 80020a2:	4a20      	ldr	r2, [pc, #128]	; (8002124 <MX_LCD_Init+0x88>)
 80020a4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <MX_LCD_Init+0x84>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_LCD_Init+0x84>)
 80020ae:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020b2:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_LCD_Init+0x84>)
 80020b6:	220c      	movs	r2, #12
 80020b8:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_LCD_Init+0x84>)
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MX_LCD_Init+0x84>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_3;
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_LCD_Init+0x84>)
 80020c8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80020cc:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_3;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_LCD_Init+0x84>)
 80020d0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80020d4:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_LCD_Init+0x84>)
 80020d8:	2210      	movs	r2, #16
 80020da:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_ENABLE;
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <MX_LCD_Init+0x84>)
 80020de:	2280      	movs	r2, #128	; 0x80
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_LCD_Init+0x84>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <MX_LCD_Init+0x84>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_ENABLE;
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_LCD_Init+0x84>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80020f4:	480a      	ldr	r0, [pc, #40]	; (8002120 <MX_LCD_Init+0x84>)
 80020f6:	f002 fafb 	bl	80046f0 <HAL_LCD_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_LCD_Init+0x68>
  {
    Error_Handler();
 8002100:	f000 f9d8 	bl	80024b4 <Error_Handler>
  }
  /** Enable the High Driver
  */
  __HAL_LCD_HIGHDRIVER_ENABLE(&hlcd);
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_LCD_Init+0x84>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <MX_LCD_Init+0x84>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <MX_LCD_Init+0x84>)
 8002116:	f002 fc95 	bl	8004a44 <LCD_WaitForSynchro>
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000da0 	.word	0x20000da0
 8002124:	40002400 	.word	0x40002400

08002128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <MX_TIM2_Init+0x98>)
 8002148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800214c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <MX_TIM2_Init+0x98>)
 8002150:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002154:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <MX_TIM2_Init+0x98>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <MX_TIM2_Init+0x98>)
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <MX_TIM2_Init+0x9c>)
 8002160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <MX_TIM2_Init+0x98>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <MX_TIM2_Init+0x98>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800216e:	4814      	ldr	r0, [pc, #80]	; (80021c0 <MX_TIM2_Init+0x98>)
 8002170:	f003 fe4c 	bl	8005e0c <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800217a:	f000 f99b 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	4619      	mov	r1, r3
 800218a:	480d      	ldr	r0, [pc, #52]	; (80021c0 <MX_TIM2_Init+0x98>)
 800218c:	f003 fee2 	bl	8005f54 <HAL_TIM_ConfigClockSource>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002196:	f000 f98d 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <MX_TIM2_Init+0x98>)
 80021a8:	f004 f89c 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021b2:	f000 f97f 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000ddc 	.word	0x20000ddc
 80021c4:	000f4240 	.word	0x000f4240

080021c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <MX_TIM6_Init+0x64>)
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <MX_TIM6_Init+0x68>)
 80021dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1-1;
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <MX_TIM6_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_TIM6_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 246-1;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <MX_TIM6_Init+0x64>)
 80021ec:	22f5      	movs	r2, #245	; 0xf5
 80021ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_TIM6_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021f6:	480d      	ldr	r0, [pc, #52]	; (800222c <MX_TIM6_Init+0x64>)
 80021f8:	f003 fe08 	bl	8005e0c <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002202:	f000 f957 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002206:	2320      	movs	r3, #32
 8002208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4619      	mov	r1, r3
 8002212:	4806      	ldr	r0, [pc, #24]	; (800222c <MX_TIM6_Init+0x64>)
 8002214:	f004 f866 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800221e:	f000 f949 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000d54 	.word	0x20000d54
 8002230:	40001000 	.word	0x40001000

08002234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_USART1_UART_Init+0x58>)
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <MX_USART1_UART_Init+0x5c>)
 800223c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <MX_USART1_UART_Init+0x58>)
 8002240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <MX_USART1_UART_Init+0x58>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <MX_USART1_UART_Init+0x58>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MX_USART1_UART_Init+0x58>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_USART1_UART_Init+0x58>)
 800225a:	220c      	movs	r2, #12
 800225c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <MX_USART1_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <MX_USART1_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <MX_USART1_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_USART1_UART_Init+0x58>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002276:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_USART1_UART_Init+0x58>)
 8002278:	f004 f89a 	bl	80063b0 <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002282:	f000 f917 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000c30 	.word	0x20000c30
 8002290:	40013800 	.word	0x40013800

08002294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_DMA_Init+0x60>)
 800229c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <MX_DMA_Init+0x60>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6493      	str	r3, [r2, #72]	; 0x48
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_DMA_Init+0x60>)
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_DMA_Init+0x60>)
 80022b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b6:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <MX_DMA_Init+0x60>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6493      	str	r3, [r2, #72]	; 0x48
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_DMA_Init+0x60>)
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	200b      	movs	r0, #11
 80022d0:	f001 fdcf 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022d4:	200b      	movs	r0, #11
 80022d6:	f001 fde8 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	203b      	movs	r0, #59	; 0x3b
 80022e0:	f001 fdc7 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80022e4:	203b      	movs	r0, #59	; 0x3b
 80022e6:	f001 fde0 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000

080022f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <MX_GPIO_Init+0x14c>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <MX_GPIO_Init+0x14c>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <MX_GPIO_Init+0x14c>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <MX_GPIO_Init+0x14c>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a46      	ldr	r2, [pc, #280]	; (8002444 <MX_GPIO_Init+0x14c>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b44      	ldr	r3, [pc, #272]	; (8002444 <MX_GPIO_Init+0x14c>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <MX_GPIO_Init+0x14c>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <MX_GPIO_Init+0x14c>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b3e      	ldr	r3, [pc, #248]	; (8002444 <MX_GPIO_Init+0x14c>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 8002356:	2200      	movs	r2, #0
 8002358:	f240 71df 	movw	r1, #2015	; 0x7df
 800235c:	483a      	ldr	r0, [pc, #232]	; (8002448 <MX_GPIO_Init+0x150>)
 800235e:	f002 f98b 	bl	8004678 <HAL_GPIO_WritePin>
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |BIAS_Pin|ADC_TRIG_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8002362:	2201      	movs	r2, #1
 8002364:	2103      	movs	r1, #3
 8002366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236a:	f002 f985 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002374:	4835      	ldr	r0, [pc, #212]	; (800244c <MX_GPIO_Init+0x154>)
 8002376:	f002 f97f 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM0_Pin PWM45_Pin PWM90_Pin PWM135_Pin
                           PWM180_Pin PWM225_Pin PWM270_Pin PWM315_Pin
                           ADC_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 800237a:	f240 53df 	movw	r3, #1503	; 0x5df
 800237e:	60fb      	str	r3, [r7, #12]
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |ADC_TRIG_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002380:	2301      	movs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	4619      	mov	r1, r3
 8002392:	482d      	ldr	r0, [pc, #180]	; (8002448 <MX_GPIO_Init+0x150>)
 8002394:	f001 ffde 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002398:	2303      	movs	r3, #3
 800239a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b2:	f001 ffcf 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4619      	mov	r1, r3
 80023ce:	481f      	ldr	r0, [pc, #124]	; (800244c <MX_GPIO_Init+0x154>)
 80023d0:	f001 ffc0 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIAS_Pin */
  GPIO_InitStruct.Pin = BIAS_Pin;
 80023d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023da:	2311      	movs	r3, #17
 80023dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BIAS_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	4816      	ldr	r0, [pc, #88]	; (8002448 <MX_GPIO_Init+0x150>)
 80023ee:	f001 ffb1 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f001 ffa2 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002428:	f001 ff94 	bl	8004354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2028      	movs	r0, #40	; 0x28
 8002432:	f001 fd1e 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002436:	2028      	movs	r0, #40	; 0x28
 8002438:	f001 fd37 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 800243c:	bf00      	nop
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	48000800 	.word	0x48000800
 800244c:	48000400 	.word	0x48000400

08002450 <HAL_ADC_ConvHalfCpltCallback>:
/*void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    zero = phaseDeg;
}*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	memcpy(processBuff, samples, 128);
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	461a      	mov	r2, r3
 8002464:	f004 fc00 	bl	8006c68 <memcpy>
	dataRdyFlag = 1;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200005fc 	.word	0x200005fc
 800247c:	200004fc 	.word	0x200004fc
 8002480:	20000bb0 	.word	0x20000bb0

08002484 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	memcpy(processBuff, samples+64, 128);
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x24>)
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <HAL_ADC_ConvCpltCallback+0x28>)
 8002494:	f004 fbe8 	bl	8006c68 <memcpy>
	dataRdyFlag = 1;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x2c>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000057c 	.word	0x2000057c
 80024ac:	200005fc 	.word	0x200005fc
 80024b0:	20000bb0 	.word	0x20000bb0

080024b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b8:	b672      	cpsid	i
}
 80024ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024bc:	e7fe      	b.n	80024bc <Error_Handler+0x8>
	...

080024c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_MspInit+0x44>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_MspInit+0x44>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6613      	str	r3, [r2, #96]	; 0x60
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_MspInit+0x44>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_MspInit+0x44>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <HAL_MspInit+0x44>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_MspInit+0x44>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0a2      	sub	sp, #136	; 0x88
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2260      	movs	r2, #96	; 0x60
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f004 fbab 	bl	8006c84 <memset>
  if(hadc->Instance==ADC1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_ADC_MspInit+0xf8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d15f      	bne.n	80025f8 <HAL_ADC_MspInit+0xf0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800253c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800253e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002542:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f927 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002554:	f7ff ffae 	bl	80024b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002558:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_ADC_MspInit+0xfc>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_ADC_MspInit+0xfc>)
 800255e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_ADC_MspInit+0xfc>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_ADC_MspInit+0xfc>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_ADC_MspInit+0xfc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_ADC_MspInit+0xfc>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002588:	2308      	movs	r3, #8
 800258a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800258c:	230b      	movs	r3, #11
 800258e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002598:	4619      	mov	r1, r3
 800259a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259e:	f001 fed9 	bl	8004354 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025a4:	4a19      	ldr	r2, [pc, #100]	; (800260c <HAL_ADC_MspInit+0x104>)
 80025a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025d2:	2220      	movs	r2, #32
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025dc:	480a      	ldr	r0, [pc, #40]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025de:	f001 fc7f 	bl	8003ee0 <HAL_DMA_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80025e8:	f7ff ff64 	bl	80024b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a06      	ldr	r2, [pc, #24]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_ADC_MspInit+0x100>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3788      	adds	r7, #136	; 0x88
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	50040000 	.word	0x50040000
 8002604:	40021000 	.word	0x40021000
 8002608:	20000cfc 	.word	0x20000cfc
 800260c:	40020008 	.word	0x40020008

08002610 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0a2      	sub	sp, #136	; 0x88
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2260      	movs	r2, #96	; 0x60
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f004 fb27 	bl	8006c84 <memset>
  if(hlcd->Instance==LCD)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a31      	ldr	r2, [pc, #196]	; (8002700 <HAL_LCD_MspInit+0xf0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d15a      	bne.n	80026f6 <HAL_LCD_MspInit+0xe6>
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002644:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4618      	mov	r0, r3
 8002652:	f003 f8a3 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_LCD_MspInit+0x50>
    {
      Error_Handler();
 800265c:	f7ff ff2a 	bl	80024b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8002660:	4b28      	ldr	r3, [pc, #160]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	4a27      	ldr	r2, [pc, #156]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6593      	str	r3, [r2, #88]	; 0x58
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 8002696:	f043 0302 	orr.w	r3, r3, #2
 800269a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_LCD_MspInit+0xf4>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
    PA10     ------> LCD_COM2
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80026a8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026ac:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80026bc:	230b      	movs	r3, #11
 80026be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026c6:	4619      	mov	r1, r3
 80026c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026cc:	f001 fe42 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80026d0:	f243 2337 	movw	r3, #12855	; 0x3237
 80026d4:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80026e4:	230b      	movs	r3, #11
 80026e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_LCD_MspInit+0xf8>)
 80026f2:	f001 fe2f 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3788      	adds	r7, #136	; 0x88
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40002400 	.word	0x40002400
 8002704:	40021000 	.word	0x40021000
 8002708:	48000400 	.word	0x48000400

0800270c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d10c      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800271e:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_TIM_Base_MspInit+0xb0>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_TIM_Base_MspInit+0xb0>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_TIM_Base_MspInit+0xb0>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002736:	e03c      	b.n	80027b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <HAL_TIM_Base_MspInit+0xb4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d137      	bne.n	80027b2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_TIM_Base_MspInit+0xb0>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_TIM_Base_MspInit+0xb0>)
 8002748:	f043 0310 	orr.w	r3, r3, #16
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_TIM_Base_MspInit+0xb0>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA2_Channel4;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 800275c:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_TIM_Base_MspInit+0xbc>)
 800275e:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_3;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002762:	2203      	movs	r2, #3
 8002764:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002768:	2210      	movs	r2, #16
 800276a:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 800277a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277e:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 800278a:	2220      	movs	r2, #32
 800278c:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002790:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002794:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8002796:	480b      	ldr	r0, [pc, #44]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 8002798:	f001 fba2 	bl	8003ee0 <HAL_DMA_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 80027a2:	f7ff fe87 	bl	80024b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 80027aa:	621a      	str	r2, [r3, #32]
 80027ac:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <HAL_TIM_Base_MspInit+0xb8>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40001000 	.word	0x40001000
 80027c4:	20000cb4 	.word	0x20000cb4
 80027c8:	40020444 	.word	0x40020444

080027cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a2      	sub	sp, #136	; 0x88
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2260      	movs	r2, #96	; 0x60
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 fa49 	bl	8006c84 <memset>
  if(huart->Instance==USART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_UART_MspInit+0xa8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d137      	bne.n	800286c <HAL_UART_MspInit+0xa0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002800:	2300      	movs	r3, #0
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4618      	mov	r0, r3
 800280a:	f002 ffc7 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002814:	f7ff fe4e 	bl	80024b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002818:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_UART_MspInit+0xac>)
 800281a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281c:	4a16      	ldr	r2, [pc, #88]	; (8002878 <HAL_UART_MspInit+0xac>)
 800281e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002822:	6613      	str	r3, [r2, #96]	; 0x60
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_UART_MspInit+0xac>)
 8002826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_UART_MspInit+0xac>)
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	4a10      	ldr	r2, [pc, #64]	; (8002878 <HAL_UART_MspInit+0xac>)
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <HAL_UART_MspInit+0xac>)
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002848:	23c0      	movs	r3, #192	; 0xc0
 800284a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800285a:	2307      	movs	r3, #7
 800285c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002860:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002864:	4619      	mov	r1, r3
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <HAL_UART_MspInit+0xb0>)
 8002868:	f001 fd74 	bl	8004354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800286c:	bf00      	nop
 800286e:	3788      	adds	r7, #136	; 0x88
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40013800 	.word	0x40013800
 8002878:	40021000 	.word	0x40021000
 800287c:	48000400 	.word	0x48000400

08002880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <NMI_Handler+0x4>

08002886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800288a:	e7fe      	b.n	800288a <HardFault_Handler+0x4>

0800288c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <MemManage_Handler+0x4>

08002892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler+0x4>

0800289e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028cc:	f000 f93e 	bl	8002b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <DMA1_Channel1_IRQHandler+0x10>)
 80028da:	f001 fc5c 	bl	8004196 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000cfc 	.word	0x20000cfc

080028e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80028ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028f0:	f001 feda 	bl	80046a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <DMA2_Channel4_IRQHandler+0x10>)
 80028fe:	f001 fc4a 	bl	8004196 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000cb4 	.word	0x20000cb4

0800290c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e00a      	b.n	8002934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291e:	f3af 8000 	nop.w
 8002922:	4601      	mov	r1, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60ba      	str	r2, [r7, #8]
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf0      	blt.n	800291e <_read+0x12>
	}

return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
	return -1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800296e:	605a      	str	r2, [r3, #4]
	return 0;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_isatty>:

int _isatty(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	return 1;
 8002986:	2301      	movs	r3, #1
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
	return 0;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <_sbrk+0x5c>)
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_sbrk+0x60>)
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <_sbrk+0x64>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <_sbrk+0x68>)
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <_sbrk+0x64>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d207      	bcs.n	80029f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e0:	f004 f918 	bl	8006c14 <__errno>
 80029e4:	4603      	mov	r3, r0
 80029e6:	220c      	movs	r2, #12
 80029e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	e009      	b.n	8002a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <_sbrk+0x64>)
 8002a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20010000 	.word	0x20010000
 8002a10:	00000400 	.word	0x00000400
 8002a14:	20000bb4 	.word	0x20000bb4
 8002a18:	20000e40 	.word	0x20000e40

08002a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <SystemInit+0x20>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <SystemInit+0x20>)
 8002a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a44:	f7ff ffea 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a4a:	490d      	ldr	r1, [pc, #52]	; (8002a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <LoopForever+0xe>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <LoopForever+0x16>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f004 f8d7 	bl	8006c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a72:	f7ff f8bd 	bl	8001bf0 <main>

08002a76 <LoopForever>:

LoopForever:
    b LoopForever
 8002a76:	e7fe      	b.n	8002a76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002a84:	0802db60 	.word	0x0802db60
  ldr r2, =_sbss
 8002a88:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002a8c:	20000e3c 	.word	0x20000e3c

08002a90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC1_IRQHandler>
	...

08002a94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <HAL_Init+0x3c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <HAL_Init+0x3c>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f001 f9d6 	bl	8003e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f000 f80f 	bl	8002ad4 <HAL_InitTick>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	71fb      	strb	r3, [r7, #7]
 8002ac0:	e001      	b.n	8002ac6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ac2:	f7ff fcfd 	bl	80024c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_InitTick+0x6c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <HAL_InitTick+0x70>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_InitTick+0x6c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 f9e1 	bl	8003ec6 <HAL_SYSTICK_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d809      	bhi.n	8002b24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b10:	2200      	movs	r2, #0
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	f001 f9ab 	bl	8003e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_InitTick+0x74>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e007      	b.n	8002b34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e004      	b.n	8002b34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
 8002b2e:	e001      	b.n	8002b34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000006c 	.word	0x2000006c
 8002b44:	20000064 	.word	0x20000064
 8002b48:	20000068 	.word	0x20000068

08002b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_IncTick+0x20>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_IncTick+0x24>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <HAL_IncTick+0x24>)
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	2000006c 	.word	0x2000006c
 8002b70:	20000e28 	.word	0x20000e28

08002b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return uwTick;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_GetTick+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000e28 	.word	0x20000e28

08002b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b94:	f7ff ffee 	bl	8002b74 <HAL_GetTick>
 8002b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d005      	beq.n	8002bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_Delay+0x44>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bb2:	bf00      	nop
 8002bb4:	f7ff ffde 	bl	8002b74 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d8f7      	bhi.n	8002bb4 <HAL_Delay+0x28>
  {
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000006c 	.word	0x2000006c

08002bd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <LL_ADC_SetOffset+0x44>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	03fff000 	.word	0x03fff000

08002c84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	461a      	mov	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3360      	adds	r3, #96	; 0x60
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3330      	adds	r3, #48	; 0x30
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	4413      	add	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	211f      	movs	r1, #31
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	f003 011f 	and.w	r1, r3, #31
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	431a      	orrs	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3314      	adds	r3, #20
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	0e5b      	lsrs	r3, r3, #25
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	0d1b      	lsrs	r3, r3, #20
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2107      	movs	r1, #7
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	401a      	ands	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	0d1b      	lsrs	r3, r3, #20
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0318 	and.w	r3, r3, #24
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002de0:	40d9      	lsrs	r1, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	400b      	ands	r3, r1
 8002de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	0007ffff 	.word	0x0007ffff

08002e04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6093      	str	r3, [r2, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8c:	d101      	bne.n	8002e92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_IsEnabled+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_IsEnabled+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002efe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d101      	bne.n	8002f2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d101      	bne.n	8002f54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e12c      	b.n	80031d8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff fabb 	bl	8002508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff3f 	bl	8002e28 <LL_ADC_IsDeepPowerDownEnabled>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff25 	bl	8002e04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ff5a 	bl	8002e78 <LL_ADC_IsInternalRegulatorEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff3e 	bl	8002e50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fd4:	4b82      	ldr	r3, [pc, #520]	; (80031e0 <HAL_ADC_Init+0x27c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	4a82      	ldr	r2, [pc, #520]	; (80031e4 <HAL_ADC_Init+0x280>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fe8:	e002      	b.n	8002ff0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f9      	bne.n	8002fea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff3c 	bl	8002e78 <LL_ADC_IsInternalRegulatorEnabled>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f043 0210 	orr.w	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff75 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 800302c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 80c5 	bne.w	80031c6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 80c1 	bne.w	80031c6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800304c:	f043 0202 	orr.w	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff35 	bl	8002ec8 <LL_ADC_IsEnabled>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003064:	4860      	ldr	r0, [pc, #384]	; (80031e8 <HAL_ADC_Init+0x284>)
 8003066:	f7ff ff2f 	bl	8002ec8 <LL_ADC_IsEnabled>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4619      	mov	r1, r3
 8003076:	485d      	ldr	r0, [pc, #372]	; (80031ec <HAL_ADC_Init+0x288>)
 8003078:	f7ff fdac 	bl	8002bd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7e5b      	ldrb	r3, [r3, #25]
 8003080:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003086:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800308c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003092:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800309a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d106      	bne.n	80030b8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	3b01      	subs	r3, #1
 80030b0:	045b      	lsls	r3, r3, #17
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b45      	ldr	r3, [pc, #276]	; (80031f0 <HAL_ADC_Init+0x28c>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff12 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 80030f2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff1f 	bl	8002f3c <LL_ADC_INJ_IsConversionOngoing>
 80030fe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d13d      	bne.n	8003182 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d13a      	bne.n	8003182 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003110:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003118:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003128:	f023 0302 	bic.w	r3, r3, #2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	430b      	orrs	r3, r1
 8003134:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800313c:	2b01      	cmp	r3, #1
 800313e:	d118      	bne.n	8003172 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800314a:	f023 0304 	bic.w	r3, r3, #4
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003156:	4311      	orrs	r1, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800315c:	4311      	orrs	r1, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003162:	430a      	orrs	r2, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	611a      	str	r2, [r3, #16]
 8003170:	e007      	b.n	8003182 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10c      	bne.n	80031a4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f023 010f 	bic.w	r1, r3, #15
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
 80031a2:	e007      	b.n	80031b4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 020f 	bic.w	r2, r2, #15
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f023 0303 	bic.w	r3, r3, #3
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	; 0x54
 80031c4:	e007      	b.n	80031d6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000064 	.word	0x20000064
 80031e4:	053e2d63 	.word	0x053e2d63
 80031e8:	50040000 	.word	0x50040000
 80031ec:	50040300 	.word	0x50040300
 80031f0:	fff0c007 	.word	0xfff0c007

080031f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fe86 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d167      	bne.n	80032e0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_ADC_Start_DMA+0x2a>
 800321a:	2302      	movs	r3, #2
 800321c:	e063      	b.n	80032e6 <HAL_ADC_Start_DMA+0xf2>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fc52 	bl	8003ad0 <ADC_Enable>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d14f      	bne.n	80032d6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f023 0206 	bic.w	r2, r3, #6
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	659a      	str	r2, [r3, #88]	; 0x58
 8003262:	e002      	b.n	800326a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <HAL_ADC_Start_DMA+0xfc>)
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_ADC_Start_DMA+0x100>)
 8003278:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <HAL_ADC_Start_DMA+0x104>)
 8003280:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	221c      	movs	r2, #28
 8003288:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0210 	orr.w	r2, r2, #16
 80032a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3340      	adds	r3, #64	; 0x40
 80032bc:	4619      	mov	r1, r3
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f000 ff08 	bl	80040d6 <HAL_DMA_Start_IT>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fe0d 	bl	8002eee <LL_ADC_REG_StartConversion>
 80032d4:	e006      	b.n	80032e4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032de:	e001      	b.n	80032e4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
 80032e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	08003b95 	.word	0x08003b95
 80032f4:	08003c6d 	.word	0x08003c6d
 80032f8:	08003c89 	.word	0x08003c89

080032fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b0b6      	sub	sp, #216	; 0xd8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x22>
 800332e:	2302      	movs	r3, #2
 8003330:	e3b9      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x796>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fde9 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 839e 	bne.w	8003a88 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b05      	cmp	r3, #5
 8003352:	d824      	bhi.n	800339e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	3b02      	subs	r3, #2
 800335a:	2b03      	cmp	r3, #3
 800335c:	d81b      	bhi.n	8003396 <HAL_ADC_ConfigChannel+0x86>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_ADC_ConfigChannel+0x54>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003375 	.word	0x08003375
 8003368:	0800337d 	.word	0x0800337d
 800336c:	08003385 	.word	0x08003385
 8003370:	0800338d 	.word	0x0800338d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	220c      	movs	r2, #12
 8003378:	605a      	str	r2, [r3, #4]
          break;
 800337a:	e011      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2212      	movs	r2, #18
 8003380:	605a      	str	r2, [r3, #4]
          break;
 8003382:	e00d      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2218      	movs	r2, #24
 8003388:	605a      	str	r2, [r3, #4]
          break;
 800338a:	e009      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003392:	605a      	str	r2, [r3, #4]
          break;
 8003394:	e004      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2206      	movs	r2, #6
 800339a:	605a      	str	r2, [r3, #4]
          break;
 800339c:	e000      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800339e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	f7ff fcad 	bl	8002d0c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fdad 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 80033bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fdb9 	bl	8002f3c <LL_ADC_INJ_IsConversionOngoing>
 80033ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 81a6 	bne.w	8003724 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 81a1 	bne.w	8003724 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f7ff fcb8 	bl	8002d64 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	08db      	lsrs	r3, r3, #3
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d00a      	beq.n	800342c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003426:	f7ff fc09 	bl	8002c3c <LL_ADC_SetOffset>
 800342a:	e17b      	b.n	8003724 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fc26 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x148>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fc1b 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	f003 021f 	and.w	r2, r3, #31
 8003456:	e01e      	b.n	8003496 <HAL_ADC_ConfigChannel+0x186>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2100      	movs	r1, #0
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fc10 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800347a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800347e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003486:	2320      	movs	r3, #32
 8003488:	e004      	b.n	8003494 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800348a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d105      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x19e>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	e018      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x1d0>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80034ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80034d2:	2320      	movs	r3, #32
 80034d4:	e004      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80034d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d106      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fbdf 	bl	8002cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fbc3 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 80034fe:	4603      	mov	r3, r0
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <HAL_ADC_ConfigChannel+0x20e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fbb8 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	0e9b      	lsrs	r3, r3, #26
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	e01e      	b.n	800355c <HAL_ADC_ConfigChannel+0x24c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2101      	movs	r1, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fbad 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800353c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e004      	b.n	800355a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003554:	fab3 f383 	clz	r3, r3
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x264>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	0e9b      	lsrs	r3, r3, #26
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	e018      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x296>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800358c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e004      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800359c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d106      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fb7c 	bl	8002cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fb60 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x2d4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2102      	movs	r1, #2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fb55 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	f003 021f 	and.w	r2, r3, #31
 80035e2:	e01e      	b.n	8003622 <HAL_ADC_ConfigChannel+0x312>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fb4a 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003602:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800360a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003612:	2320      	movs	r3, #32
 8003614:	e004      	b.n	8003620 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_ADC_ConfigChannel+0x32a>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	e016      	b.n	8003668 <HAL_ADC_ConfigChannel+0x358>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800364c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800364e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e004      	b.n	8003668 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800365e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003668:	429a      	cmp	r2, r3
 800366a:	d106      	bne.n	800367a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	2102      	movs	r1, #2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fb1b 	bl	8002cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2103      	movs	r1, #3
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff faff 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x396>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2103      	movs	r1, #3
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff faf4 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	0e9b      	lsrs	r3, r3, #26
 80036a0:	f003 021f 	and.w	r2, r3, #31
 80036a4:	e017      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x3c6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2103      	movs	r1, #3
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fae9 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80036c8:	2320      	movs	r3, #32
 80036ca:	e003      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x3de>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	0e9b      	lsrs	r3, r3, #26
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	e011      	b.n	8003712 <HAL_ADC_ConfigChannel+0x402>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003706:	2320      	movs	r3, #32
 8003708:	e003      	b.n	8003712 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800370a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003712:	429a      	cmp	r2, r3
 8003714:	d106      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	2103      	movs	r1, #3
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fac6 	bl	8002cb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fbcd 	bl	8002ec8 <LL_ADC_IsEnabled>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 813f 	bne.w	80039b4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6819      	ldr	r1, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	461a      	mov	r2, r3
 8003744:	f7ff fb3a 	bl	8002dbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a8e      	ldr	r2, [pc, #568]	; (8003988 <HAL_ADC_ConfigChannel+0x678>)
 800374e:	4293      	cmp	r3, r2
 8003750:	f040 8130 	bne.w	80039b4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <HAL_ADC_ConfigChannel+0x46c>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0e9b      	lsrs	r3, r3, #26
 800376a:	3301      	adds	r3, #1
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2b09      	cmp	r3, #9
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e019      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x4a0>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800378a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800378e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003794:	2320      	movs	r3, #32
 8003796:	e003      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	bf94      	ite	ls
 80037aa:	2301      	movls	r3, #1
 80037ac:	2300      	movhi	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d079      	beq.n	80038a8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d107      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x4c0>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	3301      	adds	r3, #1
 80037c8:	069b      	lsls	r3, r3, #26
 80037ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ce:	e015      	b.n	80037fc <HAL_ADC_ConfigChannel+0x4ec>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80037e8:	2320      	movs	r3, #32
 80037ea:	e003      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80037ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	069b      	lsls	r3, r3, #26
 80037f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_ADC_ConfigChannel+0x50c>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0e9b      	lsrs	r3, r3, #26
 800380e:	3301      	adds	r3, #1
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f303 	lsl.w	r3, r1, r3
 800381a:	e017      	b.n	800384c <HAL_ADC_ConfigChannel+0x53c>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800382a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800382e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003834:	2320      	movs	r3, #32
 8003836:	e003      	b.n	8003840 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	ea42 0103 	orr.w	r1, r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x562>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	3301      	adds	r3, #1
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	051b      	lsls	r3, r3, #20
 8003870:	e018      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x594>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e003      	b.n	8003896 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800388e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a4:	430b      	orrs	r3, r1
 80038a6:	e080      	b.n	80039aa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x5b4>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0e9b      	lsrs	r3, r3, #26
 80038ba:	3301      	adds	r3, #1
 80038bc:	069b      	lsls	r3, r3, #26
 80038be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c2:	e015      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x5e0>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e003      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	069b      	lsls	r3, r3, #26
 80038ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x600>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	3301      	adds	r3, #1
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	e017      	b.n	8003940 <HAL_ADC_ConfigChannel+0x630>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	61fb      	str	r3, [r7, #28]
  return result;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003928:	2320      	movs	r3, #32
 800392a:	e003      	b.n	8003934 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	ea42 0103 	orr.w	r1, r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_ADC_ConfigChannel+0x65c>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	0e9b      	lsrs	r3, r3, #26
 8003956:	3301      	adds	r3, #1
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	3b1e      	subs	r3, #30
 8003964:	051b      	lsls	r3, r3, #20
 8003966:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800396a:	e01d      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x698>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	613b      	str	r3, [r7, #16]
  return result;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003984:	2320      	movs	r3, #32
 8003986:	e005      	b.n	8003994 <HAL_ADC_ConfigChannel+0x684>
 8003988:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f003 021f 	and.w	r2, r3, #31
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	3b1e      	subs	r3, #30
 80039a2:	051b      	lsls	r3, r3, #20
 80039a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a8:	430b      	orrs	r3, r1
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	4619      	mov	r1, r3
 80039b0:	f7ff f9d8 	bl	8002d64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_ADC_ConfigChannel+0x7a0>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d06c      	beq.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039c0:	483c      	ldr	r0, [pc, #240]	; (8003ab4 <HAL_ADC_ConfigChannel+0x7a4>)
 80039c2:	f7ff f92d 	bl	8002c20 <LL_ADC_GetCommonPathInternalCh>
 80039c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a3a      	ldr	r2, [pc, #232]	; (8003ab8 <HAL_ADC_ConfigChannel+0x7a8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d127      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d121      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a35      	ldr	r2, [pc, #212]	; (8003abc <HAL_ADC_ConfigChannel+0x7ac>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d157      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f2:	4619      	mov	r1, r3
 80039f4:	482f      	ldr	r0, [pc, #188]	; (8003ab4 <HAL_ADC_ConfigChannel+0x7a4>)
 80039f6:	f7ff f900 	bl	8002bfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039fa:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_ADC_ConfigChannel+0x7b0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	4a30      	ldr	r2, [pc, #192]	; (8003ac4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a14:	e002      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f9      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a22:	e03a      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d113      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x746>
 8003a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10d      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <HAL_ADC_ConfigChannel+0x7ac>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d12a      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4819      	ldr	r0, [pc, #100]	; (8003ab4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003a50:	f7ff f8d3 	bl	8002bfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a54:	e021      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_ADC_ConfigChannel+0x7bc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d11c      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d116      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <HAL_ADC_ConfigChannel+0x7ac>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d111      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a7e:	4619      	mov	r1, r3
 8003a80:	480c      	ldr	r0, [pc, #48]	; (8003ab4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003a82:	f7ff f8ba 	bl	8002bfa <LL_ADC_SetCommonPathInternalCh>
 8003a86:	e008      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003aa2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	37d8      	adds	r7, #216	; 0xd8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	80080000 	.word	0x80080000
 8003ab4:	50040300 	.word	0x50040300
 8003ab8:	c7520000 	.word	0xc7520000
 8003abc:	50040000 	.word	0x50040000
 8003ac0:	20000064 	.word	0x20000064
 8003ac4:	053e2d63 	.word	0x053e2d63
 8003ac8:	cb840000 	.word	0xcb840000
 8003acc:	80000001 	.word	0x80000001

08003ad0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff f9f3 	bl	8002ec8 <LL_ADC_IsEnabled>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d14d      	bne.n	8003b84 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <ADC_Enable+0xc0>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e039      	b.n	8003b86 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff f9c2 	bl	8002ea0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b1c:	f7ff f82a 	bl	8002b74 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b22:	e028      	b.n	8003b76 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f9cd 	bl	8002ec8 <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff f9b1 	bl	8002ea0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b3e:	f7ff f819 	bl	8002b74 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d914      	bls.n	8003b76 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d00d      	beq.n	8003b76 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e007      	b.n	8003b86 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d1cf      	bne.n	8003b24 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	8000003f 	.word	0x8000003f

08003b94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d14b      	bne.n	8003c46 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d021      	beq.n	8003c0c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff f88a 	bl	8002ce6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d032      	beq.n	8003c3e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d12b      	bne.n	8003c3e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11f      	bne.n	8003c3e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
 8003c0a:	e018      	b.n	8003c3e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d111      	bne.n	8003c3e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7fe fc20 	bl	8002484 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c44:	e00e      	b.n	8003c64 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fb52 	bl	80032fc <HAL_ADC_ErrorCallback>
}
 8003c58:	e004      	b.n	8003c64 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe fbe8 	bl	8002450 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff fb24 	bl	80032fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <__NVIC_SetPriorityGrouping>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60d3      	str	r3, [r2, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_GetPriorityGrouping>:
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <__NVIC_GetPriorityGrouping+0x18>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 0307 	and.w	r3, r3, #7
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_EnableIRQ>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	db0b      	blt.n	8003d4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	4907      	ldr	r1, [pc, #28]	; (8003d58 <__NVIC_EnableIRQ+0x38>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2001      	movs	r0, #1
 8003d42:	fa00 f202 	lsl.w	r2, r0, r2
 8003d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000e100 	.word	0xe000e100

08003d5c <__NVIC_SetPriority>:
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	db0a      	blt.n	8003d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	490c      	ldr	r1, [pc, #48]	; (8003da8 <__NVIC_SetPriority+0x4c>)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d84:	e00a      	b.n	8003d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4908      	ldr	r1, [pc, #32]	; (8003dac <__NVIC_SetPriority+0x50>)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	3b04      	subs	r3, #4
 8003d94:	0112      	lsls	r2, r2, #4
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	440b      	add	r3, r1
 8003d9a:	761a      	strb	r2, [r3, #24]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000e100 	.word	0xe000e100
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <NVIC_EncodePriority>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f1c3 0307 	rsb	r3, r3, #7
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf28      	it	cs
 8003dce:	2304      	movcs	r3, #4
 8003dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d902      	bls.n	8003de0 <NVIC_EncodePriority+0x30>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3b03      	subs	r3, #3
 8003dde:	e000      	b.n	8003de2 <NVIC_EncodePriority+0x32>
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	401a      	ands	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	43d9      	mvns	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	4313      	orrs	r3, r2
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3724      	adds	r7, #36	; 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <SysTick_Config>:
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e28:	d301      	bcc.n	8003e2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00f      	b.n	8003e4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <SysTick_Config+0x40>)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e36:	210f      	movs	r1, #15
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	f7ff ff8e 	bl	8003d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <SysTick_Config+0x40>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <SysTick_Config+0x40>)
 8003e48:	2207      	movs	r2, #7
 8003e4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	e000e010 	.word	0xe000e010

08003e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff ff29 	bl	8003cbc <__NVIC_SetPriorityGrouping>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	4603      	mov	r3, r0
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e84:	f7ff ff3e 	bl	8003d04 <__NVIC_GetPriorityGrouping>
 8003e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f7ff ff8e 	bl	8003db0 <NVIC_EncodePriority>
 8003e94:	4602      	mov	r2, r0
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff5d 	bl	8003d5c <__NVIC_SetPriority>
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff31 	bl	8003d20 <__NVIC_EnableIRQ>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ffa2 	bl	8003e18 <SysTick_Config>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e098      	b.n	8004024 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b4d      	ldr	r3, [pc, #308]	; (8004030 <HAL_DMA_Init+0x150>)
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d80f      	bhi.n	8003f1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <HAL_DMA_Init+0x154>)
 8003f06:	4413      	add	r3, r2
 8003f08:	4a4b      	ldr	r2, [pc, #300]	; (8004038 <HAL_DMA_Init+0x158>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	009a      	lsls	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_DMA_Init+0x15c>)
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f1c:	e00e      	b.n	8003f3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b46      	ldr	r3, [pc, #280]	; (8004040 <HAL_DMA_Init+0x160>)
 8003f26:	4413      	add	r3, r2
 8003f28:	4a43      	ldr	r2, [pc, #268]	; (8004038 <HAL_DMA_Init+0x158>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a42      	ldr	r2, [pc, #264]	; (8004044 <HAL_DMA_Init+0x164>)
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f96:	d039      	beq.n	800400c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	4a27      	ldr	r2, [pc, #156]	; (800403c <HAL_DMA_Init+0x15c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_DMA_Init+0x168>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f003 031c 	and.w	r3, r3, #28
 8003fae:	210f      	movs	r1, #15
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	4924      	ldr	r1, [pc, #144]	; (8004048 <HAL_DMA_Init+0x168>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_DMA_Init+0x168>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	f003 031c 	and.w	r3, r3, #28
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	491d      	ldr	r1, [pc, #116]	; (8004048 <HAL_DMA_Init+0x168>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
 8003fd6:	e019      	b.n	800400c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_DMA_Init+0x16c>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe0:	f003 031c 	and.w	r3, r3, #28
 8003fe4:	210f      	movs	r1, #15
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	4917      	ldr	r1, [pc, #92]	; (800404c <HAL_DMA_Init+0x16c>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <HAL_DMA_Init+0x16c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f003 031c 	and.w	r3, r3, #28
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	4911      	ldr	r1, [pc, #68]	; (800404c <HAL_DMA_Init+0x16c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40020407 	.word	0x40020407
 8004034:	bffdfff8 	.word	0xbffdfff8
 8004038:	cccccccd 	.word	0xcccccccd
 800403c:	40020000 	.word	0x40020000
 8004040:	bffdfbf8 	.word	0xbffdfbf8
 8004044:	40020400 	.word	0x40020400
 8004048:	400200a8 	.word	0x400200a8
 800404c:	400204a8 	.word	0x400204a8

08004050 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_DMA_Start+0x20>
 800406c:	2302      	movs	r3, #2
 800406e:	e02e      	b.n	80040ce <HAL_DMA_Start+0x7e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d11d      	bne.n	80040c0 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f923 	bl	80042f4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e005      	b.n	80040cc <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
 80040ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_DMA_Start_IT+0x20>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e04b      	b.n	800418e <HAL_DMA_Start_IT+0xb8>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d13a      	bne.n	8004180 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2202      	movs	r2, #2
 800410e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f8e0 	bl	80042f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 020e 	orr.w	r2, r2, #14
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e00f      	b.n	800416e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0204 	bic.w	r2, r2, #4
 800415c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 020a 	orr.w	r2, r2, #10
 800416c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e005      	b.n	800418c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004188:	2302      	movs	r3, #2
 800418a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f003 031c 	and.w	r3, r3, #28
 80041b6:	2204      	movs	r2, #4
 80041b8:	409a      	lsls	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d026      	beq.n	8004210 <HAL_DMA_IRQHandler+0x7a>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d021      	beq.n	8004210 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0204 	bic.w	r2, r2, #4
 80041e8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f003 021c 	and.w	r2, r3, #28
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2104      	movs	r1, #4
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2b00      	cmp	r3, #0
 8004204:	d071      	beq.n	80042ea <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800420e:	e06c      	b.n	80042ea <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f003 031c 	and.w	r3, r3, #28
 8004218:	2202      	movs	r2, #2
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02e      	beq.n	8004282 <HAL_DMA_IRQHandler+0xec>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d029      	beq.n	8004282 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 020a 	bic.w	r2, r2, #10
 800424a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	f003 021c 	and.w	r2, r3, #28
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2102      	movs	r1, #2
 8004262:	fa01 f202 	lsl.w	r2, r1, r2
 8004266:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d038      	beq.n	80042ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004280:	e033      	b.n	80042ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 031c 	and.w	r3, r3, #28
 800428a:	2208      	movs	r2, #8
 800428c:	409a      	lsls	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02a      	beq.n	80042ec <HAL_DMA_IRQHandler+0x156>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d025      	beq.n	80042ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 020e 	bic.w	r2, r2, #14
 80042ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	f003 021c 	and.w	r2, r3, #28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
}
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f003 021c 	and.w	r2, r3, #28
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b10      	cmp	r3, #16
 8004324:	d108      	bne.n	8004338 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004336:	e007      	b.n	8004348 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004362:	e154      	b.n	800460e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8146 	beq.w	8004608 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d005      	beq.n	8004394 <HAL_GPIO_Init+0x40>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d130      	bne.n	80043f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ca:	2201      	movs	r2, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0201 	and.w	r2, r3, #1
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d017      	beq.n	8004432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2203      	movs	r2, #3
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d123      	bne.n	8004486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	08da      	lsrs	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3208      	adds	r2, #8
 8004446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	220f      	movs	r2, #15
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	08da      	lsrs	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3208      	adds	r2, #8
 8004480:	6939      	ldr	r1, [r7, #16]
 8004482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	2203      	movs	r2, #3
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0203 	and.w	r2, r3, #3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80a0 	beq.w	8004608 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c8:	4b58      	ldr	r3, [pc, #352]	; (800462c <HAL_GPIO_Init+0x2d8>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	4a57      	ldr	r2, [pc, #348]	; (800462c <HAL_GPIO_Init+0x2d8>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6613      	str	r3, [r2, #96]	; 0x60
 80044d4:	4b55      	ldr	r3, [pc, #340]	; (800462c <HAL_GPIO_Init+0x2d8>)
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044e0:	4a53      	ldr	r2, [pc, #332]	; (8004630 <HAL_GPIO_Init+0x2dc>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	3302      	adds	r3, #2
 80044e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	220f      	movs	r2, #15
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800450a:	d019      	beq.n	8004540 <HAL_GPIO_Init+0x1ec>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a49      	ldr	r2, [pc, #292]	; (8004634 <HAL_GPIO_Init+0x2e0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_GPIO_Init+0x1e8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a48      	ldr	r2, [pc, #288]	; (8004638 <HAL_GPIO_Init+0x2e4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00d      	beq.n	8004538 <HAL_GPIO_Init+0x1e4>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a47      	ldr	r2, [pc, #284]	; (800463c <HAL_GPIO_Init+0x2e8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <HAL_GPIO_Init+0x1e0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a46      	ldr	r2, [pc, #280]	; (8004640 <HAL_GPIO_Init+0x2ec>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_GPIO_Init+0x1dc>
 800452c:	2304      	movs	r3, #4
 800452e:	e008      	b.n	8004542 <HAL_GPIO_Init+0x1ee>
 8004530:	2307      	movs	r3, #7
 8004532:	e006      	b.n	8004542 <HAL_GPIO_Init+0x1ee>
 8004534:	2303      	movs	r3, #3
 8004536:	e004      	b.n	8004542 <HAL_GPIO_Init+0x1ee>
 8004538:	2302      	movs	r3, #2
 800453a:	e002      	b.n	8004542 <HAL_GPIO_Init+0x1ee>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_GPIO_Init+0x1ee>
 8004540:	2300      	movs	r3, #0
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	f002 0203 	and.w	r2, r2, #3
 8004548:	0092      	lsls	r2, r2, #2
 800454a:	4093      	lsls	r3, r2
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004552:	4937      	ldr	r1, [pc, #220]	; (8004630 <HAL_GPIO_Init+0x2dc>)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	3302      	adds	r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004560:	4b38      	ldr	r3, [pc, #224]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	43db      	mvns	r3, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4013      	ands	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004584:	4a2f      	ldr	r2, [pc, #188]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800458a:	4b2e      	ldr	r3, [pc, #184]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43db      	mvns	r3, r3
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ae:	4a25      	ldr	r2, [pc, #148]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045b4:	4b23      	ldr	r3, [pc, #140]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	43db      	mvns	r3, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <HAL_GPIO_Init+0x2f0>)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	3301      	adds	r3, #1
 800460c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	f47f aea3 	bne.w	8004364 <HAL_GPIO_Init+0x10>
  }
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	40021000 	.word	0x40021000
 8004630:	40010000 	.word	0x40010000
 8004634:	48000400 	.word	0x48000400
 8004638:	48000800 	.word	0x48000800
 800463c:	48000c00 	.word	0x48000c00
 8004640:	48001000 	.word	0x48001000
 8004644:	40010400 	.word	0x40010400

08004648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e001      	b.n	800466a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
 8004684:	4613      	mov	r3, r2
 8004686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004688:	787b      	ldrb	r3, [r7, #1]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004694:	e002      	b.n	800469c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f806 	bl	80046d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0af      	b.n	8004862 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd ff7a 	bl	8002610 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e00a      	b.n	8004750 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3304      	adds	r3, #4
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	2200      	movs	r2, #0
 8004748:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	3301      	adds	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b0f      	cmp	r3, #15
 8004754:	d9f1      	bls.n	800473a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0204 	orr.w	r2, r2, #4
 8004764:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_LCD_Init+0x17c>)
 800476e:	4013      	ands	r3, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6851      	ldr	r1, [r2, #4]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6892      	ldr	r2, [r2, #8]
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004784:	4311      	orrs	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	69d2      	ldr	r2, [r2, #28]
 800478a:	4311      	orrs	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6a12      	ldr	r2, [r2, #32]
 8004790:	4311      	orrs	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6992      	ldr	r2, [r2, #24]
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f94c 	bl	8004a44 <LCD_WaitForSynchro>
 80047ac:	4603      	mov	r3, r0
 80047ae:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_LCD_Init+0xca>
  {
    return status;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	e053      	b.n	8004862 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80047f2:	f7fe f9bf 	bl	8002b74 <HAL_GetTick>
 80047f6:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80047f8:	e00c      	b.n	8004814 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80047fa:	f7fe f9bb 	bl	8002b74 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004808:	d904      	bls.n	8004814 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e026      	b.n	8004862 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b01      	cmp	r3, #1
 8004820:	d1eb      	bne.n	80047fa <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004822:	f7fe f9a7 	bl	8002b74 <HAL_GetTick>
 8004826:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004828:	e00c      	b.n	8004844 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800482a:	f7fe f9a3 	bl	8002b74 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004838:	d904      	bls.n	8004844 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2210      	movs	r2, #16
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e00e      	b.n	8004862 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b10      	cmp	r3, #16
 8004850:	d1eb      	bne.n	800482a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004860:	7cfb      	ldrb	r3, [r7, #19]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	fc00000e 	.word	0xfc00000e

08004870 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004884:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <HAL_LCD_Write+0x22>
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d144      	bne.n	800491c <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d12a      	bne.n	80048f4 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_LCD_Write+0x3c>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e038      	b.n	800491e <HAL_LCD_Write+0xae>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 80048bc:	f7fe f95a 	bl	8002b74 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80048c2:	e010      	b.n	80048e6 <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80048c4:	f7fe f956 	bl	8002b74 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d2:	d908      	bls.n	80048e6 <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2202      	movs	r2, #2
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e01b      	b.n	800491e <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d0e7      	beq.n	80048c4 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	3304      	adds	r3, #4
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	401a      	ands	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	431a      	orrs	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3304      	adds	r3, #4
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	e000      	b.n	800491e <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004938:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800493a:	7cbb      	ldrb	r3, [r7, #18]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d002      	beq.n	8004946 <HAL_LCD_Clear+0x20>
 8004940:	7cbb      	ldrb	r3, [r7, #18]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d140      	bne.n	80049c8 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_LCD_Clear+0x2e>
 8004950:	2302      	movs	r3, #2
 8004952:	e03a      	b.n	80049ca <HAL_LCD_Clear+0xa4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8004964:	f7fe f906 	bl	8002b74 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800496a:	e010      	b.n	800498e <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800496c:	f7fe f902 	bl	8002b74 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800497a:	d908      	bls.n	800498e <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e01d      	b.n	80049ca <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b04      	cmp	r3, #4
 800499a:	d0e7      	beq.n	800496c <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e00a      	b.n	80049b8 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3304      	adds	r3, #4
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3301      	adds	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d9f1      	bls.n	80049a2 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f807 	bl	80049d2 <HAL_LCD_UpdateDisplayRequest>
 80049c4:	4603      	mov	r3, r0
 80049c6:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2208      	movs	r2, #8
 80049e0:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0204 	orr.w	r2, r2, #4
 80049f0:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80049f2:	f7fe f8bf 	bl	8002b74 <HAL_GetTick>
 80049f6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80049f8:	e010      	b.n	8004a1c <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80049fa:	f7fe f8bb 	bl	8002b74 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a08:	d908      	bls.n	8004a1c <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e00f      	b.n	8004a3c <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d1e7      	bne.n	80049fa <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004a4c:	f7fe f892 	bl	8002b74 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004a52:	e00c      	b.n	8004a6e <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004a54:	f7fe f88e 	bl	8002b74 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a62:	d904      	bls.n	8004a6e <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e007      	b.n	8004a7e <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d1eb      	bne.n	8004a54 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a8c:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40007000 	.word	0x40007000

08004aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab2:	d130      	bne.n	8004b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ab4:	4b23      	ldr	r3, [pc, #140]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac0:	d038      	beq.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ad2:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2232      	movs	r2, #50	; 0x32
 8004ad8:	fb02 f303 	mul.w	r3, r2, r3
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0c9b      	lsrs	r3, r3, #18
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae8:	e002      	b.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afc:	d102      	bne.n	8004b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f2      	bne.n	8004aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b10:	d110      	bne.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e00f      	b.n	8004b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b22:	d007      	beq.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b2c:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40007000 	.word	0x40007000
 8004b48:	20000064 	.word	0x20000064
 8004b4c:	431bde83 	.word	0x431bde83

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f000 bc11 	b.w	8005386 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b64:	4ba0      	ldr	r3, [pc, #640]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b6e:	4b9e      	ldr	r3, [pc, #632]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80e4 	beq.w	8004d4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4c>
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	f040 808b 	bne.w	8004caa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	f040 8087 	bne.w	8004caa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b9c:	4b92      	ldr	r3, [pc, #584]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x64>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e3e8      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	4b8b      	ldr	r3, [pc, #556]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <HAL_RCC_OscConfig+0x7e>
 8004bc4:	4b88      	ldr	r3, [pc, #544]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bcc:	e005      	b.n	8004bda <HAL_RCC_OscConfig+0x8a>
 8004bce:	4b86      	ldr	r3, [pc, #536]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d223      	bcs.n	8004c26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fd7a 	bl	80056dc <RCC_SetFlashLatencyFromMSIRange>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e3c9      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf2:	4b7d      	ldr	r3, [pc, #500]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a7c      	ldr	r2, [pc, #496]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004bf8:	f043 0308 	orr.w	r3, r3, #8
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b7a      	ldr	r3, [pc, #488]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4977      	ldr	r1, [pc, #476]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c10:	4b75      	ldr	r3, [pc, #468]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	4972      	ldr	r1, [pc, #456]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
 8004c24:	e025      	b.n	8004c72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c26:	4b70      	ldr	r3, [pc, #448]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a6f      	ldr	r2, [pc, #444]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c2c:	f043 0308 	orr.w	r3, r3, #8
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b6d      	ldr	r3, [pc, #436]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	496a      	ldr	r1, [pc, #424]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c44:	4b68      	ldr	r3, [pc, #416]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	4965      	ldr	r1, [pc, #404]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fd3a 	bl	80056dc <RCC_SetFlashLatencyFromMSIRange>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e389      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c72:	f000 fc6f 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b5b      	ldr	r3, [pc, #364]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	495a      	ldr	r1, [pc, #360]	; (8004dec <HAL_RCC_OscConfig+0x29c>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8e:	4a58      	ldr	r2, [pc, #352]	; (8004df0 <HAL_RCC_OscConfig+0x2a0>)
 8004c90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c92:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <HAL_RCC_OscConfig+0x2a4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd ff1c 	bl	8002ad4 <HAL_InitTick>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d052      	beq.n	8004d4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	e36d      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d032      	beq.n	8004d18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cb2:	4b4d      	ldr	r3, [pc, #308]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a4c      	ldr	r2, [pc, #304]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cbe:	f7fd ff59 	bl	8002b74 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc6:	f7fd ff55 	bl	8002b74 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e356      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cd8:	4b43      	ldr	r3, [pc, #268]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce4:	4b40      	ldr	r3, [pc, #256]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3f      	ldr	r2, [pc, #252]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004cea:	f043 0308 	orr.w	r3, r3, #8
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4b3d      	ldr	r3, [pc, #244]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	493a      	ldr	r1, [pc, #232]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	4935      	ldr	r1, [pc, #212]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
 8004d16:	e01a      	b.n	8004d4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d18:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d24:	f7fd ff26 	bl	8002b74 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d2c:	f7fd ff22 	bl	8002b74 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e323      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x1dc>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d073      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_OscConfig+0x21c>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d10e      	bne.n	8004d84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d10b      	bne.n	8004d84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d063      	beq.n	8004e40 <HAL_RCC_OscConfig+0x2f0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d15f      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e300      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d106      	bne.n	8004d9c <HAL_RCC_OscConfig+0x24c>
 8004d8e:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e01d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x288>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x270>
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a0f      	ldr	r2, [pc, #60]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCC_OscConfig+0x288>
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a08      	ldr	r2, [pc, #32]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <HAL_RCC_OscConfig+0x298>)
 8004dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01b      	beq.n	8004e18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fd fec8 	bl	8002b74 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	e010      	b.n	8004e0a <HAL_RCC_OscConfig+0x2ba>
 8004de8:	40021000 	.word	0x40021000
 8004dec:	0802d7d8 	.word	0x0802d7d8
 8004df0:	20000064 	.word	0x20000064
 8004df4:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fd febc 	bl	8002b74 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e2bd      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e0a:	4baf      	ldr	r3, [pc, #700]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x2a8>
 8004e16:	e014      	b.n	8004e42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd feac 	bl	8002b74 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fd fea8 	bl	8002b74 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	; 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e2a9      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e32:	4ba5      	ldr	r3, [pc, #660]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x2d0>
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d060      	beq.n	8004f10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_OscConfig+0x310>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d119      	bne.n	8004e8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d116      	bne.n	8004e8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	4b99      	ldr	r3, [pc, #612]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_OscConfig+0x328>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e286      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b93      	ldr	r3, [pc, #588]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	4990      	ldr	r1, [pc, #576]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8c:	e040      	b.n	8004f10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d023      	beq.n	8004ede <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e96:	4b8c      	ldr	r3, [pc, #560]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a8b      	ldr	r2, [pc, #556]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fd fe67 	bl	8002b74 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fd fe63 	bl	8002b74 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e264      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ebc:	4b82      	ldr	r3, [pc, #520]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b7f      	ldr	r3, [pc, #508]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	061b      	lsls	r3, r3, #24
 8004ed6:	497c      	ldr	r1, [pc, #496]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
 8004edc:	e018      	b.n	8004f10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b7a      	ldr	r3, [pc, #488]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a79      	ldr	r2, [pc, #484]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fd fe43 	bl	8002b74 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef2:	f7fd fe3f 	bl	8002b74 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e240      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f04:	4b70      	ldr	r3, [pc, #448]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f0      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d03c      	beq.n	8004f96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01c      	beq.n	8004f5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f24:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2a:	4a67      	ldr	r2, [pc, #412]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fd fe1e 	bl	8002b74 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7fd fe1a 	bl	8002b74 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e21b      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4e:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ef      	beq.n	8004f3c <HAL_RCC_OscConfig+0x3ec>
 8004f5c:	e01b      	b.n	8004f96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5e:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f64:	4a58      	ldr	r2, [pc, #352]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6e:	f7fd fe01 	bl	8002b74 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f76:	f7fd fdfd 	bl	8002b74 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e1fe      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f88:	4b4f      	ldr	r3, [pc, #316]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ef      	bne.n	8004f76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80a6 	beq.w	80050f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fa8:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb4:	4b44      	ldr	r3, [pc, #272]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb8:	4a43      	ldr	r2, [pc, #268]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc0:	4b41      	ldr	r3, [pc, #260]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd0:	4b3e      	ldr	r3, [pc, #248]	; (80050cc <HAL_RCC_OscConfig+0x57c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d118      	bne.n	800500e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	; (80050cc <HAL_RCC_OscConfig+0x57c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3a      	ldr	r2, [pc, #232]	; (80050cc <HAL_RCC_OscConfig+0x57c>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe8:	f7fd fdc4 	bl	8002b74 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff0:	f7fd fdc0 	bl	8002b74 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e1c1      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005002:	4b32      	ldr	r3, [pc, #200]	; (80050cc <HAL_RCC_OscConfig+0x57c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d108      	bne.n	8005028 <HAL_RCC_OscConfig+0x4d8>
 8005016:	4b2c      	ldr	r3, [pc, #176]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501c:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005026:	e024      	b.n	8005072 <HAL_RCC_OscConfig+0x522>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b05      	cmp	r3, #5
 800502e:	d110      	bne.n	8005052 <HAL_RCC_OscConfig+0x502>
 8005030:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005040:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005050:	e00f      	b.n	8005072 <HAL_RCC_OscConfig+0x522>
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005062:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	4a17      	ldr	r2, [pc, #92]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fd fd7b 	bl	8002b74 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005080:	e00a      	b.n	8005098 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fd fd77 	bl	8002b74 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e176      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCC_OscConfig+0x578>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0ed      	beq.n	8005082 <HAL_RCC_OscConfig+0x532>
 80050a6:	e01a      	b.n	80050de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fd fd64 	bl	8002b74 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050ae:	e00f      	b.n	80050d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b0:	f7fd fd60 	bl	8002b74 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d906      	bls.n	80050d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e15f      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d0:	4baa      	ldr	r3, [pc, #680]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e8      	bne.n	80050b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050de:	7ffb      	ldrb	r3, [r7, #31]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d105      	bne.n	80050f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e4:	4ba5      	ldr	r3, [pc, #660]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	4aa4      	ldr	r2, [pc, #656]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d03c      	beq.n	8005176 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01c      	beq.n	800513e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005104:	4b9d      	ldr	r3, [pc, #628]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800510a:	4a9c      	ldr	r2, [pc, #624]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fd fd2e 	bl	8002b74 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800511c:	f7fd fd2a 	bl	8002b74 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e12b      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800512e:	4b93      	ldr	r3, [pc, #588]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ef      	beq.n	800511c <HAL_RCC_OscConfig+0x5cc>
 800513c:	e01b      	b.n	8005176 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800513e:	4b8f      	ldr	r3, [pc, #572]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005144:	4a8d      	ldr	r2, [pc, #564]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514e:	f7fd fd11 	bl	8002b74 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005156:	f7fd fd0d 	bl	8002b74 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e10e      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005168:	4b84      	ldr	r3, [pc, #528]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 800516a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ef      	bne.n	8005156 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8102 	beq.w	8005384 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	2b02      	cmp	r3, #2
 8005186:	f040 80c5 	bne.w	8005314 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800518a:	4b7c      	ldr	r3, [pc, #496]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f003 0203 	and.w	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	429a      	cmp	r2, r3
 800519c:	d12c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	3b01      	subs	r3, #1
 80051aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d123      	bne.n	80051f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d11b      	bne.n	80051f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d113      	bne.n	80051f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	3b01      	subs	r3, #1
 80051de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d109      	bne.n	80051f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	085b      	lsrs	r3, r3, #1
 80051f0:	3b01      	subs	r3, #1
 80051f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d067      	beq.n	80052c8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b0c      	cmp	r3, #12
 80051fc:	d062      	beq.n	80052c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051fe:	4b5f      	ldr	r3, [pc, #380]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0bb      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800520e:	4b5b      	ldr	r3, [pc, #364]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a5a      	ldr	r2, [pc, #360]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005218:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800521a:	f7fd fcab 	bl	8002b74 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005222:	f7fd fca7 	bl	8002b74 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e0a8      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005234:	4b51      	ldr	r3, [pc, #324]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005240:	4b4e      	ldr	r3, [pc, #312]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	4b4e      	ldr	r3, [pc, #312]	; (8005380 <HAL_RCC_OscConfig+0x830>)
 8005246:	4013      	ands	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005250:	3a01      	subs	r2, #1
 8005252:	0112      	lsls	r2, r2, #4
 8005254:	4311      	orrs	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800525a:	0212      	lsls	r2, r2, #8
 800525c:	4311      	orrs	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005262:	0852      	lsrs	r2, r2, #1
 8005264:	3a01      	subs	r2, #1
 8005266:	0552      	lsls	r2, r2, #21
 8005268:	4311      	orrs	r1, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800526e:	0852      	lsrs	r2, r2, #1
 8005270:	3a01      	subs	r2, #1
 8005272:	0652      	lsls	r2, r2, #25
 8005274:	4311      	orrs	r1, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800527a:	06d2      	lsls	r2, r2, #27
 800527c:	430a      	orrs	r2, r1
 800527e:	493f      	ldr	r1, [pc, #252]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005280:	4313      	orrs	r3, r2
 8005282:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3c      	ldr	r2, [pc, #240]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 800528a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800528e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005290:	4b3a      	ldr	r3, [pc, #232]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a39      	ldr	r2, [pc, #228]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800529a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800529c:	f7fd fc6a 	bl	8002b74 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fd fc66 	bl	8002b74 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e067      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b6:	4b31      	ldr	r3, [pc, #196]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052c2:	e05f      	b.n	8005384 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e05e      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c8:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d157      	bne.n	8005384 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052d4:	4b29      	ldr	r3, [pc, #164]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a28      	ldr	r2, [pc, #160]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052e0:	4b26      	ldr	r3, [pc, #152]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a25      	ldr	r2, [pc, #148]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 80052e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052ec:	f7fd fc42 	bl	8002b74 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fd fc3e 	bl	8002b74 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e03f      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x7a4>
 8005312:	e037      	b.n	8005384 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d02d      	beq.n	8005376 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a17      	ldr	r2, [pc, #92]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005324:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4a11      	ldr	r2, [pc, #68]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005338:	f023 0303 	bic.w	r3, r3, #3
 800533c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 8005344:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fd fc11 	bl	8002b74 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005356:	f7fd fc0d 	bl	8002b74 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e00e      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <HAL_RCC_OscConfig+0x82c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <HAL_RCC_OscConfig+0x806>
 8005374:	e006      	b.n	8005384 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e005      	b.n	8005386 <HAL_RCC_OscConfig+0x836>
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop

08005390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0c8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b66      	ldr	r3, [pc, #408]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d910      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 0207 	bic.w	r2, r3, #7
 80053ba:	4961      	ldr	r1, [pc, #388]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b5f      	ldr	r3, [pc, #380]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0b0      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d04c      	beq.n	800547a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e8:	4b56      	ldr	r3, [pc, #344]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d121      	bne.n	8005438 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e09e      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d115      	bne.n	8005438 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e092      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005418:	4b4a      	ldr	r3, [pc, #296]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d109      	bne.n	8005438 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e086      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005428:	4b46      	ldr	r3, [pc, #280]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e07e      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005438:	4b42      	ldr	r3, [pc, #264]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f023 0203 	bic.w	r2, r3, #3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	493f      	ldr	r1, [pc, #252]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544a:	f7fd fb93 	bl	8002b74 <HAL_GetTick>
 800544e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005450:	e00a      	b.n	8005468 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005452:	f7fd fb8f 	bl	8002b74 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005460:	4293      	cmp	r3, r2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e066      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 020c 	and.w	r2, r3, #12
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	429a      	cmp	r2, r3
 8005478:	d1eb      	bne.n	8005452 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005486:	4b2f      	ldr	r3, [pc, #188]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	492c      	ldr	r1, [pc, #176]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 8005494:	4313      	orrs	r3, r2
 8005496:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b29      	ldr	r3, [pc, #164]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d210      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 0207 	bic.w	r2, r3, #7
 80054ae:	4924      	ldr	r1, [pc, #144]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1b0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e036      	b.n	8005536 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4918      	ldr	r1, [pc, #96]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4910      	ldr	r1, [pc, #64]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005506:	f000 f825 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_RCC_ClockConfig+0x1b4>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490c      	ldr	r1, [pc, #48]	; (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_RCC_ClockConfig+0x1c0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fd fad2 	bl	8002ad4 <HAL_InitTick>
 8005530:	4603      	mov	r3, r0
 8005532:	72fb      	strb	r3, [r7, #11]

  return status;
 8005534:	7afb      	ldrb	r3, [r7, #11]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40022000 	.word	0x40022000
 8005544:	40021000 	.word	0x40021000
 8005548:	0802d7d8 	.word	0x0802d7d8
 800554c:	20000064 	.word	0x20000064
 8005550:	20000068 	.word	0x20000068

08005554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	2300      	movs	r3, #0
 8005560:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005562:	4b3e      	ldr	r3, [pc, #248]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800556c:	4b3b      	ldr	r3, [pc, #236]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0x34>
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d121      	bne.n	80055c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d11e      	bne.n	80055c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005588:	4b34      	ldr	r3, [pc, #208]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005594:	4b31      	ldr	r3, [pc, #196]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 8005596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	e005      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055b0:	4a2b      	ldr	r2, [pc, #172]	; (8005660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055c4:	e00a      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d102      	bne.n	80055d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055cc:	4b25      	ldr	r3, [pc, #148]	; (8005664 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	e004      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d101      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d8:	4b23      	ldr	r3, [pc, #140]	; (8005668 <HAL_RCC_GetSysClockFreq+0x114>)
 80055da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d134      	bne.n	800564c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055e2:	4b1e      	ldr	r3, [pc, #120]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d003      	beq.n	80055fa <HAL_RCC_GetSysClockFreq+0xa6>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d003      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0xac>
 80055f8:	e005      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <HAL_RCC_GetSysClockFreq+0x110>)
 80055fc:	617b      	str	r3, [r7, #20]
      break;
 80055fe:	e005      	b.n	800560c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005600:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_RCC_GetSysClockFreq+0x114>)
 8005602:	617b      	str	r3, [r7, #20]
      break;
 8005604:	e002      	b.n	800560c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	617b      	str	r3, [r7, #20]
      break;
 800560a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800560c:	4b13      	ldr	r3, [pc, #76]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	3301      	adds	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	fb02 f203 	mul.w	r2, r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_RCC_GetSysClockFreq+0x108>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	0e5b      	lsrs	r3, r3, #25
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	3301      	adds	r3, #1
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800564c:	69bb      	ldr	r3, [r7, #24]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3724      	adds	r7, #36	; 0x24
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000
 8005660:	0802d7f0 	.word	0x0802d7f0
 8005664:	00f42400 	.word	0x00f42400
 8005668:	007a1200 	.word	0x007a1200

0800566c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <HAL_RCC_GetHCLKFreq+0x14>)
 8005672:	681b      	ldr	r3, [r3, #0]
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000064 	.word	0x20000064

08005684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005688:	f7ff fff0 	bl	800566c <HAL_RCC_GetHCLKFreq>
 800568c:	4602      	mov	r2, r0
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	4904      	ldr	r1, [pc, #16]	; (80056ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40021000 	.word	0x40021000
 80056ac:	0802d7e8 	.word	0x0802d7e8

080056b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056b4:	f7ff ffda 	bl	800566c <HAL_RCC_GetHCLKFreq>
 80056b8:	4602      	mov	r2, r0
 80056ba:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	0adb      	lsrs	r3, r3, #11
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	4904      	ldr	r1, [pc, #16]	; (80056d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056c6:	5ccb      	ldrb	r3, [r1, r3]
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40021000 	.word	0x40021000
 80056d8:	0802d7e8 	.word	0x0802d7e8

080056dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056e8:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056f4:	f7ff f9c8 	bl	8004a88 <HAL_PWREx_GetVoltageRange>
 80056f8:	6178      	str	r0, [r7, #20]
 80056fa:	e014      	b.n	8005726 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056fc:	4b25      	ldr	r3, [pc, #148]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	4a24      	ldr	r2, [pc, #144]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005706:	6593      	str	r3, [r2, #88]	; 0x58
 8005708:	4b22      	ldr	r3, [pc, #136]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005714:	f7ff f9b8 	bl	8004a88 <HAL_PWREx_GetVoltageRange>
 8005718:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005724:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d10b      	bne.n	8005746 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d919      	bls.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2ba0      	cmp	r3, #160	; 0xa0
 8005738:	d902      	bls.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800573a:	2302      	movs	r3, #2
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	e013      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005740:	2301      	movs	r3, #1
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e010      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d902      	bls.n	8005752 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800574c:	2303      	movs	r3, #3
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	e00a      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d102      	bne.n	800575e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005758:	2302      	movs	r3, #2
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	e004      	b.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b70      	cmp	r3, #112	; 0x70
 8005762:	d101      	bne.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005764:	2301      	movs	r3, #1
 8005766:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f023 0207 	bic.w	r2, r3, #7
 8005770:	4909      	ldr	r1, [pc, #36]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d001      	beq.n	800578a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	40021000 	.word	0x40021000
 8005798:	40022000 	.word	0x40022000

0800579c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a4:	2300      	movs	r3, #0
 80057a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057a8:	2300      	movs	r3, #0
 80057aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d031      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c0:	d01a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c6:	d814      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057d0:	d10f      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80057d2:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4a5c      	ldr	r2, [pc, #368]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057de:	e00c      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fa1e 	bl	8005c28 <RCCEx_PLLSAI1_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057f0:	e003      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	74fb      	strb	r3, [r7, #19]
      break;
 80057f6:	e000      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80057f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fa:	7cfb      	ldrb	r3, [r7, #19]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005800:	4b51      	ldr	r3, [pc, #324]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	494e      	ldr	r1, [pc, #312]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005816:	e001      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 809e 	beq.w	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800582e:	4b46      	ldr	r3, [pc, #280]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800583e:	2300      	movs	r3, #0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00d      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005844:	4b40      	ldr	r3, [pc, #256]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005848:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	6593      	str	r3, [r2, #88]	; 0x58
 8005850:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800585c:	2301      	movs	r3, #1
 800585e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005860:	4b3a      	ldr	r3, [pc, #232]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a39      	ldr	r2, [pc, #228]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800586c:	f7fd f982 	bl	8002b74 <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005872:	e009      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005874:	f7fd f97e 	bl	8002b74 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d902      	bls.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	74fb      	strb	r3, [r7, #19]
        break;
 8005886:	e005      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005888:	4b30      	ldr	r3, [pc, #192]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ef      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d15a      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800589a:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01e      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d019      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058c2:	4b21      	ldr	r3, [pc, #132]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058e2:	4a19      	ldr	r2, [pc, #100]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d016      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fd f93e 	bl	8002b74 <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	e00b      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fd f93a 	bl	8002b74 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d902      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	74fb      	strb	r3, [r7, #19]
            break;
 8005912:	e006      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0ec      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10b      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005936:	4904      	ldr	r1, [pc, #16]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800593e:	e009      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	74bb      	strb	r3, [r7, #18]
 8005944:	e006      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
 800594c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005954:	7c7b      	ldrb	r3, [r7, #17]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d105      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800595a:	4bb2      	ldr	r3, [pc, #712]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	4ab1      	ldr	r2, [pc, #708]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005972:	4bac      	ldr	r3, [pc, #688]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	f023 0203 	bic.w	r2, r3, #3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	49a8      	ldr	r1, [pc, #672]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005994:	4ba3      	ldr	r3, [pc, #652]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f023 020c 	bic.w	r2, r3, #12
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	49a0      	ldr	r1, [pc, #640]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059b6:	4b9b      	ldr	r3, [pc, #620]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	4997      	ldr	r1, [pc, #604]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059d8:	4b92      	ldr	r3, [pc, #584]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	498f      	ldr	r1, [pc, #572]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059fa:	4b8a      	ldr	r3, [pc, #552]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	4986      	ldr	r1, [pc, #536]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a1c:	4b81      	ldr	r3, [pc, #516]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	497e      	ldr	r1, [pc, #504]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a3e:	4b79      	ldr	r3, [pc, #484]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	4975      	ldr	r1, [pc, #468]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a60:	4b70      	ldr	r3, [pc, #448]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6e:	496d      	ldr	r1, [pc, #436]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a82:	4b68      	ldr	r3, [pc, #416]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	4964      	ldr	r1, [pc, #400]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d028      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aa4:	4b5f      	ldr	r3, [pc, #380]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab2:	495c      	ldr	r1, [pc, #368]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac2:	d106      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac4:	4b57      	ldr	r3, [pc, #348]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a56      	ldr	r2, [pc, #344]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ace:	60d3      	str	r3, [r2, #12]
 8005ad0:	e011      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ada:	d10c      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f8a0 	bl	8005c28 <RCCEx_PLLSAI1_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005aec:	7cfb      	ldrb	r3, [r7, #19]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d028      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b02:	4b48      	ldr	r3, [pc, #288]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b10:	4944      	ldr	r1, [pc, #272]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b20:	d106      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b22:	4b40      	ldr	r3, [pc, #256]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	4a3f      	ldr	r2, [pc, #252]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b2c:	60d3      	str	r3, [r2, #12]
 8005b2e:	e011      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b38:	d10c      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 f871 	bl	8005c28 <RCCEx_PLLSAI1_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d028      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b60:	4b30      	ldr	r3, [pc, #192]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	492d      	ldr	r1, [pc, #180]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b80:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a27      	ldr	r2, [pc, #156]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b8a:	60d3      	str	r3, [r2, #12]
 8005b8c:	e011      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b96:	d10c      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f842 	bl	8005c28 <RCCEx_PLLSAI1_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ba8:	7cfb      	ldrb	r3, [r7, #19]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01c      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bbe:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bcc:	4915      	ldr	r1, [pc, #84]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2102      	movs	r1, #2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f81f 	bl	8005c28 <RCCEx_PLLSAI1_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	4904      	ldr	r1, [pc, #16]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000

08005c28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c36:	4b74      	ldr	r3, [pc, #464]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c42:	4b71      	ldr	r3, [pc, #452]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0203 	and.w	r2, r3, #3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d10d      	bne.n	8005c6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
       ||
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c5a:	4b6b      	ldr	r3, [pc, #428]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
       ||
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d047      	beq.n	8005cfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
 8005c72:	e044      	b.n	8005cfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d018      	beq.n	8005cae <RCCEx_PLLSAI1_Config+0x86>
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d825      	bhi.n	8005ccc <RCCEx_PLLSAI1_Config+0xa4>
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d002      	beq.n	8005c8a <RCCEx_PLLSAI1_Config+0x62>
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d009      	beq.n	8005c9c <RCCEx_PLLSAI1_Config+0x74>
 8005c88:	e020      	b.n	8005ccc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c8a:	4b5f      	ldr	r3, [pc, #380]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d11d      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c9a:	e01a      	b.n	8005cd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c9c:	4b5a      	ldr	r3, [pc, #360]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d116      	bne.n	8005cd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cac:	e013      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cae:	4b56      	ldr	r3, [pc, #344]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10f      	bne.n	8005cda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cba:	4b53      	ldr	r3, [pc, #332]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cca:	e006      	b.n	8005cda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e004      	b.n	8005cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e002      	b.n	8005cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cda:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10d      	bne.n	8005cfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ce2:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6819      	ldr	r1, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	4943      	ldr	r1, [pc, #268]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d17c      	bne.n	8005dfe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d04:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d10:	f7fc ff30 	bl	8002b74 <HAL_GetTick>
 8005d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d16:	e009      	b.n	8005d2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d18:	f7fc ff2c 	bl	8002b74 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d902      	bls.n	8005d2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	73fb      	strb	r3, [r7, #15]
        break;
 8005d2a:	e005      	b.n	8005d38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ef      	bne.n	8005d18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d15f      	bne.n	8005dfe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d110      	bne.n	8005d66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d44:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6892      	ldr	r2, [r2, #8]
 8005d54:	0211      	lsls	r1, r2, #8
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68d2      	ldr	r2, [r2, #12]
 8005d5a:	06d2      	lsls	r2, r2, #27
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	492a      	ldr	r1, [pc, #168]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	610b      	str	r3, [r1, #16]
 8005d64:	e027      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d112      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d6c:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6892      	ldr	r2, [r2, #8]
 8005d7c:	0211      	lsls	r1, r2, #8
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6912      	ldr	r2, [r2, #16]
 8005d82:	0852      	lsrs	r2, r2, #1
 8005d84:	3a01      	subs	r2, #1
 8005d86:	0552      	lsls	r2, r2, #21
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	491f      	ldr	r1, [pc, #124]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	610b      	str	r3, [r1, #16]
 8005d90:	e011      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d92:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6892      	ldr	r2, [r2, #8]
 8005da2:	0211      	lsls	r1, r2, #8
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6952      	ldr	r2, [r2, #20]
 8005da8:	0852      	lsrs	r2, r2, #1
 8005daa:	3a01      	subs	r2, #1
 8005dac:	0652      	lsls	r2, r2, #25
 8005dae:	430a      	orrs	r2, r1
 8005db0:	4915      	ldr	r1, [pc, #84]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc2:	f7fc fed7 	bl	8002b74 <HAL_GetTick>
 8005dc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dc8:	e009      	b.n	8005dde <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dca:	f7fc fed3 	bl	8002b74 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d902      	bls.n	8005dde <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	73fb      	strb	r3, [r7, #15]
          break;
 8005ddc:	e005      	b.n	8005dea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dde:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0ef      	beq.n	8005dca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	4903      	ldr	r1, [pc, #12]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e049      	b.n	8005eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fc fc6a 	bl	800270c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 f94c 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d001      	beq.n	8005ed4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e033      	b.n	8005f3c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <HAL_TIM_Base_Start+0x8c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_TIM_Base_Start+0x3e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d004      	beq.n	8005efa <HAL_TIM_Base_Start+0x3e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <HAL_TIM_Base_Start+0x90>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d115      	bne.n	8005f26 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <HAL_TIM_Base_Start+0x94>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b06      	cmp	r3, #6
 8005f0a:	d015      	beq.n	8005f38 <HAL_TIM_Base_Start+0x7c>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f12:	d011      	beq.n	8005f38 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f24:	e008      	b.n	8005f38 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0201 	orr.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e000      	b.n	8005f3a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	00010007 	.word	0x00010007

08005f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIM_ConfigClockSource+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e0b6      	b.n	80060de <HAL_TIM_ConfigClockSource+0x18a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fac:	d03e      	beq.n	800602c <HAL_TIM_ConfigClockSource+0xd8>
 8005fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb2:	f200 8087 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fba:	f000 8086 	beq.w	80060ca <HAL_TIM_ConfigClockSource+0x176>
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc2:	d87f      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005fc4:	2b70      	cmp	r3, #112	; 0x70
 8005fc6:	d01a      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0xaa>
 8005fc8:	2b70      	cmp	r3, #112	; 0x70
 8005fca:	d87b      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005fcc:	2b60      	cmp	r3, #96	; 0x60
 8005fce:	d050      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x11e>
 8005fd0:	2b60      	cmp	r3, #96	; 0x60
 8005fd2:	d877      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005fd4:	2b50      	cmp	r3, #80	; 0x50
 8005fd6:	d03c      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0xfe>
 8005fd8:	2b50      	cmp	r3, #80	; 0x50
 8005fda:	d873      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	d058      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x13e>
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d86f      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005fe4:	2b30      	cmp	r3, #48	; 0x30
 8005fe6:	d064      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
 8005fe8:	2b30      	cmp	r3, #48	; 0x30
 8005fea:	d86b      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d060      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d867      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d05c      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d05a      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ffc:	e062      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6899      	ldr	r1, [r3, #8]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f000 f949 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	609a      	str	r2, [r3, #8]
      break;
 800602a:	e04f      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6899      	ldr	r1, [r3, #8]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f000 f932 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800604e:	609a      	str	r2, [r3, #8]
      break;
 8006050:	e03c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	461a      	mov	r2, r3
 8006060:	f000 f8a6 	bl	80061b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2150      	movs	r1, #80	; 0x50
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f8ff 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006070:	e02c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	461a      	mov	r2, r3
 8006080:	f000 f8c5 	bl	800620e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2160      	movs	r1, #96	; 0x60
 800608a:	4618      	mov	r0, r3
 800608c:	f000 f8ef 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006090:	e01c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6859      	ldr	r1, [r3, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	461a      	mov	r2, r3
 80060a0:	f000 f886 	bl	80061b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2140      	movs	r1, #64	; 0x40
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f8df 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 80060b0:	e00c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f000 f8d6 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 80060c2:	e003      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e000      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <TIM_Base_SetConfig+0xbc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0x20>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d108      	bne.n	800611a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a21      	ldr	r2, [pc, #132]	; (80061a4 <TIM_Base_SetConfig+0xbc>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_Base_SetConfig+0x52>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006128:	d007      	beq.n	800613a <TIM_Base_SetConfig+0x52>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <TIM_Base_SetConfig+0xc0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0x52>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <TIM_Base_SetConfig+0xc4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a0c      	ldr	r2, [pc, #48]	; (80061a4 <TIM_Base_SetConfig+0xbc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_Base_SetConfig+0xa0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a0b      	ldr	r2, [pc, #44]	; (80061a8 <TIM_Base_SetConfig+0xc0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_Base_SetConfig+0xa0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <TIM_Base_SetConfig+0xc4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d103      	bne.n	8006190 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	615a      	str	r2, [r3, #20]
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40014400 	.word	0x40014400

080061b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 030a 	bic.w	r3, r3, #10
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620e:	b480      	push	{r7}
 8006210:	b087      	sub	sp, #28
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0210 	bic.w	r2, r3, #16
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	f043 0307 	orr.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e04f      	b.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d108      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800632c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a14      	ldr	r2, [pc, #80]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006364:	d004      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a10      	ldr	r2, [pc, #64]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10c      	bne.n	800638a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006376:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40014000 	.word	0x40014000

080063b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e040      	b.n	8006444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fc f9fa 	bl	80027cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	; 0x24
 80063dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f82c 	bl	800644c <UART_SetConfig>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e022      	b.n	8006444 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa54 	bl	80068b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800641a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800642a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fadb 	bl	80069f8 <UART_CheckIdleState>
 8006442:	4603      	mov	r3, r0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800644c:	b5b0      	push	{r4, r5, r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	4313      	orrs	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4baa      	ldr	r3, [pc, #680]	; (8006720 <UART_SetConfig+0x2d4>)
 8006478:	4013      	ands	r3, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	69f9      	ldr	r1, [r7, #28]
 8006480:	430b      	orrs	r3, r1
 8006482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a9f      	ldr	r2, [pc, #636]	; (8006724 <UART_SetConfig+0x2d8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a96      	ldr	r2, [pc, #600]	; (8006728 <UART_SetConfig+0x2dc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d121      	bne.n	8006516 <UART_SetConfig+0xca>
 80064d2:	4b96      	ldr	r3, [pc, #600]	; (800672c <UART_SetConfig+0x2e0>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d817      	bhi.n	8006510 <UART_SetConfig+0xc4>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <UART_SetConfig+0x9c>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	08006505 	.word	0x08006505
 80064f0:	080064ff 	.word	0x080064ff
 80064f4:	0800650b 	.word	0x0800650b
 80064f8:	2301      	movs	r3, #1
 80064fa:	76fb      	strb	r3, [r7, #27]
 80064fc:	e096      	b.n	800662c <UART_SetConfig+0x1e0>
 80064fe:	2302      	movs	r3, #2
 8006500:	76fb      	strb	r3, [r7, #27]
 8006502:	e093      	b.n	800662c <UART_SetConfig+0x1e0>
 8006504:	2304      	movs	r3, #4
 8006506:	76fb      	strb	r3, [r7, #27]
 8006508:	e090      	b.n	800662c <UART_SetConfig+0x1e0>
 800650a:	2308      	movs	r3, #8
 800650c:	76fb      	strb	r3, [r7, #27]
 800650e:	e08d      	b.n	800662c <UART_SetConfig+0x1e0>
 8006510:	2310      	movs	r3, #16
 8006512:	76fb      	strb	r3, [r7, #27]
 8006514:	e08a      	b.n	800662c <UART_SetConfig+0x1e0>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a85      	ldr	r2, [pc, #532]	; (8006730 <UART_SetConfig+0x2e4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d132      	bne.n	8006586 <UART_SetConfig+0x13a>
 8006520:	4b82      	ldr	r3, [pc, #520]	; (800672c <UART_SetConfig+0x2e0>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b0c      	cmp	r3, #12
 800652c:	d828      	bhi.n	8006580 <UART_SetConfig+0x134>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <UART_SetConfig+0xe8>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006569 	.word	0x08006569
 8006538:	08006581 	.word	0x08006581
 800653c:	08006581 	.word	0x08006581
 8006540:	08006581 	.word	0x08006581
 8006544:	08006575 	.word	0x08006575
 8006548:	08006581 	.word	0x08006581
 800654c:	08006581 	.word	0x08006581
 8006550:	08006581 	.word	0x08006581
 8006554:	0800656f 	.word	0x0800656f
 8006558:	08006581 	.word	0x08006581
 800655c:	08006581 	.word	0x08006581
 8006560:	08006581 	.word	0x08006581
 8006564:	0800657b 	.word	0x0800657b
 8006568:	2300      	movs	r3, #0
 800656a:	76fb      	strb	r3, [r7, #27]
 800656c:	e05e      	b.n	800662c <UART_SetConfig+0x1e0>
 800656e:	2302      	movs	r3, #2
 8006570:	76fb      	strb	r3, [r7, #27]
 8006572:	e05b      	b.n	800662c <UART_SetConfig+0x1e0>
 8006574:	2304      	movs	r3, #4
 8006576:	76fb      	strb	r3, [r7, #27]
 8006578:	e058      	b.n	800662c <UART_SetConfig+0x1e0>
 800657a:	2308      	movs	r3, #8
 800657c:	76fb      	strb	r3, [r7, #27]
 800657e:	e055      	b.n	800662c <UART_SetConfig+0x1e0>
 8006580:	2310      	movs	r3, #16
 8006582:	76fb      	strb	r3, [r7, #27]
 8006584:	e052      	b.n	800662c <UART_SetConfig+0x1e0>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6a      	ldr	r2, [pc, #424]	; (8006734 <UART_SetConfig+0x2e8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d120      	bne.n	80065d2 <UART_SetConfig+0x186>
 8006590:	4b66      	ldr	r3, [pc, #408]	; (800672c <UART_SetConfig+0x2e0>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800659a:	2b30      	cmp	r3, #48	; 0x30
 800659c:	d013      	beq.n	80065c6 <UART_SetConfig+0x17a>
 800659e:	2b30      	cmp	r3, #48	; 0x30
 80065a0:	d814      	bhi.n	80065cc <UART_SetConfig+0x180>
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d009      	beq.n	80065ba <UART_SetConfig+0x16e>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d810      	bhi.n	80065cc <UART_SetConfig+0x180>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <UART_SetConfig+0x168>
 80065ae:	2b10      	cmp	r3, #16
 80065b0:	d006      	beq.n	80065c0 <UART_SetConfig+0x174>
 80065b2:	e00b      	b.n	80065cc <UART_SetConfig+0x180>
 80065b4:	2300      	movs	r3, #0
 80065b6:	76fb      	strb	r3, [r7, #27]
 80065b8:	e038      	b.n	800662c <UART_SetConfig+0x1e0>
 80065ba:	2302      	movs	r3, #2
 80065bc:	76fb      	strb	r3, [r7, #27]
 80065be:	e035      	b.n	800662c <UART_SetConfig+0x1e0>
 80065c0:	2304      	movs	r3, #4
 80065c2:	76fb      	strb	r3, [r7, #27]
 80065c4:	e032      	b.n	800662c <UART_SetConfig+0x1e0>
 80065c6:	2308      	movs	r3, #8
 80065c8:	76fb      	strb	r3, [r7, #27]
 80065ca:	e02f      	b.n	800662c <UART_SetConfig+0x1e0>
 80065cc:	2310      	movs	r3, #16
 80065ce:	76fb      	strb	r3, [r7, #27]
 80065d0:	e02c      	b.n	800662c <UART_SetConfig+0x1e0>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a53      	ldr	r2, [pc, #332]	; (8006724 <UART_SetConfig+0x2d8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d125      	bne.n	8006628 <UART_SetConfig+0x1dc>
 80065dc:	4b53      	ldr	r3, [pc, #332]	; (800672c <UART_SetConfig+0x2e0>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ea:	d017      	beq.n	800661c <UART_SetConfig+0x1d0>
 80065ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065f0:	d817      	bhi.n	8006622 <UART_SetConfig+0x1d6>
 80065f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f6:	d00b      	beq.n	8006610 <UART_SetConfig+0x1c4>
 80065f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fc:	d811      	bhi.n	8006622 <UART_SetConfig+0x1d6>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <UART_SetConfig+0x1be>
 8006602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006606:	d006      	beq.n	8006616 <UART_SetConfig+0x1ca>
 8006608:	e00b      	b.n	8006622 <UART_SetConfig+0x1d6>
 800660a:	2300      	movs	r3, #0
 800660c:	76fb      	strb	r3, [r7, #27]
 800660e:	e00d      	b.n	800662c <UART_SetConfig+0x1e0>
 8006610:	2302      	movs	r3, #2
 8006612:	76fb      	strb	r3, [r7, #27]
 8006614:	e00a      	b.n	800662c <UART_SetConfig+0x1e0>
 8006616:	2304      	movs	r3, #4
 8006618:	76fb      	strb	r3, [r7, #27]
 800661a:	e007      	b.n	800662c <UART_SetConfig+0x1e0>
 800661c:	2308      	movs	r3, #8
 800661e:	76fb      	strb	r3, [r7, #27]
 8006620:	e004      	b.n	800662c <UART_SetConfig+0x1e0>
 8006622:	2310      	movs	r3, #16
 8006624:	76fb      	strb	r3, [r7, #27]
 8006626:	e001      	b.n	800662c <UART_SetConfig+0x1e0>
 8006628:	2310      	movs	r3, #16
 800662a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a3c      	ldr	r2, [pc, #240]	; (8006724 <UART_SetConfig+0x2d8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f040 8082 	bne.w	800673c <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006638:	7efb      	ldrb	r3, [r7, #27]
 800663a:	2b08      	cmp	r3, #8
 800663c:	d823      	bhi.n	8006686 <UART_SetConfig+0x23a>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x1f8>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006669 	.word	0x08006669
 8006648:	08006687 	.word	0x08006687
 800664c:	08006671 	.word	0x08006671
 8006650:	08006687 	.word	0x08006687
 8006654:	08006677 	.word	0x08006677
 8006658:	08006687 	.word	0x08006687
 800665c:	08006687 	.word	0x08006687
 8006660:	08006687 	.word	0x08006687
 8006664:	0800667f 	.word	0x0800667f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7ff f80c 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 800666c:	6178      	str	r0, [r7, #20]
        break;
 800666e:	e00f      	b.n	8006690 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006670:	4b31      	ldr	r3, [pc, #196]	; (8006738 <UART_SetConfig+0x2ec>)
 8006672:	617b      	str	r3, [r7, #20]
        break;
 8006674:	e00c      	b.n	8006690 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006676:	f7fe ff6d 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 800667a:	6178      	str	r0, [r7, #20]
        break;
 800667c:	e008      	b.n	8006690 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006682:	617b      	str	r3, [r7, #20]
        break;
 8006684:	e004      	b.n	8006690 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	76bb      	strb	r3, [r7, #26]
        break;
 800668e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8100 	beq.w	8006898 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	4613      	mov	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d305      	bcc.n	80066b4 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d902      	bls.n	80066ba <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	76bb      	strb	r3, [r7, #26]
 80066b8:	e0ee      	b.n	8006898 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	4618      	mov	r0, r3
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	020b      	lsls	r3, r1, #8
 80066cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066d0:	0202      	lsls	r2, r0, #8
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	6849      	ldr	r1, [r1, #4]
 80066d6:	0849      	lsrs	r1, r1, #1
 80066d8:	4608      	mov	r0, r1
 80066da:	f04f 0100 	mov.w	r1, #0
 80066de:	1814      	adds	r4, r2, r0
 80066e0:	eb43 0501 	adc.w	r5, r3, r1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	461a      	mov	r2, r3
 80066ea:	f04f 0300 	mov.w	r3, #0
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7fa faa1 	bl	8000c38 <__aeabi_uldivmod>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4613      	mov	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006704:	d308      	bcc.n	8006718 <UART_SetConfig+0x2cc>
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670c:	d204      	bcs.n	8006718 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	60da      	str	r2, [r3, #12]
 8006716:	e0bf      	b.n	8006898 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	76bb      	strb	r3, [r7, #26]
 800671c:	e0bc      	b.n	8006898 <UART_SetConfig+0x44c>
 800671e:	bf00      	nop
 8006720:	efff69f3 	.word	0xefff69f3
 8006724:	40008000 	.word	0x40008000
 8006728:	40013800 	.word	0x40013800
 800672c:	40021000 	.word	0x40021000
 8006730:	40004400 	.word	0x40004400
 8006734:	40004800 	.word	0x40004800
 8006738:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006744:	d15b      	bne.n	80067fe <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8006746:	7efb      	ldrb	r3, [r7, #27]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d828      	bhi.n	800679e <UART_SetConfig+0x352>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0x308>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006779 	.word	0x08006779
 8006758:	08006781 	.word	0x08006781
 800675c:	08006789 	.word	0x08006789
 8006760:	0800679f 	.word	0x0800679f
 8006764:	0800678f 	.word	0x0800678f
 8006768:	0800679f 	.word	0x0800679f
 800676c:	0800679f 	.word	0x0800679f
 8006770:	0800679f 	.word	0x0800679f
 8006774:	08006797 	.word	0x08006797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fe ff84 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 800677c:	6178      	str	r0, [r7, #20]
        break;
 800677e:	e013      	b.n	80067a8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7fe ff96 	bl	80056b0 <HAL_RCC_GetPCLK2Freq>
 8006784:	6178      	str	r0, [r7, #20]
        break;
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006788:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <UART_SetConfig+0x464>)
 800678a:	617b      	str	r3, [r7, #20]
        break;
 800678c:	e00c      	b.n	80067a8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678e:	f7fe fee1 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8006792:	6178      	str	r0, [r7, #20]
        break;
 8006794:	e008      	b.n	80067a8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679a:	617b      	str	r3, [r7, #20]
        break;
 800679c:	e004      	b.n	80067a8 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	76bb      	strb	r3, [r7, #26]
        break;
 80067a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d074      	beq.n	8006898 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	005a      	lsls	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d916      	bls.n	80067f8 <UART_SetConfig+0x3ac>
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d0:	d212      	bcs.n	80067f8 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f023 030f 	bic.w	r3, r3, #15
 80067da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	89fb      	ldrh	r3, [r7, #14]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	89fa      	ldrh	r2, [r7, #14]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	e04f      	b.n	8006898 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	76bb      	strb	r3, [r7, #26]
 80067fc:	e04c      	b.n	8006898 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067fe:	7efb      	ldrb	r3, [r7, #27]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d828      	bhi.n	8006856 <UART_SetConfig+0x40a>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x3c0>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006857 	.word	0x08006857
 800681c:	08006847 	.word	0x08006847
 8006820:	08006857 	.word	0x08006857
 8006824:	08006857 	.word	0x08006857
 8006828:	08006857 	.word	0x08006857
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fe ff28 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 8006834:	6178      	str	r0, [r7, #20]
        break;
 8006836:	e013      	b.n	8006860 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fe ff3a 	bl	80056b0 <HAL_RCC_GetPCLK2Freq>
 800683c:	6178      	str	r0, [r7, #20]
        break;
 800683e:	e00f      	b.n	8006860 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <UART_SetConfig+0x464>)
 8006842:	617b      	str	r3, [r7, #20]
        break;
 8006844:	e00c      	b.n	8006860 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fe fe85 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 800684a:	6178      	str	r0, [r7, #20]
        break;
 800684c:	e008      	b.n	8006860 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	617b      	str	r3, [r7, #20]
        break;
 8006854:	e004      	b.n	8006860 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	76bb      	strb	r3, [r7, #26]
        break;
 800685e:	bf00      	nop
    }

    if (pclk != 0U)
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d018      	beq.n	8006898 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	085a      	lsrs	r2, r3, #1
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	441a      	add	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b0f      	cmp	r3, #15
 800687e:	d909      	bls.n	8006894 <UART_SetConfig+0x448>
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006886:	d205      	bcs.n	8006894 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	b29a      	uxth	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	e001      	b.n	8006898 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bdb0      	pop	{r4, r5, r7, pc}
 80068ae:	bf00      	nop
 80068b0:	00f42400 	.word	0x00f42400

080068b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01a      	beq.n	80069ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b2:	d10a      	bne.n	80069ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a08:	f7fc f8b4 	bl	8002b74 <HAL_GetTick>
 8006a0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d10e      	bne.n	8006a3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f82d 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e023      	b.n	8006a82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d10e      	bne.n	8006a66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f817 	bl	8006a8a <UART_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e00d      	b.n	8006a82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b09c      	sub	sp, #112	; 0x70
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4613      	mov	r3, r2
 8006a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9a:	e0a5      	b.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	f000 80a1 	beq.w	8006be8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa6:	f7fc f865 	bl	8002b74 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <UART_WaitOnFlagUntilTimeout+0x32>
 8006ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d13e      	bne.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ad0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006adc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	663b      	str	r3, [r7, #96]	; 0x60
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e5      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e067      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d04f      	beq.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b56:	d147      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
 8006b82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e6      	bne.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bb4:	623a      	str	r2, [r7, #32]
 8006bb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	69f9      	ldr	r1, [r7, #28]
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e5      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e010      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69da      	ldr	r2, [r3, #28]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	f43f af4a 	beq.w	8006a9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3770      	adds	r7, #112	; 0x70
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <__errno>:
 8006c14:	4b01      	ldr	r3, [pc, #4]	; (8006c1c <__errno+0x8>)
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	20000070 	.word	0x20000070

08006c20 <__libc_init_array>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4d0d      	ldr	r5, [pc, #52]	; (8006c58 <__libc_init_array+0x38>)
 8006c24:	4c0d      	ldr	r4, [pc, #52]	; (8006c5c <__libc_init_array+0x3c>)
 8006c26:	1b64      	subs	r4, r4, r5
 8006c28:	10a4      	asrs	r4, r4, #2
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	42a6      	cmp	r6, r4
 8006c2e:	d109      	bne.n	8006c44 <__libc_init_array+0x24>
 8006c30:	4d0b      	ldr	r5, [pc, #44]	; (8006c60 <__libc_init_array+0x40>)
 8006c32:	4c0c      	ldr	r4, [pc, #48]	; (8006c64 <__libc_init_array+0x44>)
 8006c34:	f003 fb66 	bl	800a304 <_init>
 8006c38:	1b64      	subs	r4, r4, r5
 8006c3a:	10a4      	asrs	r4, r4, #2
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	42a6      	cmp	r6, r4
 8006c40:	d105      	bne.n	8006c4e <__libc_init_array+0x2e>
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c48:	4798      	blx	r3
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	e7ee      	b.n	8006c2c <__libc_init_array+0xc>
 8006c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c52:	4798      	blx	r3
 8006c54:	3601      	adds	r6, #1
 8006c56:	e7f2      	b.n	8006c3e <__libc_init_array+0x1e>
 8006c58:	0802db58 	.word	0x0802db58
 8006c5c:	0802db58 	.word	0x0802db58
 8006c60:	0802db58 	.word	0x0802db58
 8006c64:	0802db5c 	.word	0x0802db5c

08006c68 <memcpy>:
 8006c68:	440a      	add	r2, r1
 8006c6a:	4291      	cmp	r1, r2
 8006c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c70:	d100      	bne.n	8006c74 <memcpy+0xc>
 8006c72:	4770      	bx	lr
 8006c74:	b510      	push	{r4, lr}
 8006c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7e:	4291      	cmp	r1, r2
 8006c80:	d1f9      	bne.n	8006c76 <memcpy+0xe>
 8006c82:	bd10      	pop	{r4, pc}

08006c84 <memset>:
 8006c84:	4402      	add	r2, r0
 8006c86:	4603      	mov	r3, r0
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d100      	bne.n	8006c8e <memset+0xa>
 8006c8c:	4770      	bx	lr
 8006c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c92:	e7f9      	b.n	8006c88 <memset+0x4>

08006c94 <iprintf>:
 8006c94:	b40f      	push	{r0, r1, r2, r3}
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <iprintf+0x2c>)
 8006c98:	b513      	push	{r0, r1, r4, lr}
 8006c9a:	681c      	ldr	r4, [r3, #0]
 8006c9c:	b124      	cbz	r4, 8006ca8 <iprintf+0x14>
 8006c9e:	69a3      	ldr	r3, [r4, #24]
 8006ca0:	b913      	cbnz	r3, 8006ca8 <iprintf+0x14>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f866 	bl	8006d74 <__sinit>
 8006ca8:	ab05      	add	r3, sp, #20
 8006caa:	9a04      	ldr	r2, [sp, #16]
 8006cac:	68a1      	ldr	r1, [r4, #8]
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 f983 	bl	8006fbc <_vfiprintf_r>
 8006cb6:	b002      	add	sp, #8
 8006cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cbc:	b004      	add	sp, #16
 8006cbe:	4770      	bx	lr
 8006cc0:	20000070 	.word	0x20000070

08006cc4 <std>:
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	b510      	push	{r4, lr}
 8006cc8:	4604      	mov	r4, r0
 8006cca:	e9c0 3300 	strd	r3, r3, [r0]
 8006cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cd2:	6083      	str	r3, [r0, #8]
 8006cd4:	8181      	strh	r1, [r0, #12]
 8006cd6:	6643      	str	r3, [r0, #100]	; 0x64
 8006cd8:	81c2      	strh	r2, [r0, #14]
 8006cda:	6183      	str	r3, [r0, #24]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	2208      	movs	r2, #8
 8006ce0:	305c      	adds	r0, #92	; 0x5c
 8006ce2:	f7ff ffcf 	bl	8006c84 <memset>
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <std+0x38>)
 8006ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <std+0x3c>)
 8006cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <std+0x40>)
 8006cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <std+0x44>)
 8006cf4:	6224      	str	r4, [r4, #32]
 8006cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08007565 	.word	0x08007565
 8006d00:	08007587 	.word	0x08007587
 8006d04:	080075bf 	.word	0x080075bf
 8006d08:	080075e3 	.word	0x080075e3

08006d0c <_cleanup_r>:
 8006d0c:	4901      	ldr	r1, [pc, #4]	; (8006d14 <_cleanup_r+0x8>)
 8006d0e:	f000 b8af 	b.w	8006e70 <_fwalk_reent>
 8006d12:	bf00      	nop
 8006d14:	080078bd 	.word	0x080078bd

08006d18 <__sfmoreglue>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	1e4a      	subs	r2, r1, #1
 8006d1c:	2568      	movs	r5, #104	; 0x68
 8006d1e:	4355      	muls	r5, r2
 8006d20:	460e      	mov	r6, r1
 8006d22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d26:	f000 f8c5 	bl	8006eb4 <_malloc_r>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	b140      	cbz	r0, 8006d40 <__sfmoreglue+0x28>
 8006d2e:	2100      	movs	r1, #0
 8006d30:	e9c0 1600 	strd	r1, r6, [r0]
 8006d34:	300c      	adds	r0, #12
 8006d36:	60a0      	str	r0, [r4, #8]
 8006d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d3c:	f7ff ffa2 	bl	8006c84 <memset>
 8006d40:	4620      	mov	r0, r4
 8006d42:	bd70      	pop	{r4, r5, r6, pc}

08006d44 <__sfp_lock_acquire>:
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <__sfp_lock_acquire+0x8>)
 8006d46:	f000 b8b3 	b.w	8006eb0 <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	20000e34 	.word	0x20000e34

08006d50 <__sfp_lock_release>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__sfp_lock_release+0x8>)
 8006d52:	f000 b8ae 	b.w	8006eb2 <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	20000e34 	.word	0x20000e34

08006d5c <__sinit_lock_acquire>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__sinit_lock_acquire+0x8>)
 8006d5e:	f000 b8a7 	b.w	8006eb0 <__retarget_lock_acquire_recursive>
 8006d62:	bf00      	nop
 8006d64:	20000e2f 	.word	0x20000e2f

08006d68 <__sinit_lock_release>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sinit_lock_release+0x8>)
 8006d6a:	f000 b8a2 	b.w	8006eb2 <__retarget_lock_release_recursive>
 8006d6e:	bf00      	nop
 8006d70:	20000e2f 	.word	0x20000e2f

08006d74 <__sinit>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	4604      	mov	r4, r0
 8006d78:	f7ff fff0 	bl	8006d5c <__sinit_lock_acquire>
 8006d7c:	69a3      	ldr	r3, [r4, #24]
 8006d7e:	b11b      	cbz	r3, 8006d88 <__sinit+0x14>
 8006d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d84:	f7ff bff0 	b.w	8006d68 <__sinit_lock_release>
 8006d88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d8c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d8e:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <__sinit+0x68>)
 8006d90:	4a13      	ldr	r2, [pc, #76]	; (8006de0 <__sinit+0x6c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	bf04      	itt	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	61a3      	streq	r3, [r4, #24]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 f820 	bl	8006de4 <__sfp>
 8006da4:	6060      	str	r0, [r4, #4]
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 f81c 	bl	8006de4 <__sfp>
 8006dac:	60a0      	str	r0, [r4, #8]
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f818 	bl	8006de4 <__sfp>
 8006db4:	2200      	movs	r2, #0
 8006db6:	60e0      	str	r0, [r4, #12]
 8006db8:	2104      	movs	r1, #4
 8006dba:	6860      	ldr	r0, [r4, #4]
 8006dbc:	f7ff ff82 	bl	8006cc4 <std>
 8006dc0:	68a0      	ldr	r0, [r4, #8]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	2109      	movs	r1, #9
 8006dc6:	f7ff ff7d 	bl	8006cc4 <std>
 8006dca:	68e0      	ldr	r0, [r4, #12]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	2112      	movs	r1, #18
 8006dd0:	f7ff ff78 	bl	8006cc4 <std>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	61a3      	str	r3, [r4, #24]
 8006dd8:	e7d2      	b.n	8006d80 <__sinit+0xc>
 8006dda:	bf00      	nop
 8006ddc:	0802d820 	.word	0x0802d820
 8006de0:	08006d0d 	.word	0x08006d0d

08006de4 <__sfp>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	4607      	mov	r7, r0
 8006de8:	f7ff ffac 	bl	8006d44 <__sfp_lock_acquire>
 8006dec:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <__sfp+0x84>)
 8006dee:	681e      	ldr	r6, [r3, #0]
 8006df0:	69b3      	ldr	r3, [r6, #24]
 8006df2:	b913      	cbnz	r3, 8006dfa <__sfp+0x16>
 8006df4:	4630      	mov	r0, r6
 8006df6:	f7ff ffbd 	bl	8006d74 <__sinit>
 8006dfa:	3648      	adds	r6, #72	; 0x48
 8006dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	d503      	bpl.n	8006e0c <__sfp+0x28>
 8006e04:	6833      	ldr	r3, [r6, #0]
 8006e06:	b30b      	cbz	r3, 8006e4c <__sfp+0x68>
 8006e08:	6836      	ldr	r6, [r6, #0]
 8006e0a:	e7f7      	b.n	8006dfc <__sfp+0x18>
 8006e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e10:	b9d5      	cbnz	r5, 8006e48 <__sfp+0x64>
 8006e12:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <__sfp+0x88>)
 8006e14:	60e3      	str	r3, [r4, #12]
 8006e16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e1a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e1c:	f000 f847 	bl	8006eae <__retarget_lock_init_recursive>
 8006e20:	f7ff ff96 	bl	8006d50 <__sfp_lock_release>
 8006e24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e2c:	6025      	str	r5, [r4, #0]
 8006e2e:	61a5      	str	r5, [r4, #24]
 8006e30:	2208      	movs	r2, #8
 8006e32:	4629      	mov	r1, r5
 8006e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e38:	f7ff ff24 	bl	8006c84 <memset>
 8006e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e44:	4620      	mov	r0, r4
 8006e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e48:	3468      	adds	r4, #104	; 0x68
 8006e4a:	e7d9      	b.n	8006e00 <__sfp+0x1c>
 8006e4c:	2104      	movs	r1, #4
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7ff ff62 	bl	8006d18 <__sfmoreglue>
 8006e54:	4604      	mov	r4, r0
 8006e56:	6030      	str	r0, [r6, #0]
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1d5      	bne.n	8006e08 <__sfp+0x24>
 8006e5c:	f7ff ff78 	bl	8006d50 <__sfp_lock_release>
 8006e60:	230c      	movs	r3, #12
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	e7ee      	b.n	8006e44 <__sfp+0x60>
 8006e66:	bf00      	nop
 8006e68:	0802d820 	.word	0x0802d820
 8006e6c:	ffff0001 	.word	0xffff0001

08006e70 <_fwalk_reent>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4606      	mov	r6, r0
 8006e76:	4688      	mov	r8, r1
 8006e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e7c:	2700      	movs	r7, #0
 8006e7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e82:	f1b9 0901 	subs.w	r9, r9, #1
 8006e86:	d505      	bpl.n	8006e94 <_fwalk_reent+0x24>
 8006e88:	6824      	ldr	r4, [r4, #0]
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d1f7      	bne.n	8006e7e <_fwalk_reent+0xe>
 8006e8e:	4638      	mov	r0, r7
 8006e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e94:	89ab      	ldrh	r3, [r5, #12]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d907      	bls.n	8006eaa <_fwalk_reent+0x3a>
 8006e9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	d003      	beq.n	8006eaa <_fwalk_reent+0x3a>
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	47c0      	blx	r8
 8006ea8:	4307      	orrs	r7, r0
 8006eaa:	3568      	adds	r5, #104	; 0x68
 8006eac:	e7e9      	b.n	8006e82 <_fwalk_reent+0x12>

08006eae <__retarget_lock_init_recursive>:
 8006eae:	4770      	bx	lr

08006eb0 <__retarget_lock_acquire_recursive>:
 8006eb0:	4770      	bx	lr

08006eb2 <__retarget_lock_release_recursive>:
 8006eb2:	4770      	bx	lr

08006eb4 <_malloc_r>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	1ccd      	adds	r5, r1, #3
 8006eb8:	f025 0503 	bic.w	r5, r5, #3
 8006ebc:	3508      	adds	r5, #8
 8006ebe:	2d0c      	cmp	r5, #12
 8006ec0:	bf38      	it	cc
 8006ec2:	250c      	movcc	r5, #12
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	db01      	blt.n	8006ece <_malloc_r+0x1a>
 8006eca:	42a9      	cmp	r1, r5
 8006ecc:	d903      	bls.n	8006ed6 <_malloc_r+0x22>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed6:	f000 fda3 	bl	8007a20 <__malloc_lock>
 8006eda:	4921      	ldr	r1, [pc, #132]	; (8006f60 <_malloc_r+0xac>)
 8006edc:	680a      	ldr	r2, [r1, #0]
 8006ede:	4614      	mov	r4, r2
 8006ee0:	b99c      	cbnz	r4, 8006f0a <_malloc_r+0x56>
 8006ee2:	4f20      	ldr	r7, [pc, #128]	; (8006f64 <_malloc_r+0xb0>)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	b923      	cbnz	r3, 8006ef2 <_malloc_r+0x3e>
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 fb2a 	bl	8007544 <_sbrk_r>
 8006ef0:	6038      	str	r0, [r7, #0]
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 fb25 	bl	8007544 <_sbrk_r>
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	d123      	bne.n	8006f46 <_malloc_r+0x92>
 8006efe:	230c      	movs	r3, #12
 8006f00:	6033      	str	r3, [r6, #0]
 8006f02:	4630      	mov	r0, r6
 8006f04:	f000 fd92 	bl	8007a2c <__malloc_unlock>
 8006f08:	e7e3      	b.n	8006ed2 <_malloc_r+0x1e>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	1b5b      	subs	r3, r3, r5
 8006f0e:	d417      	bmi.n	8006f40 <_malloc_r+0x8c>
 8006f10:	2b0b      	cmp	r3, #11
 8006f12:	d903      	bls.n	8006f1c <_malloc_r+0x68>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	441c      	add	r4, r3
 8006f18:	6025      	str	r5, [r4, #0]
 8006f1a:	e004      	b.n	8006f26 <_malloc_r+0x72>
 8006f1c:	6863      	ldr	r3, [r4, #4]
 8006f1e:	42a2      	cmp	r2, r4
 8006f20:	bf0c      	ite	eq
 8006f22:	600b      	streq	r3, [r1, #0]
 8006f24:	6053      	strne	r3, [r2, #4]
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 fd80 	bl	8007a2c <__malloc_unlock>
 8006f2c:	f104 000b 	add.w	r0, r4, #11
 8006f30:	1d23      	adds	r3, r4, #4
 8006f32:	f020 0007 	bic.w	r0, r0, #7
 8006f36:	1ac2      	subs	r2, r0, r3
 8006f38:	d0cc      	beq.n	8006ed4 <_malloc_r+0x20>
 8006f3a:	1a1b      	subs	r3, r3, r0
 8006f3c:	50a3      	str	r3, [r4, r2]
 8006f3e:	e7c9      	b.n	8006ed4 <_malloc_r+0x20>
 8006f40:	4622      	mov	r2, r4
 8006f42:	6864      	ldr	r4, [r4, #4]
 8006f44:	e7cc      	b.n	8006ee0 <_malloc_r+0x2c>
 8006f46:	1cc4      	adds	r4, r0, #3
 8006f48:	f024 0403 	bic.w	r4, r4, #3
 8006f4c:	42a0      	cmp	r0, r4
 8006f4e:	d0e3      	beq.n	8006f18 <_malloc_r+0x64>
 8006f50:	1a21      	subs	r1, r4, r0
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 faf6 	bl	8007544 <_sbrk_r>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d1dd      	bne.n	8006f18 <_malloc_r+0x64>
 8006f5c:	e7cf      	b.n	8006efe <_malloc_r+0x4a>
 8006f5e:	bf00      	nop
 8006f60:	20000bb8 	.word	0x20000bb8
 8006f64:	20000bbc 	.word	0x20000bbc

08006f68 <__sfputc_r>:
 8006f68:	6893      	ldr	r3, [r2, #8]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	b410      	push	{r4}
 8006f70:	6093      	str	r3, [r2, #8]
 8006f72:	da08      	bge.n	8006f86 <__sfputc_r+0x1e>
 8006f74:	6994      	ldr	r4, [r2, #24]
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	db01      	blt.n	8006f7e <__sfputc_r+0x16>
 8006f7a:	290a      	cmp	r1, #10
 8006f7c:	d103      	bne.n	8006f86 <__sfputc_r+0x1e>
 8006f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f82:	f000 bb33 	b.w	80075ec <__swbuf_r>
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	1c58      	adds	r0, r3, #1
 8006f8a:	6010      	str	r0, [r2, #0]
 8006f8c:	7019      	strb	r1, [r3, #0]
 8006f8e:	4608      	mov	r0, r1
 8006f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <__sfputs_r>:
 8006f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f98:	4606      	mov	r6, r0
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	18d5      	adds	r5, r2, r3
 8006fa0:	42ac      	cmp	r4, r5
 8006fa2:	d101      	bne.n	8006fa8 <__sfputs_r+0x12>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e007      	b.n	8006fb8 <__sfputs_r+0x22>
 8006fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fac:	463a      	mov	r2, r7
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff ffda 	bl	8006f68 <__sfputc_r>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d1f3      	bne.n	8006fa0 <__sfputs_r+0xa>
 8006fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fbc <_vfiprintf_r>:
 8006fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc0:	460d      	mov	r5, r1
 8006fc2:	b09d      	sub	sp, #116	; 0x74
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	4698      	mov	r8, r3
 8006fc8:	4606      	mov	r6, r0
 8006fca:	b118      	cbz	r0, 8006fd4 <_vfiprintf_r+0x18>
 8006fcc:	6983      	ldr	r3, [r0, #24]
 8006fce:	b90b      	cbnz	r3, 8006fd4 <_vfiprintf_r+0x18>
 8006fd0:	f7ff fed0 	bl	8006d74 <__sinit>
 8006fd4:	4b89      	ldr	r3, [pc, #548]	; (80071fc <_vfiprintf_r+0x240>)
 8006fd6:	429d      	cmp	r5, r3
 8006fd8:	d11b      	bne.n	8007012 <_vfiprintf_r+0x56>
 8006fda:	6875      	ldr	r5, [r6, #4]
 8006fdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	d405      	bmi.n	8006fee <_vfiprintf_r+0x32>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	059a      	lsls	r2, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_vfiprintf_r+0x32>
 8006fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fea:	f7ff ff61 	bl	8006eb0 <__retarget_lock_acquire_recursive>
 8006fee:	89ab      	ldrh	r3, [r5, #12]
 8006ff0:	071b      	lsls	r3, r3, #28
 8006ff2:	d501      	bpl.n	8006ff8 <_vfiprintf_r+0x3c>
 8006ff4:	692b      	ldr	r3, [r5, #16]
 8006ff6:	b9eb      	cbnz	r3, 8007034 <_vfiprintf_r+0x78>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 fb5a 	bl	80076b4 <__swsetup_r>
 8007000:	b1c0      	cbz	r0, 8007034 <_vfiprintf_r+0x78>
 8007002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007004:	07dc      	lsls	r4, r3, #31
 8007006:	d50e      	bpl.n	8007026 <_vfiprintf_r+0x6a>
 8007008:	f04f 30ff 	mov.w	r0, #4294967295
 800700c:	b01d      	add	sp, #116	; 0x74
 800700e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007012:	4b7b      	ldr	r3, [pc, #492]	; (8007200 <_vfiprintf_r+0x244>)
 8007014:	429d      	cmp	r5, r3
 8007016:	d101      	bne.n	800701c <_vfiprintf_r+0x60>
 8007018:	68b5      	ldr	r5, [r6, #8]
 800701a:	e7df      	b.n	8006fdc <_vfiprintf_r+0x20>
 800701c:	4b79      	ldr	r3, [pc, #484]	; (8007204 <_vfiprintf_r+0x248>)
 800701e:	429d      	cmp	r5, r3
 8007020:	bf08      	it	eq
 8007022:	68f5      	ldreq	r5, [r6, #12]
 8007024:	e7da      	b.n	8006fdc <_vfiprintf_r+0x20>
 8007026:	89ab      	ldrh	r3, [r5, #12]
 8007028:	0598      	lsls	r0, r3, #22
 800702a:	d4ed      	bmi.n	8007008 <_vfiprintf_r+0x4c>
 800702c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800702e:	f7ff ff40 	bl	8006eb2 <__retarget_lock_release_recursive>
 8007032:	e7e9      	b.n	8007008 <_vfiprintf_r+0x4c>
 8007034:	2300      	movs	r3, #0
 8007036:	9309      	str	r3, [sp, #36]	; 0x24
 8007038:	2320      	movs	r3, #32
 800703a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800703e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007042:	2330      	movs	r3, #48	; 0x30
 8007044:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007208 <_vfiprintf_r+0x24c>
 8007048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800704c:	f04f 0901 	mov.w	r9, #1
 8007050:	4623      	mov	r3, r4
 8007052:	469a      	mov	sl, r3
 8007054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007058:	b10a      	cbz	r2, 800705e <_vfiprintf_r+0xa2>
 800705a:	2a25      	cmp	r2, #37	; 0x25
 800705c:	d1f9      	bne.n	8007052 <_vfiprintf_r+0x96>
 800705e:	ebba 0b04 	subs.w	fp, sl, r4
 8007062:	d00b      	beq.n	800707c <_vfiprintf_r+0xc0>
 8007064:	465b      	mov	r3, fp
 8007066:	4622      	mov	r2, r4
 8007068:	4629      	mov	r1, r5
 800706a:	4630      	mov	r0, r6
 800706c:	f7ff ff93 	bl	8006f96 <__sfputs_r>
 8007070:	3001      	adds	r0, #1
 8007072:	f000 80aa 	beq.w	80071ca <_vfiprintf_r+0x20e>
 8007076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007078:	445a      	add	r2, fp
 800707a:	9209      	str	r2, [sp, #36]	; 0x24
 800707c:	f89a 3000 	ldrb.w	r3, [sl]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80a2 	beq.w	80071ca <_vfiprintf_r+0x20e>
 8007086:	2300      	movs	r3, #0
 8007088:	f04f 32ff 	mov.w	r2, #4294967295
 800708c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007090:	f10a 0a01 	add.w	sl, sl, #1
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800709c:	931a      	str	r3, [sp, #104]	; 0x68
 800709e:	4654      	mov	r4, sl
 80070a0:	2205      	movs	r2, #5
 80070a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a6:	4858      	ldr	r0, [pc, #352]	; (8007208 <_vfiprintf_r+0x24c>)
 80070a8:	f7f9 f892 	bl	80001d0 <memchr>
 80070ac:	9a04      	ldr	r2, [sp, #16]
 80070ae:	b9d8      	cbnz	r0, 80070e8 <_vfiprintf_r+0x12c>
 80070b0:	06d1      	lsls	r1, r2, #27
 80070b2:	bf44      	itt	mi
 80070b4:	2320      	movmi	r3, #32
 80070b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ba:	0713      	lsls	r3, r2, #28
 80070bc:	bf44      	itt	mi
 80070be:	232b      	movmi	r3, #43	; 0x2b
 80070c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c4:	f89a 3000 	ldrb.w	r3, [sl]
 80070c8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ca:	d015      	beq.n	80070f8 <_vfiprintf_r+0x13c>
 80070cc:	9a07      	ldr	r2, [sp, #28]
 80070ce:	4654      	mov	r4, sl
 80070d0:	2000      	movs	r0, #0
 80070d2:	f04f 0c0a 	mov.w	ip, #10
 80070d6:	4621      	mov	r1, r4
 80070d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070dc:	3b30      	subs	r3, #48	; 0x30
 80070de:	2b09      	cmp	r3, #9
 80070e0:	d94e      	bls.n	8007180 <_vfiprintf_r+0x1c4>
 80070e2:	b1b0      	cbz	r0, 8007112 <_vfiprintf_r+0x156>
 80070e4:	9207      	str	r2, [sp, #28]
 80070e6:	e014      	b.n	8007112 <_vfiprintf_r+0x156>
 80070e8:	eba0 0308 	sub.w	r3, r0, r8
 80070ec:	fa09 f303 	lsl.w	r3, r9, r3
 80070f0:	4313      	orrs	r3, r2
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	46a2      	mov	sl, r4
 80070f6:	e7d2      	b.n	800709e <_vfiprintf_r+0xe2>
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	1d19      	adds	r1, r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	9103      	str	r1, [sp, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	bfbb      	ittet	lt
 8007104:	425b      	neglt	r3, r3
 8007106:	f042 0202 	orrlt.w	r2, r2, #2
 800710a:	9307      	strge	r3, [sp, #28]
 800710c:	9307      	strlt	r3, [sp, #28]
 800710e:	bfb8      	it	lt
 8007110:	9204      	strlt	r2, [sp, #16]
 8007112:	7823      	ldrb	r3, [r4, #0]
 8007114:	2b2e      	cmp	r3, #46	; 0x2e
 8007116:	d10c      	bne.n	8007132 <_vfiprintf_r+0x176>
 8007118:	7863      	ldrb	r3, [r4, #1]
 800711a:	2b2a      	cmp	r3, #42	; 0x2a
 800711c:	d135      	bne.n	800718a <_vfiprintf_r+0x1ce>
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	1d1a      	adds	r2, r3, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	9203      	str	r2, [sp, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	bfb8      	it	lt
 800712a:	f04f 33ff 	movlt.w	r3, #4294967295
 800712e:	3402      	adds	r4, #2
 8007130:	9305      	str	r3, [sp, #20]
 8007132:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007218 <_vfiprintf_r+0x25c>
 8007136:	7821      	ldrb	r1, [r4, #0]
 8007138:	2203      	movs	r2, #3
 800713a:	4650      	mov	r0, sl
 800713c:	f7f9 f848 	bl	80001d0 <memchr>
 8007140:	b140      	cbz	r0, 8007154 <_vfiprintf_r+0x198>
 8007142:	2340      	movs	r3, #64	; 0x40
 8007144:	eba0 000a 	sub.w	r0, r0, sl
 8007148:	fa03 f000 	lsl.w	r0, r3, r0
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	4303      	orrs	r3, r0
 8007150:	3401      	adds	r4, #1
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007158:	482c      	ldr	r0, [pc, #176]	; (800720c <_vfiprintf_r+0x250>)
 800715a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800715e:	2206      	movs	r2, #6
 8007160:	f7f9 f836 	bl	80001d0 <memchr>
 8007164:	2800      	cmp	r0, #0
 8007166:	d03f      	beq.n	80071e8 <_vfiprintf_r+0x22c>
 8007168:	4b29      	ldr	r3, [pc, #164]	; (8007210 <_vfiprintf_r+0x254>)
 800716a:	bb1b      	cbnz	r3, 80071b4 <_vfiprintf_r+0x1f8>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	3307      	adds	r3, #7
 8007170:	f023 0307 	bic.w	r3, r3, #7
 8007174:	3308      	adds	r3, #8
 8007176:	9303      	str	r3, [sp, #12]
 8007178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717a:	443b      	add	r3, r7
 800717c:	9309      	str	r3, [sp, #36]	; 0x24
 800717e:	e767      	b.n	8007050 <_vfiprintf_r+0x94>
 8007180:	fb0c 3202 	mla	r2, ip, r2, r3
 8007184:	460c      	mov	r4, r1
 8007186:	2001      	movs	r0, #1
 8007188:	e7a5      	b.n	80070d6 <_vfiprintf_r+0x11a>
 800718a:	2300      	movs	r3, #0
 800718c:	3401      	adds	r4, #1
 800718e:	9305      	str	r3, [sp, #20]
 8007190:	4619      	mov	r1, r3
 8007192:	f04f 0c0a 	mov.w	ip, #10
 8007196:	4620      	mov	r0, r4
 8007198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800719c:	3a30      	subs	r2, #48	; 0x30
 800719e:	2a09      	cmp	r2, #9
 80071a0:	d903      	bls.n	80071aa <_vfiprintf_r+0x1ee>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0c5      	beq.n	8007132 <_vfiprintf_r+0x176>
 80071a6:	9105      	str	r1, [sp, #20]
 80071a8:	e7c3      	b.n	8007132 <_vfiprintf_r+0x176>
 80071aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80071ae:	4604      	mov	r4, r0
 80071b0:	2301      	movs	r3, #1
 80071b2:	e7f0      	b.n	8007196 <_vfiprintf_r+0x1da>
 80071b4:	ab03      	add	r3, sp, #12
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	462a      	mov	r2, r5
 80071ba:	4b16      	ldr	r3, [pc, #88]	; (8007214 <_vfiprintf_r+0x258>)
 80071bc:	a904      	add	r1, sp, #16
 80071be:	4630      	mov	r0, r6
 80071c0:	f3af 8000 	nop.w
 80071c4:	4607      	mov	r7, r0
 80071c6:	1c78      	adds	r0, r7, #1
 80071c8:	d1d6      	bne.n	8007178 <_vfiprintf_r+0x1bc>
 80071ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071cc:	07d9      	lsls	r1, r3, #31
 80071ce:	d405      	bmi.n	80071dc <_vfiprintf_r+0x220>
 80071d0:	89ab      	ldrh	r3, [r5, #12]
 80071d2:	059a      	lsls	r2, r3, #22
 80071d4:	d402      	bmi.n	80071dc <_vfiprintf_r+0x220>
 80071d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071d8:	f7ff fe6b 	bl	8006eb2 <__retarget_lock_release_recursive>
 80071dc:	89ab      	ldrh	r3, [r5, #12]
 80071de:	065b      	lsls	r3, r3, #25
 80071e0:	f53f af12 	bmi.w	8007008 <_vfiprintf_r+0x4c>
 80071e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071e6:	e711      	b.n	800700c <_vfiprintf_r+0x50>
 80071e8:	ab03      	add	r3, sp, #12
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	462a      	mov	r2, r5
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <_vfiprintf_r+0x258>)
 80071f0:	a904      	add	r1, sp, #16
 80071f2:	4630      	mov	r0, r6
 80071f4:	f000 f880 	bl	80072f8 <_printf_i>
 80071f8:	e7e4      	b.n	80071c4 <_vfiprintf_r+0x208>
 80071fa:	bf00      	nop
 80071fc:	0802d844 	.word	0x0802d844
 8007200:	0802d864 	.word	0x0802d864
 8007204:	0802d824 	.word	0x0802d824
 8007208:	0802d884 	.word	0x0802d884
 800720c:	0802d88e 	.word	0x0802d88e
 8007210:	00000000 	.word	0x00000000
 8007214:	08006f97 	.word	0x08006f97
 8007218:	0802d88a 	.word	0x0802d88a

0800721c <_printf_common>:
 800721c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007220:	4616      	mov	r6, r2
 8007222:	4699      	mov	r9, r3
 8007224:	688a      	ldr	r2, [r1, #8]
 8007226:	690b      	ldr	r3, [r1, #16]
 8007228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800722c:	4293      	cmp	r3, r2
 800722e:	bfb8      	it	lt
 8007230:	4613      	movlt	r3, r2
 8007232:	6033      	str	r3, [r6, #0]
 8007234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007238:	4607      	mov	r7, r0
 800723a:	460c      	mov	r4, r1
 800723c:	b10a      	cbz	r2, 8007242 <_printf_common+0x26>
 800723e:	3301      	adds	r3, #1
 8007240:	6033      	str	r3, [r6, #0]
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	0699      	lsls	r1, r3, #26
 8007246:	bf42      	ittt	mi
 8007248:	6833      	ldrmi	r3, [r6, #0]
 800724a:	3302      	addmi	r3, #2
 800724c:	6033      	strmi	r3, [r6, #0]
 800724e:	6825      	ldr	r5, [r4, #0]
 8007250:	f015 0506 	ands.w	r5, r5, #6
 8007254:	d106      	bne.n	8007264 <_printf_common+0x48>
 8007256:	f104 0a19 	add.w	sl, r4, #25
 800725a:	68e3      	ldr	r3, [r4, #12]
 800725c:	6832      	ldr	r2, [r6, #0]
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	42ab      	cmp	r3, r5
 8007262:	dc26      	bgt.n	80072b2 <_printf_common+0x96>
 8007264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007268:	1e13      	subs	r3, r2, #0
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	bf18      	it	ne
 800726e:	2301      	movne	r3, #1
 8007270:	0692      	lsls	r2, r2, #26
 8007272:	d42b      	bmi.n	80072cc <_printf_common+0xb0>
 8007274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007278:	4649      	mov	r1, r9
 800727a:	4638      	mov	r0, r7
 800727c:	47c0      	blx	r8
 800727e:	3001      	adds	r0, #1
 8007280:	d01e      	beq.n	80072c0 <_printf_common+0xa4>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	68e5      	ldr	r5, [r4, #12]
 8007286:	6832      	ldr	r2, [r6, #0]
 8007288:	f003 0306 	and.w	r3, r3, #6
 800728c:	2b04      	cmp	r3, #4
 800728e:	bf08      	it	eq
 8007290:	1aad      	subeq	r5, r5, r2
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	6922      	ldr	r2, [r4, #16]
 8007296:	bf0c      	ite	eq
 8007298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800729c:	2500      	movne	r5, #0
 800729e:	4293      	cmp	r3, r2
 80072a0:	bfc4      	itt	gt
 80072a2:	1a9b      	subgt	r3, r3, r2
 80072a4:	18ed      	addgt	r5, r5, r3
 80072a6:	2600      	movs	r6, #0
 80072a8:	341a      	adds	r4, #26
 80072aa:	42b5      	cmp	r5, r6
 80072ac:	d11a      	bne.n	80072e4 <_printf_common+0xc8>
 80072ae:	2000      	movs	r0, #0
 80072b0:	e008      	b.n	80072c4 <_printf_common+0xa8>
 80072b2:	2301      	movs	r3, #1
 80072b4:	4652      	mov	r2, sl
 80072b6:	4649      	mov	r1, r9
 80072b8:	4638      	mov	r0, r7
 80072ba:	47c0      	blx	r8
 80072bc:	3001      	adds	r0, #1
 80072be:	d103      	bne.n	80072c8 <_printf_common+0xac>
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c8:	3501      	adds	r5, #1
 80072ca:	e7c6      	b.n	800725a <_printf_common+0x3e>
 80072cc:	18e1      	adds	r1, r4, r3
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	2030      	movs	r0, #48	; 0x30
 80072d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072d6:	4422      	add	r2, r4
 80072d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072e0:	3302      	adds	r3, #2
 80072e2:	e7c7      	b.n	8007274 <_printf_common+0x58>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4622      	mov	r2, r4
 80072e8:	4649      	mov	r1, r9
 80072ea:	4638      	mov	r0, r7
 80072ec:	47c0      	blx	r8
 80072ee:	3001      	adds	r0, #1
 80072f0:	d0e6      	beq.n	80072c0 <_printf_common+0xa4>
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7d9      	b.n	80072aa <_printf_common+0x8e>
	...

080072f8 <_printf_i>:
 80072f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	460c      	mov	r4, r1
 80072fe:	4691      	mov	r9, r2
 8007300:	7e27      	ldrb	r7, [r4, #24]
 8007302:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007304:	2f78      	cmp	r7, #120	; 0x78
 8007306:	4680      	mov	r8, r0
 8007308:	469a      	mov	sl, r3
 800730a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800730e:	d807      	bhi.n	8007320 <_printf_i+0x28>
 8007310:	2f62      	cmp	r7, #98	; 0x62
 8007312:	d80a      	bhi.n	800732a <_printf_i+0x32>
 8007314:	2f00      	cmp	r7, #0
 8007316:	f000 80d8 	beq.w	80074ca <_printf_i+0x1d2>
 800731a:	2f58      	cmp	r7, #88	; 0x58
 800731c:	f000 80a3 	beq.w	8007466 <_printf_i+0x16e>
 8007320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007328:	e03a      	b.n	80073a0 <_printf_i+0xa8>
 800732a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800732e:	2b15      	cmp	r3, #21
 8007330:	d8f6      	bhi.n	8007320 <_printf_i+0x28>
 8007332:	a001      	add	r0, pc, #4	; (adr r0, 8007338 <_printf_i+0x40>)
 8007334:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007338:	08007391 	.word	0x08007391
 800733c:	080073a5 	.word	0x080073a5
 8007340:	08007321 	.word	0x08007321
 8007344:	08007321 	.word	0x08007321
 8007348:	08007321 	.word	0x08007321
 800734c:	08007321 	.word	0x08007321
 8007350:	080073a5 	.word	0x080073a5
 8007354:	08007321 	.word	0x08007321
 8007358:	08007321 	.word	0x08007321
 800735c:	08007321 	.word	0x08007321
 8007360:	08007321 	.word	0x08007321
 8007364:	080074b1 	.word	0x080074b1
 8007368:	080073d5 	.word	0x080073d5
 800736c:	08007493 	.word	0x08007493
 8007370:	08007321 	.word	0x08007321
 8007374:	08007321 	.word	0x08007321
 8007378:	080074d3 	.word	0x080074d3
 800737c:	08007321 	.word	0x08007321
 8007380:	080073d5 	.word	0x080073d5
 8007384:	08007321 	.word	0x08007321
 8007388:	08007321 	.word	0x08007321
 800738c:	0800749b 	.word	0x0800749b
 8007390:	680b      	ldr	r3, [r1, #0]
 8007392:	1d1a      	adds	r2, r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	600a      	str	r2, [r1, #0]
 8007398:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800739c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0a3      	b.n	80074ec <_printf_i+0x1f4>
 80073a4:	6825      	ldr	r5, [r4, #0]
 80073a6:	6808      	ldr	r0, [r1, #0]
 80073a8:	062e      	lsls	r6, r5, #24
 80073aa:	f100 0304 	add.w	r3, r0, #4
 80073ae:	d50a      	bpl.n	80073c6 <_printf_i+0xce>
 80073b0:	6805      	ldr	r5, [r0, #0]
 80073b2:	600b      	str	r3, [r1, #0]
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	da03      	bge.n	80073c0 <_printf_i+0xc8>
 80073b8:	232d      	movs	r3, #45	; 0x2d
 80073ba:	426d      	negs	r5, r5
 80073bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c0:	485e      	ldr	r0, [pc, #376]	; (800753c <_printf_i+0x244>)
 80073c2:	230a      	movs	r3, #10
 80073c4:	e019      	b.n	80073fa <_printf_i+0x102>
 80073c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073ca:	6805      	ldr	r5, [r0, #0]
 80073cc:	600b      	str	r3, [r1, #0]
 80073ce:	bf18      	it	ne
 80073d0:	b22d      	sxthne	r5, r5
 80073d2:	e7ef      	b.n	80073b4 <_printf_i+0xbc>
 80073d4:	680b      	ldr	r3, [r1, #0]
 80073d6:	6825      	ldr	r5, [r4, #0]
 80073d8:	1d18      	adds	r0, r3, #4
 80073da:	6008      	str	r0, [r1, #0]
 80073dc:	0628      	lsls	r0, r5, #24
 80073de:	d501      	bpl.n	80073e4 <_printf_i+0xec>
 80073e0:	681d      	ldr	r5, [r3, #0]
 80073e2:	e002      	b.n	80073ea <_printf_i+0xf2>
 80073e4:	0669      	lsls	r1, r5, #25
 80073e6:	d5fb      	bpl.n	80073e0 <_printf_i+0xe8>
 80073e8:	881d      	ldrh	r5, [r3, #0]
 80073ea:	4854      	ldr	r0, [pc, #336]	; (800753c <_printf_i+0x244>)
 80073ec:	2f6f      	cmp	r7, #111	; 0x6f
 80073ee:	bf0c      	ite	eq
 80073f0:	2308      	moveq	r3, #8
 80073f2:	230a      	movne	r3, #10
 80073f4:	2100      	movs	r1, #0
 80073f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073fa:	6866      	ldr	r6, [r4, #4]
 80073fc:	60a6      	str	r6, [r4, #8]
 80073fe:	2e00      	cmp	r6, #0
 8007400:	bfa2      	ittt	ge
 8007402:	6821      	ldrge	r1, [r4, #0]
 8007404:	f021 0104 	bicge.w	r1, r1, #4
 8007408:	6021      	strge	r1, [r4, #0]
 800740a:	b90d      	cbnz	r5, 8007410 <_printf_i+0x118>
 800740c:	2e00      	cmp	r6, #0
 800740e:	d04d      	beq.n	80074ac <_printf_i+0x1b4>
 8007410:	4616      	mov	r6, r2
 8007412:	fbb5 f1f3 	udiv	r1, r5, r3
 8007416:	fb03 5711 	mls	r7, r3, r1, r5
 800741a:	5dc7      	ldrb	r7, [r0, r7]
 800741c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007420:	462f      	mov	r7, r5
 8007422:	42bb      	cmp	r3, r7
 8007424:	460d      	mov	r5, r1
 8007426:	d9f4      	bls.n	8007412 <_printf_i+0x11a>
 8007428:	2b08      	cmp	r3, #8
 800742a:	d10b      	bne.n	8007444 <_printf_i+0x14c>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07df      	lsls	r7, r3, #31
 8007430:	d508      	bpl.n	8007444 <_printf_i+0x14c>
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	6861      	ldr	r1, [r4, #4]
 8007436:	4299      	cmp	r1, r3
 8007438:	bfde      	ittt	le
 800743a:	2330      	movle	r3, #48	; 0x30
 800743c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007440:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007444:	1b92      	subs	r2, r2, r6
 8007446:	6122      	str	r2, [r4, #16]
 8007448:	f8cd a000 	str.w	sl, [sp]
 800744c:	464b      	mov	r3, r9
 800744e:	aa03      	add	r2, sp, #12
 8007450:	4621      	mov	r1, r4
 8007452:	4640      	mov	r0, r8
 8007454:	f7ff fee2 	bl	800721c <_printf_common>
 8007458:	3001      	adds	r0, #1
 800745a:	d14c      	bne.n	80074f6 <_printf_i+0x1fe>
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	b004      	add	sp, #16
 8007462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007466:	4835      	ldr	r0, [pc, #212]	; (800753c <_printf_i+0x244>)
 8007468:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	680e      	ldr	r6, [r1, #0]
 8007470:	061f      	lsls	r7, r3, #24
 8007472:	f856 5b04 	ldr.w	r5, [r6], #4
 8007476:	600e      	str	r6, [r1, #0]
 8007478:	d514      	bpl.n	80074a4 <_printf_i+0x1ac>
 800747a:	07d9      	lsls	r1, r3, #31
 800747c:	bf44      	itt	mi
 800747e:	f043 0320 	orrmi.w	r3, r3, #32
 8007482:	6023      	strmi	r3, [r4, #0]
 8007484:	b91d      	cbnz	r5, 800748e <_printf_i+0x196>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	f023 0320 	bic.w	r3, r3, #32
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	2310      	movs	r3, #16
 8007490:	e7b0      	b.n	80073f4 <_printf_i+0xfc>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	f043 0320 	orr.w	r3, r3, #32
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	2378      	movs	r3, #120	; 0x78
 800749c:	4828      	ldr	r0, [pc, #160]	; (8007540 <_printf_i+0x248>)
 800749e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074a2:	e7e3      	b.n	800746c <_printf_i+0x174>
 80074a4:	065e      	lsls	r6, r3, #25
 80074a6:	bf48      	it	mi
 80074a8:	b2ad      	uxthmi	r5, r5
 80074aa:	e7e6      	b.n	800747a <_printf_i+0x182>
 80074ac:	4616      	mov	r6, r2
 80074ae:	e7bb      	b.n	8007428 <_printf_i+0x130>
 80074b0:	680b      	ldr	r3, [r1, #0]
 80074b2:	6826      	ldr	r6, [r4, #0]
 80074b4:	6960      	ldr	r0, [r4, #20]
 80074b6:	1d1d      	adds	r5, r3, #4
 80074b8:	600d      	str	r5, [r1, #0]
 80074ba:	0635      	lsls	r5, r6, #24
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	d501      	bpl.n	80074c4 <_printf_i+0x1cc>
 80074c0:	6018      	str	r0, [r3, #0]
 80074c2:	e002      	b.n	80074ca <_printf_i+0x1d2>
 80074c4:	0671      	lsls	r1, r6, #25
 80074c6:	d5fb      	bpl.n	80074c0 <_printf_i+0x1c8>
 80074c8:	8018      	strh	r0, [r3, #0]
 80074ca:	2300      	movs	r3, #0
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	4616      	mov	r6, r2
 80074d0:	e7ba      	b.n	8007448 <_printf_i+0x150>
 80074d2:	680b      	ldr	r3, [r1, #0]
 80074d4:	1d1a      	adds	r2, r3, #4
 80074d6:	600a      	str	r2, [r1, #0]
 80074d8:	681e      	ldr	r6, [r3, #0]
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	2100      	movs	r1, #0
 80074de:	4630      	mov	r0, r6
 80074e0:	f7f8 fe76 	bl	80001d0 <memchr>
 80074e4:	b108      	cbz	r0, 80074ea <_printf_i+0x1f2>
 80074e6:	1b80      	subs	r0, r0, r6
 80074e8:	6060      	str	r0, [r4, #4]
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	2300      	movs	r3, #0
 80074f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f4:	e7a8      	b.n	8007448 <_printf_i+0x150>
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	47d0      	blx	sl
 8007500:	3001      	adds	r0, #1
 8007502:	d0ab      	beq.n	800745c <_printf_i+0x164>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	079b      	lsls	r3, r3, #30
 8007508:	d413      	bmi.n	8007532 <_printf_i+0x23a>
 800750a:	68e0      	ldr	r0, [r4, #12]
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	4298      	cmp	r0, r3
 8007510:	bfb8      	it	lt
 8007512:	4618      	movlt	r0, r3
 8007514:	e7a4      	b.n	8007460 <_printf_i+0x168>
 8007516:	2301      	movs	r3, #1
 8007518:	4632      	mov	r2, r6
 800751a:	4649      	mov	r1, r9
 800751c:	4640      	mov	r0, r8
 800751e:	47d0      	blx	sl
 8007520:	3001      	adds	r0, #1
 8007522:	d09b      	beq.n	800745c <_printf_i+0x164>
 8007524:	3501      	adds	r5, #1
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	9903      	ldr	r1, [sp, #12]
 800752a:	1a5b      	subs	r3, r3, r1
 800752c:	42ab      	cmp	r3, r5
 800752e:	dcf2      	bgt.n	8007516 <_printf_i+0x21e>
 8007530:	e7eb      	b.n	800750a <_printf_i+0x212>
 8007532:	2500      	movs	r5, #0
 8007534:	f104 0619 	add.w	r6, r4, #25
 8007538:	e7f5      	b.n	8007526 <_printf_i+0x22e>
 800753a:	bf00      	nop
 800753c:	0802d895 	.word	0x0802d895
 8007540:	0802d8a6 	.word	0x0802d8a6

08007544 <_sbrk_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	; (8007560 <_sbrk_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7fb fa2e 	bl	80029b0 <_sbrk>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_sbrk_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_sbrk_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20000e38 	.word	0x20000e38

08007564 <__sread>:
 8007564:	b510      	push	{r4, lr}
 8007566:	460c      	mov	r4, r1
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	f000 fab4 	bl	8007ad8 <_read_r>
 8007570:	2800      	cmp	r0, #0
 8007572:	bfab      	itete	ge
 8007574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007576:	89a3      	ldrhlt	r3, [r4, #12]
 8007578:	181b      	addge	r3, r3, r0
 800757a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800757e:	bfac      	ite	ge
 8007580:	6563      	strge	r3, [r4, #84]	; 0x54
 8007582:	81a3      	strhlt	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__swrite>:
 8007586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	461f      	mov	r7, r3
 800758c:	898b      	ldrh	r3, [r1, #12]
 800758e:	05db      	lsls	r3, r3, #23
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	4616      	mov	r6, r2
 8007596:	d505      	bpl.n	80075a4 <__swrite+0x1e>
 8007598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759c:	2302      	movs	r3, #2
 800759e:	2200      	movs	r2, #0
 80075a0:	f000 f9c8 	bl	8007934 <_lseek_r>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	4632      	mov	r2, r6
 80075b2:	463b      	mov	r3, r7
 80075b4:	4628      	mov	r0, r5
 80075b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	f000 b869 	b.w	8007690 <_write_r>

080075be <__sseek>:
 80075be:	b510      	push	{r4, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c6:	f000 f9b5 	bl	8007934 <_lseek_r>
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	bf15      	itete	ne
 80075d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075da:	81a3      	strheq	r3, [r4, #12]
 80075dc:	bf18      	it	ne
 80075de:	81a3      	strhne	r3, [r4, #12]
 80075e0:	bd10      	pop	{r4, pc}

080075e2 <__sclose>:
 80075e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e6:	f000 b8d3 	b.w	8007790 <_close_r>
	...

080075ec <__swbuf_r>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	460e      	mov	r6, r1
 80075f0:	4614      	mov	r4, r2
 80075f2:	4605      	mov	r5, r0
 80075f4:	b118      	cbz	r0, 80075fe <__swbuf_r+0x12>
 80075f6:	6983      	ldr	r3, [r0, #24]
 80075f8:	b90b      	cbnz	r3, 80075fe <__swbuf_r+0x12>
 80075fa:	f7ff fbbb 	bl	8006d74 <__sinit>
 80075fe:	4b21      	ldr	r3, [pc, #132]	; (8007684 <__swbuf_r+0x98>)
 8007600:	429c      	cmp	r4, r3
 8007602:	d12b      	bne.n	800765c <__swbuf_r+0x70>
 8007604:	686c      	ldr	r4, [r5, #4]
 8007606:	69a3      	ldr	r3, [r4, #24]
 8007608:	60a3      	str	r3, [r4, #8]
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	071a      	lsls	r2, r3, #28
 800760e:	d52f      	bpl.n	8007670 <__swbuf_r+0x84>
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	b36b      	cbz	r3, 8007670 <__swbuf_r+0x84>
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	1ac0      	subs	r0, r0, r3
 800761a:	6963      	ldr	r3, [r4, #20]
 800761c:	b2f6      	uxtb	r6, r6
 800761e:	4283      	cmp	r3, r0
 8007620:	4637      	mov	r7, r6
 8007622:	dc04      	bgt.n	800762e <__swbuf_r+0x42>
 8007624:	4621      	mov	r1, r4
 8007626:	4628      	mov	r0, r5
 8007628:	f000 f948 	bl	80078bc <_fflush_r>
 800762c:	bb30      	cbnz	r0, 800767c <__swbuf_r+0x90>
 800762e:	68a3      	ldr	r3, [r4, #8]
 8007630:	3b01      	subs	r3, #1
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	6022      	str	r2, [r4, #0]
 800763a:	701e      	strb	r6, [r3, #0]
 800763c:	6963      	ldr	r3, [r4, #20]
 800763e:	3001      	adds	r0, #1
 8007640:	4283      	cmp	r3, r0
 8007642:	d004      	beq.n	800764e <__swbuf_r+0x62>
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	07db      	lsls	r3, r3, #31
 8007648:	d506      	bpl.n	8007658 <__swbuf_r+0x6c>
 800764a:	2e0a      	cmp	r6, #10
 800764c:	d104      	bne.n	8007658 <__swbuf_r+0x6c>
 800764e:	4621      	mov	r1, r4
 8007650:	4628      	mov	r0, r5
 8007652:	f000 f933 	bl	80078bc <_fflush_r>
 8007656:	b988      	cbnz	r0, 800767c <__swbuf_r+0x90>
 8007658:	4638      	mov	r0, r7
 800765a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <__swbuf_r+0x9c>)
 800765e:	429c      	cmp	r4, r3
 8007660:	d101      	bne.n	8007666 <__swbuf_r+0x7a>
 8007662:	68ac      	ldr	r4, [r5, #8]
 8007664:	e7cf      	b.n	8007606 <__swbuf_r+0x1a>
 8007666:	4b09      	ldr	r3, [pc, #36]	; (800768c <__swbuf_r+0xa0>)
 8007668:	429c      	cmp	r4, r3
 800766a:	bf08      	it	eq
 800766c:	68ec      	ldreq	r4, [r5, #12]
 800766e:	e7ca      	b.n	8007606 <__swbuf_r+0x1a>
 8007670:	4621      	mov	r1, r4
 8007672:	4628      	mov	r0, r5
 8007674:	f000 f81e 	bl	80076b4 <__swsetup_r>
 8007678:	2800      	cmp	r0, #0
 800767a:	d0cb      	beq.n	8007614 <__swbuf_r+0x28>
 800767c:	f04f 37ff 	mov.w	r7, #4294967295
 8007680:	e7ea      	b.n	8007658 <__swbuf_r+0x6c>
 8007682:	bf00      	nop
 8007684:	0802d844 	.word	0x0802d844
 8007688:	0802d864 	.word	0x0802d864
 800768c:	0802d824 	.word	0x0802d824

08007690 <_write_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d07      	ldr	r5, [pc, #28]	; (80076b0 <_write_r+0x20>)
 8007694:	4604      	mov	r4, r0
 8007696:	4608      	mov	r0, r1
 8007698:	4611      	mov	r1, r2
 800769a:	2200      	movs	r2, #0
 800769c:	602a      	str	r2, [r5, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	f7f9 fe84 	bl	80013ac <_write>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_write_r+0x1e>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_write_r+0x1e>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20000e38 	.word	0x20000e38

080076b4 <__swsetup_r>:
 80076b4:	4b32      	ldr	r3, [pc, #200]	; (8007780 <__swsetup_r+0xcc>)
 80076b6:	b570      	push	{r4, r5, r6, lr}
 80076b8:	681d      	ldr	r5, [r3, #0]
 80076ba:	4606      	mov	r6, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	b125      	cbz	r5, 80076ca <__swsetup_r+0x16>
 80076c0:	69ab      	ldr	r3, [r5, #24]
 80076c2:	b913      	cbnz	r3, 80076ca <__swsetup_r+0x16>
 80076c4:	4628      	mov	r0, r5
 80076c6:	f7ff fb55 	bl	8006d74 <__sinit>
 80076ca:	4b2e      	ldr	r3, [pc, #184]	; (8007784 <__swsetup_r+0xd0>)
 80076cc:	429c      	cmp	r4, r3
 80076ce:	d10f      	bne.n	80076f0 <__swsetup_r+0x3c>
 80076d0:	686c      	ldr	r4, [r5, #4]
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076d8:	0719      	lsls	r1, r3, #28
 80076da:	d42c      	bmi.n	8007736 <__swsetup_r+0x82>
 80076dc:	06dd      	lsls	r5, r3, #27
 80076de:	d411      	bmi.n	8007704 <__swsetup_r+0x50>
 80076e0:	2309      	movs	r3, #9
 80076e2:	6033      	str	r3, [r6, #0]
 80076e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	e03e      	b.n	800776e <__swsetup_r+0xba>
 80076f0:	4b25      	ldr	r3, [pc, #148]	; (8007788 <__swsetup_r+0xd4>)
 80076f2:	429c      	cmp	r4, r3
 80076f4:	d101      	bne.n	80076fa <__swsetup_r+0x46>
 80076f6:	68ac      	ldr	r4, [r5, #8]
 80076f8:	e7eb      	b.n	80076d2 <__swsetup_r+0x1e>
 80076fa:	4b24      	ldr	r3, [pc, #144]	; (800778c <__swsetup_r+0xd8>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	bf08      	it	eq
 8007700:	68ec      	ldreq	r4, [r5, #12]
 8007702:	e7e6      	b.n	80076d2 <__swsetup_r+0x1e>
 8007704:	0758      	lsls	r0, r3, #29
 8007706:	d512      	bpl.n	800772e <__swsetup_r+0x7a>
 8007708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800770a:	b141      	cbz	r1, 800771e <__swsetup_r+0x6a>
 800770c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007710:	4299      	cmp	r1, r3
 8007712:	d002      	beq.n	800771a <__swsetup_r+0x66>
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f98f 	bl	8007a38 <_free_r>
 800771a:	2300      	movs	r3, #0
 800771c:	6363      	str	r3, [r4, #52]	; 0x34
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	2300      	movs	r3, #0
 8007728:	6063      	str	r3, [r4, #4]
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	f043 0308 	orr.w	r3, r3, #8
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	b94b      	cbnz	r3, 800774e <__swsetup_r+0x9a>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007744:	d003      	beq.n	800774e <__swsetup_r+0x9a>
 8007746:	4621      	mov	r1, r4
 8007748:	4630      	mov	r0, r6
 800774a:	f000 f929 	bl	80079a0 <__smakebuf_r>
 800774e:	89a0      	ldrh	r0, [r4, #12]
 8007750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007754:	f010 0301 	ands.w	r3, r0, #1
 8007758:	d00a      	beq.n	8007770 <__swsetup_r+0xbc>
 800775a:	2300      	movs	r3, #0
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	6963      	ldr	r3, [r4, #20]
 8007760:	425b      	negs	r3, r3
 8007762:	61a3      	str	r3, [r4, #24]
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	b943      	cbnz	r3, 800777a <__swsetup_r+0xc6>
 8007768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800776c:	d1ba      	bne.n	80076e4 <__swsetup_r+0x30>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	0781      	lsls	r1, r0, #30
 8007772:	bf58      	it	pl
 8007774:	6963      	ldrpl	r3, [r4, #20]
 8007776:	60a3      	str	r3, [r4, #8]
 8007778:	e7f4      	b.n	8007764 <__swsetup_r+0xb0>
 800777a:	2000      	movs	r0, #0
 800777c:	e7f7      	b.n	800776e <__swsetup_r+0xba>
 800777e:	bf00      	nop
 8007780:	20000070 	.word	0x20000070
 8007784:	0802d844 	.word	0x0802d844
 8007788:	0802d864 	.word	0x0802d864
 800778c:	0802d824 	.word	0x0802d824

08007790 <_close_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d06      	ldr	r5, [pc, #24]	; (80077ac <_close_r+0x1c>)
 8007794:	2300      	movs	r3, #0
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	f7fb f8d3 	bl	8002946 <_close>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_close_r+0x1a>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_close_r+0x1a>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	20000e38 	.word	0x20000e38

080077b0 <__sflush_r>:
 80077b0:	898a      	ldrh	r2, [r1, #12]
 80077b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b6:	4605      	mov	r5, r0
 80077b8:	0710      	lsls	r0, r2, #28
 80077ba:	460c      	mov	r4, r1
 80077bc:	d458      	bmi.n	8007870 <__sflush_r+0xc0>
 80077be:	684b      	ldr	r3, [r1, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dc05      	bgt.n	80077d0 <__sflush_r+0x20>
 80077c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	dc02      	bgt.n	80077d0 <__sflush_r+0x20>
 80077ca:	2000      	movs	r0, #0
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	d0f9      	beq.n	80077ca <__sflush_r+0x1a>
 80077d6:	2300      	movs	r3, #0
 80077d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077dc:	682f      	ldr	r7, [r5, #0]
 80077de:	602b      	str	r3, [r5, #0]
 80077e0:	d032      	beq.n	8007848 <__sflush_r+0x98>
 80077e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	075a      	lsls	r2, r3, #29
 80077e8:	d505      	bpl.n	80077f6 <__sflush_r+0x46>
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	1ac0      	subs	r0, r0, r3
 80077ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077f0:	b10b      	cbz	r3, 80077f6 <__sflush_r+0x46>
 80077f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077f4:	1ac0      	subs	r0, r0, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	4602      	mov	r2, r0
 80077fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077fc:	6a21      	ldr	r1, [r4, #32]
 80077fe:	4628      	mov	r0, r5
 8007800:	47b0      	blx	r6
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	d106      	bne.n	8007816 <__sflush_r+0x66>
 8007808:	6829      	ldr	r1, [r5, #0]
 800780a:	291d      	cmp	r1, #29
 800780c:	d82c      	bhi.n	8007868 <__sflush_r+0xb8>
 800780e:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <__sflush_r+0x108>)
 8007810:	40ca      	lsrs	r2, r1
 8007812:	07d6      	lsls	r6, r2, #31
 8007814:	d528      	bpl.n	8007868 <__sflush_r+0xb8>
 8007816:	2200      	movs	r2, #0
 8007818:	6062      	str	r2, [r4, #4]
 800781a:	04d9      	lsls	r1, r3, #19
 800781c:	6922      	ldr	r2, [r4, #16]
 800781e:	6022      	str	r2, [r4, #0]
 8007820:	d504      	bpl.n	800782c <__sflush_r+0x7c>
 8007822:	1c42      	adds	r2, r0, #1
 8007824:	d101      	bne.n	800782a <__sflush_r+0x7a>
 8007826:	682b      	ldr	r3, [r5, #0]
 8007828:	b903      	cbnz	r3, 800782c <__sflush_r+0x7c>
 800782a:	6560      	str	r0, [r4, #84]	; 0x54
 800782c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800782e:	602f      	str	r7, [r5, #0]
 8007830:	2900      	cmp	r1, #0
 8007832:	d0ca      	beq.n	80077ca <__sflush_r+0x1a>
 8007834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007838:	4299      	cmp	r1, r3
 800783a:	d002      	beq.n	8007842 <__sflush_r+0x92>
 800783c:	4628      	mov	r0, r5
 800783e:	f000 f8fb 	bl	8007a38 <_free_r>
 8007842:	2000      	movs	r0, #0
 8007844:	6360      	str	r0, [r4, #52]	; 0x34
 8007846:	e7c1      	b.n	80077cc <__sflush_r+0x1c>
 8007848:	6a21      	ldr	r1, [r4, #32]
 800784a:	2301      	movs	r3, #1
 800784c:	4628      	mov	r0, r5
 800784e:	47b0      	blx	r6
 8007850:	1c41      	adds	r1, r0, #1
 8007852:	d1c7      	bne.n	80077e4 <__sflush_r+0x34>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0c4      	beq.n	80077e4 <__sflush_r+0x34>
 800785a:	2b1d      	cmp	r3, #29
 800785c:	d001      	beq.n	8007862 <__sflush_r+0xb2>
 800785e:	2b16      	cmp	r3, #22
 8007860:	d101      	bne.n	8007866 <__sflush_r+0xb6>
 8007862:	602f      	str	r7, [r5, #0]
 8007864:	e7b1      	b.n	80077ca <__sflush_r+0x1a>
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	e7ad      	b.n	80077cc <__sflush_r+0x1c>
 8007870:	690f      	ldr	r7, [r1, #16]
 8007872:	2f00      	cmp	r7, #0
 8007874:	d0a9      	beq.n	80077ca <__sflush_r+0x1a>
 8007876:	0793      	lsls	r3, r2, #30
 8007878:	680e      	ldr	r6, [r1, #0]
 800787a:	bf08      	it	eq
 800787c:	694b      	ldreq	r3, [r1, #20]
 800787e:	600f      	str	r7, [r1, #0]
 8007880:	bf18      	it	ne
 8007882:	2300      	movne	r3, #0
 8007884:	eba6 0807 	sub.w	r8, r6, r7
 8007888:	608b      	str	r3, [r1, #8]
 800788a:	f1b8 0f00 	cmp.w	r8, #0
 800788e:	dd9c      	ble.n	80077ca <__sflush_r+0x1a>
 8007890:	6a21      	ldr	r1, [r4, #32]
 8007892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007894:	4643      	mov	r3, r8
 8007896:	463a      	mov	r2, r7
 8007898:	4628      	mov	r0, r5
 800789a:	47b0      	blx	r6
 800789c:	2800      	cmp	r0, #0
 800789e:	dc06      	bgt.n	80078ae <__sflush_r+0xfe>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	e78e      	b.n	80077cc <__sflush_r+0x1c>
 80078ae:	4407      	add	r7, r0
 80078b0:	eba8 0800 	sub.w	r8, r8, r0
 80078b4:	e7e9      	b.n	800788a <__sflush_r+0xda>
 80078b6:	bf00      	nop
 80078b8:	20400001 	.word	0x20400001

080078bc <_fflush_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	690b      	ldr	r3, [r1, #16]
 80078c0:	4605      	mov	r5, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	b913      	cbnz	r3, 80078cc <_fflush_r+0x10>
 80078c6:	2500      	movs	r5, #0
 80078c8:	4628      	mov	r0, r5
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	b118      	cbz	r0, 80078d6 <_fflush_r+0x1a>
 80078ce:	6983      	ldr	r3, [r0, #24]
 80078d0:	b90b      	cbnz	r3, 80078d6 <_fflush_r+0x1a>
 80078d2:	f7ff fa4f 	bl	8006d74 <__sinit>
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <_fflush_r+0x6c>)
 80078d8:	429c      	cmp	r4, r3
 80078da:	d11b      	bne.n	8007914 <_fflush_r+0x58>
 80078dc:	686c      	ldr	r4, [r5, #4]
 80078de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0ef      	beq.n	80078c6 <_fflush_r+0xa>
 80078e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078e8:	07d0      	lsls	r0, r2, #31
 80078ea:	d404      	bmi.n	80078f6 <_fflush_r+0x3a>
 80078ec:	0599      	lsls	r1, r3, #22
 80078ee:	d402      	bmi.n	80078f6 <_fflush_r+0x3a>
 80078f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078f2:	f7ff fadd 	bl	8006eb0 <__retarget_lock_acquire_recursive>
 80078f6:	4628      	mov	r0, r5
 80078f8:	4621      	mov	r1, r4
 80078fa:	f7ff ff59 	bl	80077b0 <__sflush_r>
 80078fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007900:	07da      	lsls	r2, r3, #31
 8007902:	4605      	mov	r5, r0
 8007904:	d4e0      	bmi.n	80078c8 <_fflush_r+0xc>
 8007906:	89a3      	ldrh	r3, [r4, #12]
 8007908:	059b      	lsls	r3, r3, #22
 800790a:	d4dd      	bmi.n	80078c8 <_fflush_r+0xc>
 800790c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800790e:	f7ff fad0 	bl	8006eb2 <__retarget_lock_release_recursive>
 8007912:	e7d9      	b.n	80078c8 <_fflush_r+0xc>
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <_fflush_r+0x70>)
 8007916:	429c      	cmp	r4, r3
 8007918:	d101      	bne.n	800791e <_fflush_r+0x62>
 800791a:	68ac      	ldr	r4, [r5, #8]
 800791c:	e7df      	b.n	80078de <_fflush_r+0x22>
 800791e:	4b04      	ldr	r3, [pc, #16]	; (8007930 <_fflush_r+0x74>)
 8007920:	429c      	cmp	r4, r3
 8007922:	bf08      	it	eq
 8007924:	68ec      	ldreq	r4, [r5, #12]
 8007926:	e7da      	b.n	80078de <_fflush_r+0x22>
 8007928:	0802d844 	.word	0x0802d844
 800792c:	0802d864 	.word	0x0802d864
 8007930:	0802d824 	.word	0x0802d824

08007934 <_lseek_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	; (8007954 <_lseek_r+0x20>)
 8007938:	4604      	mov	r4, r0
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	2200      	movs	r2, #0
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fb f826 	bl	8002994 <_lseek>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_lseek_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_lseek_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	20000e38 	.word	0x20000e38

08007958 <__swhatbuf_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	460e      	mov	r6, r1
 800795c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007960:	2900      	cmp	r1, #0
 8007962:	b096      	sub	sp, #88	; 0x58
 8007964:	4614      	mov	r4, r2
 8007966:	461d      	mov	r5, r3
 8007968:	da07      	bge.n	800797a <__swhatbuf_r+0x22>
 800796a:	2300      	movs	r3, #0
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	89b3      	ldrh	r3, [r6, #12]
 8007970:	061a      	lsls	r2, r3, #24
 8007972:	d410      	bmi.n	8007996 <__swhatbuf_r+0x3e>
 8007974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007978:	e00e      	b.n	8007998 <__swhatbuf_r+0x40>
 800797a:	466a      	mov	r2, sp
 800797c:	f000 f8be 	bl	8007afc <_fstat_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	dbf2      	blt.n	800796a <__swhatbuf_r+0x12>
 8007984:	9a01      	ldr	r2, [sp, #4]
 8007986:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800798a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800798e:	425a      	negs	r2, r3
 8007990:	415a      	adcs	r2, r3
 8007992:	602a      	str	r2, [r5, #0]
 8007994:	e7ee      	b.n	8007974 <__swhatbuf_r+0x1c>
 8007996:	2340      	movs	r3, #64	; 0x40
 8007998:	2000      	movs	r0, #0
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	b016      	add	sp, #88	; 0x58
 800799e:	bd70      	pop	{r4, r5, r6, pc}

080079a0 <__smakebuf_r>:
 80079a0:	898b      	ldrh	r3, [r1, #12]
 80079a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079a4:	079d      	lsls	r5, r3, #30
 80079a6:	4606      	mov	r6, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	d507      	bpl.n	80079bc <__smakebuf_r+0x1c>
 80079ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	2301      	movs	r3, #1
 80079b6:	6163      	str	r3, [r4, #20]
 80079b8:	b002      	add	sp, #8
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	ab01      	add	r3, sp, #4
 80079be:	466a      	mov	r2, sp
 80079c0:	f7ff ffca 	bl	8007958 <__swhatbuf_r>
 80079c4:	9900      	ldr	r1, [sp, #0]
 80079c6:	4605      	mov	r5, r0
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff fa73 	bl	8006eb4 <_malloc_r>
 80079ce:	b948      	cbnz	r0, 80079e4 <__smakebuf_r+0x44>
 80079d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d4:	059a      	lsls	r2, r3, #22
 80079d6:	d4ef      	bmi.n	80079b8 <__smakebuf_r+0x18>
 80079d8:	f023 0303 	bic.w	r3, r3, #3
 80079dc:	f043 0302 	orr.w	r3, r3, #2
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	e7e3      	b.n	80079ac <__smakebuf_r+0xc>
 80079e4:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <__smakebuf_r+0x7c>)
 80079e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	6020      	str	r0, [r4, #0]
 80079ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	9b00      	ldr	r3, [sp, #0]
 80079f4:	6163      	str	r3, [r4, #20]
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	6120      	str	r0, [r4, #16]
 80079fa:	b15b      	cbz	r3, 8007a14 <__smakebuf_r+0x74>
 80079fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a00:	4630      	mov	r0, r6
 8007a02:	f000 f88d 	bl	8007b20 <_isatty_r>
 8007a06:	b128      	cbz	r0, 8007a14 <__smakebuf_r+0x74>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	f043 0301 	orr.w	r3, r3, #1
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	89a0      	ldrh	r0, [r4, #12]
 8007a16:	4305      	orrs	r5, r0
 8007a18:	81a5      	strh	r5, [r4, #12]
 8007a1a:	e7cd      	b.n	80079b8 <__smakebuf_r+0x18>
 8007a1c:	08006d0d 	.word	0x08006d0d

08007a20 <__malloc_lock>:
 8007a20:	4801      	ldr	r0, [pc, #4]	; (8007a28 <__malloc_lock+0x8>)
 8007a22:	f7ff ba45 	b.w	8006eb0 <__retarget_lock_acquire_recursive>
 8007a26:	bf00      	nop
 8007a28:	20000e30 	.word	0x20000e30

08007a2c <__malloc_unlock>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	; (8007a34 <__malloc_unlock+0x8>)
 8007a2e:	f7ff ba40 	b.w	8006eb2 <__retarget_lock_release_recursive>
 8007a32:	bf00      	nop
 8007a34:	20000e30 	.word	0x20000e30

08007a38 <_free_r>:
 8007a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a3a:	2900      	cmp	r1, #0
 8007a3c:	d048      	beq.n	8007ad0 <_free_r+0x98>
 8007a3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a42:	9001      	str	r0, [sp, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f1a1 0404 	sub.w	r4, r1, #4
 8007a4a:	bfb8      	it	lt
 8007a4c:	18e4      	addlt	r4, r4, r3
 8007a4e:	f7ff ffe7 	bl	8007a20 <__malloc_lock>
 8007a52:	4a20      	ldr	r2, [pc, #128]	; (8007ad4 <_free_r+0x9c>)
 8007a54:	9801      	ldr	r0, [sp, #4]
 8007a56:	6813      	ldr	r3, [r2, #0]
 8007a58:	4615      	mov	r5, r2
 8007a5a:	b933      	cbnz	r3, 8007a6a <_free_r+0x32>
 8007a5c:	6063      	str	r3, [r4, #4]
 8007a5e:	6014      	str	r4, [r2, #0]
 8007a60:	b003      	add	sp, #12
 8007a62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a66:	f7ff bfe1 	b.w	8007a2c <__malloc_unlock>
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	d90b      	bls.n	8007a86 <_free_r+0x4e>
 8007a6e:	6821      	ldr	r1, [r4, #0]
 8007a70:	1862      	adds	r2, r4, r1
 8007a72:	4293      	cmp	r3, r2
 8007a74:	bf04      	itt	eq
 8007a76:	681a      	ldreq	r2, [r3, #0]
 8007a78:	685b      	ldreq	r3, [r3, #4]
 8007a7a:	6063      	str	r3, [r4, #4]
 8007a7c:	bf04      	itt	eq
 8007a7e:	1852      	addeq	r2, r2, r1
 8007a80:	6022      	streq	r2, [r4, #0]
 8007a82:	602c      	str	r4, [r5, #0]
 8007a84:	e7ec      	b.n	8007a60 <_free_r+0x28>
 8007a86:	461a      	mov	r2, r3
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	b10b      	cbz	r3, 8007a90 <_free_r+0x58>
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	d9fa      	bls.n	8007a86 <_free_r+0x4e>
 8007a90:	6811      	ldr	r1, [r2, #0]
 8007a92:	1855      	adds	r5, r2, r1
 8007a94:	42a5      	cmp	r5, r4
 8007a96:	d10b      	bne.n	8007ab0 <_free_r+0x78>
 8007a98:	6824      	ldr	r4, [r4, #0]
 8007a9a:	4421      	add	r1, r4
 8007a9c:	1854      	adds	r4, r2, r1
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	6011      	str	r1, [r2, #0]
 8007aa2:	d1dd      	bne.n	8007a60 <_free_r+0x28>
 8007aa4:	681c      	ldr	r4, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	6053      	str	r3, [r2, #4]
 8007aaa:	4421      	add	r1, r4
 8007aac:	6011      	str	r1, [r2, #0]
 8007aae:	e7d7      	b.n	8007a60 <_free_r+0x28>
 8007ab0:	d902      	bls.n	8007ab8 <_free_r+0x80>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	6003      	str	r3, [r0, #0]
 8007ab6:	e7d3      	b.n	8007a60 <_free_r+0x28>
 8007ab8:	6825      	ldr	r5, [r4, #0]
 8007aba:	1961      	adds	r1, r4, r5
 8007abc:	428b      	cmp	r3, r1
 8007abe:	bf04      	itt	eq
 8007ac0:	6819      	ldreq	r1, [r3, #0]
 8007ac2:	685b      	ldreq	r3, [r3, #4]
 8007ac4:	6063      	str	r3, [r4, #4]
 8007ac6:	bf04      	itt	eq
 8007ac8:	1949      	addeq	r1, r1, r5
 8007aca:	6021      	streq	r1, [r4, #0]
 8007acc:	6054      	str	r4, [r2, #4]
 8007ace:	e7c7      	b.n	8007a60 <_free_r+0x28>
 8007ad0:	b003      	add	sp, #12
 8007ad2:	bd30      	pop	{r4, r5, pc}
 8007ad4:	20000bb8 	.word	0x20000bb8

08007ad8 <_read_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d07      	ldr	r5, [pc, #28]	; (8007af8 <_read_r+0x20>)
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f7fa ff10 	bl	800290c <_read>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_read_r+0x1e>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_read_r+0x1e>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000e38 	.word	0x20000e38

08007afc <_fstat_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	; (8007b1c <_fstat_r+0x20>)
 8007b00:	2300      	movs	r3, #0
 8007b02:	4604      	mov	r4, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	f7fa ff28 	bl	800295e <_fstat>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d102      	bne.n	8007b18 <_fstat_r+0x1c>
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	b103      	cbz	r3, 8007b18 <_fstat_r+0x1c>
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000e38 	.word	0x20000e38

08007b20 <_isatty_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d06      	ldr	r5, [pc, #24]	; (8007b3c <_isatty_r+0x1c>)
 8007b24:	2300      	movs	r3, #0
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	f7fa ff27 	bl	800297e <_isatty>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_isatty_r+0x1a>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_isatty_r+0x1a>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	20000e38 	.word	0x20000e38

08007b40 <cos>:
 8007b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b42:	ec53 2b10 	vmov	r2, r3, d0
 8007b46:	4824      	ldr	r0, [pc, #144]	; (8007bd8 <cos+0x98>)
 8007b48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b4c:	4281      	cmp	r1, r0
 8007b4e:	dc06      	bgt.n	8007b5e <cos+0x1e>
 8007b50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007bd0 <cos+0x90>
 8007b54:	f001 fbc0 	bl	80092d8 <__kernel_cos>
 8007b58:	ec51 0b10 	vmov	r0, r1, d0
 8007b5c:	e007      	b.n	8007b6e <cos+0x2e>
 8007b5e:	481f      	ldr	r0, [pc, #124]	; (8007bdc <cos+0x9c>)
 8007b60:	4281      	cmp	r1, r0
 8007b62:	dd09      	ble.n	8007b78 <cos+0x38>
 8007b64:	ee10 0a10 	vmov	r0, s0
 8007b68:	4619      	mov	r1, r3
 8007b6a:	f7f8 fb85 	bl	8000278 <__aeabi_dsub>
 8007b6e:	ec41 0b10 	vmov	d0, r0, r1
 8007b72:	b005      	add	sp, #20
 8007b74:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b78:	4668      	mov	r0, sp
 8007b7a:	f001 f8ed 	bl	8008d58 <__ieee754_rem_pio2>
 8007b7e:	f000 0003 	and.w	r0, r0, #3
 8007b82:	2801      	cmp	r0, #1
 8007b84:	d007      	beq.n	8007b96 <cos+0x56>
 8007b86:	2802      	cmp	r0, #2
 8007b88:	d012      	beq.n	8007bb0 <cos+0x70>
 8007b8a:	b9c0      	cbnz	r0, 8007bbe <cos+0x7e>
 8007b8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b90:	ed9d 0b00 	vldr	d0, [sp]
 8007b94:	e7de      	b.n	8007b54 <cos+0x14>
 8007b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b9a:	ed9d 0b00 	vldr	d0, [sp]
 8007b9e:	f001 ffa3 	bl	8009ae8 <__kernel_sin>
 8007ba2:	ec53 2b10 	vmov	r2, r3, d0
 8007ba6:	ee10 0a10 	vmov	r0, s0
 8007baa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007bae:	e7de      	b.n	8007b6e <cos+0x2e>
 8007bb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bb4:	ed9d 0b00 	vldr	d0, [sp]
 8007bb8:	f001 fb8e 	bl	80092d8 <__kernel_cos>
 8007bbc:	e7f1      	b.n	8007ba2 <cos+0x62>
 8007bbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007bc2:	ed9d 0b00 	vldr	d0, [sp]
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f001 ff8e 	bl	8009ae8 <__kernel_sin>
 8007bcc:	e7c4      	b.n	8007b58 <cos+0x18>
 8007bce:	bf00      	nop
	...
 8007bd8:	3fe921fb 	.word	0x3fe921fb
 8007bdc:	7fefffff 	.word	0x7fefffff

08007be0 <round>:
 8007be0:	ec51 0b10 	vmov	r0, r1, d0
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007bea:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007bee:	2c13      	cmp	r4, #19
 8007bf0:	ee10 2a10 	vmov	r2, s0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	dc19      	bgt.n	8007c2c <round+0x4c>
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	da09      	bge.n	8007c10 <round+0x30>
 8007bfc:	3401      	adds	r4, #1
 8007bfe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007c02:	d103      	bne.n	8007c0c <round+0x2c>
 8007c04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	e028      	b.n	8007c62 <round+0x82>
 8007c10:	4d15      	ldr	r5, [pc, #84]	; (8007c68 <round+0x88>)
 8007c12:	4125      	asrs	r5, r4
 8007c14:	ea01 0605 	and.w	r6, r1, r5
 8007c18:	4332      	orrs	r2, r6
 8007c1a:	d00e      	beq.n	8007c3a <round+0x5a>
 8007c1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c20:	fa42 f404 	asr.w	r4, r2, r4
 8007c24:	4423      	add	r3, r4
 8007c26:	ea23 0305 	bic.w	r3, r3, r5
 8007c2a:	e7ef      	b.n	8007c0c <round+0x2c>
 8007c2c:	2c33      	cmp	r4, #51	; 0x33
 8007c2e:	dd07      	ble.n	8007c40 <round+0x60>
 8007c30:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007c34:	d101      	bne.n	8007c3a <round+0x5a>
 8007c36:	f7f8 fb21 	bl	800027c <__adddf3>
 8007c3a:	ec41 0b10 	vmov	d0, r0, r1
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
 8007c40:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007c44:	f04f 35ff 	mov.w	r5, #4294967295
 8007c48:	40f5      	lsrs	r5, r6
 8007c4a:	4228      	tst	r0, r5
 8007c4c:	d0f5      	beq.n	8007c3a <round+0x5a>
 8007c4e:	2101      	movs	r1, #1
 8007c50:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007c54:	fa01 f404 	lsl.w	r4, r1, r4
 8007c58:	1912      	adds	r2, r2, r4
 8007c5a:	bf28      	it	cs
 8007c5c:	185b      	addcs	r3, r3, r1
 8007c5e:	ea22 0105 	bic.w	r1, r2, r5
 8007c62:	4608      	mov	r0, r1
 8007c64:	4619      	mov	r1, r3
 8007c66:	e7e8      	b.n	8007c3a <round+0x5a>
 8007c68:	000fffff 	.word	0x000fffff
 8007c6c:	00000000 	.word	0x00000000

08007c70 <sin>:
 8007c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c72:	ec53 2b10 	vmov	r2, r3, d0
 8007c76:	4826      	ldr	r0, [pc, #152]	; (8007d10 <sin+0xa0>)
 8007c78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c7c:	4281      	cmp	r1, r0
 8007c7e:	dc07      	bgt.n	8007c90 <sin+0x20>
 8007c80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007d08 <sin+0x98>
 8007c84:	2000      	movs	r0, #0
 8007c86:	f001 ff2f 	bl	8009ae8 <__kernel_sin>
 8007c8a:	ec51 0b10 	vmov	r0, r1, d0
 8007c8e:	e007      	b.n	8007ca0 <sin+0x30>
 8007c90:	4820      	ldr	r0, [pc, #128]	; (8007d14 <sin+0xa4>)
 8007c92:	4281      	cmp	r1, r0
 8007c94:	dd09      	ble.n	8007caa <sin+0x3a>
 8007c96:	ee10 0a10 	vmov	r0, s0
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	f7f8 faec 	bl	8000278 <__aeabi_dsub>
 8007ca0:	ec41 0b10 	vmov	d0, r0, r1
 8007ca4:	b005      	add	sp, #20
 8007ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007caa:	4668      	mov	r0, sp
 8007cac:	f001 f854 	bl	8008d58 <__ieee754_rem_pio2>
 8007cb0:	f000 0003 	and.w	r0, r0, #3
 8007cb4:	2801      	cmp	r0, #1
 8007cb6:	d008      	beq.n	8007cca <sin+0x5a>
 8007cb8:	2802      	cmp	r0, #2
 8007cba:	d00d      	beq.n	8007cd8 <sin+0x68>
 8007cbc:	b9d0      	cbnz	r0, 8007cf4 <sin+0x84>
 8007cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cc2:	ed9d 0b00 	vldr	d0, [sp]
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	e7dd      	b.n	8007c86 <sin+0x16>
 8007cca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cce:	ed9d 0b00 	vldr	d0, [sp]
 8007cd2:	f001 fb01 	bl	80092d8 <__kernel_cos>
 8007cd6:	e7d8      	b.n	8007c8a <sin+0x1a>
 8007cd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cdc:	ed9d 0b00 	vldr	d0, [sp]
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	f001 ff01 	bl	8009ae8 <__kernel_sin>
 8007ce6:	ec53 2b10 	vmov	r2, r3, d0
 8007cea:	ee10 0a10 	vmov	r0, s0
 8007cee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007cf2:	e7d5      	b.n	8007ca0 <sin+0x30>
 8007cf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cf8:	ed9d 0b00 	vldr	d0, [sp]
 8007cfc:	f001 faec 	bl	80092d8 <__kernel_cos>
 8007d00:	e7f1      	b.n	8007ce6 <sin+0x76>
 8007d02:	bf00      	nop
 8007d04:	f3af 8000 	nop.w
	...
 8007d10:	3fe921fb 	.word	0x3fe921fb
 8007d14:	7fefffff 	.word	0x7fefffff

08007d18 <atan2>:
 8007d18:	f000 b91e 	b.w	8007f58 <__ieee754_atan2>

08007d1c <fmod>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	ed2d 8b02 	vpush	{d8}
 8007d22:	ec57 6b10 	vmov	r6, r7, d0
 8007d26:	ec55 4b11 	vmov	r4, r5, d1
 8007d2a:	f000 f9df 	bl	80080ec <__ieee754_fmod>
 8007d2e:	4b18      	ldr	r3, [pc, #96]	; (8007d90 <fmod+0x74>)
 8007d30:	eeb0 8a40 	vmov.f32	s16, s0
 8007d34:	eef0 8a60 	vmov.f32	s17, s1
 8007d38:	f993 3000 	ldrsb.w	r3, [r3]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	d020      	beq.n	8007d82 <fmod+0x66>
 8007d40:	4622      	mov	r2, r4
 8007d42:	462b      	mov	r3, r5
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fee8 	bl	8000b1c <__aeabi_dcmpun>
 8007d4c:	b9c8      	cbnz	r0, 8007d82 <fmod+0x66>
 8007d4e:	4632      	mov	r2, r6
 8007d50:	463b      	mov	r3, r7
 8007d52:	4630      	mov	r0, r6
 8007d54:	4639      	mov	r1, r7
 8007d56:	f7f8 fee1 	bl	8000b1c <__aeabi_dcmpun>
 8007d5a:	b990      	cbnz	r0, 8007d82 <fmod+0x66>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	4620      	mov	r0, r4
 8007d62:	4629      	mov	r1, r5
 8007d64:	f7f8 fea8 	bl	8000ab8 <__aeabi_dcmpeq>
 8007d68:	b158      	cbz	r0, 8007d82 <fmod+0x66>
 8007d6a:	f7fe ff53 	bl	8006c14 <__errno>
 8007d6e:	2321      	movs	r3, #33	; 0x21
 8007d70:	6003      	str	r3, [r0, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	2300      	movs	r3, #0
 8007d76:	4610      	mov	r0, r2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f7f8 fd5f 	bl	800083c <__aeabi_ddiv>
 8007d7e:	ec41 0b18 	vmov	d8, r0, r1
 8007d82:	eeb0 0a48 	vmov.f32	s0, s16
 8007d86:	eef0 0a68 	vmov.f32	s1, s17
 8007d8a:	ecbd 8b02 	vpop	{d8}
 8007d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d90:	200000d4 	.word	0x200000d4

08007d94 <pow>:
 8007d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d98:	ec59 8b10 	vmov	r8, r9, d0
 8007d9c:	ec57 6b11 	vmov	r6, r7, d1
 8007da0:	f000 fab6 	bl	8008310 <__ieee754_pow>
 8007da4:	4b4e      	ldr	r3, [pc, #312]	; (8007ee0 <pow+0x14c>)
 8007da6:	f993 3000 	ldrsb.w	r3, [r3]
 8007daa:	3301      	adds	r3, #1
 8007dac:	ec55 4b10 	vmov	r4, r5, d0
 8007db0:	d015      	beq.n	8007dde <pow+0x4a>
 8007db2:	4632      	mov	r2, r6
 8007db4:	463b      	mov	r3, r7
 8007db6:	4630      	mov	r0, r6
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 feaf 	bl	8000b1c <__aeabi_dcmpun>
 8007dbe:	b970      	cbnz	r0, 8007dde <pow+0x4a>
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	f7f8 fea8 	bl	8000b1c <__aeabi_dcmpun>
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2300      	movs	r3, #0
 8007dd0:	b148      	cbz	r0, 8007de6 <pow+0x52>
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fe6f 	bl	8000ab8 <__aeabi_dcmpeq>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d17d      	bne.n	8007eda <pow+0x146>
 8007dde:	ec45 4b10 	vmov	d0, r4, r5
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	f7f8 fe65 	bl	8000ab8 <__aeabi_dcmpeq>
 8007dee:	b1e0      	cbz	r0, 8007e2a <pow+0x96>
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fe5e 	bl	8000ab8 <__aeabi_dcmpeq>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d16c      	bne.n	8007eda <pow+0x146>
 8007e00:	ec47 6b10 	vmov	d0, r6, r7
 8007e04:	f002 f8d9 	bl	8009fba <finite>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d0e8      	beq.n	8007dde <pow+0x4a>
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4630      	mov	r0, r6
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 fe5a 	bl	8000acc <__aeabi_dcmplt>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d0e0      	beq.n	8007dde <pow+0x4a>
 8007e1c:	f7fe fefa 	bl	8006c14 <__errno>
 8007e20:	2321      	movs	r3, #33	; 0x21
 8007e22:	6003      	str	r3, [r0, #0]
 8007e24:	2400      	movs	r4, #0
 8007e26:	4d2f      	ldr	r5, [pc, #188]	; (8007ee4 <pow+0x150>)
 8007e28:	e7d9      	b.n	8007dde <pow+0x4a>
 8007e2a:	ec45 4b10 	vmov	d0, r4, r5
 8007e2e:	f002 f8c4 	bl	8009fba <finite>
 8007e32:	bbb8      	cbnz	r0, 8007ea4 <pow+0x110>
 8007e34:	ec49 8b10 	vmov	d0, r8, r9
 8007e38:	f002 f8bf 	bl	8009fba <finite>
 8007e3c:	b390      	cbz	r0, 8007ea4 <pow+0x110>
 8007e3e:	ec47 6b10 	vmov	d0, r6, r7
 8007e42:	f002 f8ba 	bl	8009fba <finite>
 8007e46:	b368      	cbz	r0, 8007ea4 <pow+0x110>
 8007e48:	4622      	mov	r2, r4
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f8 fe64 	bl	8000b1c <__aeabi_dcmpun>
 8007e54:	b160      	cbz	r0, 8007e70 <pow+0xdc>
 8007e56:	f7fe fedd 	bl	8006c14 <__errno>
 8007e5a:	2321      	movs	r3, #33	; 0x21
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2300      	movs	r3, #0
 8007e62:	4610      	mov	r0, r2
 8007e64:	4619      	mov	r1, r3
 8007e66:	f7f8 fce9 	bl	800083c <__aeabi_ddiv>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	460d      	mov	r5, r1
 8007e6e:	e7b6      	b.n	8007dde <pow+0x4a>
 8007e70:	f7fe fed0 	bl	8006c14 <__errno>
 8007e74:	2322      	movs	r3, #34	; 0x22
 8007e76:	6003      	str	r3, [r0, #0]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4649      	mov	r1, r9
 8007e80:	f7f8 fe24 	bl	8000acc <__aeabi_dcmplt>
 8007e84:	2400      	movs	r4, #0
 8007e86:	b158      	cbz	r0, 8007ea0 <pow+0x10c>
 8007e88:	ec47 6b10 	vmov	d0, r6, r7
 8007e8c:	f002 f928 	bl	800a0e0 <rint>
 8007e90:	4632      	mov	r2, r6
 8007e92:	ec51 0b10 	vmov	r0, r1, d0
 8007e96:	463b      	mov	r3, r7
 8007e98:	f7f8 fe0e 	bl	8000ab8 <__aeabi_dcmpeq>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d0c2      	beq.n	8007e26 <pow+0x92>
 8007ea0:	4d11      	ldr	r5, [pc, #68]	; (8007ee8 <pow+0x154>)
 8007ea2:	e79c      	b.n	8007dde <pow+0x4a>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	4629      	mov	r1, r5
 8007eac:	f7f8 fe04 	bl	8000ab8 <__aeabi_dcmpeq>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d094      	beq.n	8007dde <pow+0x4a>
 8007eb4:	ec49 8b10 	vmov	d0, r8, r9
 8007eb8:	f002 f87f 	bl	8009fba <finite>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d08e      	beq.n	8007dde <pow+0x4a>
 8007ec0:	ec47 6b10 	vmov	d0, r6, r7
 8007ec4:	f002 f879 	bl	8009fba <finite>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d088      	beq.n	8007dde <pow+0x4a>
 8007ecc:	f7fe fea2 	bl	8006c14 <__errno>
 8007ed0:	2322      	movs	r3, #34	; 0x22
 8007ed2:	6003      	str	r3, [r0, #0]
 8007ed4:	2400      	movs	r4, #0
 8007ed6:	2500      	movs	r5, #0
 8007ed8:	e781      	b.n	8007dde <pow+0x4a>
 8007eda:	4d04      	ldr	r5, [pc, #16]	; (8007eec <pow+0x158>)
 8007edc:	2400      	movs	r4, #0
 8007ede:	e77e      	b.n	8007dde <pow+0x4a>
 8007ee0:	200000d4 	.word	0x200000d4
 8007ee4:	fff00000 	.word	0xfff00000
 8007ee8:	7ff00000 	.word	0x7ff00000
 8007eec:	3ff00000 	.word	0x3ff00000

08007ef0 <sqrt>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	ed2d 8b02 	vpush	{d8}
 8007ef6:	ec55 4b10 	vmov	r4, r5, d0
 8007efa:	f001 f937 	bl	800916c <__ieee754_sqrt>
 8007efe:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <sqrt+0x64>)
 8007f00:	eeb0 8a40 	vmov.f32	s16, s0
 8007f04:	eef0 8a60 	vmov.f32	s17, s1
 8007f08:	f993 3000 	ldrsb.w	r3, [r3]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	d019      	beq.n	8007f44 <sqrt+0x54>
 8007f10:	4622      	mov	r2, r4
 8007f12:	462b      	mov	r3, r5
 8007f14:	4620      	mov	r0, r4
 8007f16:	4629      	mov	r1, r5
 8007f18:	f7f8 fe00 	bl	8000b1c <__aeabi_dcmpun>
 8007f1c:	b990      	cbnz	r0, 8007f44 <sqrt+0x54>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2300      	movs	r3, #0
 8007f22:	4620      	mov	r0, r4
 8007f24:	4629      	mov	r1, r5
 8007f26:	f7f8 fdd1 	bl	8000acc <__aeabi_dcmplt>
 8007f2a:	b158      	cbz	r0, 8007f44 <sqrt+0x54>
 8007f2c:	f7fe fe72 	bl	8006c14 <__errno>
 8007f30:	2321      	movs	r3, #33	; 0x21
 8007f32:	6003      	str	r3, [r0, #0]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	f7f8 fc7e 	bl	800083c <__aeabi_ddiv>
 8007f40:	ec41 0b18 	vmov	d8, r0, r1
 8007f44:	eeb0 0a48 	vmov.f32	s0, s16
 8007f48:	eef0 0a68 	vmov.f32	s1, s17
 8007f4c:	ecbd 8b02 	vpop	{d8}
 8007f50:	bd38      	pop	{r3, r4, r5, pc}
 8007f52:	bf00      	nop
 8007f54:	200000d4 	.word	0x200000d4

08007f58 <__ieee754_atan2>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	ec57 6b11 	vmov	r6, r7, d1
 8007f60:	4273      	negs	r3, r6
 8007f62:	f8df e184 	ldr.w	lr, [pc, #388]	; 80080e8 <__ieee754_atan2+0x190>
 8007f66:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007f6a:	4333      	orrs	r3, r6
 8007f6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007f70:	4573      	cmp	r3, lr
 8007f72:	ec51 0b10 	vmov	r0, r1, d0
 8007f76:	ee11 8a10 	vmov	r8, s2
 8007f7a:	d80a      	bhi.n	8007f92 <__ieee754_atan2+0x3a>
 8007f7c:	4244      	negs	r4, r0
 8007f7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f82:	4304      	orrs	r4, r0
 8007f84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007f88:	4574      	cmp	r4, lr
 8007f8a:	ee10 9a10 	vmov	r9, s0
 8007f8e:	468c      	mov	ip, r1
 8007f90:	d907      	bls.n	8007fa2 <__ieee754_atan2+0x4a>
 8007f92:	4632      	mov	r2, r6
 8007f94:	463b      	mov	r3, r7
 8007f96:	f7f8 f971 	bl	800027c <__adddf3>
 8007f9a:	ec41 0b10 	vmov	d0, r0, r1
 8007f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007fa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007faa:	4334      	orrs	r4, r6
 8007fac:	d103      	bne.n	8007fb6 <__ieee754_atan2+0x5e>
 8007fae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb2:	f001 be59 	b.w	8009c68 <atan>
 8007fb6:	17bc      	asrs	r4, r7, #30
 8007fb8:	f004 0402 	and.w	r4, r4, #2
 8007fbc:	ea53 0909 	orrs.w	r9, r3, r9
 8007fc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007fc4:	d107      	bne.n	8007fd6 <__ieee754_atan2+0x7e>
 8007fc6:	2c02      	cmp	r4, #2
 8007fc8:	d060      	beq.n	800808c <__ieee754_atan2+0x134>
 8007fca:	2c03      	cmp	r4, #3
 8007fcc:	d1e5      	bne.n	8007f9a <__ieee754_atan2+0x42>
 8007fce:	a142      	add	r1, pc, #264	; (adr r1, 80080d8 <__ieee754_atan2+0x180>)
 8007fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fd4:	e7e1      	b.n	8007f9a <__ieee754_atan2+0x42>
 8007fd6:	ea52 0808 	orrs.w	r8, r2, r8
 8007fda:	d106      	bne.n	8007fea <__ieee754_atan2+0x92>
 8007fdc:	f1bc 0f00 	cmp.w	ip, #0
 8007fe0:	da5f      	bge.n	80080a2 <__ieee754_atan2+0x14a>
 8007fe2:	a13f      	add	r1, pc, #252	; (adr r1, 80080e0 <__ieee754_atan2+0x188>)
 8007fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe8:	e7d7      	b.n	8007f9a <__ieee754_atan2+0x42>
 8007fea:	4572      	cmp	r2, lr
 8007fec:	d10f      	bne.n	800800e <__ieee754_atan2+0xb6>
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ff4:	d107      	bne.n	8008006 <__ieee754_atan2+0xae>
 8007ff6:	2c02      	cmp	r4, #2
 8007ff8:	d84c      	bhi.n	8008094 <__ieee754_atan2+0x13c>
 8007ffa:	4b35      	ldr	r3, [pc, #212]	; (80080d0 <__ieee754_atan2+0x178>)
 8007ffc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008000:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008004:	e7c9      	b.n	8007f9a <__ieee754_atan2+0x42>
 8008006:	2c02      	cmp	r4, #2
 8008008:	d848      	bhi.n	800809c <__ieee754_atan2+0x144>
 800800a:	4b32      	ldr	r3, [pc, #200]	; (80080d4 <__ieee754_atan2+0x17c>)
 800800c:	e7f6      	b.n	8007ffc <__ieee754_atan2+0xa4>
 800800e:	4573      	cmp	r3, lr
 8008010:	d0e4      	beq.n	8007fdc <__ieee754_atan2+0x84>
 8008012:	1a9b      	subs	r3, r3, r2
 8008014:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008018:	ea4f 5223 	mov.w	r2, r3, asr #20
 800801c:	da1e      	bge.n	800805c <__ieee754_atan2+0x104>
 800801e:	2f00      	cmp	r7, #0
 8008020:	da01      	bge.n	8008026 <__ieee754_atan2+0xce>
 8008022:	323c      	adds	r2, #60	; 0x3c
 8008024:	db1e      	blt.n	8008064 <__ieee754_atan2+0x10c>
 8008026:	4632      	mov	r2, r6
 8008028:	463b      	mov	r3, r7
 800802a:	f7f8 fc07 	bl	800083c <__aeabi_ddiv>
 800802e:	ec41 0b10 	vmov	d0, r0, r1
 8008032:	f001 ffb9 	bl	8009fa8 <fabs>
 8008036:	f001 fe17 	bl	8009c68 <atan>
 800803a:	ec51 0b10 	vmov	r0, r1, d0
 800803e:	2c01      	cmp	r4, #1
 8008040:	d013      	beq.n	800806a <__ieee754_atan2+0x112>
 8008042:	2c02      	cmp	r4, #2
 8008044:	d015      	beq.n	8008072 <__ieee754_atan2+0x11a>
 8008046:	2c00      	cmp	r4, #0
 8008048:	d0a7      	beq.n	8007f9a <__ieee754_atan2+0x42>
 800804a:	a319      	add	r3, pc, #100	; (adr r3, 80080b0 <__ieee754_atan2+0x158>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f912 	bl	8000278 <__aeabi_dsub>
 8008054:	a318      	add	r3, pc, #96	; (adr r3, 80080b8 <__ieee754_atan2+0x160>)
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	e014      	b.n	8008086 <__ieee754_atan2+0x12e>
 800805c:	a118      	add	r1, pc, #96	; (adr r1, 80080c0 <__ieee754_atan2+0x168>)
 800805e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008062:	e7ec      	b.n	800803e <__ieee754_atan2+0xe6>
 8008064:	2000      	movs	r0, #0
 8008066:	2100      	movs	r1, #0
 8008068:	e7e9      	b.n	800803e <__ieee754_atan2+0xe6>
 800806a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800806e:	4619      	mov	r1, r3
 8008070:	e793      	b.n	8007f9a <__ieee754_atan2+0x42>
 8008072:	a30f      	add	r3, pc, #60	; (adr r3, 80080b0 <__ieee754_atan2+0x158>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f7f8 f8fe 	bl	8000278 <__aeabi_dsub>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	a10d      	add	r1, pc, #52	; (adr r1, 80080b8 <__ieee754_atan2+0x160>)
 8008082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008086:	f7f8 f8f7 	bl	8000278 <__aeabi_dsub>
 800808a:	e786      	b.n	8007f9a <__ieee754_atan2+0x42>
 800808c:	a10a      	add	r1, pc, #40	; (adr r1, 80080b8 <__ieee754_atan2+0x160>)
 800808e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008092:	e782      	b.n	8007f9a <__ieee754_atan2+0x42>
 8008094:	a10c      	add	r1, pc, #48	; (adr r1, 80080c8 <__ieee754_atan2+0x170>)
 8008096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800809a:	e77e      	b.n	8007f9a <__ieee754_atan2+0x42>
 800809c:	2000      	movs	r0, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	e77b      	b.n	8007f9a <__ieee754_atan2+0x42>
 80080a2:	a107      	add	r1, pc, #28	; (adr r1, 80080c0 <__ieee754_atan2+0x168>)
 80080a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a8:	e777      	b.n	8007f9a <__ieee754_atan2+0x42>
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w
 80080b0:	33145c07 	.word	0x33145c07
 80080b4:	3ca1a626 	.word	0x3ca1a626
 80080b8:	54442d18 	.word	0x54442d18
 80080bc:	400921fb 	.word	0x400921fb
 80080c0:	54442d18 	.word	0x54442d18
 80080c4:	3ff921fb 	.word	0x3ff921fb
 80080c8:	54442d18 	.word	0x54442d18
 80080cc:	3fe921fb 	.word	0x3fe921fb
 80080d0:	0802d8b8 	.word	0x0802d8b8
 80080d4:	0802d8d0 	.word	0x0802d8d0
 80080d8:	54442d18 	.word	0x54442d18
 80080dc:	c00921fb 	.word	0xc00921fb
 80080e0:	54442d18 	.word	0x54442d18
 80080e4:	bff921fb 	.word	0xbff921fb
 80080e8:	7ff00000 	.word	0x7ff00000

080080ec <__ieee754_fmod>:
 80080ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	ec53 2b11 	vmov	r2, r3, d1
 80080f4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80080f8:	ea5e 0402 	orrs.w	r4, lr, r2
 80080fc:	ec51 0b10 	vmov	r0, r1, d0
 8008100:	ee11 7a10 	vmov	r7, s2
 8008104:	ee11 ca10 	vmov	ip, s2
 8008108:	461e      	mov	r6, r3
 800810a:	d00d      	beq.n	8008128 <__ieee754_fmod+0x3c>
 800810c:	4c7a      	ldr	r4, [pc, #488]	; (80082f8 <__ieee754_fmod+0x20c>)
 800810e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008112:	45a0      	cmp	r8, r4
 8008114:	4689      	mov	r9, r1
 8008116:	dc07      	bgt.n	8008128 <__ieee754_fmod+0x3c>
 8008118:	4254      	negs	r4, r2
 800811a:	4d78      	ldr	r5, [pc, #480]	; (80082fc <__ieee754_fmod+0x210>)
 800811c:	4314      	orrs	r4, r2
 800811e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008122:	42ac      	cmp	r4, r5
 8008124:	46ab      	mov	fp, r5
 8008126:	d909      	bls.n	800813c <__ieee754_fmod+0x50>
 8008128:	f7f8 fa5e 	bl	80005e8 <__aeabi_dmul>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	f7f8 fb84 	bl	800083c <__aeabi_ddiv>
 8008134:	ec41 0b10 	vmov	d0, r0, r1
 8008138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	45f0      	cmp	r8, lr
 800813e:	ee10 aa10 	vmov	sl, s0
 8008142:	ee10 4a10 	vmov	r4, s0
 8008146:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800814a:	dc0a      	bgt.n	8008162 <__ieee754_fmod+0x76>
 800814c:	dbf2      	blt.n	8008134 <__ieee754_fmod+0x48>
 800814e:	4290      	cmp	r0, r2
 8008150:	d3f0      	bcc.n	8008134 <__ieee754_fmod+0x48>
 8008152:	d106      	bne.n	8008162 <__ieee754_fmod+0x76>
 8008154:	4a6a      	ldr	r2, [pc, #424]	; (8008300 <__ieee754_fmod+0x214>)
 8008156:	0fed      	lsrs	r5, r5, #31
 8008158:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800815c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008160:	e7e8      	b.n	8008134 <__ieee754_fmod+0x48>
 8008162:	ea19 0f0b 	tst.w	r9, fp
 8008166:	d14a      	bne.n	80081fe <__ieee754_fmod+0x112>
 8008168:	f1b8 0f00 	cmp.w	r8, #0
 800816c:	d13f      	bne.n	80081ee <__ieee754_fmod+0x102>
 800816e:	4965      	ldr	r1, [pc, #404]	; (8008304 <__ieee754_fmod+0x218>)
 8008170:	4653      	mov	r3, sl
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc38      	bgt.n	80081e8 <__ieee754_fmod+0xfc>
 8008176:	4b61      	ldr	r3, [pc, #388]	; (80082fc <__ieee754_fmod+0x210>)
 8008178:	4033      	ands	r3, r6
 800817a:	2b00      	cmp	r3, #0
 800817c:	d14f      	bne.n	800821e <__ieee754_fmod+0x132>
 800817e:	f1be 0f00 	cmp.w	lr, #0
 8008182:	d144      	bne.n	800820e <__ieee754_fmod+0x122>
 8008184:	4a5f      	ldr	r2, [pc, #380]	; (8008304 <__ieee754_fmod+0x218>)
 8008186:	463b      	mov	r3, r7
 8008188:	2b00      	cmp	r3, #0
 800818a:	dc3d      	bgt.n	8008208 <__ieee754_fmod+0x11c>
 800818c:	4b5e      	ldr	r3, [pc, #376]	; (8008308 <__ieee754_fmod+0x21c>)
 800818e:	4299      	cmp	r1, r3
 8008190:	db4a      	blt.n	8008228 <__ieee754_fmod+0x13c>
 8008192:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800819a:	485b      	ldr	r0, [pc, #364]	; (8008308 <__ieee754_fmod+0x21c>)
 800819c:	4282      	cmp	r2, r0
 800819e:	db57      	blt.n	8008250 <__ieee754_fmod+0x164>
 80081a0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80081a4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80081a8:	1a89      	subs	r1, r1, r2
 80081aa:	1b98      	subs	r0, r3, r6
 80081ac:	eba4 070c 	sub.w	r7, r4, ip
 80081b0:	2900      	cmp	r1, #0
 80081b2:	d164      	bne.n	800827e <__ieee754_fmod+0x192>
 80081b4:	4564      	cmp	r4, ip
 80081b6:	bf38      	it	cc
 80081b8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80081bc:	2800      	cmp	r0, #0
 80081be:	bfa4      	itt	ge
 80081c0:	463c      	movge	r4, r7
 80081c2:	4603      	movge	r3, r0
 80081c4:	ea53 0104 	orrs.w	r1, r3, r4
 80081c8:	d0c4      	beq.n	8008154 <__ieee754_fmod+0x68>
 80081ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ce:	db6b      	blt.n	80082a8 <__ieee754_fmod+0x1bc>
 80081d0:	494d      	ldr	r1, [pc, #308]	; (8008308 <__ieee754_fmod+0x21c>)
 80081d2:	428a      	cmp	r2, r1
 80081d4:	db6e      	blt.n	80082b4 <__ieee754_fmod+0x1c8>
 80081d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80081da:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80081de:	431d      	orrs	r5, r3
 80081e0:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 80081e4:	4620      	mov	r0, r4
 80081e6:	e7a5      	b.n	8008134 <__ieee754_fmod+0x48>
 80081e8:	3901      	subs	r1, #1
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	e7c1      	b.n	8008172 <__ieee754_fmod+0x86>
 80081ee:	4946      	ldr	r1, [pc, #280]	; (8008308 <__ieee754_fmod+0x21c>)
 80081f0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	ddbe      	ble.n	8008176 <__ieee754_fmod+0x8a>
 80081f8:	3901      	subs	r1, #1
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	e7fa      	b.n	80081f4 <__ieee754_fmod+0x108>
 80081fe:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008202:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008206:	e7b6      	b.n	8008176 <__ieee754_fmod+0x8a>
 8008208:	3a01      	subs	r2, #1
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	e7bc      	b.n	8008188 <__ieee754_fmod+0x9c>
 800820e:	4a3e      	ldr	r2, [pc, #248]	; (8008308 <__ieee754_fmod+0x21c>)
 8008210:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8008214:	2b00      	cmp	r3, #0
 8008216:	ddb9      	ble.n	800818c <__ieee754_fmod+0xa0>
 8008218:	3a01      	subs	r2, #1
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	e7fa      	b.n	8008214 <__ieee754_fmod+0x128>
 800821e:	ea4f 522e 	mov.w	r2, lr, asr #20
 8008222:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008226:	e7b1      	b.n	800818c <__ieee754_fmod+0xa0>
 8008228:	1a5c      	subs	r4, r3, r1
 800822a:	2c1f      	cmp	r4, #31
 800822c:	dc0a      	bgt.n	8008244 <__ieee754_fmod+0x158>
 800822e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8008232:	fa08 f804 	lsl.w	r8, r8, r4
 8008236:	fa2a f303 	lsr.w	r3, sl, r3
 800823a:	ea43 0308 	orr.w	r3, r3, r8
 800823e:	fa0a f404 	lsl.w	r4, sl, r4
 8008242:	e7aa      	b.n	800819a <__ieee754_fmod+0xae>
 8008244:	4b31      	ldr	r3, [pc, #196]	; (800830c <__ieee754_fmod+0x220>)
 8008246:	1a5b      	subs	r3, r3, r1
 8008248:	fa0a f303 	lsl.w	r3, sl, r3
 800824c:	2400      	movs	r4, #0
 800824e:	e7a4      	b.n	800819a <__ieee754_fmod+0xae>
 8008250:	eba0 0c02 	sub.w	ip, r0, r2
 8008254:	f1bc 0f1f 	cmp.w	ip, #31
 8008258:	dc0a      	bgt.n	8008270 <__ieee754_fmod+0x184>
 800825a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800825e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008262:	fa27 f606 	lsr.w	r6, r7, r6
 8008266:	ea46 060e 	orr.w	r6, r6, lr
 800826a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800826e:	e79b      	b.n	80081a8 <__ieee754_fmod+0xbc>
 8008270:	4e26      	ldr	r6, [pc, #152]	; (800830c <__ieee754_fmod+0x220>)
 8008272:	1ab6      	subs	r6, r6, r2
 8008274:	fa07 f606 	lsl.w	r6, r7, r6
 8008278:	f04f 0c00 	mov.w	ip, #0
 800827c:	e794      	b.n	80081a8 <__ieee754_fmod+0xbc>
 800827e:	4564      	cmp	r4, ip
 8008280:	bf38      	it	cc
 8008282:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008286:	2800      	cmp	r0, #0
 8008288:	da05      	bge.n	8008296 <__ieee754_fmod+0x1aa>
 800828a:	0fe0      	lsrs	r0, r4, #31
 800828c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008290:	0064      	lsls	r4, r4, #1
 8008292:	3901      	subs	r1, #1
 8008294:	e789      	b.n	80081aa <__ieee754_fmod+0xbe>
 8008296:	ea50 0307 	orrs.w	r3, r0, r7
 800829a:	f43f af5b 	beq.w	8008154 <__ieee754_fmod+0x68>
 800829e:	0ffb      	lsrs	r3, r7, #31
 80082a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80082a4:	007c      	lsls	r4, r7, #1
 80082a6:	e7f4      	b.n	8008292 <__ieee754_fmod+0x1a6>
 80082a8:	0fe1      	lsrs	r1, r4, #31
 80082aa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80082ae:	0064      	lsls	r4, r4, #1
 80082b0:	3a01      	subs	r2, #1
 80082b2:	e78a      	b.n	80081ca <__ieee754_fmod+0xde>
 80082b4:	1a89      	subs	r1, r1, r2
 80082b6:	2914      	cmp	r1, #20
 80082b8:	dc0a      	bgt.n	80082d0 <__ieee754_fmod+0x1e4>
 80082ba:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80082be:	fa03 f202 	lsl.w	r2, r3, r2
 80082c2:	40cc      	lsrs	r4, r1
 80082c4:	4322      	orrs	r2, r4
 80082c6:	410b      	asrs	r3, r1
 80082c8:	ea43 0105 	orr.w	r1, r3, r5
 80082cc:	4610      	mov	r0, r2
 80082ce:	e731      	b.n	8008134 <__ieee754_fmod+0x48>
 80082d0:	291f      	cmp	r1, #31
 80082d2:	dc07      	bgt.n	80082e4 <__ieee754_fmod+0x1f8>
 80082d4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80082d8:	40cc      	lsrs	r4, r1
 80082da:	fa03 f202 	lsl.w	r2, r3, r2
 80082de:	4322      	orrs	r2, r4
 80082e0:	462b      	mov	r3, r5
 80082e2:	e7f1      	b.n	80082c8 <__ieee754_fmod+0x1dc>
 80082e4:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80082e8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80082ec:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80082f0:	32e2      	adds	r2, #226	; 0xe2
 80082f2:	fa43 f202 	asr.w	r2, r3, r2
 80082f6:	e7f3      	b.n	80082e0 <__ieee754_fmod+0x1f4>
 80082f8:	7fefffff 	.word	0x7fefffff
 80082fc:	7ff00000 	.word	0x7ff00000
 8008300:	0802d8e8 	.word	0x0802d8e8
 8008304:	fffffbed 	.word	0xfffffbed
 8008308:	fffffc02 	.word	0xfffffc02
 800830c:	fffffbe2 	.word	0xfffffbe2

08008310 <__ieee754_pow>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	ed2d 8b06 	vpush	{d8-d10}
 8008318:	b08d      	sub	sp, #52	; 0x34
 800831a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800831e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008322:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008326:	ea56 0100 	orrs.w	r1, r6, r0
 800832a:	ec53 2b10 	vmov	r2, r3, d0
 800832e:	f000 84d1 	beq.w	8008cd4 <__ieee754_pow+0x9c4>
 8008332:	497f      	ldr	r1, [pc, #508]	; (8008530 <__ieee754_pow+0x220>)
 8008334:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008338:	428c      	cmp	r4, r1
 800833a:	ee10 8a10 	vmov	r8, s0
 800833e:	4699      	mov	r9, r3
 8008340:	dc09      	bgt.n	8008356 <__ieee754_pow+0x46>
 8008342:	d103      	bne.n	800834c <__ieee754_pow+0x3c>
 8008344:	b97a      	cbnz	r2, 8008366 <__ieee754_pow+0x56>
 8008346:	42a6      	cmp	r6, r4
 8008348:	dd02      	ble.n	8008350 <__ieee754_pow+0x40>
 800834a:	e00c      	b.n	8008366 <__ieee754_pow+0x56>
 800834c:	428e      	cmp	r6, r1
 800834e:	dc02      	bgt.n	8008356 <__ieee754_pow+0x46>
 8008350:	428e      	cmp	r6, r1
 8008352:	d110      	bne.n	8008376 <__ieee754_pow+0x66>
 8008354:	b178      	cbz	r0, 8008376 <__ieee754_pow+0x66>
 8008356:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800835a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800835e:	ea54 0308 	orrs.w	r3, r4, r8
 8008362:	f000 84b7 	beq.w	8008cd4 <__ieee754_pow+0x9c4>
 8008366:	4873      	ldr	r0, [pc, #460]	; (8008534 <__ieee754_pow+0x224>)
 8008368:	b00d      	add	sp, #52	; 0x34
 800836a:	ecbd 8b06 	vpop	{d8-d10}
 800836e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008372:	f001 bead 	b.w	800a0d0 <nan>
 8008376:	f1b9 0f00 	cmp.w	r9, #0
 800837a:	da36      	bge.n	80083ea <__ieee754_pow+0xda>
 800837c:	496e      	ldr	r1, [pc, #440]	; (8008538 <__ieee754_pow+0x228>)
 800837e:	428e      	cmp	r6, r1
 8008380:	dc51      	bgt.n	8008426 <__ieee754_pow+0x116>
 8008382:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008386:	428e      	cmp	r6, r1
 8008388:	f340 84af 	ble.w	8008cea <__ieee754_pow+0x9da>
 800838c:	1531      	asrs	r1, r6, #20
 800838e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008392:	2914      	cmp	r1, #20
 8008394:	dd0f      	ble.n	80083b6 <__ieee754_pow+0xa6>
 8008396:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800839a:	fa20 fc01 	lsr.w	ip, r0, r1
 800839e:	fa0c f101 	lsl.w	r1, ip, r1
 80083a2:	4281      	cmp	r1, r0
 80083a4:	f040 84a1 	bne.w	8008cea <__ieee754_pow+0x9da>
 80083a8:	f00c 0c01 	and.w	ip, ip, #1
 80083ac:	f1cc 0102 	rsb	r1, ip, #2
 80083b0:	9100      	str	r1, [sp, #0]
 80083b2:	b180      	cbz	r0, 80083d6 <__ieee754_pow+0xc6>
 80083b4:	e059      	b.n	800846a <__ieee754_pow+0x15a>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d155      	bne.n	8008466 <__ieee754_pow+0x156>
 80083ba:	f1c1 0114 	rsb	r1, r1, #20
 80083be:	fa46 fc01 	asr.w	ip, r6, r1
 80083c2:	fa0c f101 	lsl.w	r1, ip, r1
 80083c6:	42b1      	cmp	r1, r6
 80083c8:	f040 848c 	bne.w	8008ce4 <__ieee754_pow+0x9d4>
 80083cc:	f00c 0c01 	and.w	ip, ip, #1
 80083d0:	f1cc 0102 	rsb	r1, ip, #2
 80083d4:	9100      	str	r1, [sp, #0]
 80083d6:	4959      	ldr	r1, [pc, #356]	; (800853c <__ieee754_pow+0x22c>)
 80083d8:	428e      	cmp	r6, r1
 80083da:	d12d      	bne.n	8008438 <__ieee754_pow+0x128>
 80083dc:	2f00      	cmp	r7, #0
 80083de:	da79      	bge.n	80084d4 <__ieee754_pow+0x1c4>
 80083e0:	4956      	ldr	r1, [pc, #344]	; (800853c <__ieee754_pow+0x22c>)
 80083e2:	2000      	movs	r0, #0
 80083e4:	f7f8 fa2a 	bl	800083c <__aeabi_ddiv>
 80083e8:	e016      	b.n	8008418 <__ieee754_pow+0x108>
 80083ea:	2100      	movs	r1, #0
 80083ec:	9100      	str	r1, [sp, #0]
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d13b      	bne.n	800846a <__ieee754_pow+0x15a>
 80083f2:	494f      	ldr	r1, [pc, #316]	; (8008530 <__ieee754_pow+0x220>)
 80083f4:	428e      	cmp	r6, r1
 80083f6:	d1ee      	bne.n	80083d6 <__ieee754_pow+0xc6>
 80083f8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80083fc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008400:	ea53 0308 	orrs.w	r3, r3, r8
 8008404:	f000 8466 	beq.w	8008cd4 <__ieee754_pow+0x9c4>
 8008408:	4b4d      	ldr	r3, [pc, #308]	; (8008540 <__ieee754_pow+0x230>)
 800840a:	429c      	cmp	r4, r3
 800840c:	dd0d      	ble.n	800842a <__ieee754_pow+0x11a>
 800840e:	2f00      	cmp	r7, #0
 8008410:	f280 8464 	bge.w	8008cdc <__ieee754_pow+0x9cc>
 8008414:	2000      	movs	r0, #0
 8008416:	2100      	movs	r1, #0
 8008418:	ec41 0b10 	vmov	d0, r0, r1
 800841c:	b00d      	add	sp, #52	; 0x34
 800841e:	ecbd 8b06 	vpop	{d8-d10}
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	2102      	movs	r1, #2
 8008428:	e7e0      	b.n	80083ec <__ieee754_pow+0xdc>
 800842a:	2f00      	cmp	r7, #0
 800842c:	daf2      	bge.n	8008414 <__ieee754_pow+0x104>
 800842e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008432:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008436:	e7ef      	b.n	8008418 <__ieee754_pow+0x108>
 8008438:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800843c:	d104      	bne.n	8008448 <__ieee754_pow+0x138>
 800843e:	4610      	mov	r0, r2
 8008440:	4619      	mov	r1, r3
 8008442:	f7f8 f8d1 	bl	80005e8 <__aeabi_dmul>
 8008446:	e7e7      	b.n	8008418 <__ieee754_pow+0x108>
 8008448:	493e      	ldr	r1, [pc, #248]	; (8008544 <__ieee754_pow+0x234>)
 800844a:	428f      	cmp	r7, r1
 800844c:	d10d      	bne.n	800846a <__ieee754_pow+0x15a>
 800844e:	f1b9 0f00 	cmp.w	r9, #0
 8008452:	db0a      	blt.n	800846a <__ieee754_pow+0x15a>
 8008454:	ec43 2b10 	vmov	d0, r2, r3
 8008458:	b00d      	add	sp, #52	; 0x34
 800845a:	ecbd 8b06 	vpop	{d8-d10}
 800845e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008462:	f000 be83 	b.w	800916c <__ieee754_sqrt>
 8008466:	2100      	movs	r1, #0
 8008468:	9100      	str	r1, [sp, #0]
 800846a:	ec43 2b10 	vmov	d0, r2, r3
 800846e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008472:	f001 fd99 	bl	8009fa8 <fabs>
 8008476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800847a:	ec51 0b10 	vmov	r0, r1, d0
 800847e:	f1b8 0f00 	cmp.w	r8, #0
 8008482:	d12a      	bne.n	80084da <__ieee754_pow+0x1ca>
 8008484:	b12c      	cbz	r4, 8008492 <__ieee754_pow+0x182>
 8008486:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800853c <__ieee754_pow+0x22c>
 800848a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800848e:	45e6      	cmp	lr, ip
 8008490:	d123      	bne.n	80084da <__ieee754_pow+0x1ca>
 8008492:	2f00      	cmp	r7, #0
 8008494:	da05      	bge.n	80084a2 <__ieee754_pow+0x192>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	2000      	movs	r0, #0
 800849c:	4927      	ldr	r1, [pc, #156]	; (800853c <__ieee754_pow+0x22c>)
 800849e:	f7f8 f9cd 	bl	800083c <__aeabi_ddiv>
 80084a2:	f1b9 0f00 	cmp.w	r9, #0
 80084a6:	dab7      	bge.n	8008418 <__ieee754_pow+0x108>
 80084a8:	9b00      	ldr	r3, [sp, #0]
 80084aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80084ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80084b2:	4323      	orrs	r3, r4
 80084b4:	d108      	bne.n	80084c8 <__ieee754_pow+0x1b8>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	f7f7 fedb 	bl	8000278 <__aeabi_dsub>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	e78d      	b.n	80083e4 <__ieee754_pow+0xd4>
 80084c8:	9b00      	ldr	r3, [sp, #0]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d1a4      	bne.n	8008418 <__ieee754_pow+0x108>
 80084ce:	4602      	mov	r2, r0
 80084d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084d4:	4610      	mov	r0, r2
 80084d6:	4619      	mov	r1, r3
 80084d8:	e79e      	b.n	8008418 <__ieee754_pow+0x108>
 80084da:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80084de:	f10c 35ff 	add.w	r5, ip, #4294967295
 80084e2:	950a      	str	r5, [sp, #40]	; 0x28
 80084e4:	9d00      	ldr	r5, [sp, #0]
 80084e6:	46ac      	mov	ip, r5
 80084e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084ea:	ea5c 0505 	orrs.w	r5, ip, r5
 80084ee:	d0e4      	beq.n	80084ba <__ieee754_pow+0x1aa>
 80084f0:	4b15      	ldr	r3, [pc, #84]	; (8008548 <__ieee754_pow+0x238>)
 80084f2:	429e      	cmp	r6, r3
 80084f4:	f340 80fc 	ble.w	80086f0 <__ieee754_pow+0x3e0>
 80084f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80084fc:	429e      	cmp	r6, r3
 80084fe:	4b10      	ldr	r3, [pc, #64]	; (8008540 <__ieee754_pow+0x230>)
 8008500:	dd07      	ble.n	8008512 <__ieee754_pow+0x202>
 8008502:	429c      	cmp	r4, r3
 8008504:	dc0a      	bgt.n	800851c <__ieee754_pow+0x20c>
 8008506:	2f00      	cmp	r7, #0
 8008508:	da84      	bge.n	8008414 <__ieee754_pow+0x104>
 800850a:	a307      	add	r3, pc, #28	; (adr r3, 8008528 <__ieee754_pow+0x218>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	e795      	b.n	800843e <__ieee754_pow+0x12e>
 8008512:	429c      	cmp	r4, r3
 8008514:	dbf7      	blt.n	8008506 <__ieee754_pow+0x1f6>
 8008516:	4b09      	ldr	r3, [pc, #36]	; (800853c <__ieee754_pow+0x22c>)
 8008518:	429c      	cmp	r4, r3
 800851a:	dd17      	ble.n	800854c <__ieee754_pow+0x23c>
 800851c:	2f00      	cmp	r7, #0
 800851e:	dcf4      	bgt.n	800850a <__ieee754_pow+0x1fa>
 8008520:	e778      	b.n	8008414 <__ieee754_pow+0x104>
 8008522:	bf00      	nop
 8008524:	f3af 8000 	nop.w
 8008528:	8800759c 	.word	0x8800759c
 800852c:	7e37e43c 	.word	0x7e37e43c
 8008530:	7ff00000 	.word	0x7ff00000
 8008534:	0802d889 	.word	0x0802d889
 8008538:	433fffff 	.word	0x433fffff
 800853c:	3ff00000 	.word	0x3ff00000
 8008540:	3fefffff 	.word	0x3fefffff
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	41e00000 	.word	0x41e00000
 800854c:	4b64      	ldr	r3, [pc, #400]	; (80086e0 <__ieee754_pow+0x3d0>)
 800854e:	2200      	movs	r2, #0
 8008550:	f7f7 fe92 	bl	8000278 <__aeabi_dsub>
 8008554:	a356      	add	r3, pc, #344	; (adr r3, 80086b0 <__ieee754_pow+0x3a0>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	4604      	mov	r4, r0
 800855c:	460d      	mov	r5, r1
 800855e:	f7f8 f843 	bl	80005e8 <__aeabi_dmul>
 8008562:	a355      	add	r3, pc, #340	; (adr r3, 80086b8 <__ieee754_pow+0x3a8>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	4606      	mov	r6, r0
 800856a:	460f      	mov	r7, r1
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f8 f83a 	bl	80005e8 <__aeabi_dmul>
 8008574:	4b5b      	ldr	r3, [pc, #364]	; (80086e4 <__ieee754_pow+0x3d4>)
 8008576:	4682      	mov	sl, r0
 8008578:	468b      	mov	fp, r1
 800857a:	2200      	movs	r2, #0
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f8 f832 	bl	80005e8 <__aeabi_dmul>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	a14d      	add	r1, pc, #308	; (adr r1, 80086c0 <__ieee754_pow+0x3b0>)
 800858a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858e:	f7f7 fe73 	bl	8000278 <__aeabi_dsub>
 8008592:	4622      	mov	r2, r4
 8008594:	462b      	mov	r3, r5
 8008596:	f7f8 f827 	bl	80005e8 <__aeabi_dmul>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	2000      	movs	r0, #0
 80085a0:	4951      	ldr	r1, [pc, #324]	; (80086e8 <__ieee754_pow+0x3d8>)
 80085a2:	f7f7 fe69 	bl	8000278 <__aeabi_dsub>
 80085a6:	4622      	mov	r2, r4
 80085a8:	4680      	mov	r8, r0
 80085aa:	4689      	mov	r9, r1
 80085ac:	462b      	mov	r3, r5
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f8 f819 	bl	80005e8 <__aeabi_dmul>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f8 f813 	bl	80005e8 <__aeabi_dmul>
 80085c2:	a341      	add	r3, pc, #260	; (adr r3, 80086c8 <__ieee754_pow+0x3b8>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f8 f80e 	bl	80005e8 <__aeabi_dmul>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	f7f7 fe50 	bl	8000278 <__aeabi_dsub>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f7 fe4a 	bl	800027c <__adddf3>
 80085e8:	2400      	movs	r4, #0
 80085ea:	4632      	mov	r2, r6
 80085ec:	463b      	mov	r3, r7
 80085ee:	4620      	mov	r0, r4
 80085f0:	460d      	mov	r5, r1
 80085f2:	f7f7 fe41 	bl	8000278 <__aeabi_dsub>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4640      	mov	r0, r8
 80085fc:	4649      	mov	r1, r9
 80085fe:	f7f7 fe3b 	bl	8000278 <__aeabi_dsub>
 8008602:	9b00      	ldr	r3, [sp, #0]
 8008604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008606:	3b01      	subs	r3, #1
 8008608:	4313      	orrs	r3, r2
 800860a:	4682      	mov	sl, r0
 800860c:	468b      	mov	fp, r1
 800860e:	f040 81f1 	bne.w	80089f4 <__ieee754_pow+0x6e4>
 8008612:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80086d0 <__ieee754_pow+0x3c0>
 8008616:	eeb0 8a47 	vmov.f32	s16, s14
 800861a:	eef0 8a67 	vmov.f32	s17, s15
 800861e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008622:	2600      	movs	r6, #0
 8008624:	4632      	mov	r2, r6
 8008626:	463b      	mov	r3, r7
 8008628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862c:	f7f7 fe24 	bl	8000278 <__aeabi_dsub>
 8008630:	4622      	mov	r2, r4
 8008632:	462b      	mov	r3, r5
 8008634:	f7f7 ffd8 	bl	80005e8 <__aeabi_dmul>
 8008638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800863c:	4680      	mov	r8, r0
 800863e:	4689      	mov	r9, r1
 8008640:	4650      	mov	r0, sl
 8008642:	4659      	mov	r1, fp
 8008644:	f7f7 ffd0 	bl	80005e8 <__aeabi_dmul>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f7 fe14 	bl	800027c <__adddf3>
 8008654:	4632      	mov	r2, r6
 8008656:	463b      	mov	r3, r7
 8008658:	4680      	mov	r8, r0
 800865a:	4689      	mov	r9, r1
 800865c:	4620      	mov	r0, r4
 800865e:	4629      	mov	r1, r5
 8008660:	f7f7 ffc2 	bl	80005e8 <__aeabi_dmul>
 8008664:	460b      	mov	r3, r1
 8008666:	4604      	mov	r4, r0
 8008668:	460d      	mov	r5, r1
 800866a:	4602      	mov	r2, r0
 800866c:	4649      	mov	r1, r9
 800866e:	4640      	mov	r0, r8
 8008670:	f7f7 fe04 	bl	800027c <__adddf3>
 8008674:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <__ieee754_pow+0x3dc>)
 8008676:	4299      	cmp	r1, r3
 8008678:	ec45 4b19 	vmov	d9, r4, r5
 800867c:	4606      	mov	r6, r0
 800867e:	460f      	mov	r7, r1
 8008680:	468b      	mov	fp, r1
 8008682:	f340 82fe 	ble.w	8008c82 <__ieee754_pow+0x972>
 8008686:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800868a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800868e:	4303      	orrs	r3, r0
 8008690:	f000 81f0 	beq.w	8008a74 <__ieee754_pow+0x764>
 8008694:	a310      	add	r3, pc, #64	; (adr r3, 80086d8 <__ieee754_pow+0x3c8>)
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	ec51 0b18 	vmov	r0, r1, d8
 800869e:	f7f7 ffa3 	bl	80005e8 <__aeabi_dmul>
 80086a2:	a30d      	add	r3, pc, #52	; (adr r3, 80086d8 <__ieee754_pow+0x3c8>)
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	e6cb      	b.n	8008442 <__ieee754_pow+0x132>
 80086aa:	bf00      	nop
 80086ac:	f3af 8000 	nop.w
 80086b0:	60000000 	.word	0x60000000
 80086b4:	3ff71547 	.word	0x3ff71547
 80086b8:	f85ddf44 	.word	0xf85ddf44
 80086bc:	3e54ae0b 	.word	0x3e54ae0b
 80086c0:	55555555 	.word	0x55555555
 80086c4:	3fd55555 	.word	0x3fd55555
 80086c8:	652b82fe 	.word	0x652b82fe
 80086cc:	3ff71547 	.word	0x3ff71547
 80086d0:	00000000 	.word	0x00000000
 80086d4:	bff00000 	.word	0xbff00000
 80086d8:	8800759c 	.word	0x8800759c
 80086dc:	7e37e43c 	.word	0x7e37e43c
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	3fd00000 	.word	0x3fd00000
 80086e8:	3fe00000 	.word	0x3fe00000
 80086ec:	408fffff 	.word	0x408fffff
 80086f0:	4bd7      	ldr	r3, [pc, #860]	; (8008a50 <__ieee754_pow+0x740>)
 80086f2:	ea03 0309 	and.w	r3, r3, r9
 80086f6:	2200      	movs	r2, #0
 80086f8:	b92b      	cbnz	r3, 8008706 <__ieee754_pow+0x3f6>
 80086fa:	4bd6      	ldr	r3, [pc, #856]	; (8008a54 <__ieee754_pow+0x744>)
 80086fc:	f7f7 ff74 	bl	80005e8 <__aeabi_dmul>
 8008700:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008704:	460c      	mov	r4, r1
 8008706:	1523      	asrs	r3, r4, #20
 8008708:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800870c:	4413      	add	r3, r2
 800870e:	9309      	str	r3, [sp, #36]	; 0x24
 8008710:	4bd1      	ldr	r3, [pc, #836]	; (8008a58 <__ieee754_pow+0x748>)
 8008712:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008716:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800871a:	429c      	cmp	r4, r3
 800871c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008720:	dd08      	ble.n	8008734 <__ieee754_pow+0x424>
 8008722:	4bce      	ldr	r3, [pc, #824]	; (8008a5c <__ieee754_pow+0x74c>)
 8008724:	429c      	cmp	r4, r3
 8008726:	f340 8163 	ble.w	80089f0 <__ieee754_pow+0x6e0>
 800872a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872c:	3301      	adds	r3, #1
 800872e:	9309      	str	r3, [sp, #36]	; 0x24
 8008730:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008734:	2400      	movs	r4, #0
 8008736:	00e3      	lsls	r3, r4, #3
 8008738:	930b      	str	r3, [sp, #44]	; 0x2c
 800873a:	4bc9      	ldr	r3, [pc, #804]	; (8008a60 <__ieee754_pow+0x750>)
 800873c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008740:	ed93 7b00 	vldr	d7, [r3]
 8008744:	4629      	mov	r1, r5
 8008746:	ec53 2b17 	vmov	r2, r3, d7
 800874a:	eeb0 8a47 	vmov.f32	s16, s14
 800874e:	eef0 8a67 	vmov.f32	s17, s15
 8008752:	4682      	mov	sl, r0
 8008754:	f7f7 fd90 	bl	8000278 <__aeabi_dsub>
 8008758:	4652      	mov	r2, sl
 800875a:	4606      	mov	r6, r0
 800875c:	460f      	mov	r7, r1
 800875e:	462b      	mov	r3, r5
 8008760:	ec51 0b18 	vmov	r0, r1, d8
 8008764:	f7f7 fd8a 	bl	800027c <__adddf3>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	2000      	movs	r0, #0
 800876e:	49bd      	ldr	r1, [pc, #756]	; (8008a64 <__ieee754_pow+0x754>)
 8008770:	f7f8 f864 	bl	800083c <__aeabi_ddiv>
 8008774:	ec41 0b19 	vmov	d9, r0, r1
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f7 ff32 	bl	80005e8 <__aeabi_dmul>
 8008784:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008788:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800878c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008790:	2300      	movs	r3, #0
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008798:	46ab      	mov	fp, r5
 800879a:	106d      	asrs	r5, r5, #1
 800879c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80087a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80087a4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80087a8:	2200      	movs	r2, #0
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	4614      	mov	r4, r2
 80087b0:	461d      	mov	r5, r3
 80087b2:	f7f7 ff19 	bl	80005e8 <__aeabi_dmul>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f7 fd5b 	bl	8000278 <__aeabi_dsub>
 80087c2:	ec53 2b18 	vmov	r2, r3, d8
 80087c6:	4606      	mov	r6, r0
 80087c8:	460f      	mov	r7, r1
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f7 fd53 	bl	8000278 <__aeabi_dsub>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4650      	mov	r0, sl
 80087d8:	4659      	mov	r1, fp
 80087da:	f7f7 fd4d 	bl	8000278 <__aeabi_dsub>
 80087de:	4642      	mov	r2, r8
 80087e0:	464b      	mov	r3, r9
 80087e2:	f7f7 ff01 	bl	80005e8 <__aeabi_dmul>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4630      	mov	r0, r6
 80087ec:	4639      	mov	r1, r7
 80087ee:	f7f7 fd43 	bl	8000278 <__aeabi_dsub>
 80087f2:	ec53 2b19 	vmov	r2, r3, d9
 80087f6:	f7f7 fef7 	bl	80005e8 <__aeabi_dmul>
 80087fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087fe:	ec41 0b18 	vmov	d8, r0, r1
 8008802:	4610      	mov	r0, r2
 8008804:	4619      	mov	r1, r3
 8008806:	f7f7 feef 	bl	80005e8 <__aeabi_dmul>
 800880a:	a37d      	add	r3, pc, #500	; (adr r3, 8008a00 <__ieee754_pow+0x6f0>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	4604      	mov	r4, r0
 8008812:	460d      	mov	r5, r1
 8008814:	f7f7 fee8 	bl	80005e8 <__aeabi_dmul>
 8008818:	a37b      	add	r3, pc, #492	; (adr r3, 8008a08 <__ieee754_pow+0x6f8>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fd2d 	bl	800027c <__adddf3>
 8008822:	4622      	mov	r2, r4
 8008824:	462b      	mov	r3, r5
 8008826:	f7f7 fedf 	bl	80005e8 <__aeabi_dmul>
 800882a:	a379      	add	r3, pc, #484	; (adr r3, 8008a10 <__ieee754_pow+0x700>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f7 fd24 	bl	800027c <__adddf3>
 8008834:	4622      	mov	r2, r4
 8008836:	462b      	mov	r3, r5
 8008838:	f7f7 fed6 	bl	80005e8 <__aeabi_dmul>
 800883c:	a376      	add	r3, pc, #472	; (adr r3, 8008a18 <__ieee754_pow+0x708>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 fd1b 	bl	800027c <__adddf3>
 8008846:	4622      	mov	r2, r4
 8008848:	462b      	mov	r3, r5
 800884a:	f7f7 fecd 	bl	80005e8 <__aeabi_dmul>
 800884e:	a374      	add	r3, pc, #464	; (adr r3, 8008a20 <__ieee754_pow+0x710>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fd12 	bl	800027c <__adddf3>
 8008858:	4622      	mov	r2, r4
 800885a:	462b      	mov	r3, r5
 800885c:	f7f7 fec4 	bl	80005e8 <__aeabi_dmul>
 8008860:	a371      	add	r3, pc, #452	; (adr r3, 8008a28 <__ieee754_pow+0x718>)
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	f7f7 fd09 	bl	800027c <__adddf3>
 800886a:	4622      	mov	r2, r4
 800886c:	4606      	mov	r6, r0
 800886e:	460f      	mov	r7, r1
 8008870:	462b      	mov	r3, r5
 8008872:	4620      	mov	r0, r4
 8008874:	4629      	mov	r1, r5
 8008876:	f7f7 feb7 	bl	80005e8 <__aeabi_dmul>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f7 feb1 	bl	80005e8 <__aeabi_dmul>
 8008886:	4642      	mov	r2, r8
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
 800888c:	464b      	mov	r3, r9
 800888e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008892:	f7f7 fcf3 	bl	800027c <__adddf3>
 8008896:	ec53 2b18 	vmov	r2, r3, d8
 800889a:	f7f7 fea5 	bl	80005e8 <__aeabi_dmul>
 800889e:	4622      	mov	r2, r4
 80088a0:	462b      	mov	r3, r5
 80088a2:	f7f7 fceb 	bl	800027c <__adddf3>
 80088a6:	4642      	mov	r2, r8
 80088a8:	4682      	mov	sl, r0
 80088aa:	468b      	mov	fp, r1
 80088ac:	464b      	mov	r3, r9
 80088ae:	4640      	mov	r0, r8
 80088b0:	4649      	mov	r1, r9
 80088b2:	f7f7 fe99 	bl	80005e8 <__aeabi_dmul>
 80088b6:	4b6c      	ldr	r3, [pc, #432]	; (8008a68 <__ieee754_pow+0x758>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	4606      	mov	r6, r0
 80088bc:	460f      	mov	r7, r1
 80088be:	f7f7 fcdd 	bl	800027c <__adddf3>
 80088c2:	4652      	mov	r2, sl
 80088c4:	465b      	mov	r3, fp
 80088c6:	f7f7 fcd9 	bl	800027c <__adddf3>
 80088ca:	9c04      	ldr	r4, [sp, #16]
 80088cc:	460d      	mov	r5, r1
 80088ce:	4622      	mov	r2, r4
 80088d0:	460b      	mov	r3, r1
 80088d2:	4640      	mov	r0, r8
 80088d4:	4649      	mov	r1, r9
 80088d6:	f7f7 fe87 	bl	80005e8 <__aeabi_dmul>
 80088da:	4b63      	ldr	r3, [pc, #396]	; (8008a68 <__ieee754_pow+0x758>)
 80088dc:	4680      	mov	r8, r0
 80088de:	4689      	mov	r9, r1
 80088e0:	2200      	movs	r2, #0
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fcc7 	bl	8000278 <__aeabi_dsub>
 80088ea:	4632      	mov	r2, r6
 80088ec:	463b      	mov	r3, r7
 80088ee:	f7f7 fcc3 	bl	8000278 <__aeabi_dsub>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4650      	mov	r0, sl
 80088f8:	4659      	mov	r1, fp
 80088fa:	f7f7 fcbd 	bl	8000278 <__aeabi_dsub>
 80088fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008902:	f7f7 fe71 	bl	80005e8 <__aeabi_dmul>
 8008906:	4622      	mov	r2, r4
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	462b      	mov	r3, r5
 800890e:	ec51 0b18 	vmov	r0, r1, d8
 8008912:	f7f7 fe69 	bl	80005e8 <__aeabi_dmul>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f7 fcad 	bl	800027c <__adddf3>
 8008922:	4606      	mov	r6, r0
 8008924:	460f      	mov	r7, r1
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f7 fca5 	bl	800027c <__adddf3>
 8008932:	9c04      	ldr	r4, [sp, #16]
 8008934:	a33e      	add	r3, pc, #248	; (adr r3, 8008a30 <__ieee754_pow+0x720>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	4620      	mov	r0, r4
 800893c:	460d      	mov	r5, r1
 800893e:	f7f7 fe53 	bl	80005e8 <__aeabi_dmul>
 8008942:	4642      	mov	r2, r8
 8008944:	ec41 0b18 	vmov	d8, r0, r1
 8008948:	464b      	mov	r3, r9
 800894a:	4620      	mov	r0, r4
 800894c:	4629      	mov	r1, r5
 800894e:	f7f7 fc93 	bl	8000278 <__aeabi_dsub>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f7 fc8d 	bl	8000278 <__aeabi_dsub>
 800895e:	a336      	add	r3, pc, #216	; (adr r3, 8008a38 <__ieee754_pow+0x728>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f7f7 fe40 	bl	80005e8 <__aeabi_dmul>
 8008968:	a335      	add	r3, pc, #212	; (adr r3, 8008a40 <__ieee754_pow+0x730>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	4620      	mov	r0, r4
 8008974:	4629      	mov	r1, r5
 8008976:	f7f7 fe37 	bl	80005e8 <__aeabi_dmul>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4630      	mov	r0, r6
 8008980:	4639      	mov	r1, r7
 8008982:	f7f7 fc7b 	bl	800027c <__adddf3>
 8008986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008988:	4b38      	ldr	r3, [pc, #224]	; (8008a6c <__ieee754_pow+0x75c>)
 800898a:	4413      	add	r3, r2
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f7f7 fc74 	bl	800027c <__adddf3>
 8008994:	4682      	mov	sl, r0
 8008996:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008998:	468b      	mov	fp, r1
 800899a:	f7f7 fdbb 	bl	8000514 <__aeabi_i2d>
 800899e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089a0:	4b33      	ldr	r3, [pc, #204]	; (8008a70 <__ieee754_pow+0x760>)
 80089a2:	4413      	add	r3, r2
 80089a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089a8:	4606      	mov	r6, r0
 80089aa:	460f      	mov	r7, r1
 80089ac:	4652      	mov	r2, sl
 80089ae:	465b      	mov	r3, fp
 80089b0:	ec51 0b18 	vmov	r0, r1, d8
 80089b4:	f7f7 fc62 	bl	800027c <__adddf3>
 80089b8:	4642      	mov	r2, r8
 80089ba:	464b      	mov	r3, r9
 80089bc:	f7f7 fc5e 	bl	800027c <__adddf3>
 80089c0:	4632      	mov	r2, r6
 80089c2:	463b      	mov	r3, r7
 80089c4:	f7f7 fc5a 	bl	800027c <__adddf3>
 80089c8:	9c04      	ldr	r4, [sp, #16]
 80089ca:	4632      	mov	r2, r6
 80089cc:	463b      	mov	r3, r7
 80089ce:	4620      	mov	r0, r4
 80089d0:	460d      	mov	r5, r1
 80089d2:	f7f7 fc51 	bl	8000278 <__aeabi_dsub>
 80089d6:	4642      	mov	r2, r8
 80089d8:	464b      	mov	r3, r9
 80089da:	f7f7 fc4d 	bl	8000278 <__aeabi_dsub>
 80089de:	ec53 2b18 	vmov	r2, r3, d8
 80089e2:	f7f7 fc49 	bl	8000278 <__aeabi_dsub>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4650      	mov	r0, sl
 80089ec:	4659      	mov	r1, fp
 80089ee:	e606      	b.n	80085fe <__ieee754_pow+0x2ee>
 80089f0:	2401      	movs	r4, #1
 80089f2:	e6a0      	b.n	8008736 <__ieee754_pow+0x426>
 80089f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008a48 <__ieee754_pow+0x738>
 80089f8:	e60d      	b.n	8008616 <__ieee754_pow+0x306>
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w
 8008a00:	4a454eef 	.word	0x4a454eef
 8008a04:	3fca7e28 	.word	0x3fca7e28
 8008a08:	93c9db65 	.word	0x93c9db65
 8008a0c:	3fcd864a 	.word	0x3fcd864a
 8008a10:	a91d4101 	.word	0xa91d4101
 8008a14:	3fd17460 	.word	0x3fd17460
 8008a18:	518f264d 	.word	0x518f264d
 8008a1c:	3fd55555 	.word	0x3fd55555
 8008a20:	db6fabff 	.word	0xdb6fabff
 8008a24:	3fdb6db6 	.word	0x3fdb6db6
 8008a28:	33333303 	.word	0x33333303
 8008a2c:	3fe33333 	.word	0x3fe33333
 8008a30:	e0000000 	.word	0xe0000000
 8008a34:	3feec709 	.word	0x3feec709
 8008a38:	dc3a03fd 	.word	0xdc3a03fd
 8008a3c:	3feec709 	.word	0x3feec709
 8008a40:	145b01f5 	.word	0x145b01f5
 8008a44:	be3e2fe0 	.word	0xbe3e2fe0
 8008a48:	00000000 	.word	0x00000000
 8008a4c:	3ff00000 	.word	0x3ff00000
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	43400000 	.word	0x43400000
 8008a58:	0003988e 	.word	0x0003988e
 8008a5c:	000bb679 	.word	0x000bb679
 8008a60:	0802d8f8 	.word	0x0802d8f8
 8008a64:	3ff00000 	.word	0x3ff00000
 8008a68:	40080000 	.word	0x40080000
 8008a6c:	0802d918 	.word	0x0802d918
 8008a70:	0802d908 	.word	0x0802d908
 8008a74:	a3b5      	add	r3, pc, #724	; (adr r3, 8008d4c <__ieee754_pow+0xa3c>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	f7f7 fbfd 	bl	800027c <__adddf3>
 8008a82:	4622      	mov	r2, r4
 8008a84:	ec41 0b1a 	vmov	d10, r0, r1
 8008a88:	462b      	mov	r3, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	f7f7 fbf3 	bl	8000278 <__aeabi_dsub>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	ec51 0b1a 	vmov	r0, r1, d10
 8008a9a:	f7f8 f835 	bl	8000b08 <__aeabi_dcmpgt>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f47f adf8 	bne.w	8008694 <__ieee754_pow+0x384>
 8008aa4:	4aa4      	ldr	r2, [pc, #656]	; (8008d38 <__ieee754_pow+0xa28>)
 8008aa6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	f340 810b 	ble.w	8008cc6 <__ieee754_pow+0x9b6>
 8008ab0:	151b      	asrs	r3, r3, #20
 8008ab2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008ab6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008aba:	fa4a f303 	asr.w	r3, sl, r3
 8008abe:	445b      	add	r3, fp
 8008ac0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008ac4:	4e9d      	ldr	r6, [pc, #628]	; (8008d3c <__ieee754_pow+0xa2c>)
 8008ac6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008aca:	4116      	asrs	r6, r2
 8008acc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	ea23 0106 	bic.w	r1, r3, r6
 8008ad6:	f1c2 0214 	rsb	r2, r2, #20
 8008ada:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008ade:	fa4a fa02 	asr.w	sl, sl, r2
 8008ae2:	f1bb 0f00 	cmp.w	fp, #0
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	bfb8      	it	lt
 8008af0:	f1ca 0a00 	rsblt	sl, sl, #0
 8008af4:	f7f7 fbc0 	bl	8000278 <__aeabi_dsub>
 8008af8:	ec41 0b19 	vmov	d9, r0, r1
 8008afc:	4642      	mov	r2, r8
 8008afe:	464b      	mov	r3, r9
 8008b00:	ec51 0b19 	vmov	r0, r1, d9
 8008b04:	f7f7 fbba 	bl	800027c <__adddf3>
 8008b08:	2400      	movs	r4, #0
 8008b0a:	a379      	add	r3, pc, #484	; (adr r3, 8008cf0 <__ieee754_pow+0x9e0>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	4620      	mov	r0, r4
 8008b12:	460d      	mov	r5, r1
 8008b14:	f7f7 fd68 	bl	80005e8 <__aeabi_dmul>
 8008b18:	ec53 2b19 	vmov	r2, r3, d9
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	460f      	mov	r7, r1
 8008b20:	4620      	mov	r0, r4
 8008b22:	4629      	mov	r1, r5
 8008b24:	f7f7 fba8 	bl	8000278 <__aeabi_dsub>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fba2 	bl	8000278 <__aeabi_dsub>
 8008b34:	a370      	add	r3, pc, #448	; (adr r3, 8008cf8 <__ieee754_pow+0x9e8>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 fd55 	bl	80005e8 <__aeabi_dmul>
 8008b3e:	a370      	add	r3, pc, #448	; (adr r3, 8008d00 <__ieee754_pow+0x9f0>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	4680      	mov	r8, r0
 8008b46:	4689      	mov	r9, r1
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	f7f7 fd4c 	bl	80005e8 <__aeabi_dmul>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4640      	mov	r0, r8
 8008b56:	4649      	mov	r1, r9
 8008b58:	f7f7 fb90 	bl	800027c <__adddf3>
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	460d      	mov	r5, r1
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4630      	mov	r0, r6
 8008b66:	4639      	mov	r1, r7
 8008b68:	f7f7 fb88 	bl	800027c <__adddf3>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	4680      	mov	r8, r0
 8008b72:	4689      	mov	r9, r1
 8008b74:	f7f7 fb80 	bl	8000278 <__aeabi_dsub>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 fb7a 	bl	8000278 <__aeabi_dsub>
 8008b84:	4642      	mov	r2, r8
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	464b      	mov	r3, r9
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	f7f7 fd2a 	bl	80005e8 <__aeabi_dmul>
 8008b94:	a35c      	add	r3, pc, #368	; (adr r3, 8008d08 <__ieee754_pow+0x9f8>)
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	f7f7 fd23 	bl	80005e8 <__aeabi_dmul>
 8008ba2:	a35b      	add	r3, pc, #364	; (adr r3, 8008d10 <__ieee754_pow+0xa00>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f7f7 fb66 	bl	8000278 <__aeabi_dsub>
 8008bac:	4622      	mov	r2, r4
 8008bae:	462b      	mov	r3, r5
 8008bb0:	f7f7 fd1a 	bl	80005e8 <__aeabi_dmul>
 8008bb4:	a358      	add	r3, pc, #352	; (adr r3, 8008d18 <__ieee754_pow+0xa08>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fb5f 	bl	800027c <__adddf3>
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	f7f7 fd11 	bl	80005e8 <__aeabi_dmul>
 8008bc6:	a356      	add	r3, pc, #344	; (adr r3, 8008d20 <__ieee754_pow+0xa10>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f7f7 fb54 	bl	8000278 <__aeabi_dsub>
 8008bd0:	4622      	mov	r2, r4
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	f7f7 fd08 	bl	80005e8 <__aeabi_dmul>
 8008bd8:	a353      	add	r3, pc, #332	; (adr r3, 8008d28 <__ieee754_pow+0xa18>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fb4d 	bl	800027c <__adddf3>
 8008be2:	4622      	mov	r2, r4
 8008be4:	462b      	mov	r3, r5
 8008be6:	f7f7 fcff 	bl	80005e8 <__aeabi_dmul>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f7f7 fb41 	bl	8000278 <__aeabi_dsub>
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4649      	mov	r1, r9
 8008c02:	f7f7 fcf1 	bl	80005e8 <__aeabi_dmul>
 8008c06:	2200      	movs	r2, #0
 8008c08:	ec41 0b19 	vmov	d9, r0, r1
 8008c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c10:	4620      	mov	r0, r4
 8008c12:	4629      	mov	r1, r5
 8008c14:	f7f7 fb30 	bl	8000278 <__aeabi_dsub>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	ec51 0b19 	vmov	r0, r1, d9
 8008c20:	f7f7 fe0c 	bl	800083c <__aeabi_ddiv>
 8008c24:	4632      	mov	r2, r6
 8008c26:	4604      	mov	r4, r0
 8008c28:	460d      	mov	r5, r1
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	4649      	mov	r1, r9
 8008c30:	f7f7 fcda 	bl	80005e8 <__aeabi_dmul>
 8008c34:	4632      	mov	r2, r6
 8008c36:	463b      	mov	r3, r7
 8008c38:	f7f7 fb20 	bl	800027c <__adddf3>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4620      	mov	r0, r4
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7f7 fb18 	bl	8000278 <__aeabi_dsub>
 8008c48:	4642      	mov	r2, r8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	f7f7 fb14 	bl	8000278 <__aeabi_dsub>
 8008c50:	460b      	mov	r3, r1
 8008c52:	4602      	mov	r2, r0
 8008c54:	493a      	ldr	r1, [pc, #232]	; (8008d40 <__ieee754_pow+0xa30>)
 8008c56:	2000      	movs	r0, #0
 8008c58:	f7f7 fb0e 	bl	8000278 <__aeabi_dsub>
 8008c5c:	e9cd 0100 	strd	r0, r1, [sp]
 8008c60:	9b01      	ldr	r3, [sp, #4]
 8008c62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c6a:	da2f      	bge.n	8008ccc <__ieee754_pow+0x9bc>
 8008c6c:	4650      	mov	r0, sl
 8008c6e:	ed9d 0b00 	vldr	d0, [sp]
 8008c72:	f001 fac1 	bl	800a1f8 <scalbn>
 8008c76:	ec51 0b10 	vmov	r0, r1, d0
 8008c7a:	ec53 2b18 	vmov	r2, r3, d8
 8008c7e:	f7ff bbe0 	b.w	8008442 <__ieee754_pow+0x132>
 8008c82:	4b30      	ldr	r3, [pc, #192]	; (8008d44 <__ieee754_pow+0xa34>)
 8008c84:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c88:	429e      	cmp	r6, r3
 8008c8a:	f77f af0b 	ble.w	8008aa4 <__ieee754_pow+0x794>
 8008c8e:	4b2e      	ldr	r3, [pc, #184]	; (8008d48 <__ieee754_pow+0xa38>)
 8008c90:	440b      	add	r3, r1
 8008c92:	4303      	orrs	r3, r0
 8008c94:	d00b      	beq.n	8008cae <__ieee754_pow+0x99e>
 8008c96:	a326      	add	r3, pc, #152	; (adr r3, 8008d30 <__ieee754_pow+0xa20>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	ec51 0b18 	vmov	r0, r1, d8
 8008ca0:	f7f7 fca2 	bl	80005e8 <__aeabi_dmul>
 8008ca4:	a322      	add	r3, pc, #136	; (adr r3, 8008d30 <__ieee754_pow+0xa20>)
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7ff bbca 	b.w	8008442 <__ieee754_pow+0x132>
 8008cae:	4622      	mov	r2, r4
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	f7f7 fae1 	bl	8000278 <__aeabi_dsub>
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	464b      	mov	r3, r9
 8008cba:	f7f7 ff1b 	bl	8000af4 <__aeabi_dcmpge>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f43f aef0 	beq.w	8008aa4 <__ieee754_pow+0x794>
 8008cc4:	e7e7      	b.n	8008c96 <__ieee754_pow+0x986>
 8008cc6:	f04f 0a00 	mov.w	sl, #0
 8008cca:	e717      	b.n	8008afc <__ieee754_pow+0x7ec>
 8008ccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	e7d2      	b.n	8008c7a <__ieee754_pow+0x96a>
 8008cd4:	491a      	ldr	r1, [pc, #104]	; (8008d40 <__ieee754_pow+0xa30>)
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	f7ff bb9e 	b.w	8008418 <__ieee754_pow+0x108>
 8008cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ce0:	f7ff bb9a 	b.w	8008418 <__ieee754_pow+0x108>
 8008ce4:	9000      	str	r0, [sp, #0]
 8008ce6:	f7ff bb76 	b.w	80083d6 <__ieee754_pow+0xc6>
 8008cea:	2100      	movs	r1, #0
 8008cec:	f7ff bb60 	b.w	80083b0 <__ieee754_pow+0xa0>
 8008cf0:	00000000 	.word	0x00000000
 8008cf4:	3fe62e43 	.word	0x3fe62e43
 8008cf8:	fefa39ef 	.word	0xfefa39ef
 8008cfc:	3fe62e42 	.word	0x3fe62e42
 8008d00:	0ca86c39 	.word	0x0ca86c39
 8008d04:	be205c61 	.word	0xbe205c61
 8008d08:	72bea4d0 	.word	0x72bea4d0
 8008d0c:	3e663769 	.word	0x3e663769
 8008d10:	c5d26bf1 	.word	0xc5d26bf1
 8008d14:	3ebbbd41 	.word	0x3ebbbd41
 8008d18:	af25de2c 	.word	0xaf25de2c
 8008d1c:	3f11566a 	.word	0x3f11566a
 8008d20:	16bebd93 	.word	0x16bebd93
 8008d24:	3f66c16c 	.word	0x3f66c16c
 8008d28:	5555553e 	.word	0x5555553e
 8008d2c:	3fc55555 	.word	0x3fc55555
 8008d30:	c2f8f359 	.word	0xc2f8f359
 8008d34:	01a56e1f 	.word	0x01a56e1f
 8008d38:	3fe00000 	.word	0x3fe00000
 8008d3c:	000fffff 	.word	0x000fffff
 8008d40:	3ff00000 	.word	0x3ff00000
 8008d44:	4090cbff 	.word	0x4090cbff
 8008d48:	3f6f3400 	.word	0x3f6f3400
 8008d4c:	652b82fe 	.word	0x652b82fe
 8008d50:	3c971547 	.word	0x3c971547
 8008d54:	00000000 	.word	0x00000000

08008d58 <__ieee754_rem_pio2>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	ed2d 8b02 	vpush	{d8}
 8008d60:	ec55 4b10 	vmov	r4, r5, d0
 8008d64:	4bca      	ldr	r3, [pc, #808]	; (8009090 <__ieee754_rem_pio2+0x338>)
 8008d66:	b08b      	sub	sp, #44	; 0x2c
 8008d68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008d6c:	4598      	cmp	r8, r3
 8008d6e:	4682      	mov	sl, r0
 8008d70:	9502      	str	r5, [sp, #8]
 8008d72:	dc08      	bgt.n	8008d86 <__ieee754_rem_pio2+0x2e>
 8008d74:	2200      	movs	r2, #0
 8008d76:	2300      	movs	r3, #0
 8008d78:	ed80 0b00 	vstr	d0, [r0]
 8008d7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008d80:	f04f 0b00 	mov.w	fp, #0
 8008d84:	e028      	b.n	8008dd8 <__ieee754_rem_pio2+0x80>
 8008d86:	4bc3      	ldr	r3, [pc, #780]	; (8009094 <__ieee754_rem_pio2+0x33c>)
 8008d88:	4598      	cmp	r8, r3
 8008d8a:	dc78      	bgt.n	8008e7e <__ieee754_rem_pio2+0x126>
 8008d8c:	9b02      	ldr	r3, [sp, #8]
 8008d8e:	4ec2      	ldr	r6, [pc, #776]	; (8009098 <__ieee754_rem_pio2+0x340>)
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	ee10 0a10 	vmov	r0, s0
 8008d96:	a3b0      	add	r3, pc, #704	; (adr r3, 8009058 <__ieee754_rem_pio2+0x300>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	dd39      	ble.n	8008e14 <__ieee754_rem_pio2+0xbc>
 8008da0:	f7f7 fa6a 	bl	8000278 <__aeabi_dsub>
 8008da4:	45b0      	cmp	r8, r6
 8008da6:	4604      	mov	r4, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	d01b      	beq.n	8008de4 <__ieee754_rem_pio2+0x8c>
 8008dac:	a3ac      	add	r3, pc, #688	; (adr r3, 8009060 <__ieee754_rem_pio2+0x308>)
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	f7f7 fa61 	bl	8000278 <__aeabi_dsub>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	e9ca 2300 	strd	r2, r3, [sl]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7f7 fa59 	bl	8000278 <__aeabi_dsub>
 8008dc6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009060 <__ieee754_rem_pio2+0x308>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	f7f7 fa54 	bl	8000278 <__aeabi_dsub>
 8008dd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008dd4:	f04f 0b01 	mov.w	fp, #1
 8008dd8:	4658      	mov	r0, fp
 8008dda:	b00b      	add	sp, #44	; 0x2c
 8008ddc:	ecbd 8b02 	vpop	{d8}
 8008de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009068 <__ieee754_rem_pio2+0x310>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa45 	bl	8000278 <__aeabi_dsub>
 8008dee:	a3a0      	add	r3, pc, #640	; (adr r3, 8009070 <__ieee754_rem_pio2+0x318>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	f7f7 fa3e 	bl	8000278 <__aeabi_dsub>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	e9ca 2300 	strd	r2, r3, [sl]
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fa36 	bl	8000278 <__aeabi_dsub>
 8008e0c:	a398      	add	r3, pc, #608	; (adr r3, 8009070 <__ieee754_rem_pio2+0x318>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	e7db      	b.n	8008dcc <__ieee754_rem_pio2+0x74>
 8008e14:	f7f7 fa32 	bl	800027c <__adddf3>
 8008e18:	45b0      	cmp	r8, r6
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	d016      	beq.n	8008e4e <__ieee754_rem_pio2+0xf6>
 8008e20:	a38f      	add	r3, pc, #572	; (adr r3, 8009060 <__ieee754_rem_pio2+0x308>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f7f7 fa29 	bl	800027c <__adddf3>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	e9ca 2300 	strd	r2, r3, [sl]
 8008e32:	4620      	mov	r0, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7f7 fa1f 	bl	8000278 <__aeabi_dsub>
 8008e3a:	a389      	add	r3, pc, #548	; (adr r3, 8009060 <__ieee754_rem_pio2+0x308>)
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f7f7 fa1c 	bl	800027c <__adddf3>
 8008e44:	f04f 3bff 	mov.w	fp, #4294967295
 8008e48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e4c:	e7c4      	b.n	8008dd8 <__ieee754_rem_pio2+0x80>
 8008e4e:	a386      	add	r3, pc, #536	; (adr r3, 8009068 <__ieee754_rem_pio2+0x310>)
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	f7f7 fa12 	bl	800027c <__adddf3>
 8008e58:	a385      	add	r3, pc, #532	; (adr r3, 8009070 <__ieee754_rem_pio2+0x318>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	4604      	mov	r4, r0
 8008e60:	460d      	mov	r5, r1
 8008e62:	f7f7 fa0b 	bl	800027c <__adddf3>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	e9ca 2300 	strd	r2, r3, [sl]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	4629      	mov	r1, r5
 8008e72:	f7f7 fa01 	bl	8000278 <__aeabi_dsub>
 8008e76:	a37e      	add	r3, pc, #504	; (adr r3, 8009070 <__ieee754_rem_pio2+0x318>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	e7e0      	b.n	8008e40 <__ieee754_rem_pio2+0xe8>
 8008e7e:	4b87      	ldr	r3, [pc, #540]	; (800909c <__ieee754_rem_pio2+0x344>)
 8008e80:	4598      	cmp	r8, r3
 8008e82:	f300 80d9 	bgt.w	8009038 <__ieee754_rem_pio2+0x2e0>
 8008e86:	f001 f88f 	bl	8009fa8 <fabs>
 8008e8a:	ec55 4b10 	vmov	r4, r5, d0
 8008e8e:	ee10 0a10 	vmov	r0, s0
 8008e92:	a379      	add	r3, pc, #484	; (adr r3, 8009078 <__ieee754_rem_pio2+0x320>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fba5 	bl	80005e8 <__aeabi_dmul>
 8008e9e:	4b80      	ldr	r3, [pc, #512]	; (80090a0 <__ieee754_rem_pio2+0x348>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f7f7 f9eb 	bl	800027c <__adddf3>
 8008ea6:	f7f7 fe4f 	bl	8000b48 <__aeabi_d2iz>
 8008eaa:	4683      	mov	fp, r0
 8008eac:	f7f7 fb32 	bl	8000514 <__aeabi_i2d>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	ec43 2b18 	vmov	d8, r2, r3
 8008eb8:	a367      	add	r3, pc, #412	; (adr r3, 8009058 <__ieee754_rem_pio2+0x300>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fb93 	bl	80005e8 <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7f7 f9d5 	bl	8000278 <__aeabi_dsub>
 8008ece:	a364      	add	r3, pc, #400	; (adr r3, 8009060 <__ieee754_rem_pio2+0x308>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	460f      	mov	r7, r1
 8008ed8:	ec51 0b18 	vmov	r0, r1, d8
 8008edc:	f7f7 fb84 	bl	80005e8 <__aeabi_dmul>
 8008ee0:	f1bb 0f1f 	cmp.w	fp, #31
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	dc0d      	bgt.n	8008f06 <__ieee754_rem_pio2+0x1ae>
 8008eea:	4b6e      	ldr	r3, [pc, #440]	; (80090a4 <__ieee754_rem_pio2+0x34c>)
 8008eec:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef4:	4543      	cmp	r3, r8
 8008ef6:	d006      	beq.n	8008f06 <__ieee754_rem_pio2+0x1ae>
 8008ef8:	4622      	mov	r2, r4
 8008efa:	462b      	mov	r3, r5
 8008efc:	4630      	mov	r0, r6
 8008efe:	4639      	mov	r1, r7
 8008f00:	f7f7 f9ba 	bl	8000278 <__aeabi_dsub>
 8008f04:	e00f      	b.n	8008f26 <__ieee754_rem_pio2+0x1ce>
 8008f06:	462b      	mov	r3, r5
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	f7f7 f9b3 	bl	8000278 <__aeabi_dsub>
 8008f12:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008f20:	f1b8 0f10 	cmp.w	r8, #16
 8008f24:	dc02      	bgt.n	8008f2c <__ieee754_rem_pio2+0x1d4>
 8008f26:	e9ca 0100 	strd	r0, r1, [sl]
 8008f2a:	e039      	b.n	8008fa0 <__ieee754_rem_pio2+0x248>
 8008f2c:	a34e      	add	r3, pc, #312	; (adr r3, 8009068 <__ieee754_rem_pio2+0x310>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	ec51 0b18 	vmov	r0, r1, d8
 8008f36:	f7f7 fb57 	bl	80005e8 <__aeabi_dmul>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7f7 f997 	bl	8000278 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4680      	mov	r8, r0
 8008f50:	4689      	mov	r9, r1
 8008f52:	4630      	mov	r0, r6
 8008f54:	4639      	mov	r1, r7
 8008f56:	f7f7 f98f 	bl	8000278 <__aeabi_dsub>
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	f7f7 f98b 	bl	8000278 <__aeabi_dsub>
 8008f62:	a343      	add	r3, pc, #268	; (adr r3, 8009070 <__ieee754_rem_pio2+0x318>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	4604      	mov	r4, r0
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	ec51 0b18 	vmov	r0, r1, d8
 8008f70:	f7f7 fb3a 	bl	80005e8 <__aeabi_dmul>
 8008f74:	4622      	mov	r2, r4
 8008f76:	462b      	mov	r3, r5
 8008f78:	f7f7 f97e 	bl	8000278 <__aeabi_dsub>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	4640      	mov	r0, r8
 8008f86:	4649      	mov	r1, r9
 8008f88:	f7f7 f976 	bl	8000278 <__aeabi_dsub>
 8008f8c:	9a03      	ldr	r2, [sp, #12]
 8008f8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b31      	cmp	r3, #49	; 0x31
 8008f96:	dc24      	bgt.n	8008fe2 <__ieee754_rem_pio2+0x28a>
 8008f98:	e9ca 0100 	strd	r0, r1, [sl]
 8008f9c:	4646      	mov	r6, r8
 8008f9e:	464f      	mov	r7, r9
 8008fa0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4642      	mov	r2, r8
 8008fa8:	464b      	mov	r3, r9
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 f964 	bl	8000278 <__aeabi_dsub>
 8008fb0:	462b      	mov	r3, r5
 8008fb2:	4622      	mov	r2, r4
 8008fb4:	f7f7 f960 	bl	8000278 <__aeabi_dsub>
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008fc0:	f6bf af0a 	bge.w	8008dd8 <__ieee754_rem_pio2+0x80>
 8008fc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008fc8:	f8ca 3004 	str.w	r3, [sl, #4]
 8008fcc:	f8ca 8000 	str.w	r8, [sl]
 8008fd0:	f8ca 0008 	str.w	r0, [sl, #8]
 8008fd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fd8:	f8ca 300c 	str.w	r3, [sl, #12]
 8008fdc:	f1cb 0b00 	rsb	fp, fp, #0
 8008fe0:	e6fa      	b.n	8008dd8 <__ieee754_rem_pio2+0x80>
 8008fe2:	a327      	add	r3, pc, #156	; (adr r3, 8009080 <__ieee754_rem_pio2+0x328>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	ec51 0b18 	vmov	r0, r1, d8
 8008fec:	f7f7 fafc 	bl	80005e8 <__aeabi_dmul>
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	f7f7 f93c 	bl	8000278 <__aeabi_dsub>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4606      	mov	r6, r0
 8009006:	460f      	mov	r7, r1
 8009008:	4640      	mov	r0, r8
 800900a:	4649      	mov	r1, r9
 800900c:	f7f7 f934 	bl	8000278 <__aeabi_dsub>
 8009010:	4622      	mov	r2, r4
 8009012:	462b      	mov	r3, r5
 8009014:	f7f7 f930 	bl	8000278 <__aeabi_dsub>
 8009018:	a31b      	add	r3, pc, #108	; (adr r3, 8009088 <__ieee754_rem_pio2+0x330>)
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	4604      	mov	r4, r0
 8009020:	460d      	mov	r5, r1
 8009022:	ec51 0b18 	vmov	r0, r1, d8
 8009026:	f7f7 fadf 	bl	80005e8 <__aeabi_dmul>
 800902a:	4622      	mov	r2, r4
 800902c:	462b      	mov	r3, r5
 800902e:	f7f7 f923 	bl	8000278 <__aeabi_dsub>
 8009032:	4604      	mov	r4, r0
 8009034:	460d      	mov	r5, r1
 8009036:	e75f      	b.n	8008ef8 <__ieee754_rem_pio2+0x1a0>
 8009038:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <__ieee754_rem_pio2+0x350>)
 800903a:	4598      	cmp	r8, r3
 800903c:	dd36      	ble.n	80090ac <__ieee754_rem_pio2+0x354>
 800903e:	ee10 2a10 	vmov	r2, s0
 8009042:	462b      	mov	r3, r5
 8009044:	4620      	mov	r0, r4
 8009046:	4629      	mov	r1, r5
 8009048:	f7f7 f916 	bl	8000278 <__aeabi_dsub>
 800904c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009050:	e9ca 0100 	strd	r0, r1, [sl]
 8009054:	e694      	b.n	8008d80 <__ieee754_rem_pio2+0x28>
 8009056:	bf00      	nop
 8009058:	54400000 	.word	0x54400000
 800905c:	3ff921fb 	.word	0x3ff921fb
 8009060:	1a626331 	.word	0x1a626331
 8009064:	3dd0b461 	.word	0x3dd0b461
 8009068:	1a600000 	.word	0x1a600000
 800906c:	3dd0b461 	.word	0x3dd0b461
 8009070:	2e037073 	.word	0x2e037073
 8009074:	3ba3198a 	.word	0x3ba3198a
 8009078:	6dc9c883 	.word	0x6dc9c883
 800907c:	3fe45f30 	.word	0x3fe45f30
 8009080:	2e000000 	.word	0x2e000000
 8009084:	3ba3198a 	.word	0x3ba3198a
 8009088:	252049c1 	.word	0x252049c1
 800908c:	397b839a 	.word	0x397b839a
 8009090:	3fe921fb 	.word	0x3fe921fb
 8009094:	4002d97b 	.word	0x4002d97b
 8009098:	3ff921fb 	.word	0x3ff921fb
 800909c:	413921fb 	.word	0x413921fb
 80090a0:	3fe00000 	.word	0x3fe00000
 80090a4:	0802d928 	.word	0x0802d928
 80090a8:	7fefffff 	.word	0x7fefffff
 80090ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 80090b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80090b4:	ee10 0a10 	vmov	r0, s0
 80090b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80090bc:	ee10 6a10 	vmov	r6, s0
 80090c0:	460f      	mov	r7, r1
 80090c2:	f7f7 fd41 	bl	8000b48 <__aeabi_d2iz>
 80090c6:	f7f7 fa25 	bl	8000514 <__aeabi_i2d>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4630      	mov	r0, r6
 80090d0:	4639      	mov	r1, r7
 80090d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090d6:	f7f7 f8cf 	bl	8000278 <__aeabi_dsub>
 80090da:	4b22      	ldr	r3, [pc, #136]	; (8009164 <__ieee754_rem_pio2+0x40c>)
 80090dc:	2200      	movs	r2, #0
 80090de:	f7f7 fa83 	bl	80005e8 <__aeabi_dmul>
 80090e2:	460f      	mov	r7, r1
 80090e4:	4606      	mov	r6, r0
 80090e6:	f7f7 fd2f 	bl	8000b48 <__aeabi_d2iz>
 80090ea:	f7f7 fa13 	bl	8000514 <__aeabi_i2d>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4630      	mov	r0, r6
 80090f4:	4639      	mov	r1, r7
 80090f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80090fa:	f7f7 f8bd 	bl	8000278 <__aeabi_dsub>
 80090fe:	4b19      	ldr	r3, [pc, #100]	; (8009164 <__ieee754_rem_pio2+0x40c>)
 8009100:	2200      	movs	r2, #0
 8009102:	f7f7 fa71 	bl	80005e8 <__aeabi_dmul>
 8009106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800910a:	ad04      	add	r5, sp, #16
 800910c:	f04f 0803 	mov.w	r8, #3
 8009110:	46a9      	mov	r9, r5
 8009112:	2600      	movs	r6, #0
 8009114:	2700      	movs	r7, #0
 8009116:	4632      	mov	r2, r6
 8009118:	463b      	mov	r3, r7
 800911a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800911e:	46c3      	mov	fp, r8
 8009120:	3d08      	subs	r5, #8
 8009122:	f108 38ff 	add.w	r8, r8, #4294967295
 8009126:	f7f7 fcc7 	bl	8000ab8 <__aeabi_dcmpeq>
 800912a:	2800      	cmp	r0, #0
 800912c:	d1f3      	bne.n	8009116 <__ieee754_rem_pio2+0x3be>
 800912e:	4b0e      	ldr	r3, [pc, #56]	; (8009168 <__ieee754_rem_pio2+0x410>)
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	2302      	movs	r3, #2
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	4622      	mov	r2, r4
 8009138:	465b      	mov	r3, fp
 800913a:	4651      	mov	r1, sl
 800913c:	4648      	mov	r0, r9
 800913e:	f000 f993 	bl	8009468 <__kernel_rem_pio2>
 8009142:	9b02      	ldr	r3, [sp, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	4683      	mov	fp, r0
 8009148:	f6bf ae46 	bge.w	8008dd8 <__ieee754_rem_pio2+0x80>
 800914c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009150:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009154:	f8ca 3004 	str.w	r3, [sl, #4]
 8009158:	f8da 300c 	ldr.w	r3, [sl, #12]
 800915c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009160:	e73a      	b.n	8008fd8 <__ieee754_rem_pio2+0x280>
 8009162:	bf00      	nop
 8009164:	41700000 	.word	0x41700000
 8009168:	0802d9a8 	.word	0x0802d9a8

0800916c <__ieee754_sqrt>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	ec55 4b10 	vmov	r4, r5, d0
 8009174:	4e56      	ldr	r6, [pc, #344]	; (80092d0 <__ieee754_sqrt+0x164>)
 8009176:	43ae      	bics	r6, r5
 8009178:	ee10 0a10 	vmov	r0, s0
 800917c:	ee10 3a10 	vmov	r3, s0
 8009180:	4629      	mov	r1, r5
 8009182:	462a      	mov	r2, r5
 8009184:	d110      	bne.n	80091a8 <__ieee754_sqrt+0x3c>
 8009186:	ee10 2a10 	vmov	r2, s0
 800918a:	462b      	mov	r3, r5
 800918c:	f7f7 fa2c 	bl	80005e8 <__aeabi_dmul>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4620      	mov	r0, r4
 8009196:	4629      	mov	r1, r5
 8009198:	f7f7 f870 	bl	800027c <__adddf3>
 800919c:	4604      	mov	r4, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	ec45 4b10 	vmov	d0, r4, r5
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	dc10      	bgt.n	80091ce <__ieee754_sqrt+0x62>
 80091ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80091b0:	4330      	orrs	r0, r6
 80091b2:	d0f5      	beq.n	80091a0 <__ieee754_sqrt+0x34>
 80091b4:	b15d      	cbz	r5, 80091ce <__ieee754_sqrt+0x62>
 80091b6:	ee10 2a10 	vmov	r2, s0
 80091ba:	462b      	mov	r3, r5
 80091bc:	ee10 0a10 	vmov	r0, s0
 80091c0:	f7f7 f85a 	bl	8000278 <__aeabi_dsub>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	f7f7 fb38 	bl	800083c <__aeabi_ddiv>
 80091cc:	e7e6      	b.n	800919c <__ieee754_sqrt+0x30>
 80091ce:	1509      	asrs	r1, r1, #20
 80091d0:	d076      	beq.n	80092c0 <__ieee754_sqrt+0x154>
 80091d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80091d6:	07ce      	lsls	r6, r1, #31
 80091d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80091dc:	bf5e      	ittt	pl
 80091de:	0fda      	lsrpl	r2, r3, #31
 80091e0:	005b      	lslpl	r3, r3, #1
 80091e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80091e6:	0fda      	lsrs	r2, r3, #31
 80091e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80091ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80091f0:	2000      	movs	r0, #0
 80091f2:	106d      	asrs	r5, r5, #1
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	f04f 0e16 	mov.w	lr, #22
 80091fa:	4684      	mov	ip, r0
 80091fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009200:	eb0c 0401 	add.w	r4, ip, r1
 8009204:	4294      	cmp	r4, r2
 8009206:	bfde      	ittt	le
 8009208:	1b12      	suble	r2, r2, r4
 800920a:	eb04 0c01 	addle.w	ip, r4, r1
 800920e:	1840      	addle	r0, r0, r1
 8009210:	0052      	lsls	r2, r2, #1
 8009212:	f1be 0e01 	subs.w	lr, lr, #1
 8009216:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800921a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800921e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009222:	d1ed      	bne.n	8009200 <__ieee754_sqrt+0x94>
 8009224:	4671      	mov	r1, lr
 8009226:	2720      	movs	r7, #32
 8009228:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800922c:	4562      	cmp	r2, ip
 800922e:	eb04 060e 	add.w	r6, r4, lr
 8009232:	dc02      	bgt.n	800923a <__ieee754_sqrt+0xce>
 8009234:	d113      	bne.n	800925e <__ieee754_sqrt+0xf2>
 8009236:	429e      	cmp	r6, r3
 8009238:	d811      	bhi.n	800925e <__ieee754_sqrt+0xf2>
 800923a:	2e00      	cmp	r6, #0
 800923c:	eb06 0e04 	add.w	lr, r6, r4
 8009240:	da43      	bge.n	80092ca <__ieee754_sqrt+0x15e>
 8009242:	f1be 0f00 	cmp.w	lr, #0
 8009246:	db40      	blt.n	80092ca <__ieee754_sqrt+0x15e>
 8009248:	f10c 0801 	add.w	r8, ip, #1
 800924c:	eba2 020c 	sub.w	r2, r2, ip
 8009250:	429e      	cmp	r6, r3
 8009252:	bf88      	it	hi
 8009254:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009258:	1b9b      	subs	r3, r3, r6
 800925a:	4421      	add	r1, r4
 800925c:	46c4      	mov	ip, r8
 800925e:	0052      	lsls	r2, r2, #1
 8009260:	3f01      	subs	r7, #1
 8009262:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009266:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800926a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800926e:	d1dd      	bne.n	800922c <__ieee754_sqrt+0xc0>
 8009270:	4313      	orrs	r3, r2
 8009272:	d006      	beq.n	8009282 <__ieee754_sqrt+0x116>
 8009274:	1c4c      	adds	r4, r1, #1
 8009276:	bf13      	iteet	ne
 8009278:	3101      	addne	r1, #1
 800927a:	3001      	addeq	r0, #1
 800927c:	4639      	moveq	r1, r7
 800927e:	f021 0101 	bicne.w	r1, r1, #1
 8009282:	1043      	asrs	r3, r0, #1
 8009284:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009288:	0849      	lsrs	r1, r1, #1
 800928a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800928e:	07c2      	lsls	r2, r0, #31
 8009290:	bf48      	it	mi
 8009292:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009296:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800929a:	460c      	mov	r4, r1
 800929c:	463d      	mov	r5, r7
 800929e:	e77f      	b.n	80091a0 <__ieee754_sqrt+0x34>
 80092a0:	0ada      	lsrs	r2, r3, #11
 80092a2:	3815      	subs	r0, #21
 80092a4:	055b      	lsls	r3, r3, #21
 80092a6:	2a00      	cmp	r2, #0
 80092a8:	d0fa      	beq.n	80092a0 <__ieee754_sqrt+0x134>
 80092aa:	02d7      	lsls	r7, r2, #11
 80092ac:	d50a      	bpl.n	80092c4 <__ieee754_sqrt+0x158>
 80092ae:	f1c1 0420 	rsb	r4, r1, #32
 80092b2:	fa23 f404 	lsr.w	r4, r3, r4
 80092b6:	1e4d      	subs	r5, r1, #1
 80092b8:	408b      	lsls	r3, r1
 80092ba:	4322      	orrs	r2, r4
 80092bc:	1b41      	subs	r1, r0, r5
 80092be:	e788      	b.n	80091d2 <__ieee754_sqrt+0x66>
 80092c0:	4608      	mov	r0, r1
 80092c2:	e7f0      	b.n	80092a6 <__ieee754_sqrt+0x13a>
 80092c4:	0052      	lsls	r2, r2, #1
 80092c6:	3101      	adds	r1, #1
 80092c8:	e7ef      	b.n	80092aa <__ieee754_sqrt+0x13e>
 80092ca:	46e0      	mov	r8, ip
 80092cc:	e7be      	b.n	800924c <__ieee754_sqrt+0xe0>
 80092ce:	bf00      	nop
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	00000000 	.word	0x00000000

080092d8 <__kernel_cos>:
 80092d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	ec57 6b10 	vmov	r6, r7, d0
 80092e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80092e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80092e8:	ed8d 1b00 	vstr	d1, [sp]
 80092ec:	da07      	bge.n	80092fe <__kernel_cos+0x26>
 80092ee:	ee10 0a10 	vmov	r0, s0
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f7 fc28 	bl	8000b48 <__aeabi_d2iz>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	f000 8088 	beq.w	800940e <__kernel_cos+0x136>
 80092fe:	4632      	mov	r2, r6
 8009300:	463b      	mov	r3, r7
 8009302:	4630      	mov	r0, r6
 8009304:	4639      	mov	r1, r7
 8009306:	f7f7 f96f 	bl	80005e8 <__aeabi_dmul>
 800930a:	4b51      	ldr	r3, [pc, #324]	; (8009450 <__kernel_cos+0x178>)
 800930c:	2200      	movs	r2, #0
 800930e:	4604      	mov	r4, r0
 8009310:	460d      	mov	r5, r1
 8009312:	f7f7 f969 	bl	80005e8 <__aeabi_dmul>
 8009316:	a340      	add	r3, pc, #256	; (adr r3, 8009418 <__kernel_cos+0x140>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	4682      	mov	sl, r0
 800931e:	468b      	mov	fp, r1
 8009320:	4620      	mov	r0, r4
 8009322:	4629      	mov	r1, r5
 8009324:	f7f7 f960 	bl	80005e8 <__aeabi_dmul>
 8009328:	a33d      	add	r3, pc, #244	; (adr r3, 8009420 <__kernel_cos+0x148>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f6 ffa5 	bl	800027c <__adddf3>
 8009332:	4622      	mov	r2, r4
 8009334:	462b      	mov	r3, r5
 8009336:	f7f7 f957 	bl	80005e8 <__aeabi_dmul>
 800933a:	a33b      	add	r3, pc, #236	; (adr r3, 8009428 <__kernel_cos+0x150>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f6 ff9a 	bl	8000278 <__aeabi_dsub>
 8009344:	4622      	mov	r2, r4
 8009346:	462b      	mov	r3, r5
 8009348:	f7f7 f94e 	bl	80005e8 <__aeabi_dmul>
 800934c:	a338      	add	r3, pc, #224	; (adr r3, 8009430 <__kernel_cos+0x158>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f6 ff93 	bl	800027c <__adddf3>
 8009356:	4622      	mov	r2, r4
 8009358:	462b      	mov	r3, r5
 800935a:	f7f7 f945 	bl	80005e8 <__aeabi_dmul>
 800935e:	a336      	add	r3, pc, #216	; (adr r3, 8009438 <__kernel_cos+0x160>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f7f6 ff88 	bl	8000278 <__aeabi_dsub>
 8009368:	4622      	mov	r2, r4
 800936a:	462b      	mov	r3, r5
 800936c:	f7f7 f93c 	bl	80005e8 <__aeabi_dmul>
 8009370:	a333      	add	r3, pc, #204	; (adr r3, 8009440 <__kernel_cos+0x168>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f6 ff81 	bl	800027c <__adddf3>
 800937a:	4622      	mov	r2, r4
 800937c:	462b      	mov	r3, r5
 800937e:	f7f7 f933 	bl	80005e8 <__aeabi_dmul>
 8009382:	4622      	mov	r2, r4
 8009384:	462b      	mov	r3, r5
 8009386:	f7f7 f92f 	bl	80005e8 <__aeabi_dmul>
 800938a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800938e:	4604      	mov	r4, r0
 8009390:	460d      	mov	r5, r1
 8009392:	4630      	mov	r0, r6
 8009394:	4639      	mov	r1, r7
 8009396:	f7f7 f927 	bl	80005e8 <__aeabi_dmul>
 800939a:	460b      	mov	r3, r1
 800939c:	4602      	mov	r2, r0
 800939e:	4629      	mov	r1, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f7f6 ff69 	bl	8000278 <__aeabi_dsub>
 80093a6:	4b2b      	ldr	r3, [pc, #172]	; (8009454 <__kernel_cos+0x17c>)
 80093a8:	4598      	cmp	r8, r3
 80093aa:	4606      	mov	r6, r0
 80093ac:	460f      	mov	r7, r1
 80093ae:	dc10      	bgt.n	80093d2 <__kernel_cos+0xfa>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	4650      	mov	r0, sl
 80093b6:	4659      	mov	r1, fp
 80093b8:	f7f6 ff5e 	bl	8000278 <__aeabi_dsub>
 80093bc:	460b      	mov	r3, r1
 80093be:	4926      	ldr	r1, [pc, #152]	; (8009458 <__kernel_cos+0x180>)
 80093c0:	4602      	mov	r2, r0
 80093c2:	2000      	movs	r0, #0
 80093c4:	f7f6 ff58 	bl	8000278 <__aeabi_dsub>
 80093c8:	ec41 0b10 	vmov	d0, r0, r1
 80093cc:	b003      	add	sp, #12
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	4b22      	ldr	r3, [pc, #136]	; (800945c <__kernel_cos+0x184>)
 80093d4:	4920      	ldr	r1, [pc, #128]	; (8009458 <__kernel_cos+0x180>)
 80093d6:	4598      	cmp	r8, r3
 80093d8:	bfcc      	ite	gt
 80093da:	4d21      	ldrgt	r5, [pc, #132]	; (8009460 <__kernel_cos+0x188>)
 80093dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80093e0:	2400      	movs	r4, #0
 80093e2:	4622      	mov	r2, r4
 80093e4:	462b      	mov	r3, r5
 80093e6:	2000      	movs	r0, #0
 80093e8:	f7f6 ff46 	bl	8000278 <__aeabi_dsub>
 80093ec:	4622      	mov	r2, r4
 80093ee:	4680      	mov	r8, r0
 80093f0:	4689      	mov	r9, r1
 80093f2:	462b      	mov	r3, r5
 80093f4:	4650      	mov	r0, sl
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f6 ff3e 	bl	8000278 <__aeabi_dsub>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	f7f6 ff3a 	bl	8000278 <__aeabi_dsub>
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4640      	mov	r0, r8
 800940a:	4649      	mov	r1, r9
 800940c:	e7da      	b.n	80093c4 <__kernel_cos+0xec>
 800940e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009448 <__kernel_cos+0x170>
 8009412:	e7db      	b.n	80093cc <__kernel_cos+0xf4>
 8009414:	f3af 8000 	nop.w
 8009418:	be8838d4 	.word	0xbe8838d4
 800941c:	bda8fae9 	.word	0xbda8fae9
 8009420:	bdb4b1c4 	.word	0xbdb4b1c4
 8009424:	3e21ee9e 	.word	0x3e21ee9e
 8009428:	809c52ad 	.word	0x809c52ad
 800942c:	3e927e4f 	.word	0x3e927e4f
 8009430:	19cb1590 	.word	0x19cb1590
 8009434:	3efa01a0 	.word	0x3efa01a0
 8009438:	16c15177 	.word	0x16c15177
 800943c:	3f56c16c 	.word	0x3f56c16c
 8009440:	5555554c 	.word	0x5555554c
 8009444:	3fa55555 	.word	0x3fa55555
 8009448:	00000000 	.word	0x00000000
 800944c:	3ff00000 	.word	0x3ff00000
 8009450:	3fe00000 	.word	0x3fe00000
 8009454:	3fd33332 	.word	0x3fd33332
 8009458:	3ff00000 	.word	0x3ff00000
 800945c:	3fe90000 	.word	0x3fe90000
 8009460:	3fd20000 	.word	0x3fd20000
 8009464:	00000000 	.word	0x00000000

08009468 <__kernel_rem_pio2>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	ed2d 8b02 	vpush	{d8}
 8009470:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009474:	f112 0f14 	cmn.w	r2, #20
 8009478:	9308      	str	r3, [sp, #32]
 800947a:	9101      	str	r1, [sp, #4]
 800947c:	4bc6      	ldr	r3, [pc, #792]	; (8009798 <__kernel_rem_pio2+0x330>)
 800947e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009480:	9009      	str	r0, [sp, #36]	; 0x24
 8009482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009486:	9304      	str	r3, [sp, #16]
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	f103 33ff 	add.w	r3, r3, #4294967295
 800948e:	bfa8      	it	ge
 8009490:	1ed4      	subge	r4, r2, #3
 8009492:	9306      	str	r3, [sp, #24]
 8009494:	bfb2      	itee	lt
 8009496:	2400      	movlt	r4, #0
 8009498:	2318      	movge	r3, #24
 800949a:	fb94 f4f3 	sdivge	r4, r4, r3
 800949e:	f06f 0317 	mvn.w	r3, #23
 80094a2:	fb04 3303 	mla	r3, r4, r3, r3
 80094a6:	eb03 0a02 	add.w	sl, r3, r2
 80094aa:	9b04      	ldr	r3, [sp, #16]
 80094ac:	9a06      	ldr	r2, [sp, #24]
 80094ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009788 <__kernel_rem_pio2+0x320>
 80094b2:	eb03 0802 	add.w	r8, r3, r2
 80094b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80094b8:	1aa7      	subs	r7, r4, r2
 80094ba:	ae20      	add	r6, sp, #128	; 0x80
 80094bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80094c0:	2500      	movs	r5, #0
 80094c2:	4545      	cmp	r5, r8
 80094c4:	dd18      	ble.n	80094f8 <__kernel_rem_pio2+0x90>
 80094c6:	9b08      	ldr	r3, [sp, #32]
 80094c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80094cc:	aa20      	add	r2, sp, #128	; 0x80
 80094ce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009788 <__kernel_rem_pio2+0x320>
 80094d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80094d6:	f1c3 0301 	rsb	r3, r3, #1
 80094da:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80094de:	9307      	str	r3, [sp, #28]
 80094e0:	9b07      	ldr	r3, [sp, #28]
 80094e2:	9a04      	ldr	r2, [sp, #16]
 80094e4:	4443      	add	r3, r8
 80094e6:	429a      	cmp	r2, r3
 80094e8:	db2f      	blt.n	800954a <__kernel_rem_pio2+0xe2>
 80094ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80094ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80094f2:	462f      	mov	r7, r5
 80094f4:	2600      	movs	r6, #0
 80094f6:	e01b      	b.n	8009530 <__kernel_rem_pio2+0xc8>
 80094f8:	42ef      	cmn	r7, r5
 80094fa:	d407      	bmi.n	800950c <__kernel_rem_pio2+0xa4>
 80094fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009500:	f7f7 f808 	bl	8000514 <__aeabi_i2d>
 8009504:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009508:	3501      	adds	r5, #1
 800950a:	e7da      	b.n	80094c2 <__kernel_rem_pio2+0x5a>
 800950c:	ec51 0b18 	vmov	r0, r1, d8
 8009510:	e7f8      	b.n	8009504 <__kernel_rem_pio2+0x9c>
 8009512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009516:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800951a:	f7f7 f865 	bl	80005e8 <__aeabi_dmul>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009526:	f7f6 fea9 	bl	800027c <__adddf3>
 800952a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800952e:	3601      	adds	r6, #1
 8009530:	9b06      	ldr	r3, [sp, #24]
 8009532:	429e      	cmp	r6, r3
 8009534:	f1a7 0708 	sub.w	r7, r7, #8
 8009538:	ddeb      	ble.n	8009512 <__kernel_rem_pio2+0xaa>
 800953a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800953e:	3508      	adds	r5, #8
 8009540:	ecab 7b02 	vstmia	fp!, {d7}
 8009544:	f108 0801 	add.w	r8, r8, #1
 8009548:	e7ca      	b.n	80094e0 <__kernel_rem_pio2+0x78>
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	aa0c      	add	r2, sp, #48	; 0x30
 800954e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009552:	930b      	str	r3, [sp, #44]	; 0x2c
 8009554:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009556:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800955a:	9c04      	ldr	r4, [sp, #16]
 800955c:	930a      	str	r3, [sp, #40]	; 0x28
 800955e:	ab98      	add	r3, sp, #608	; 0x260
 8009560:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009564:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009568:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800956c:	f8cd b008 	str.w	fp, [sp, #8]
 8009570:	4625      	mov	r5, r4
 8009572:	2d00      	cmp	r5, #0
 8009574:	dc78      	bgt.n	8009668 <__kernel_rem_pio2+0x200>
 8009576:	ec47 6b10 	vmov	d0, r6, r7
 800957a:	4650      	mov	r0, sl
 800957c:	f000 fe3c 	bl	800a1f8 <scalbn>
 8009580:	ec57 6b10 	vmov	r6, r7, d0
 8009584:	2200      	movs	r2, #0
 8009586:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800958a:	ee10 0a10 	vmov	r0, s0
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 f82a 	bl	80005e8 <__aeabi_dmul>
 8009594:	ec41 0b10 	vmov	d0, r0, r1
 8009598:	f000 fd1a 	bl	8009fd0 <floor>
 800959c:	4b7f      	ldr	r3, [pc, #508]	; (800979c <__kernel_rem_pio2+0x334>)
 800959e:	ec51 0b10 	vmov	r0, r1, d0
 80095a2:	2200      	movs	r2, #0
 80095a4:	f7f7 f820 	bl	80005e8 <__aeabi_dmul>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4630      	mov	r0, r6
 80095ae:	4639      	mov	r1, r7
 80095b0:	f7f6 fe62 	bl	8000278 <__aeabi_dsub>
 80095b4:	460f      	mov	r7, r1
 80095b6:	4606      	mov	r6, r0
 80095b8:	f7f7 fac6 	bl	8000b48 <__aeabi_d2iz>
 80095bc:	9007      	str	r0, [sp, #28]
 80095be:	f7f6 ffa9 	bl	8000514 <__aeabi_i2d>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f6 fe55 	bl	8000278 <__aeabi_dsub>
 80095ce:	f1ba 0f00 	cmp.w	sl, #0
 80095d2:	4606      	mov	r6, r0
 80095d4:	460f      	mov	r7, r1
 80095d6:	dd70      	ble.n	80096ba <__kernel_rem_pio2+0x252>
 80095d8:	1e62      	subs	r2, r4, #1
 80095da:	ab0c      	add	r3, sp, #48	; 0x30
 80095dc:	9d07      	ldr	r5, [sp, #28]
 80095de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80095e2:	f1ca 0118 	rsb	r1, sl, #24
 80095e6:	fa40 f301 	asr.w	r3, r0, r1
 80095ea:	441d      	add	r5, r3
 80095ec:	408b      	lsls	r3, r1
 80095ee:	1ac0      	subs	r0, r0, r3
 80095f0:	ab0c      	add	r3, sp, #48	; 0x30
 80095f2:	9507      	str	r5, [sp, #28]
 80095f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80095f8:	f1ca 0317 	rsb	r3, sl, #23
 80095fc:	fa40 f303 	asr.w	r3, r0, r3
 8009600:	9302      	str	r3, [sp, #8]
 8009602:	9b02      	ldr	r3, [sp, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	dd66      	ble.n	80096d6 <__kernel_rem_pio2+0x26e>
 8009608:	9b07      	ldr	r3, [sp, #28]
 800960a:	2200      	movs	r2, #0
 800960c:	3301      	adds	r3, #1
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	4615      	mov	r5, r2
 8009612:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009616:	4294      	cmp	r4, r2
 8009618:	f300 8099 	bgt.w	800974e <__kernel_rem_pio2+0x2e6>
 800961c:	f1ba 0f00 	cmp.w	sl, #0
 8009620:	dd07      	ble.n	8009632 <__kernel_rem_pio2+0x1ca>
 8009622:	f1ba 0f01 	cmp.w	sl, #1
 8009626:	f000 80a5 	beq.w	8009774 <__kernel_rem_pio2+0x30c>
 800962a:	f1ba 0f02 	cmp.w	sl, #2
 800962e:	f000 80c1 	beq.w	80097b4 <__kernel_rem_pio2+0x34c>
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d14e      	bne.n	80096d6 <__kernel_rem_pio2+0x26e>
 8009638:	4632      	mov	r2, r6
 800963a:	463b      	mov	r3, r7
 800963c:	4958      	ldr	r1, [pc, #352]	; (80097a0 <__kernel_rem_pio2+0x338>)
 800963e:	2000      	movs	r0, #0
 8009640:	f7f6 fe1a 	bl	8000278 <__aeabi_dsub>
 8009644:	4606      	mov	r6, r0
 8009646:	460f      	mov	r7, r1
 8009648:	2d00      	cmp	r5, #0
 800964a:	d044      	beq.n	80096d6 <__kernel_rem_pio2+0x26e>
 800964c:	4650      	mov	r0, sl
 800964e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009790 <__kernel_rem_pio2+0x328>
 8009652:	f000 fdd1 	bl	800a1f8 <scalbn>
 8009656:	4630      	mov	r0, r6
 8009658:	4639      	mov	r1, r7
 800965a:	ec53 2b10 	vmov	r2, r3, d0
 800965e:	f7f6 fe0b 	bl	8000278 <__aeabi_dsub>
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	e036      	b.n	80096d6 <__kernel_rem_pio2+0x26e>
 8009668:	4b4e      	ldr	r3, [pc, #312]	; (80097a4 <__kernel_rem_pio2+0x33c>)
 800966a:	2200      	movs	r2, #0
 800966c:	4630      	mov	r0, r6
 800966e:	4639      	mov	r1, r7
 8009670:	f7f6 ffba 	bl	80005e8 <__aeabi_dmul>
 8009674:	f7f7 fa68 	bl	8000b48 <__aeabi_d2iz>
 8009678:	f7f6 ff4c 	bl	8000514 <__aeabi_i2d>
 800967c:	4b4a      	ldr	r3, [pc, #296]	; (80097a8 <__kernel_rem_pio2+0x340>)
 800967e:	2200      	movs	r2, #0
 8009680:	4680      	mov	r8, r0
 8009682:	4689      	mov	r9, r1
 8009684:	f7f6 ffb0 	bl	80005e8 <__aeabi_dmul>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f6 fdf2 	bl	8000278 <__aeabi_dsub>
 8009694:	f7f7 fa58 	bl	8000b48 <__aeabi_d2iz>
 8009698:	9b02      	ldr	r3, [sp, #8]
 800969a:	f843 0b04 	str.w	r0, [r3], #4
 800969e:	3d01      	subs	r5, #1
 80096a0:	9302      	str	r3, [sp, #8]
 80096a2:	ab70      	add	r3, sp, #448	; 0x1c0
 80096a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	4640      	mov	r0, r8
 80096ae:	4649      	mov	r1, r9
 80096b0:	f7f6 fde4 	bl	800027c <__adddf3>
 80096b4:	4606      	mov	r6, r0
 80096b6:	460f      	mov	r7, r1
 80096b8:	e75b      	b.n	8009572 <__kernel_rem_pio2+0x10a>
 80096ba:	d105      	bne.n	80096c8 <__kernel_rem_pio2+0x260>
 80096bc:	1e63      	subs	r3, r4, #1
 80096be:	aa0c      	add	r2, sp, #48	; 0x30
 80096c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80096c4:	15c3      	asrs	r3, r0, #23
 80096c6:	e79b      	b.n	8009600 <__kernel_rem_pio2+0x198>
 80096c8:	4b38      	ldr	r3, [pc, #224]	; (80097ac <__kernel_rem_pio2+0x344>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	f7f7 fa12 	bl	8000af4 <__aeabi_dcmpge>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d139      	bne.n	8009748 <__kernel_rem_pio2+0x2e0>
 80096d4:	9002      	str	r0, [sp, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	2300      	movs	r3, #0
 80096da:	4630      	mov	r0, r6
 80096dc:	4639      	mov	r1, r7
 80096de:	f7f7 f9eb 	bl	8000ab8 <__aeabi_dcmpeq>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f000 80b4 	beq.w	8009850 <__kernel_rem_pio2+0x3e8>
 80096e8:	f104 3bff 	add.w	fp, r4, #4294967295
 80096ec:	465b      	mov	r3, fp
 80096ee:	2200      	movs	r2, #0
 80096f0:	9904      	ldr	r1, [sp, #16]
 80096f2:	428b      	cmp	r3, r1
 80096f4:	da65      	bge.n	80097c2 <__kernel_rem_pio2+0x35a>
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	d07b      	beq.n	80097f2 <__kernel_rem_pio2+0x38a>
 80096fa:	ab0c      	add	r3, sp, #48	; 0x30
 80096fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8009700:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 80a0 	beq.w	800984a <__kernel_rem_pio2+0x3e2>
 800970a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009790 <__kernel_rem_pio2+0x328>
 800970e:	4650      	mov	r0, sl
 8009710:	f000 fd72 	bl	800a1f8 <scalbn>
 8009714:	4f23      	ldr	r7, [pc, #140]	; (80097a4 <__kernel_rem_pio2+0x33c>)
 8009716:	ec55 4b10 	vmov	r4, r5, d0
 800971a:	46d8      	mov	r8, fp
 800971c:	2600      	movs	r6, #0
 800971e:	f1b8 0f00 	cmp.w	r8, #0
 8009722:	f280 80cf 	bge.w	80098c4 <__kernel_rem_pio2+0x45c>
 8009726:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009788 <__kernel_rem_pio2+0x320>
 800972a:	465f      	mov	r7, fp
 800972c:	f04f 0800 	mov.w	r8, #0
 8009730:	2f00      	cmp	r7, #0
 8009732:	f2c0 80fd 	blt.w	8009930 <__kernel_rem_pio2+0x4c8>
 8009736:	ab70      	add	r3, sp, #448	; 0x1c0
 8009738:	f8df a074 	ldr.w	sl, [pc, #116]	; 80097b0 <__kernel_rem_pio2+0x348>
 800973c:	ec55 4b18 	vmov	r4, r5, d8
 8009740:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009744:	2600      	movs	r6, #0
 8009746:	e0e5      	b.n	8009914 <__kernel_rem_pio2+0x4ac>
 8009748:	2302      	movs	r3, #2
 800974a:	9302      	str	r3, [sp, #8]
 800974c:	e75c      	b.n	8009608 <__kernel_rem_pio2+0x1a0>
 800974e:	f8db 3000 	ldr.w	r3, [fp]
 8009752:	b955      	cbnz	r5, 800976a <__kernel_rem_pio2+0x302>
 8009754:	b123      	cbz	r3, 8009760 <__kernel_rem_pio2+0x2f8>
 8009756:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800975a:	f8cb 3000 	str.w	r3, [fp]
 800975e:	2301      	movs	r3, #1
 8009760:	3201      	adds	r2, #1
 8009762:	f10b 0b04 	add.w	fp, fp, #4
 8009766:	461d      	mov	r5, r3
 8009768:	e755      	b.n	8009616 <__kernel_rem_pio2+0x1ae>
 800976a:	1acb      	subs	r3, r1, r3
 800976c:	f8cb 3000 	str.w	r3, [fp]
 8009770:	462b      	mov	r3, r5
 8009772:	e7f5      	b.n	8009760 <__kernel_rem_pio2+0x2f8>
 8009774:	1e62      	subs	r2, r4, #1
 8009776:	ab0c      	add	r3, sp, #48	; 0x30
 8009778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009780:	a90c      	add	r1, sp, #48	; 0x30
 8009782:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009786:	e754      	b.n	8009632 <__kernel_rem_pio2+0x1ca>
	...
 8009794:	3ff00000 	.word	0x3ff00000
 8009798:	0802daf0 	.word	0x0802daf0
 800979c:	40200000 	.word	0x40200000
 80097a0:	3ff00000 	.word	0x3ff00000
 80097a4:	3e700000 	.word	0x3e700000
 80097a8:	41700000 	.word	0x41700000
 80097ac:	3fe00000 	.word	0x3fe00000
 80097b0:	0802dab0 	.word	0x0802dab0
 80097b4:	1e62      	subs	r2, r4, #1
 80097b6:	ab0c      	add	r3, sp, #48	; 0x30
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80097c0:	e7de      	b.n	8009780 <__kernel_rem_pio2+0x318>
 80097c2:	a90c      	add	r1, sp, #48	; 0x30
 80097c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	430a      	orrs	r2, r1
 80097cc:	e790      	b.n	80096f0 <__kernel_rem_pio2+0x288>
 80097ce:	3301      	adds	r3, #1
 80097d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d0fa      	beq.n	80097ce <__kernel_rem_pio2+0x366>
 80097d8:	9a08      	ldr	r2, [sp, #32]
 80097da:	18e3      	adds	r3, r4, r3
 80097dc:	18a6      	adds	r6, r4, r2
 80097de:	aa20      	add	r2, sp, #128	; 0x80
 80097e0:	1c65      	adds	r5, r4, #1
 80097e2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	42ab      	cmp	r3, r5
 80097ec:	da04      	bge.n	80097f8 <__kernel_rem_pio2+0x390>
 80097ee:	461c      	mov	r4, r3
 80097f0:	e6b5      	b.n	800955e <__kernel_rem_pio2+0xf6>
 80097f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097f4:	2301      	movs	r3, #1
 80097f6:	e7eb      	b.n	80097d0 <__kernel_rem_pio2+0x368>
 80097f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097fe:	f7f6 fe89 	bl	8000514 <__aeabi_i2d>
 8009802:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009808:	46b3      	mov	fp, r6
 800980a:	461c      	mov	r4, r3
 800980c:	2700      	movs	r7, #0
 800980e:	f04f 0800 	mov.w	r8, #0
 8009812:	f04f 0900 	mov.w	r9, #0
 8009816:	9b06      	ldr	r3, [sp, #24]
 8009818:	429f      	cmp	r7, r3
 800981a:	dd06      	ble.n	800982a <__kernel_rem_pio2+0x3c2>
 800981c:	ab70      	add	r3, sp, #448	; 0x1c0
 800981e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009822:	e9c3 8900 	strd	r8, r9, [r3]
 8009826:	3501      	adds	r5, #1
 8009828:	e7de      	b.n	80097e8 <__kernel_rem_pio2+0x380>
 800982a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800982e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009832:	f7f6 fed9 	bl	80005e8 <__aeabi_dmul>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	f7f6 fd1d 	bl	800027c <__adddf3>
 8009842:	3701      	adds	r7, #1
 8009844:	4680      	mov	r8, r0
 8009846:	4689      	mov	r9, r1
 8009848:	e7e5      	b.n	8009816 <__kernel_rem_pio2+0x3ae>
 800984a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800984e:	e754      	b.n	80096fa <__kernel_rem_pio2+0x292>
 8009850:	ec47 6b10 	vmov	d0, r6, r7
 8009854:	f1ca 0000 	rsb	r0, sl, #0
 8009858:	f000 fcce 	bl	800a1f8 <scalbn>
 800985c:	ec57 6b10 	vmov	r6, r7, d0
 8009860:	4b9f      	ldr	r3, [pc, #636]	; (8009ae0 <__kernel_rem_pio2+0x678>)
 8009862:	ee10 0a10 	vmov	r0, s0
 8009866:	2200      	movs	r2, #0
 8009868:	4639      	mov	r1, r7
 800986a:	f7f7 f943 	bl	8000af4 <__aeabi_dcmpge>
 800986e:	b300      	cbz	r0, 80098b2 <__kernel_rem_pio2+0x44a>
 8009870:	4b9c      	ldr	r3, [pc, #624]	; (8009ae4 <__kernel_rem_pio2+0x67c>)
 8009872:	2200      	movs	r2, #0
 8009874:	4630      	mov	r0, r6
 8009876:	4639      	mov	r1, r7
 8009878:	f7f6 feb6 	bl	80005e8 <__aeabi_dmul>
 800987c:	f7f7 f964 	bl	8000b48 <__aeabi_d2iz>
 8009880:	4605      	mov	r5, r0
 8009882:	f7f6 fe47 	bl	8000514 <__aeabi_i2d>
 8009886:	4b96      	ldr	r3, [pc, #600]	; (8009ae0 <__kernel_rem_pio2+0x678>)
 8009888:	2200      	movs	r2, #0
 800988a:	f7f6 fead 	bl	80005e8 <__aeabi_dmul>
 800988e:	460b      	mov	r3, r1
 8009890:	4602      	mov	r2, r0
 8009892:	4639      	mov	r1, r7
 8009894:	4630      	mov	r0, r6
 8009896:	f7f6 fcef 	bl	8000278 <__aeabi_dsub>
 800989a:	f7f7 f955 	bl	8000b48 <__aeabi_d2iz>
 800989e:	f104 0b01 	add.w	fp, r4, #1
 80098a2:	ab0c      	add	r3, sp, #48	; 0x30
 80098a4:	f10a 0a18 	add.w	sl, sl, #24
 80098a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80098ac:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80098b0:	e72b      	b.n	800970a <__kernel_rem_pio2+0x2a2>
 80098b2:	4630      	mov	r0, r6
 80098b4:	4639      	mov	r1, r7
 80098b6:	f7f7 f947 	bl	8000b48 <__aeabi_d2iz>
 80098ba:	ab0c      	add	r3, sp, #48	; 0x30
 80098bc:	46a3      	mov	fp, r4
 80098be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80098c2:	e722      	b.n	800970a <__kernel_rem_pio2+0x2a2>
 80098c4:	ab70      	add	r3, sp, #448	; 0x1c0
 80098c6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80098ca:	ab0c      	add	r3, sp, #48	; 0x30
 80098cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80098d0:	f7f6 fe20 	bl	8000514 <__aeabi_i2d>
 80098d4:	4622      	mov	r2, r4
 80098d6:	462b      	mov	r3, r5
 80098d8:	f7f6 fe86 	bl	80005e8 <__aeabi_dmul>
 80098dc:	4632      	mov	r2, r6
 80098de:	e9c9 0100 	strd	r0, r1, [r9]
 80098e2:	463b      	mov	r3, r7
 80098e4:	4620      	mov	r0, r4
 80098e6:	4629      	mov	r1, r5
 80098e8:	f7f6 fe7e 	bl	80005e8 <__aeabi_dmul>
 80098ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	e713      	b.n	800971e <__kernel_rem_pio2+0x2b6>
 80098f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80098fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80098fe:	f7f6 fe73 	bl	80005e8 <__aeabi_dmul>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f6 fcb7 	bl	800027c <__adddf3>
 800990e:	3601      	adds	r6, #1
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	9b04      	ldr	r3, [sp, #16]
 8009916:	429e      	cmp	r6, r3
 8009918:	dc01      	bgt.n	800991e <__kernel_rem_pio2+0x4b6>
 800991a:	45b0      	cmp	r8, r6
 800991c:	daeb      	bge.n	80098f6 <__kernel_rem_pio2+0x48e>
 800991e:	ab48      	add	r3, sp, #288	; 0x120
 8009920:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009924:	e9c3 4500 	strd	r4, r5, [r3]
 8009928:	3f01      	subs	r7, #1
 800992a:	f108 0801 	add.w	r8, r8, #1
 800992e:	e6ff      	b.n	8009730 <__kernel_rem_pio2+0x2c8>
 8009930:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009932:	2b02      	cmp	r3, #2
 8009934:	dc0b      	bgt.n	800994e <__kernel_rem_pio2+0x4e6>
 8009936:	2b00      	cmp	r3, #0
 8009938:	dc6e      	bgt.n	8009a18 <__kernel_rem_pio2+0x5b0>
 800993a:	d045      	beq.n	80099c8 <__kernel_rem_pio2+0x560>
 800993c:	9b07      	ldr	r3, [sp, #28]
 800993e:	f003 0007 	and.w	r0, r3, #7
 8009942:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009946:	ecbd 8b02 	vpop	{d8}
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009950:	2b03      	cmp	r3, #3
 8009952:	d1f3      	bne.n	800993c <__kernel_rem_pio2+0x4d4>
 8009954:	ab48      	add	r3, sp, #288	; 0x120
 8009956:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800995a:	46d0      	mov	r8, sl
 800995c:	46d9      	mov	r9, fp
 800995e:	f1b9 0f00 	cmp.w	r9, #0
 8009962:	f1a8 0808 	sub.w	r8, r8, #8
 8009966:	dc64      	bgt.n	8009a32 <__kernel_rem_pio2+0x5ca>
 8009968:	465c      	mov	r4, fp
 800996a:	2c01      	cmp	r4, #1
 800996c:	f1aa 0a08 	sub.w	sl, sl, #8
 8009970:	dc7e      	bgt.n	8009a70 <__kernel_rem_pio2+0x608>
 8009972:	2000      	movs	r0, #0
 8009974:	2100      	movs	r1, #0
 8009976:	f1bb 0f01 	cmp.w	fp, #1
 800997a:	f300 8097 	bgt.w	8009aac <__kernel_rem_pio2+0x644>
 800997e:	9b02      	ldr	r3, [sp, #8]
 8009980:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009984:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009988:	2b00      	cmp	r3, #0
 800998a:	f040 8099 	bne.w	8009ac0 <__kernel_rem_pio2+0x658>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	e9c3 5600 	strd	r5, r6, [r3]
 8009994:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009998:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800999c:	e7ce      	b.n	800993c <__kernel_rem_pio2+0x4d4>
 800999e:	ab48      	add	r3, sp, #288	; 0x120
 80099a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f7f6 fc68 	bl	800027c <__adddf3>
 80099ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099b0:	f1bb 0f00 	cmp.w	fp, #0
 80099b4:	daf3      	bge.n	800999e <__kernel_rem_pio2+0x536>
 80099b6:	9b02      	ldr	r3, [sp, #8]
 80099b8:	b113      	cbz	r3, 80099c0 <__kernel_rem_pio2+0x558>
 80099ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099be:	4619      	mov	r1, r3
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	e9c3 0100 	strd	r0, r1, [r3]
 80099c6:	e7b9      	b.n	800993c <__kernel_rem_pio2+0x4d4>
 80099c8:	2000      	movs	r0, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	e7f0      	b.n	80099b0 <__kernel_rem_pio2+0x548>
 80099ce:	ab48      	add	r3, sp, #288	; 0x120
 80099d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f7f6 fc50 	bl	800027c <__adddf3>
 80099dc:	3c01      	subs	r4, #1
 80099de:	2c00      	cmp	r4, #0
 80099e0:	daf5      	bge.n	80099ce <__kernel_rem_pio2+0x566>
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	b1e3      	cbz	r3, 8009a20 <__kernel_rem_pio2+0x5b8>
 80099e6:	4602      	mov	r2, r0
 80099e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ec:	9c01      	ldr	r4, [sp, #4]
 80099ee:	e9c4 2300 	strd	r2, r3, [r4]
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80099fa:	f7f6 fc3d 	bl	8000278 <__aeabi_dsub>
 80099fe:	ad4a      	add	r5, sp, #296	; 0x128
 8009a00:	2401      	movs	r4, #1
 8009a02:	45a3      	cmp	fp, r4
 8009a04:	da0f      	bge.n	8009a26 <__kernel_rem_pio2+0x5be>
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	b113      	cbz	r3, 8009a10 <__kernel_rem_pio2+0x5a8>
 8009a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a0e:	4619      	mov	r1, r3
 8009a10:	9b01      	ldr	r3, [sp, #4]
 8009a12:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009a16:	e791      	b.n	800993c <__kernel_rem_pio2+0x4d4>
 8009a18:	465c      	mov	r4, fp
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	e7de      	b.n	80099de <__kernel_rem_pio2+0x576>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	e7e2      	b.n	80099ec <__kernel_rem_pio2+0x584>
 8009a26:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009a2a:	f7f6 fc27 	bl	800027c <__adddf3>
 8009a2e:	3401      	adds	r4, #1
 8009a30:	e7e7      	b.n	8009a02 <__kernel_rem_pio2+0x59a>
 8009a32:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009a36:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	463b      	mov	r3, r7
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f6 fc1b 	bl	800027c <__adddf3>
 8009a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f6 fc11 	bl	8000278 <__aeabi_dsub>
 8009a56:	4632      	mov	r2, r6
 8009a58:	463b      	mov	r3, r7
 8009a5a:	f7f6 fc0f 	bl	800027c <__adddf3>
 8009a5e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a62:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009a66:	ed88 7b00 	vstr	d7, [r8]
 8009a6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a6e:	e776      	b.n	800995e <__kernel_rem_pio2+0x4f6>
 8009a70:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a74:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f6 fbfc 	bl	800027c <__adddf3>
 8009a84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	f7f6 fbf2 	bl	8000278 <__aeabi_dsub>
 8009a94:	4632      	mov	r2, r6
 8009a96:	463b      	mov	r3, r7
 8009a98:	f7f6 fbf0 	bl	800027c <__adddf3>
 8009a9c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009aa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009aa4:	ed8a 7b00 	vstr	d7, [sl]
 8009aa8:	3c01      	subs	r4, #1
 8009aaa:	e75e      	b.n	800996a <__kernel_rem_pio2+0x502>
 8009aac:	ab48      	add	r3, sp, #288	; 0x120
 8009aae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 fbe1 	bl	800027c <__adddf3>
 8009aba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009abe:	e75a      	b.n	8009976 <__kernel_rem_pio2+0x50e>
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	9a01      	ldr	r2, [sp, #4]
 8009ac4:	601d      	str	r5, [r3, #0]
 8009ac6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009aca:	605c      	str	r4, [r3, #4]
 8009acc:	609f      	str	r7, [r3, #8]
 8009ace:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009ad2:	60d3      	str	r3, [r2, #12]
 8009ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ad8:	6110      	str	r0, [r2, #16]
 8009ada:	6153      	str	r3, [r2, #20]
 8009adc:	e72e      	b.n	800993c <__kernel_rem_pio2+0x4d4>
 8009ade:	bf00      	nop
 8009ae0:	41700000 	.word	0x41700000
 8009ae4:	3e700000 	.word	0x3e700000

08009ae8 <__kernel_sin>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	ed2d 8b04 	vpush	{d8-d9}
 8009af0:	eeb0 8a41 	vmov.f32	s16, s2
 8009af4:	eef0 8a61 	vmov.f32	s17, s3
 8009af8:	ec55 4b10 	vmov	r4, r5, d0
 8009afc:	b083      	sub	sp, #12
 8009afe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009b06:	9001      	str	r0, [sp, #4]
 8009b08:	da06      	bge.n	8009b18 <__kernel_sin+0x30>
 8009b0a:	ee10 0a10 	vmov	r0, s0
 8009b0e:	4629      	mov	r1, r5
 8009b10:	f7f7 f81a 	bl	8000b48 <__aeabi_d2iz>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d051      	beq.n	8009bbc <__kernel_sin+0xd4>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4629      	mov	r1, r5
 8009b20:	f7f6 fd62 	bl	80005e8 <__aeabi_dmul>
 8009b24:	4682      	mov	sl, r0
 8009b26:	468b      	mov	fp, r1
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f6 fd5a 	bl	80005e8 <__aeabi_dmul>
 8009b34:	a341      	add	r3, pc, #260	; (adr r3, 8009c3c <__kernel_sin+0x154>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	4650      	mov	r0, sl
 8009b40:	4659      	mov	r1, fp
 8009b42:	f7f6 fd51 	bl	80005e8 <__aeabi_dmul>
 8009b46:	a33f      	add	r3, pc, #252	; (adr r3, 8009c44 <__kernel_sin+0x15c>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fb94 	bl	8000278 <__aeabi_dsub>
 8009b50:	4652      	mov	r2, sl
 8009b52:	465b      	mov	r3, fp
 8009b54:	f7f6 fd48 	bl	80005e8 <__aeabi_dmul>
 8009b58:	a33c      	add	r3, pc, #240	; (adr r3, 8009c4c <__kernel_sin+0x164>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f7f6 fb8d 	bl	800027c <__adddf3>
 8009b62:	4652      	mov	r2, sl
 8009b64:	465b      	mov	r3, fp
 8009b66:	f7f6 fd3f 	bl	80005e8 <__aeabi_dmul>
 8009b6a:	a33a      	add	r3, pc, #232	; (adr r3, 8009c54 <__kernel_sin+0x16c>)
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	f7f6 fb82 	bl	8000278 <__aeabi_dsub>
 8009b74:	4652      	mov	r2, sl
 8009b76:	465b      	mov	r3, fp
 8009b78:	f7f6 fd36 	bl	80005e8 <__aeabi_dmul>
 8009b7c:	a337      	add	r3, pc, #220	; (adr r3, 8009c5c <__kernel_sin+0x174>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	f7f6 fb7b 	bl	800027c <__adddf3>
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	4606      	mov	r6, r0
 8009b8a:	460f      	mov	r7, r1
 8009b8c:	b9eb      	cbnz	r3, 8009bca <__kernel_sin+0xe2>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4650      	mov	r0, sl
 8009b94:	4659      	mov	r1, fp
 8009b96:	f7f6 fd27 	bl	80005e8 <__aeabi_dmul>
 8009b9a:	a325      	add	r3, pc, #148	; (adr r3, 8009c30 <__kernel_sin+0x148>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fb6a 	bl	8000278 <__aeabi_dsub>
 8009ba4:	4642      	mov	r2, r8
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	f7f6 fd1e 	bl	80005e8 <__aeabi_dmul>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f7f6 fb62 	bl	800027c <__adddf3>
 8009bb8:	4604      	mov	r4, r0
 8009bba:	460d      	mov	r5, r1
 8009bbc:	ec45 4b10 	vmov	d0, r4, r5
 8009bc0:	b003      	add	sp, #12
 8009bc2:	ecbd 8b04 	vpop	{d8-d9}
 8009bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <__kernel_sin+0x150>)
 8009bcc:	ec51 0b18 	vmov	r0, r1, d8
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f7f6 fd09 	bl	80005e8 <__aeabi_dmul>
 8009bd6:	4632      	mov	r2, r6
 8009bd8:	ec41 0b19 	vmov	d9, r0, r1
 8009bdc:	463b      	mov	r3, r7
 8009bde:	4640      	mov	r0, r8
 8009be0:	4649      	mov	r1, r9
 8009be2:	f7f6 fd01 	bl	80005e8 <__aeabi_dmul>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	ec51 0b19 	vmov	r0, r1, d9
 8009bee:	f7f6 fb43 	bl	8000278 <__aeabi_dsub>
 8009bf2:	4652      	mov	r2, sl
 8009bf4:	465b      	mov	r3, fp
 8009bf6:	f7f6 fcf7 	bl	80005e8 <__aeabi_dmul>
 8009bfa:	ec53 2b18 	vmov	r2, r3, d8
 8009bfe:	f7f6 fb3b 	bl	8000278 <__aeabi_dsub>
 8009c02:	a30b      	add	r3, pc, #44	; (adr r3, 8009c30 <__kernel_sin+0x148>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 fcea 	bl	80005e8 <__aeabi_dmul>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 fb2e 	bl	800027c <__adddf3>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4620      	mov	r0, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	f7f6 fb26 	bl	8000278 <__aeabi_dsub>
 8009c2c:	e7c4      	b.n	8009bb8 <__kernel_sin+0xd0>
 8009c2e:	bf00      	nop
 8009c30:	55555549 	.word	0x55555549
 8009c34:	3fc55555 	.word	0x3fc55555
 8009c38:	3fe00000 	.word	0x3fe00000
 8009c3c:	5acfd57c 	.word	0x5acfd57c
 8009c40:	3de5d93a 	.word	0x3de5d93a
 8009c44:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c48:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c4c:	57b1fe7d 	.word	0x57b1fe7d
 8009c50:	3ec71de3 	.word	0x3ec71de3
 8009c54:	19c161d5 	.word	0x19c161d5
 8009c58:	3f2a01a0 	.word	0x3f2a01a0
 8009c5c:	1110f8a6 	.word	0x1110f8a6
 8009c60:	3f811111 	.word	0x3f811111
 8009c64:	00000000 	.word	0x00000000

08009c68 <atan>:
 8009c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	ec55 4b10 	vmov	r4, r5, d0
 8009c70:	4bc3      	ldr	r3, [pc, #780]	; (8009f80 <atan+0x318>)
 8009c72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c76:	429e      	cmp	r6, r3
 8009c78:	46ab      	mov	fp, r5
 8009c7a:	dd18      	ble.n	8009cae <atan+0x46>
 8009c7c:	4bc1      	ldr	r3, [pc, #772]	; (8009f84 <atan+0x31c>)
 8009c7e:	429e      	cmp	r6, r3
 8009c80:	dc01      	bgt.n	8009c86 <atan+0x1e>
 8009c82:	d109      	bne.n	8009c98 <atan+0x30>
 8009c84:	b144      	cbz	r4, 8009c98 <atan+0x30>
 8009c86:	4622      	mov	r2, r4
 8009c88:	462b      	mov	r3, r5
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 faf5 	bl	800027c <__adddf3>
 8009c92:	4604      	mov	r4, r0
 8009c94:	460d      	mov	r5, r1
 8009c96:	e006      	b.n	8009ca6 <atan+0x3e>
 8009c98:	f1bb 0f00 	cmp.w	fp, #0
 8009c9c:	f300 8131 	bgt.w	8009f02 <atan+0x29a>
 8009ca0:	a59b      	add	r5, pc, #620	; (adr r5, 8009f10 <atan+0x2a8>)
 8009ca2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ca6:	ec45 4b10 	vmov	d0, r4, r5
 8009caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cae:	4bb6      	ldr	r3, [pc, #728]	; (8009f88 <atan+0x320>)
 8009cb0:	429e      	cmp	r6, r3
 8009cb2:	dc14      	bgt.n	8009cde <atan+0x76>
 8009cb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009cb8:	429e      	cmp	r6, r3
 8009cba:	dc0d      	bgt.n	8009cd8 <atan+0x70>
 8009cbc:	a396      	add	r3, pc, #600	; (adr r3, 8009f18 <atan+0x2b0>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	ee10 0a10 	vmov	r0, s0
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 fad8 	bl	800027c <__adddf3>
 8009ccc:	4baf      	ldr	r3, [pc, #700]	; (8009f8c <atan+0x324>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f7f6 ff1a 	bl	8000b08 <__aeabi_dcmpgt>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d1e6      	bne.n	8009ca6 <atan+0x3e>
 8009cd8:	f04f 3aff 	mov.w	sl, #4294967295
 8009cdc:	e02b      	b.n	8009d36 <atan+0xce>
 8009cde:	f000 f963 	bl	8009fa8 <fabs>
 8009ce2:	4bab      	ldr	r3, [pc, #684]	; (8009f90 <atan+0x328>)
 8009ce4:	429e      	cmp	r6, r3
 8009ce6:	ec55 4b10 	vmov	r4, r5, d0
 8009cea:	f300 80bf 	bgt.w	8009e6c <atan+0x204>
 8009cee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009cf2:	429e      	cmp	r6, r3
 8009cf4:	f300 80a0 	bgt.w	8009e38 <atan+0x1d0>
 8009cf8:	ee10 2a10 	vmov	r2, s0
 8009cfc:	ee10 0a10 	vmov	r0, s0
 8009d00:	462b      	mov	r3, r5
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7f6 faba 	bl	800027c <__adddf3>
 8009d08:	4ba0      	ldr	r3, [pc, #640]	; (8009f8c <atan+0x324>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f7f6 fab4 	bl	8000278 <__aeabi_dsub>
 8009d10:	2200      	movs	r2, #0
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7f6 faad 	bl	800027c <__adddf3>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4630      	mov	r0, r6
 8009d28:	4639      	mov	r1, r7
 8009d2a:	f7f6 fd87 	bl	800083c <__aeabi_ddiv>
 8009d2e:	f04f 0a00 	mov.w	sl, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	460d      	mov	r5, r1
 8009d36:	4622      	mov	r2, r4
 8009d38:	462b      	mov	r3, r5
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	f7f6 fc53 	bl	80005e8 <__aeabi_dmul>
 8009d42:	4602      	mov	r2, r0
 8009d44:	460b      	mov	r3, r1
 8009d46:	4680      	mov	r8, r0
 8009d48:	4689      	mov	r9, r1
 8009d4a:	f7f6 fc4d 	bl	80005e8 <__aeabi_dmul>
 8009d4e:	a374      	add	r3, pc, #464	; (adr r3, 8009f20 <atan+0x2b8>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	4606      	mov	r6, r0
 8009d56:	460f      	mov	r7, r1
 8009d58:	f7f6 fc46 	bl	80005e8 <__aeabi_dmul>
 8009d5c:	a372      	add	r3, pc, #456	; (adr r3, 8009f28 <atan+0x2c0>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fa8b 	bl	800027c <__adddf3>
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	f7f6 fc3d 	bl	80005e8 <__aeabi_dmul>
 8009d6e:	a370      	add	r3, pc, #448	; (adr r3, 8009f30 <atan+0x2c8>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa82 	bl	800027c <__adddf3>
 8009d78:	4632      	mov	r2, r6
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	f7f6 fc34 	bl	80005e8 <__aeabi_dmul>
 8009d80:	a36d      	add	r3, pc, #436	; (adr r3, 8009f38 <atan+0x2d0>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	f7f6 fa79 	bl	800027c <__adddf3>
 8009d8a:	4632      	mov	r2, r6
 8009d8c:	463b      	mov	r3, r7
 8009d8e:	f7f6 fc2b 	bl	80005e8 <__aeabi_dmul>
 8009d92:	a36b      	add	r3, pc, #428	; (adr r3, 8009f40 <atan+0x2d8>)
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f7f6 fa70 	bl	800027c <__adddf3>
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	463b      	mov	r3, r7
 8009da0:	f7f6 fc22 	bl	80005e8 <__aeabi_dmul>
 8009da4:	a368      	add	r3, pc, #416	; (adr r3, 8009f48 <atan+0x2e0>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7f6 fa67 	bl	800027c <__adddf3>
 8009dae:	4642      	mov	r2, r8
 8009db0:	464b      	mov	r3, r9
 8009db2:	f7f6 fc19 	bl	80005e8 <__aeabi_dmul>
 8009db6:	a366      	add	r3, pc, #408	; (adr r3, 8009f50 <atan+0x2e8>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	4680      	mov	r8, r0
 8009dbe:	4689      	mov	r9, r1
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	f7f6 fc10 	bl	80005e8 <__aeabi_dmul>
 8009dc8:	a363      	add	r3, pc, #396	; (adr r3, 8009f58 <atan+0x2f0>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fa53 	bl	8000278 <__aeabi_dsub>
 8009dd2:	4632      	mov	r2, r6
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	f7f6 fc07 	bl	80005e8 <__aeabi_dmul>
 8009dda:	a361      	add	r3, pc, #388	; (adr r3, 8009f60 <atan+0x2f8>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 fa4a 	bl	8000278 <__aeabi_dsub>
 8009de4:	4632      	mov	r2, r6
 8009de6:	463b      	mov	r3, r7
 8009de8:	f7f6 fbfe 	bl	80005e8 <__aeabi_dmul>
 8009dec:	a35e      	add	r3, pc, #376	; (adr r3, 8009f68 <atan+0x300>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fa41 	bl	8000278 <__aeabi_dsub>
 8009df6:	4632      	mov	r2, r6
 8009df8:	463b      	mov	r3, r7
 8009dfa:	f7f6 fbf5 	bl	80005e8 <__aeabi_dmul>
 8009dfe:	a35c      	add	r3, pc, #368	; (adr r3, 8009f70 <atan+0x308>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fa38 	bl	8000278 <__aeabi_dsub>
 8009e08:	4632      	mov	r2, r6
 8009e0a:	463b      	mov	r3, r7
 8009e0c:	f7f6 fbec 	bl	80005e8 <__aeabi_dmul>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4640      	mov	r0, r8
 8009e16:	4649      	mov	r1, r9
 8009e18:	f7f6 fa30 	bl	800027c <__adddf3>
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	462b      	mov	r3, r5
 8009e20:	f7f6 fbe2 	bl	80005e8 <__aeabi_dmul>
 8009e24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	d14b      	bne.n	8009ec6 <atan+0x25e>
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	f7f6 fa21 	bl	8000278 <__aeabi_dsub>
 8009e36:	e72c      	b.n	8009c92 <atan+0x2a>
 8009e38:	ee10 0a10 	vmov	r0, s0
 8009e3c:	4b53      	ldr	r3, [pc, #332]	; (8009f8c <atan+0x324>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4629      	mov	r1, r5
 8009e42:	f7f6 fa19 	bl	8000278 <__aeabi_dsub>
 8009e46:	4b51      	ldr	r3, [pc, #324]	; (8009f8c <atan+0x324>)
 8009e48:	4606      	mov	r6, r0
 8009e4a:	460f      	mov	r7, r1
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4620      	mov	r0, r4
 8009e50:	4629      	mov	r1, r5
 8009e52:	f7f6 fa13 	bl	800027c <__adddf3>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	f7f6 fced 	bl	800083c <__aeabi_ddiv>
 8009e62:	f04f 0a01 	mov.w	sl, #1
 8009e66:	4604      	mov	r4, r0
 8009e68:	460d      	mov	r5, r1
 8009e6a:	e764      	b.n	8009d36 <atan+0xce>
 8009e6c:	4b49      	ldr	r3, [pc, #292]	; (8009f94 <atan+0x32c>)
 8009e6e:	429e      	cmp	r6, r3
 8009e70:	da1d      	bge.n	8009eae <atan+0x246>
 8009e72:	ee10 0a10 	vmov	r0, s0
 8009e76:	4b48      	ldr	r3, [pc, #288]	; (8009f98 <atan+0x330>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7f6 f9fc 	bl	8000278 <__aeabi_dsub>
 8009e80:	4b45      	ldr	r3, [pc, #276]	; (8009f98 <atan+0x330>)
 8009e82:	4606      	mov	r6, r0
 8009e84:	460f      	mov	r7, r1
 8009e86:	2200      	movs	r2, #0
 8009e88:	4620      	mov	r0, r4
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	f7f6 fbac 	bl	80005e8 <__aeabi_dmul>
 8009e90:	4b3e      	ldr	r3, [pc, #248]	; (8009f8c <atan+0x324>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	f7f6 f9f2 	bl	800027c <__adddf3>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	f7f6 fccc 	bl	800083c <__aeabi_ddiv>
 8009ea4:	f04f 0a02 	mov.w	sl, #2
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	460d      	mov	r5, r1
 8009eac:	e743      	b.n	8009d36 <atan+0xce>
 8009eae:	462b      	mov	r3, r5
 8009eb0:	ee10 2a10 	vmov	r2, s0
 8009eb4:	4939      	ldr	r1, [pc, #228]	; (8009f9c <atan+0x334>)
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	f7f6 fcc0 	bl	800083c <__aeabi_ddiv>
 8009ebc:	f04f 0a03 	mov.w	sl, #3
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	e737      	b.n	8009d36 <atan+0xce>
 8009ec6:	4b36      	ldr	r3, [pc, #216]	; (8009fa0 <atan+0x338>)
 8009ec8:	4e36      	ldr	r6, [pc, #216]	; (8009fa4 <atan+0x33c>)
 8009eca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009ece:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009ed2:	e9da 2300 	ldrd	r2, r3, [sl]
 8009ed6:	f7f6 f9cf 	bl	8000278 <__aeabi_dsub>
 8009eda:	4622      	mov	r2, r4
 8009edc:	462b      	mov	r3, r5
 8009ede:	f7f6 f9cb 	bl	8000278 <__aeabi_dsub>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009eea:	f7f6 f9c5 	bl	8000278 <__aeabi_dsub>
 8009eee:	f1bb 0f00 	cmp.w	fp, #0
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	f6bf aed6 	bge.w	8009ca6 <atan+0x3e>
 8009efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009efe:	461d      	mov	r5, r3
 8009f00:	e6d1      	b.n	8009ca6 <atan+0x3e>
 8009f02:	a51d      	add	r5, pc, #116	; (adr r5, 8009f78 <atan+0x310>)
 8009f04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f08:	e6cd      	b.n	8009ca6 <atan+0x3e>
 8009f0a:	bf00      	nop
 8009f0c:	f3af 8000 	nop.w
 8009f10:	54442d18 	.word	0x54442d18
 8009f14:	bff921fb 	.word	0xbff921fb
 8009f18:	8800759c 	.word	0x8800759c
 8009f1c:	7e37e43c 	.word	0x7e37e43c
 8009f20:	e322da11 	.word	0xe322da11
 8009f24:	3f90ad3a 	.word	0x3f90ad3a
 8009f28:	24760deb 	.word	0x24760deb
 8009f2c:	3fa97b4b 	.word	0x3fa97b4b
 8009f30:	a0d03d51 	.word	0xa0d03d51
 8009f34:	3fb10d66 	.word	0x3fb10d66
 8009f38:	c54c206e 	.word	0xc54c206e
 8009f3c:	3fb745cd 	.word	0x3fb745cd
 8009f40:	920083ff 	.word	0x920083ff
 8009f44:	3fc24924 	.word	0x3fc24924
 8009f48:	5555550d 	.word	0x5555550d
 8009f4c:	3fd55555 	.word	0x3fd55555
 8009f50:	2c6a6c2f 	.word	0x2c6a6c2f
 8009f54:	bfa2b444 	.word	0xbfa2b444
 8009f58:	52defd9a 	.word	0x52defd9a
 8009f5c:	3fadde2d 	.word	0x3fadde2d
 8009f60:	af749a6d 	.word	0xaf749a6d
 8009f64:	3fb3b0f2 	.word	0x3fb3b0f2
 8009f68:	fe231671 	.word	0xfe231671
 8009f6c:	3fbc71c6 	.word	0x3fbc71c6
 8009f70:	9998ebc4 	.word	0x9998ebc4
 8009f74:	3fc99999 	.word	0x3fc99999
 8009f78:	54442d18 	.word	0x54442d18
 8009f7c:	3ff921fb 	.word	0x3ff921fb
 8009f80:	440fffff 	.word	0x440fffff
 8009f84:	7ff00000 	.word	0x7ff00000
 8009f88:	3fdbffff 	.word	0x3fdbffff
 8009f8c:	3ff00000 	.word	0x3ff00000
 8009f90:	3ff2ffff 	.word	0x3ff2ffff
 8009f94:	40038000 	.word	0x40038000
 8009f98:	3ff80000 	.word	0x3ff80000
 8009f9c:	bff00000 	.word	0xbff00000
 8009fa0:	0802db20 	.word	0x0802db20
 8009fa4:	0802db00 	.word	0x0802db00

08009fa8 <fabs>:
 8009fa8:	ec51 0b10 	vmov	r0, r1, d0
 8009fac:	ee10 2a10 	vmov	r2, s0
 8009fb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fb4:	ec43 2b10 	vmov	d0, r2, r3
 8009fb8:	4770      	bx	lr

08009fba <finite>:
 8009fba:	b082      	sub	sp, #8
 8009fbc:	ed8d 0b00 	vstr	d0, [sp]
 8009fc0:	9801      	ldr	r0, [sp, #4]
 8009fc2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009fc6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009fca:	0fc0      	lsrs	r0, r0, #31
 8009fcc:	b002      	add	sp, #8
 8009fce:	4770      	bx	lr

08009fd0 <floor>:
 8009fd0:	ec51 0b10 	vmov	r0, r1, d0
 8009fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009fdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009fe0:	2e13      	cmp	r6, #19
 8009fe2:	ee10 5a10 	vmov	r5, s0
 8009fe6:	ee10 8a10 	vmov	r8, s0
 8009fea:	460c      	mov	r4, r1
 8009fec:	dc32      	bgt.n	800a054 <floor+0x84>
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	da14      	bge.n	800a01c <floor+0x4c>
 8009ff2:	a333      	add	r3, pc, #204	; (adr r3, 800a0c0 <floor+0xf0>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 f940 	bl	800027c <__adddf3>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	f7f6 fd82 	bl	8000b08 <__aeabi_dcmpgt>
 800a004:	b138      	cbz	r0, 800a016 <floor+0x46>
 800a006:	2c00      	cmp	r4, #0
 800a008:	da57      	bge.n	800a0ba <floor+0xea>
 800a00a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a00e:	431d      	orrs	r5, r3
 800a010:	d001      	beq.n	800a016 <floor+0x46>
 800a012:	4c2d      	ldr	r4, [pc, #180]	; (800a0c8 <floor+0xf8>)
 800a014:	2500      	movs	r5, #0
 800a016:	4621      	mov	r1, r4
 800a018:	4628      	mov	r0, r5
 800a01a:	e025      	b.n	800a068 <floor+0x98>
 800a01c:	4f2b      	ldr	r7, [pc, #172]	; (800a0cc <floor+0xfc>)
 800a01e:	4137      	asrs	r7, r6
 800a020:	ea01 0307 	and.w	r3, r1, r7
 800a024:	4303      	orrs	r3, r0
 800a026:	d01f      	beq.n	800a068 <floor+0x98>
 800a028:	a325      	add	r3, pc, #148	; (adr r3, 800a0c0 <floor+0xf0>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 f925 	bl	800027c <__adddf3>
 800a032:	2200      	movs	r2, #0
 800a034:	2300      	movs	r3, #0
 800a036:	f7f6 fd67 	bl	8000b08 <__aeabi_dcmpgt>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d0eb      	beq.n	800a016 <floor+0x46>
 800a03e:	2c00      	cmp	r4, #0
 800a040:	bfbe      	ittt	lt
 800a042:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a046:	fa43 f606 	asrlt.w	r6, r3, r6
 800a04a:	19a4      	addlt	r4, r4, r6
 800a04c:	ea24 0407 	bic.w	r4, r4, r7
 800a050:	2500      	movs	r5, #0
 800a052:	e7e0      	b.n	800a016 <floor+0x46>
 800a054:	2e33      	cmp	r6, #51	; 0x33
 800a056:	dd0b      	ble.n	800a070 <floor+0xa0>
 800a058:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a05c:	d104      	bne.n	800a068 <floor+0x98>
 800a05e:	ee10 2a10 	vmov	r2, s0
 800a062:	460b      	mov	r3, r1
 800a064:	f7f6 f90a 	bl	800027c <__adddf3>
 800a068:	ec41 0b10 	vmov	d0, r0, r1
 800a06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a070:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a074:	f04f 33ff 	mov.w	r3, #4294967295
 800a078:	fa23 f707 	lsr.w	r7, r3, r7
 800a07c:	4207      	tst	r7, r0
 800a07e:	d0f3      	beq.n	800a068 <floor+0x98>
 800a080:	a30f      	add	r3, pc, #60	; (adr r3, 800a0c0 <floor+0xf0>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 f8f9 	bl	800027c <__adddf3>
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	f7f6 fd3b 	bl	8000b08 <__aeabi_dcmpgt>
 800a092:	2800      	cmp	r0, #0
 800a094:	d0bf      	beq.n	800a016 <floor+0x46>
 800a096:	2c00      	cmp	r4, #0
 800a098:	da02      	bge.n	800a0a0 <floor+0xd0>
 800a09a:	2e14      	cmp	r6, #20
 800a09c:	d103      	bne.n	800a0a6 <floor+0xd6>
 800a09e:	3401      	adds	r4, #1
 800a0a0:	ea25 0507 	bic.w	r5, r5, r7
 800a0a4:	e7b7      	b.n	800a016 <floor+0x46>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a0ac:	fa03 f606 	lsl.w	r6, r3, r6
 800a0b0:	4435      	add	r5, r6
 800a0b2:	4545      	cmp	r5, r8
 800a0b4:	bf38      	it	cc
 800a0b6:	18e4      	addcc	r4, r4, r3
 800a0b8:	e7f2      	b.n	800a0a0 <floor+0xd0>
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	462c      	mov	r4, r5
 800a0be:	e7aa      	b.n	800a016 <floor+0x46>
 800a0c0:	8800759c 	.word	0x8800759c
 800a0c4:	7e37e43c 	.word	0x7e37e43c
 800a0c8:	bff00000 	.word	0xbff00000
 800a0cc:	000fffff 	.word	0x000fffff

0800a0d0 <nan>:
 800a0d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0d8 <nan+0x8>
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	00000000 	.word	0x00000000
 800a0dc:	7ff80000 	.word	0x7ff80000

0800a0e0 <rint>:
 800a0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0e2:	ec51 0b10 	vmov	r0, r1, d0
 800a0e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a0ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a0ee:	2e13      	cmp	r6, #19
 800a0f0:	ee10 4a10 	vmov	r4, s0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a0fa:	dc58      	bgt.n	800a1ae <rint+0xce>
 800a0fc:	2e00      	cmp	r6, #0
 800a0fe:	da2b      	bge.n	800a158 <rint+0x78>
 800a100:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a104:	4302      	orrs	r2, r0
 800a106:	d023      	beq.n	800a150 <rint+0x70>
 800a108:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a10c:	4302      	orrs	r2, r0
 800a10e:	4254      	negs	r4, r2
 800a110:	4314      	orrs	r4, r2
 800a112:	0c4b      	lsrs	r3, r1, #17
 800a114:	0b24      	lsrs	r4, r4, #12
 800a116:	045b      	lsls	r3, r3, #17
 800a118:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a11c:	ea44 0103 	orr.w	r1, r4, r3
 800a120:	4b32      	ldr	r3, [pc, #200]	; (800a1ec <rint+0x10c>)
 800a122:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a126:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4630      	mov	r0, r6
 800a130:	4639      	mov	r1, r7
 800a132:	f7f6 f8a3 	bl	800027c <__adddf3>
 800a136:	e9cd 0100 	strd	r0, r1, [sp]
 800a13a:	463b      	mov	r3, r7
 800a13c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a140:	4632      	mov	r2, r6
 800a142:	f7f6 f899 	bl	8000278 <__aeabi_dsub>
 800a146:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a14a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a14e:	4639      	mov	r1, r7
 800a150:	ec41 0b10 	vmov	d0, r0, r1
 800a154:	b003      	add	sp, #12
 800a156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a158:	4a25      	ldr	r2, [pc, #148]	; (800a1f0 <rint+0x110>)
 800a15a:	4132      	asrs	r2, r6
 800a15c:	ea01 0702 	and.w	r7, r1, r2
 800a160:	4307      	orrs	r7, r0
 800a162:	d0f5      	beq.n	800a150 <rint+0x70>
 800a164:	0851      	lsrs	r1, r2, #1
 800a166:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a16a:	4314      	orrs	r4, r2
 800a16c:	d00c      	beq.n	800a188 <rint+0xa8>
 800a16e:	ea23 0201 	bic.w	r2, r3, r1
 800a172:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a176:	2e13      	cmp	r6, #19
 800a178:	fa43 f606 	asr.w	r6, r3, r6
 800a17c:	bf0c      	ite	eq
 800a17e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a182:	2400      	movne	r4, #0
 800a184:	ea42 0306 	orr.w	r3, r2, r6
 800a188:	4918      	ldr	r1, [pc, #96]	; (800a1ec <rint+0x10c>)
 800a18a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a18e:	4622      	mov	r2, r4
 800a190:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 f870 	bl	800027c <__adddf3>
 800a19c:	e9cd 0100 	strd	r0, r1, [sp]
 800a1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	462b      	mov	r3, r5
 800a1a8:	f7f6 f866 	bl	8000278 <__aeabi_dsub>
 800a1ac:	e7d0      	b.n	800a150 <rint+0x70>
 800a1ae:	2e33      	cmp	r6, #51	; 0x33
 800a1b0:	dd07      	ble.n	800a1c2 <rint+0xe2>
 800a1b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a1b6:	d1cb      	bne.n	800a150 <rint+0x70>
 800a1b8:	ee10 2a10 	vmov	r2, s0
 800a1bc:	f7f6 f85e 	bl	800027c <__adddf3>
 800a1c0:	e7c6      	b.n	800a150 <rint+0x70>
 800a1c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a1c6:	f04f 36ff 	mov.w	r6, #4294967295
 800a1ca:	40d6      	lsrs	r6, r2
 800a1cc:	4230      	tst	r0, r6
 800a1ce:	d0bf      	beq.n	800a150 <rint+0x70>
 800a1d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a1d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a1d8:	bf1f      	itttt	ne
 800a1da:	ea24 0101 	bicne.w	r1, r4, r1
 800a1de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a1e2:	fa44 f202 	asrne.w	r2, r4, r2
 800a1e6:	ea41 0402 	orrne.w	r4, r1, r2
 800a1ea:	e7cd      	b.n	800a188 <rint+0xa8>
 800a1ec:	0802db40 	.word	0x0802db40
 800a1f0:	000fffff 	.word	0x000fffff
 800a1f4:	00000000 	.word	0x00000000

0800a1f8 <scalbn>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	ec55 4b10 	vmov	r4, r5, d0
 800a1fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a202:	4606      	mov	r6, r0
 800a204:	462b      	mov	r3, r5
 800a206:	b99a      	cbnz	r2, 800a230 <scalbn+0x38>
 800a208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a20c:	4323      	orrs	r3, r4
 800a20e:	d036      	beq.n	800a27e <scalbn+0x86>
 800a210:	4b39      	ldr	r3, [pc, #228]	; (800a2f8 <scalbn+0x100>)
 800a212:	4629      	mov	r1, r5
 800a214:	ee10 0a10 	vmov	r0, s0
 800a218:	2200      	movs	r2, #0
 800a21a:	f7f6 f9e5 	bl	80005e8 <__aeabi_dmul>
 800a21e:	4b37      	ldr	r3, [pc, #220]	; (800a2fc <scalbn+0x104>)
 800a220:	429e      	cmp	r6, r3
 800a222:	4604      	mov	r4, r0
 800a224:	460d      	mov	r5, r1
 800a226:	da10      	bge.n	800a24a <scalbn+0x52>
 800a228:	a32b      	add	r3, pc, #172	; (adr r3, 800a2d8 <scalbn+0xe0>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	e03a      	b.n	800a2a6 <scalbn+0xae>
 800a230:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a234:	428a      	cmp	r2, r1
 800a236:	d10c      	bne.n	800a252 <scalbn+0x5a>
 800a238:	ee10 2a10 	vmov	r2, s0
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f6 f81c 	bl	800027c <__adddf3>
 800a244:	4604      	mov	r4, r0
 800a246:	460d      	mov	r5, r1
 800a248:	e019      	b.n	800a27e <scalbn+0x86>
 800a24a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a24e:	460b      	mov	r3, r1
 800a250:	3a36      	subs	r2, #54	; 0x36
 800a252:	4432      	add	r2, r6
 800a254:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a258:	428a      	cmp	r2, r1
 800a25a:	dd08      	ble.n	800a26e <scalbn+0x76>
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	a120      	add	r1, pc, #128	; (adr r1, 800a2e0 <scalbn+0xe8>)
 800a260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a264:	da1c      	bge.n	800a2a0 <scalbn+0xa8>
 800a266:	a120      	add	r1, pc, #128	; (adr r1, 800a2e8 <scalbn+0xf0>)
 800a268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a26c:	e018      	b.n	800a2a0 <scalbn+0xa8>
 800a26e:	2a00      	cmp	r2, #0
 800a270:	dd08      	ble.n	800a284 <scalbn+0x8c>
 800a272:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a276:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a27a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a27e:	ec45 4b10 	vmov	d0, r4, r5
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a288:	da19      	bge.n	800a2be <scalbn+0xc6>
 800a28a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a28e:	429e      	cmp	r6, r3
 800a290:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a294:	dd0a      	ble.n	800a2ac <scalbn+0xb4>
 800a296:	a112      	add	r1, pc, #72	; (adr r1, 800a2e0 <scalbn+0xe8>)
 800a298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1e2      	bne.n	800a266 <scalbn+0x6e>
 800a2a0:	a30f      	add	r3, pc, #60	; (adr r3, 800a2e0 <scalbn+0xe8>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f99f 	bl	80005e8 <__aeabi_dmul>
 800a2aa:	e7cb      	b.n	800a244 <scalbn+0x4c>
 800a2ac:	a10a      	add	r1, pc, #40	; (adr r1, 800a2d8 <scalbn+0xe0>)
 800a2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0b8      	beq.n	800a228 <scalbn+0x30>
 800a2b6:	a10e      	add	r1, pc, #56	; (adr r1, 800a2f0 <scalbn+0xf8>)
 800a2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2bc:	e7b4      	b.n	800a228 <scalbn+0x30>
 800a2be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2c2:	3236      	adds	r2, #54	; 0x36
 800a2c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <scalbn+0x108>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	e7e8      	b.n	800a2a6 <scalbn+0xae>
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	c2f8f359 	.word	0xc2f8f359
 800a2dc:	01a56e1f 	.word	0x01a56e1f
 800a2e0:	8800759c 	.word	0x8800759c
 800a2e4:	7e37e43c 	.word	0x7e37e43c
 800a2e8:	8800759c 	.word	0x8800759c
 800a2ec:	fe37e43c 	.word	0xfe37e43c
 800a2f0:	c2f8f359 	.word	0xc2f8f359
 800a2f4:	81a56e1f 	.word	0x81a56e1f
 800a2f8:	43500000 	.word	0x43500000
 800a2fc:	ffff3cb0 	.word	0xffff3cb0
 800a300:	3c900000 	.word	0x3c900000

0800a304 <_init>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	bf00      	nop
 800a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30a:	bc08      	pop	{r3}
 800a30c:	469e      	mov	lr, r3
 800a30e:	4770      	bx	lr

0800a310 <_fini>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	bf00      	nop
 800a314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a316:	bc08      	pop	{r3}
 800a318:	469e      	mov	lr, r3
 800a31a:	4770      	bx	lr
