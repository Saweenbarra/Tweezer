
Tweezer_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08008f00  08008f00  00018f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009438  08009438  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009440  08009440  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009448  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d38  20000080  080094c8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000db8  080094c8  00020db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174c6  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002920  00000000  00000000  00037576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00039e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e88  00000000  00000000  0003c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146cf  00000000  00000000  00062108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec715  00000000  00000000  000767d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162eec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb8  00000000  00000000  00162f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ee4 	.word	0x08008ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008ee4 	.word	0x08008ee4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d013      	beq.n	8000ed0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ea8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000eb0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00b      	beq.n	8000ed0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000eb8:	e000      	b.n	8000ebc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ebc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ec6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_write>:
static void MX_USART1_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e009      	b.n	8000f08 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffc7 	bl	8000e90 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf1      	blt.n	8000ef4 <_write+0x16>
  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	0000      	movs	r0, r0
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <generateLuts>:
void generateLuts()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
    for (int i = 0; i < 32; i++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	e03c      	b.n	8000fa6 <generateLuts+0x86>
    {
        double angle = (2 * M_PI * (double)i * k) / 32;
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff faf1 	bl	8000514 <__aeabi_i2d>
 8000f32:	a325      	add	r3, pc, #148	; (adr r3, 8000fc8 <generateLuts+0xa8>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff fb56 	bl	80005e8 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <generateLuts+0x98>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff fb4d 	bl	80005e8 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <generateLuts+0x9c>)
 8000f5c:	f7ff fc6e 	bl	800083c <__aeabi_ddiv>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	e9c7 2300 	strd	r2, r3, [r7]

        cosAngLut[i] = cos(angle);
 8000f68:	ed97 0b00 	vldr	d0, [r7]
 8000f6c:	f006 fb90 	bl	8007690 <cos>
 8000f70:	eeb0 7a40 	vmov.f32	s14, s0
 8000f74:	eef0 7a60 	vmov.f32	s15, s1
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <generateLuts+0xa0>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	ed83 7b00 	vstr	d7, [r3]
        sinAngLut[i] = sin(angle);
 8000f84:	ed97 0b00 	vldr	d0, [r7]
 8000f88:	f006 fc1a 	bl	80077c0 <sin>
 8000f8c:	eeb0 7a40 	vmov.f32	s14, s0
 8000f90:	eef0 7a60 	vmov.f32	s15, s1
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <generateLuts+0xa4>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < 32; i++)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b1f      	cmp	r3, #31
 8000faa:	ddbf      	ble.n	8000f2c <generateLuts+0xc>
    }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	40400000 	.word	0x40400000
 8000fc0:	20000620 	.word	0x20000620
 8000fc4:	20000720 	.word	0x20000720
 8000fc8:	54442d18 	.word	0x54442d18
 8000fcc:	401921fb 	.word	0x401921fb

08000fd0 <calcBuffLoc>:
uint32_t calcBuffLoc(uint32_t startPos, uint32_t offSet, uint32_t buffSize)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    uint32_t newLoc = startPos + offSet;
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]

    if (newLoc < buffSize)
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d201      	bcs.n	8000ff0 <calcBuffLoc+0x20>
    {
        return newLoc;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	e002      	b.n	8000ff6 <calcBuffLoc+0x26>
    }
    else
    {
        return newLoc - buffSize; // Loop Around
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	1ad3      	subs	r3, r2, r3
    }
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <generate_ODR_Buff>:
void generate_ODR_Buff()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800100a:	af00      	add	r7, sp, #0
	const uint8_t singlePhaseBuff[TX_BUFF_SIZE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0};
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4aa6      	ldr	r2, [pc, #664]	; (80012ac <generate_ODR_Buff+0x2a8>)
 8001012:	4618      	mov	r0, r3
 8001014:	4611      	mov	r1, r2
 8001016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101a:	461a      	mov	r2, r3
 800101c:	f005 fbca 	bl	80067b4 <memcpy>
	//const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 1, 1, 1, 1, 1};
	const uint8_t biasBuff[BIAS_BUFF_SIZE] = {1, 1, 1, 0, 0, 0, 0, 0};
 8001020:	463b      	mov	r3, r7
 8001022:	4aa3      	ldr	r2, [pc, #652]	; (80012b0 <generate_ODR_Buff+0x2ac>)
 8001024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001028:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t tx0Loc, tx1Loc, tx2Loc, tx3Loc, tx4Loc, tx5Loc, tx6Loc, tx7Loc = 0; // 0 ... 512-1: TX buffer locations
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	uint32_t biasLoc = 0;                                                        // 0 ... 8-1: Bias buffer location
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	uint32_t period = 0;                                                         // Period signal current output pin state
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	uint32_t timeBase = 0;                                                       // Timebase signal current output pin state
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	uint32_t adcTrig = 0;                                                        // ADC external trigger signal current output pin state
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint32_t ODRVal = 0;                                                        // Output data register state for all signals combined
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001056:	e11d      	b.n	8001294 <generate_ODR_Buff+0x290>
	{
		tx0Loc = i;
 8001058:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800105c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		/* Calculate other TX signals LUT location 45 degrees phase shifted */
		tx1Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 1, TX_BUFF_SIZE);
 8001060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001064:	2140      	movs	r1, #64	; 0x40
 8001066:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800106a:	f7ff ffb1 	bl	8000fd0 <calcBuffLoc>
 800106e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		tx2Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 2, TX_BUFF_SIZE);
 8001072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800107c:	f7ff ffa8 	bl	8000fd0 <calcBuffLoc>
 8001080:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		tx3Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 3, TX_BUFF_SIZE);
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	21c0      	movs	r1, #192	; 0xc0
 800108a:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800108e:	f7ff ff9f 	bl	8000fd0 <calcBuffLoc>
 8001092:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		tx4Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 4, TX_BUFF_SIZE);
 8001096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80010a2:	f7ff ff95 	bl	8000fd0 <calcBuffLoc>
 80010a6:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		tx5Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 5, TX_BUFF_SIZE);
 80010aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80010b2:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80010b6:	f7ff ff8b 	bl	8000fd0 <calcBuffLoc>
 80010ba:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		tx6Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 6, TX_BUFF_SIZE);
 80010be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80010c6:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80010ca:	f7ff ff81 	bl	8000fd0 <calcBuffLoc>
 80010ce:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
		tx7Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 7, TX_BUFF_SIZE);
 80010d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80010da:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80010de:	f7ff ff77 	bl	8000fd0 <calcBuffLoc>
 80010e2:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230

		/* calculate debug signals */
		period = (tx0Loc < TX_BUFF_SIZE / 2) ? 0 : 1;
 80010e6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	bf8c      	ite	hi
 80010ee:	2301      	movhi	r3, #1
 80010f0:	2300      	movls	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		timeBase = (tx0Loc % 2) ? 0 : 1; //flips every sample, timebase for debugging
 80010f8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

		/* Calculate ADC external trigger signal */
		adcTrig = ((tx0Loc + 7) % 8) ? 0 : 1; //ADC trigger signal every 8T, Offset by 6 to align ADC trigger (rising edge) on second period when the bias is low.
 800110e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001112:	3307      	adds	r3, #7
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf0c      	ite	eq
 800111c:	2301      	moveq	r3, #1
 800111e:	2300      	movne	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		//adcTrig = ((tx0Loc) % 8) ? 0 : 1;
		/* building the OCTL value */
		ODRVal = 0; //Set all pins low default
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

		if (singlePhaseBuff[tx0Loc])
 800112c:	f107 0208 	add.w	r2, r7, #8
 8001130:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <generate_ODR_Buff+0x144>
			ODRVal |= PWM0_Pin;
 800113c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx1Loc])
 8001148:	f107 0208 	add.w	r2, r7, #8
 800114c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <generate_ODR_Buff+0x160>
			ODRVal |= PWM45_Pin;
 8001158:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx2Loc])
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <generate_ODR_Buff+0x17c>
			ODRVal |= PWM90_Pin;
 8001174:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx3Loc])
 8001180:	f107 0208 	add.w	r2, r7, #8
 8001184:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <generate_ODR_Buff+0x198>
			ODRVal |= PWM135_Pin;
 8001190:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx4Loc])
 800119c:	f107 0208 	add.w	r2, r7, #8
 80011a0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <generate_ODR_Buff+0x1b4>
			ODRVal |= PWM180_Pin;
 80011ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx5Loc])
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <generate_ODR_Buff+0x1d0>
			ODRVal |= PWM225_Pin; //STM32l433RCTxP does not have Port C Pin 5
 80011c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80011cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx6Loc])
 80011d4:	f107 0208 	add.w	r2, r7, #8
 80011d8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <generate_ODR_Buff+0x1ec>
			ODRVal |= PWM270_Pin;
 80011e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx7Loc])
 80011f0:	f107 0208 	add.w	r2, r7, #8
 80011f4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <generate_ODR_Buff+0x208>
			ODRVal |= PWM315_Pin;
 8001200:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (biasBuff[biasLoc])
 800120c:	463a      	mov	r2, r7
 800120e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <generate_ODR_Buff+0x222>
			ODRVal |= BIAS_Pin; // Bias signal: 8T Period 3T LOW 5T HIGH
 800121a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800121e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001222:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (adcTrig)
 8001226:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <generate_ODR_Buff+0x236>
			ODRVal |= ADC_TRIG_OUT_Pin; // ADC external trigger signal: 8T Period
 800122e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (timeBase)
 800123a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <generate_ODR_Buff+0x24a>
			ODRVal |= TIMEBASE_Pin;     // DBG signal: TimeBase smallest period 1T
 8001242:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800124a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (period)
 800124e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <generate_ODR_Buff+0x25e>
			ODRVal |= PERIOD_Pin; // DBG signal: Period is the modulated Sine period. 512/2=256, 256T HIGH followed by 256T LOW
 8001256:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800125a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800125e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

		/* Store OCTL value in buffer */
		ODR_Buff[i] = ODRVal;
 8001262:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001266:	b299      	uxth	r1, r3
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <generate_ODR_Buff+0x2b0>)
 800126a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800126e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		/* Loop over bias signal template buffer when end is reached*/
		biasLoc++;
 8001272:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001276:	3301      	adds	r3, #1
 8001278:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
		if (biasLoc >= BIAS_BUFF_SIZE)
 800127c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001280:	2b07      	cmp	r3, #7
 8001282:	d902      	bls.n	800128a <generate_ODR_Buff+0x286>
			biasLoc = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 800128a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800128e:	3301      	adds	r3, #1
 8001290:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001294:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800129c:	f4ff aedc 	bcc.w	8001058 <generate_ODR_Buff+0x54>
	}
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	08008f00 	.word	0x08008f00
 80012b0:	08009100 	.word	0x08009100
 80012b4:	2000009c 	.word	0x2000009c

080012b8 <sensor_signalProcessing>:
void sensor_signalProcessing()
{
 80012b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012bc:	b08a      	sub	sp, #40	; 0x28
 80012be:	af00      	add	r7, sp, #0
    /*Split even and odd samples */
    int eLoc = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    int oLoc = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < 64; i++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	e02c      	b.n	8001328 <sensor_signalProcessing+0x70>
    {
        if (i % 2)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d012      	beq.n	80012fe <sensor_signalProcessing+0x46>
        {
            even[eLoc] = (double)processBuff[i];
 80012d8:	4a9f      	ldr	r2, [pc, #636]	; (8001558 <sensor_signalProcessing+0x2a0>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f907 	bl	80004f4 <__aeabi_ui2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	489c      	ldr	r0, [pc, #624]	; (800155c <sensor_signalProcessing+0x2a4>)
 80012ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ee:	00c9      	lsls	r1, r1, #3
 80012f0:	4401      	add	r1, r0
 80012f2:	e9c1 2300 	strd	r2, r3, [r1]
            eLoc++;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	3301      	adds	r3, #1
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
 80012fc:	e011      	b.n	8001322 <sensor_signalProcessing+0x6a>
        }
        else
        {
            odd[oLoc] = (double)processBuff[i];
 80012fe:	4a96      	ldr	r2, [pc, #600]	; (8001558 <sensor_signalProcessing+0x2a0>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8f4 	bl	80004f4 <__aeabi_ui2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4893      	ldr	r0, [pc, #588]	; (8001560 <sensor_signalProcessing+0x2a8>)
 8001312:	6a39      	ldr	r1, [r7, #32]
 8001314:	00c9      	lsls	r1, r1, #3
 8001316:	4401      	add	r1, r0
 8001318:	e9c1 2300 	strd	r2, r3, [r1]
            oLoc++;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	3301      	adds	r3, #1
 8001320:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < 64; i++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b3f      	cmp	r3, #63	; 0x3f
 800132c:	d9cf      	bls.n	80012ce <sensor_signalProcessing+0x16>
        }
    }

    /* demodulate: convert sampled signal to sine*/
    for (uint32_t i = 0; i < 32; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	e018      	b.n	8001366 <sensor_signalProcessing+0xae>
    {
        demol[i] = even[i] - odd[i];
 8001334:	4a89      	ldr	r2, [pc, #548]	; (800155c <sensor_signalProcessing+0x2a4>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001340:	4a87      	ldr	r2, [pc, #540]	; (8001560 <sensor_signalProcessing+0x2a8>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7fe ff94 	bl	8000278 <__aeabi_dsub>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4883      	ldr	r0, [pc, #524]	; (8001564 <sensor_signalProcessing+0x2ac>)
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	00c9      	lsls	r1, r1, #3
 800135a:	4401      	add	r1, r0
 800135c:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint32_t i = 0; i < 32; i++)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	3301      	adds	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b1f      	cmp	r3, #31
 800136a:	d9e3      	bls.n	8001334 <sensor_signalProcessing+0x7c>
    //     sumrealTemp += (double)demolLp[i] * cos(angle);
    //     sumimagTemp += -(double)demolLp[i] * sin(angle);
    // }

    /* Fast dft using precomputed lookup tables for cos and sine part*/
    double sumrealTemp = 0;
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double sumimagTemp = 0;
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2302 	strd	r2, r3, [r7, #8]

    for (uint32_t i = 0; i < 32; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	e037      	b.n	80013fa <sensor_signalProcessing+0x142>
    {
        sumrealTemp += (double)demol[i] * cosAngLut[i];
 800138a:	4a76      	ldr	r2, [pc, #472]	; (8001564 <sensor_signalProcessing+0x2ac>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001396:	4a74      	ldr	r2, [pc, #464]	; (8001568 <sensor_signalProcessing+0x2b0>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f921 	bl	80005e8 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ae:	f7fe ff65 	bl	800027c <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        sumimagTemp += -(double)demol[i] * sinAngLut[i];
 80013ba:	4a6a      	ldr	r2, [pc, #424]	; (8001564 <sensor_signalProcessing+0x2ac>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	4692      	mov	sl, r2
 80013c8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80013cc:	4a67      	ldr	r2, [pc, #412]	; (800156c <sensor_signalProcessing+0x2b4>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4413      	add	r3, r2
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	4650      	mov	r0, sl
 80013da:	4659      	mov	r1, fp
 80013dc:	f7ff f904 	bl	80005e8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e8:	f7fe ff48 	bl	800027c <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    for (uint32_t i = 0; i < 32; i++)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b1f      	cmp	r3, #31
 80013fe:	d9c4      	bls.n	800138a <sensor_signalProcessing+0xd2>
    }

    // dft coefficients at the frequency bin of interest (1hz) in complex form
    real = sumrealTemp; //X-axis
 8001400:	495b      	ldr	r1, [pc, #364]	; (8001570 <sensor_signalProcessing+0x2b8>)
 8001402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
    imag = sumimagTemp; //Y-axis
 800140a:	495a      	ldr	r1, [pc, #360]	; (8001574 <sensor_signalProcessing+0x2bc>)
 800140c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001410:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate phase
    if (real >= 0 && imag >= 0)
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <sensor_signalProcessing+0x2b8>)
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	f7ff fb67 	bl	8000af4 <__aeabi_dcmpge>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d026      	beq.n	800147a <sensor_signalProcessing+0x1c2>
 800142c:	4b51      	ldr	r3, [pc, #324]	; (8001574 <sensor_signalProcessing+0x2bc>)
 800142e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f7ff fb5b 	bl	8000af4 <__aeabi_dcmpge>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d01a      	beq.n	800147a <sensor_signalProcessing+0x1c2>
    {
        //1-Quadrant (top right) [+, +]
        phaseRad = atan2(imag, real);
 8001444:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <sensor_signalProcessing+0x2bc>)
 8001446:	ed93 7b00 	vldr	d7, [r3]
 800144a:	4b49      	ldr	r3, [pc, #292]	; (8001570 <sensor_signalProcessing+0x2b8>)
 800144c:	ed93 6b00 	vldr	d6, [r3]
 8001450:	eeb0 1a46 	vmov.f32	s2, s12
 8001454:	eef0 1a66 	vmov.f32	s3, s13
 8001458:	eeb0 0a47 	vmov.f32	s0, s14
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	f006 fa02 	bl	8007868 <atan2>
 8001464:	eeb0 7a40 	vmov.f32	s14, s0
 8001468:	eef0 7a60 	vmov.f32	s15, s1
 800146c:	4b42      	ldr	r3, [pc, #264]	; (8001578 <sensor_signalProcessing+0x2c0>)
 800146e:	ed83 7b00 	vstr	d7, [r3]
        quadrant = 1;
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <sensor_signalProcessing+0x2c4>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e0b9      	b.n	80015ee <sensor_signalProcessing+0x336>
    }
    else if (real < 0 && imag >= 0)
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <sensor_signalProcessing+0x2b8>)
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	f7ff fb20 	bl	8000acc <__aeabi_dcmplt>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d026      	beq.n	80014e0 <sensor_signalProcessing+0x228>
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <sensor_signalProcessing+0x2bc>)
 8001494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	f7ff fb28 	bl	8000af4 <__aeabi_dcmpge>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01a      	beq.n	80014e0 <sensor_signalProcessing+0x228>
    {
        //2-Quadrant (top left) [-, +]
        phaseRad = atan2(imag, real);
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <sensor_signalProcessing+0x2bc>)
 80014ac:	ed93 7b00 	vldr	d7, [r3]
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <sensor_signalProcessing+0x2b8>)
 80014b2:	ed93 6b00 	vldr	d6, [r3]
 80014b6:	eeb0 1a46 	vmov.f32	s2, s12
 80014ba:	eef0 1a66 	vmov.f32	s3, s13
 80014be:	eeb0 0a47 	vmov.f32	s0, s14
 80014c2:	eef0 0a67 	vmov.f32	s1, s15
 80014c6:	f006 f9cf 	bl	8007868 <atan2>
 80014ca:	eeb0 7a40 	vmov.f32	s14, s0
 80014ce:	eef0 7a60 	vmov.f32	s15, s1
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <sensor_signalProcessing+0x2c0>)
 80014d4:	ed83 7b00 	vstr	d7, [r3]
        quadrant = 2;
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <sensor_signalProcessing+0x2c4>)
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e086      	b.n	80015ee <sensor_signalProcessing+0x336>
    }
    else if (real < 0 && imag < 0)
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <sensor_signalProcessing+0x2b8>)
 80014e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	f7ff faed 	bl	8000acc <__aeabi_dcmplt>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d043      	beq.n	8001580 <sensor_signalProcessing+0x2c8>
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <sensor_signalProcessing+0x2bc>)
 80014fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f7ff fae1 	bl	8000acc <__aeabi_dcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d037      	beq.n	8001580 <sensor_signalProcessing+0x2c8>
    {
        //3-Quadrant (bottom left) [-, -]
        phaseRad = 2 * M_PI + atan2(imag, real);
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <sensor_signalProcessing+0x2bc>)
 8001512:	ed93 7b00 	vldr	d7, [r3]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <sensor_signalProcessing+0x2b8>)
 8001518:	ed93 6b00 	vldr	d6, [r3]
 800151c:	eeb0 1a46 	vmov.f32	s2, s12
 8001520:	eef0 1a66 	vmov.f32	s3, s13
 8001524:	eeb0 0a47 	vmov.f32	s0, s14
 8001528:	eef0 0a67 	vmov.f32	s1, s15
 800152c:	f006 f99c 	bl	8007868 <atan2>
 8001530:	ec51 0b10 	vmov	r0, r1, d0
 8001534:	a306      	add	r3, pc, #24	; (adr r3, 8001550 <sensor_signalProcessing+0x298>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7fe fe9f 	bl	800027c <__adddf3>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	490d      	ldr	r1, [pc, #52]	; (8001578 <sensor_signalProcessing+0x2c0>)
 8001544:	e9c1 2300 	strd	r2, r3, [r1]
        quadrant = 3;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <sensor_signalProcessing+0x2c4>)
 800154a:	2203      	movs	r2, #3
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e04e      	b.n	80015ee <sensor_signalProcessing+0x336>
 8001550:	54442d18 	.word	0x54442d18
 8001554:	401921fb 	.word	0x401921fb
 8001558:	2000059c 	.word	0x2000059c
 800155c:	20000820 	.word	0x20000820
 8001560:	20000920 	.word	0x20000920
 8001564:	20000a20 	.word	0x20000a20
 8001568:	20000620 	.word	0x20000620
 800156c:	20000720 	.word	0x20000720
 8001570:	20000b20 	.word	0x20000b20
 8001574:	20000b28 	.word	0x20000b28
 8001578:	20000b38 	.word	0x20000b38
 800157c:	20000008 	.word	0x20000008
    }
    else if (real >= 0 && imag < 0)
 8001580:	4b45      	ldr	r3, [pc, #276]	; (8001698 <sensor_signalProcessing+0x3e0>)
 8001582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	f7ff fab1 	bl	8000af4 <__aeabi_dcmpge>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d02a      	beq.n	80015ee <sensor_signalProcessing+0x336>
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <sensor_signalProcessing+0x3e4>)
 800159a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f7ff fa91 	bl	8000acc <__aeabi_dcmplt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01e      	beq.n	80015ee <sensor_signalProcessing+0x336>
    {
        //4-Quadrant (bottom right) [+, -] #Optimization: do not check last quadrant just use else
        phaseRad = 2 * M_PI + atan2(imag, real);
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <sensor_signalProcessing+0x3e4>)
 80015b2:	ed93 7b00 	vldr	d7, [r3]
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <sensor_signalProcessing+0x3e0>)
 80015b8:	ed93 6b00 	vldr	d6, [r3]
 80015bc:	eeb0 1a46 	vmov.f32	s2, s12
 80015c0:	eef0 1a66 	vmov.f32	s3, s13
 80015c4:	eeb0 0a47 	vmov.f32	s0, s14
 80015c8:	eef0 0a67 	vmov.f32	s1, s15
 80015cc:	f006 f94c 	bl	8007868 <atan2>
 80015d0:	ec51 0b10 	vmov	r0, r1, d0
 80015d4:	a32c      	add	r3, pc, #176	; (adr r3, 8001688 <sensor_signalProcessing+0x3d0>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7fe fe4f 	bl	800027c <__adddf3>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	492f      	ldr	r1, [pc, #188]	; (80016a0 <sensor_signalProcessing+0x3e8>)
 80015e4:	e9c1 2300 	strd	r2, r3, [r1]
        quadrant = 4;
 80015e8:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <sensor_signalProcessing+0x3ec>)
 80015ea:	2204      	movs	r2, #4
 80015ec:	601a      	str	r2, [r3, #0]
    }

    // phaseDeg = (phaseRad * 180) / M_PI; // 0 to 360 degrees
    phaseDeg = round((phaseRad * 180) / M_PI);
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <sensor_signalProcessing+0x3e8>)
 80015f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <sensor_signalProcessing+0x3f0>)
 80015fa:	f7fe fff5 	bl	80005e8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	a322      	add	r3, pc, #136	; (adr r3, 8001690 <sensor_signalProcessing+0x3d8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f916 	bl	800083c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	ec43 2b17 	vmov	d7, r2, r3
 8001618:	eeb0 0a47 	vmov.f32	s0, s14
 800161c:	eef0 0a67 	vmov.f32	s1, s15
 8001620:	f006 f886 	bl	8007730 <round>
 8001624:	eeb0 7a40 	vmov.f32	s14, s0
 8001628:	eef0 7a60 	vmov.f32	s15, s1
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <sensor_signalProcessing+0x3f4>)
 800162e:	ed83 7b00 	vstr	d7, [r3]

    // Calculate magnitude
    magnitude = sqrt(fabs(real) + fabs(imag));
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <sensor_signalProcessing+0x3e0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	4614      	mov	r4, r2
 800163a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <sensor_signalProcessing+0x3e4>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	4690      	mov	r8, r2
 8001646:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800164a:	4642      	mov	r2, r8
 800164c:	464b      	mov	r3, r9
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fe13 	bl	800027c <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	ec43 2b17 	vmov	d7, r2, r3
 800165e:	eeb0 0a47 	vmov.f32	s0, s14
 8001662:	eef0 0a67 	vmov.f32	s1, s15
 8001666:	f006 f901 	bl	800786c <sqrt>
 800166a:	eeb0 7a40 	vmov.f32	s14, s0
 800166e:	eef0 7a60 	vmov.f32	s15, s1
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <sensor_signalProcessing+0x3f8>)
 8001674:	ed83 7b00 	vstr	d7, [r3]
}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	54442d18 	.word	0x54442d18
 800168c:	401921fb 	.word	0x401921fb
 8001690:	54442d18 	.word	0x54442d18
 8001694:	400921fb 	.word	0x400921fb
 8001698:	20000b20 	.word	0x20000b20
 800169c:	20000b28 	.word	0x20000b28
 80016a0:	20000b38 	.word	0x20000b38
 80016a4:	20000008 	.word	0x20000008
 80016a8:	40668000 	.word	0x40668000
 80016ac:	20000b40 	.word	0x20000b40
 80016b0:	20000b30 	.word	0x20000b30

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f000 fe56 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016bc:	f000 f854 	bl	8001768 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80016c0:	f000 fa26 	bl	8001b10 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c4:	f000 fa56 	bl	8001b74 <MX_GPIO_Init>
  MX_LCD_Init();
 80016c8:	f000 f908 	bl	80018dc <MX_LCD_Init>
  MX_ADC1_Init();
 80016cc:	f000 f8a0 	bl	8001810 <MX_ADC1_Init>
  MX_TIM2_Init();
 80016d0:	f000 f93c 	bl	800194c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80016d4:	f000 f9ec 	bl	8001ab0 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80016d8:	f000 fa1a 	bl	8001b10 <MX_DMA_Init>
  MX_TIM6_Init();
 80016dc:	f000 f9b2 	bl	8001a44 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  generate_ODR_Buff();
 80016e0:	f7ff fc90 	bl	8001004 <generate_ODR_Buff>
  generateLuts();
 80016e4:	f7ff fc1c 	bl	8000f20 <generateLuts>
  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)&ODR_Buff, (uint32_t)&GPIOC->ODR, TX_BUFF_SIZE);
 80016e8:	4916      	ldr	r1, [pc, #88]	; (8001744 <main+0x90>)
 80016ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <main+0x94>)
 80016f0:	4816      	ldr	r0, [pc, #88]	; (800174c <main+0x98>)
 80016f2:	f002 f8f3 	bl	80038dc <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <main+0x9c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <main+0x9c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001704:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim6);
 8001706:	4812      	ldr	r0, [pc, #72]	; (8001750 <main+0x9c>)
 8001708:	f003 fef8 	bl	80054fc <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples, SAMPLE_BUFF_SIZE);
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	4911      	ldr	r1, [pc, #68]	; (8001754 <main+0xa0>)
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <main+0xa4>)
 8001712:	f001 f9b5 	bl	8002a80 <HAL_ADC_Start_DMA>
	  HAL_LCD_UpdateDisplayRequest(&hlcd);
	  HAL_Delay(500);
	  HAL_LCD_Clear(&hlcd);
	  HAL_LCD_UpdateDisplayRequest(&hlcd);
	  HAL_Delay(500);*/
	  if(dataRdyFlag)
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <main+0xa8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0fb      	beq.n	8001716 <main+0x62>
	  {
		  dataRdyFlag = 0;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <main+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
		  sensor_signalProcessing();
 8001724:	f7ff fdc8 	bl	80012b8 <sensor_signalProcessing>
		  printf("%i\n\r", (int)phaseDeg);
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <main+0xac>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff fa09 	bl	8000b48 <__aeabi_d2iz>
 8001736:	4603      	mov	r3, r0
 8001738:	4619      	mov	r1, r3
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <main+0xb0>)
 800173c:	f005 f850 	bl	80067e0 <iprintf>
	  if(dataRdyFlag)
 8001740:	e7e9      	b.n	8001716 <main+0x62>
 8001742:	bf00      	nop
 8001744:	2000009c 	.word	0x2000009c
 8001748:	48000814 	.word	0x48000814
 800174c:	20000c40 	.word	0x20000c40
 8001750:	20000cd0 	.word	0x20000cd0
 8001754:	2000049c 	.word	0x2000049c
 8001758:	20000b58 	.word	0x20000b58
 800175c:	20000b48 	.word	0x20000b48
 8001760:	20000b40 	.word	0x20000b40
 8001764:	08009108 	.word	0x08009108

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	; 0x58
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2244      	movs	r2, #68	; 0x44
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f005 f82a 	bl	80067d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800178a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800178e:	f002 fca9 	bl	80040e4 <HAL_PWREx_ControlVoltageScaling>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001798:	f000 fa9e 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800179c:	230a      	movs	r3, #10
 800179e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a6:	2310      	movs	r3, #16
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017aa:	2301      	movs	r3, #1
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ae:	2302      	movs	r3, #2
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b2:	2302      	movs	r3, #2
 80017b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80017ba:	2308      	movs	r3, #8
 80017bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017be:	2307      	movs	r3, #7
 80017c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017c2:	2302      	movs	r3, #2
 80017c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017c6:	2302      	movs	r3, #2
 80017c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fcde 	bl	8004190 <HAL_RCC_OscConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0x76>
  {
    Error_Handler();
 80017da:	f000 fa7d 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017de:	230f      	movs	r3, #15
 80017e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e2:	2303      	movs	r3, #3
 80017e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	2103      	movs	r1, #3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 f8ea 	bl	80049d0 <HAL_RCC_ClockConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001802:	f000 fa69 	bl	8001cd8 <Error_Handler>
  }
}
 8001806:	bf00      	nop
 8001808:	3758      	adds	r7, #88	; 0x58
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001816:	463b      	mov	r3, r7
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001828:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <MX_ADC1_Init+0xc4>)
 800182a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <MX_ADC1_Init+0xc0>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <MX_ADC1_Init+0xc0>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001846:	2204      	movs	r2, #4
 8001848:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_ADC1_Init+0xc0>)
 800184c:	2200      	movs	r2, #0
 800184e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001852:	2200      	movs	r2, #0
 8001854:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001858:	2201      	movs	r2, #1
 800185a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <MX_ADC1_Init+0xc0>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001866:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_ADC1_Init+0xc0>)
 800186e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_ADC1_Init+0xc0>)
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_ADC1_Init+0xc0>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800188a:	4811      	ldr	r0, [pc, #68]	; (80018d0 <MX_ADC1_Init+0xc0>)
 800188c:	f000 ffb0 	bl	80027f0 <HAL_ADC_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001896:	f000 fa1f 	bl	8001cd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_ADC1_Init+0xc8>)
 800189c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800189e:	2306      	movs	r3, #6
 80018a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018a6:	237f      	movs	r3, #127	; 0x7f
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018aa:	2304      	movs	r3, #4
 80018ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_ADC1_Init+0xc0>)
 80018b8:	f001 f970 	bl	8002b9c <HAL_ADC_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80018c2:	f000 fa09 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000b58 	.word	0x20000b58
 80018d4:	50040000 	.word	0x50040000
 80018d8:	21800100 	.word	0x21800100

080018dc <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_LCD_Init+0x68>)
 80018e2:	4a19      	ldr	r2, [pc, #100]	; (8001948 <MX_LCD_Init+0x6c>)
 80018e4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <MX_LCD_Init+0x68>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80018ec:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_LCD_Init+0x68>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_LCD_Init+0x68>)
 80018f4:	220c      	movs	r2, #12
 80018f6:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_LCD_Init+0x68>)
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_LCD_Init+0x68>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_3;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_LCD_Init+0x68>)
 8001906:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800190a:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_LCD_Init+0x68>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_LCD_Init+0x68>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_ENABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_LCD_Init+0x68>)
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_LCD_Init+0x68>)
 8001920:	2200      	movs	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_LCD_Init+0x68>)
 8001926:	2200      	movs	r2, #0
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_LCD_Init+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_LCD_Init+0x68>)
 8001932:	f002 fae7 	bl	8003f04 <HAL_LCD_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_LCD_Init+0x64>
  {
    Error_Handler();
 800193c:	f000 f9cc 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000d1c 	.word	0x20000d1c
 8001948:	40002400 	.word	0x40002400

0800194c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195e:	463b      	mov	r3, r7
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <MX_TIM2_Init+0xf0>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001986:	4a2e      	ldr	r2, [pc, #184]	; (8001a40 <MX_TIM2_Init+0xf4>)
 8001988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <MX_TIM2_Init+0xf0>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001996:	4829      	ldr	r0, [pc, #164]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001998:	f003 fdfc 	bl	8005594 <HAL_TIM_PWM_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019a2:	f000 f999 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a6:	2320      	movs	r3, #32
 80019a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4821      	ldr	r0, [pc, #132]	; (8001a3c <MX_TIM2_Init+0xf0>)
 80019b6:	f004 fa3b 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019c0:	f000 f98a 	bl	8001cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	; 0x60
 80019c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	4818      	ldr	r0, [pc, #96]	; (8001a3c <MX_TIM2_Init+0xf0>)
 80019dc:	f003 fe32 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019e6:	f000 f977 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	2204      	movs	r2, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4812      	ldr	r0, [pc, #72]	; (8001a3c <MX_TIM2_Init+0xf0>)
 80019f2:	f003 fe27 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019fc:	f000 f96c 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	2208      	movs	r2, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001a08:	f003 fe1c 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a12:	f000 f961 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	220c      	movs	r2, #12
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001a1e:	f003 fe11 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001a28:	f000 f956 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM2_Init+0xf0>)
 8001a2e:	f000 faeb 	bl	8002008 <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3728      	adds	r7, #40	; 0x28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000d58 	.word	0x20000d58
 8001a40:	000f4240 	.word	0x000f4240

08001a44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_TIM6_Init+0x64>)
 8001a56:	4a15      	ldr	r2, [pc, #84]	; (8001aac <MX_TIM6_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1-1;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_TIM6_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_TIM6_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 246-1;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_TIM6_Init+0x64>)
 8001a68:	22f5      	movs	r2, #245	; 0xf5
 8001a6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_TIM6_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <MX_TIM6_Init+0x64>)
 8001a74:	f003 fcea 	bl	800544c <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a7e:	f000 f92b 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a82:	2320      	movs	r3, #32
 8001a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <MX_TIM6_Init+0x64>)
 8001a90:	f004 f9ce 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a9a:	f000 f91d 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000cd0 	.word	0x20000cd0
 8001aac:	40001000 	.word	0x40001000

08001ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <MX_USART1_UART_Init+0x5c>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af2:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_USART1_UART_Init+0x58>)
 8001af4:	f004 fa02 	bl	8005efc <HAL_UART_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001afe:	f000 f8eb 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000bbc 	.word	0x20000bbc
 8001b0c:	40013800 	.word	0x40013800

08001b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_DMA_Init+0x60>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1a:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <MX_DMA_Init+0x60>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6493      	str	r3, [r2, #72]	; 0x48
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_DMA_Init+0x60>)
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_DMA_Init+0x60>)
 8001b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <MX_DMA_Init+0x60>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6493      	str	r3, [r2, #72]	; 0x48
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MX_DMA_Init+0x60>)
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	200b      	movs	r0, #11
 8001b4c:	f001 fdd7 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b50:	200b      	movs	r0, #11
 8001b52:	f001 fdf0 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	203b      	movs	r0, #59	; 0x3b
 8001b5c:	f001 fdcf 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001b60:	203b      	movs	r0, #59	; 0x3b
 8001b62:	f001 fde8 	bl	8003736 <HAL_NVIC_EnableIRQ>

}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a37      	ldr	r2, [pc, #220]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <MX_GPIO_Init+0xf8>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f641 71df 	movw	r1, #8159	; 0x1fdf
 8001bd8:	4825      	ldr	r0, [pc, #148]	; (8001c70 <MX_GPIO_Init+0xfc>)
 8001bda:	f002 f97b 	bl	8003ed4 <HAL_GPIO_WritePin>
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |BIAS_Pin|ADC_TRIG_OUT_Pin|PERIOD_Pin|TIMEBASE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIELD_GPIO_Port, SHIELD_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2104      	movs	r1, #4
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f002 f975 	bl	8003ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM0_Pin PWM45_Pin PWM90_Pin PWM135_Pin
                           PWM180_Pin PWM225_Pin PWM270_Pin PWM315_Pin
                           ADC_TRIG_OUT_Pin PERIOD_Pin TIMEBASE_Pin */
  GPIO_InitStruct.Pin = PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 8001bea:	f641 53df 	movw	r3, #7647	; 0x1ddf
 8001bee:	60fb      	str	r3, [r7, #12]
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |ADC_TRIG_OUT_Pin|PERIOD_Pin|TIMEBASE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4619      	mov	r1, r3
 8001c02:	481b      	ldr	r0, [pc, #108]	; (8001c70 <MX_GPIO_Init+0xfc>)
 8001c04:	f001 ffec 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIELD_Pin */
  GPIO_InitStruct.Pin = SHIELD_Pin;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SHIELD_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c22:	f001 ffdd 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIAS_Pin */
  GPIO_InitStruct.Pin = BIAS_Pin;
 8001c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c2c:	2311      	movs	r3, #17
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BIAS_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <MX_GPIO_Init+0xfc>)
 8001c40:	f001 ffce 	bl	8003be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5e:	f001 ffbf 	bl	8003be0 <HAL_GPIO_Init>

}
 8001c62:	bf00      	nop
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48000800 	.word	0x48000800

08001c74 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	memcpy(processBuff, samples, 128);
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	461a      	mov	r2, r3
 8001c88:	f004 fd94 	bl	80067b4 <memcpy>
	dataRdyFlag = 1;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000059c 	.word	0x2000059c
 8001ca0:	2000049c 	.word	0x2000049c
 8001ca4:	20000b48 	.word	0x20000b48

08001ca8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	memcpy(processBuff, samples+64, 128);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_ADC_ConvCpltCallback+0x24>)
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <HAL_ADC_ConvCpltCallback+0x28>)
 8001cb8:	f004 fd7c 	bl	80067b4 <memcpy>
	dataRdyFlag = 1;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000051c 	.word	0x2000051c
 8001cd0:	2000059c 	.word	0x2000059c
 8001cd4:	20000b48 	.word	0x20000b48

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_MspInit+0x44>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_MspInit+0x44>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_MspInit+0x44>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_MspInit+0x44>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0a2      	sub	sp, #136	; 0x88
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2260      	movs	r2, #96	; 0x60
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f004 fd3f 	bl	80067d0 <memset>
  if(hadc->Instance==ADC1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <HAL_ADC_MspInit+0xf8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d15f      	bne.n	8001e1c <HAL_ADC_MspInit+0xf0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d60:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001d62:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d66:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f835 	bl	8004ddc <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d78:	f7ff ffae 	bl	8001cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_ADC_MspInit+0xfc>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <HAL_ADC_MspInit+0xfc>)
 8001d82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_ADC_MspInit+0xfc>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_ADC_MspInit+0xfc>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <HAL_ADC_MspInit+0xfc>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_ADC_MspInit+0xfc>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dac:	2308      	movs	r3, #8
 8001dae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001db0:	230b      	movs	r3, #11
 8001db2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc2:	f001 ff0d 	bl	8003be0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_ADC_MspInit+0x104>)
 8001dca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001df6:	2220      	movs	r2, #32
 8001df8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001e02:	f001 fcb3 	bl	800376c <HAL_DMA_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001e0c:	f7ff ff64 	bl	8001cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <HAL_ADC_MspInit+0x100>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3788      	adds	r7, #136	; 0x88
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	50040000 	.word	0x50040000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	20000c88 	.word	0x20000c88
 8001e30:	40020008 	.word	0x40020008

08001e34 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0a2      	sub	sp, #136	; 0x88
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2260      	movs	r2, #96	; 0x60
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 fcbb 	bl	80067d0 <memset>
  if(hlcd->Instance==LCD)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a31      	ldr	r2, [pc, #196]	; (8001f24 <HAL_LCD_MspInit+0xf0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d15a      	bne.n	8001f1a <HAL_LCD_MspInit+0xe6>
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e6e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 ffb1 	bl	8004ddc <HAL_RCCEx_PeriphCLKConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_LCD_MspInit+0x50>
    {
      Error_Handler();
 8001e80:	f7ff ff2a 	bl	8001cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_LCD_MspInit+0xf4>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    PA10     ------> LCD_COM2
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ecc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001ed0:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001ee0:	230b      	movs	r3, #11
 8001ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f001 fe76 	bl	8003be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001ef4:	f243 2337 	movw	r3, #12855	; 0x3237
 8001ef8:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001f08:	230b      	movs	r3, #11
 8001f0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <HAL_LCD_MspInit+0xf8>)
 8001f16:	f001 fe63 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3788      	adds	r7, #136	; 0x88
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40002400 	.word	0x40002400
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	48000400 	.word	0x48000400

08001f30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d10b      	bne.n	8001f5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_TIM_PWM_MspInit+0x38>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <HAL_TIM_PWM_MspInit+0x38>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_TIM_PWM_MspInit+0x38>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_TIM_Base_MspInit+0x8c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d137      	bne.n	8001fee <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_TIM_Base_MspInit+0x90>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_TIM_Base_MspInit+0x90>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_TIM_Base_MspInit+0x90>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA2_Channel4;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001f98:	4a1a      	ldr	r2, [pc, #104]	; (8002004 <HAL_TIM_Base_MspInit+0x98>)
 8001f9a:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_3;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fba:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc2:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fcc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001fd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fd4:	f001 fbca 	bl	800376c <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8001fde:	f7ff fe7b 	bl	8001cd8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fe6:	621a      	str	r2, [r3, #32]
 8001fe8:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_TIM_Base_MspInit+0x94>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40001000 	.word	0x40001000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	20000c40 	.word	0x20000c40
 8002004:	40020444 	.word	0x40020444

08002008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d139      	bne.n	800209e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <HAL_TIM_MspPostInit+0xa0>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_TIM_MspPostInit+0xa0>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002036:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_TIM_MspPostInit+0xa0>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_TIM_MspPostInit+0xa0>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_TIM_MspPostInit+0xa0>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_TIM_MspPostInit+0xa0>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800205a:	2303      	movs	r3, #3
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800206a:	2301      	movs	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002078:	f001 fdb2 	bl	8003be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800207c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800208e:	2301      	movs	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4804      	ldr	r0, [pc, #16]	; (80020ac <HAL_TIM_MspPostInit+0xa4>)
 800209a:	f001 fda1 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	; 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	48000400 	.word	0x48000400

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0a2      	sub	sp, #136	; 0x88
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2260      	movs	r2, #96	; 0x60
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 fb7d 	bl	80067d0 <memset>
  if(huart->Instance==USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_UART_MspInit+0xa8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d137      	bne.n	8002150 <HAL_UART_MspInit+0xa0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020e0:	2301      	movs	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020e4:	2300      	movs	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fe75 	bl	8004ddc <HAL_RCCEx_PeriphCLKConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f8:	f7ff fdee 	bl	8001cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_UART_MspInit+0xac>)
 80020fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_UART_MspInit+0xac>)
 8002102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002106:	6613      	str	r3, [r2, #96]	; 0x60
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_UART_MspInit+0xac>)
 800210a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_UART_MspInit+0xac>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_UART_MspInit+0xac>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_UART_MspInit+0xac>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800212c:	23c0      	movs	r3, #192	; 0xc0
 800212e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800213e:	2307      	movs	r3, #7
 8002140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_UART_MspInit+0xb0>)
 800214c:	f001 fd48 	bl	8003be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002150:	bf00      	nop
 8002152:	3788      	adds	r7, #136	; 0x88
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40013800 	.word	0x40013800
 800215c:	40021000 	.word	0x40021000
 8002160:	48000400 	.word	0x48000400

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <NMI_Handler+0x4>

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b0:	f000 f936 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA1_Channel1_IRQHandler+0x10>)
 80021be:	f001 fc30 	bl	8003a22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000c88 	.word	0x20000c88

080021cc <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <DMA2_Channel4_IRQHandler+0x10>)
 80021d2:	f001 fc26 	bl	8003a22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000c40 	.word	0x20000c40

080021e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e00a      	b.n	8002208 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021f2:	f3af 8000 	nop.w
 80021f6:	4601      	mov	r1, r0
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	429a      	cmp	r2, r3
 800220e:	dbf0      	blt.n	80021f2 <_read+0x12>
	}

return len;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <_close>:
	}
	return len;
}

int _close(int file)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	return -1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002242:	605a      	str	r2, [r3, #4]
	return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_isatty>:

int _isatty(int file)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	return 1;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <_sbrk+0x5c>)
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <_sbrk+0x60>)
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <_sbrk+0x64>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <_sbrk+0x68>)
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d207      	bcs.n	80022c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b4:	f004 fa54 	bl	8006760 <__errno>
 80022b8:	4603      	mov	r3, r0
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e009      	b.n	80022d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <_sbrk+0x64>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <_sbrk+0x64>)
 80022d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20010000 	.word	0x20010000
 80022e4:	00000400 	.word	0x00000400
 80022e8:	20000b4c 	.word	0x20000b4c
 80022ec:	20000db8 	.word	0x20000db8

080022f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <SystemInit+0x20>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <SystemInit+0x20>)
 80022fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800234c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002318:	f7ff ffea 	bl	80022f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <LoopForever+0x6>)
  ldr r1, =_edata
 800231e:	490d      	ldr	r1, [pc, #52]	; (8002354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <LoopForever+0xe>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002334:	4c0a      	ldr	r4, [pc, #40]	; (8002360 <LoopForever+0x16>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002342:	f004 fa13 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002346:	f7ff f9b5 	bl	80016b4 <main>

0800234a <LoopForever>:

LoopForever:
    b LoopForever
 800234a:	e7fe      	b.n	800234a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800234c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002358:	08009448 	.word	0x08009448
  ldr r2, =_sbss
 800235c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002360:	20000db8 	.word	0x20000db8

08002364 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_IRQHandler>
	...

08002368 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_Init+0x3c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_Init+0x3c>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237e:	2003      	movs	r0, #3
 8002380:	f001 f9b2 	bl	80036e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002384:	2000      	movs	r0, #0
 8002386:	f000 f80f 	bl	80023a8 <HAL_InitTick>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	71fb      	strb	r3, [r7, #7]
 8002394:	e001      	b.n	800239a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002396:	f7ff fca5 	bl	8001ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800239a:	79fb      	ldrb	r3, [r7, #7]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40022000 	.word	0x40022000

080023a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_InitTick+0x6c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_InitTick+0x70>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_InitTick+0x6c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 f9bd 	bl	8003752 <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10f      	bne.n	80023fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d809      	bhi.n	80023f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e4:	2200      	movs	r2, #0
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f001 f987 	bl	80036fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_InitTick+0x74>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e007      	b.n	8002408 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e004      	b.n	8002408 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e001      	b.n	8002408 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000014 	.word	0x20000014
 8002418:	2000000c 	.word	0x2000000c
 800241c:	20000010 	.word	0x20000010

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000014 	.word	0x20000014
 8002444:	20000da4 	.word	0x20000da4

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000da4 	.word	0x20000da4

08002460 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	609a      	str	r2, [r3, #8]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3360      	adds	r3, #96	; 0x60
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <LL_ADC_SetOffset+0x44>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	03fff000 	.word	0x03fff000

08002510 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3360      	adds	r3, #96	; 0x60
 800251e:	461a      	mov	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3360      	adds	r3, #96	; 0x60
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	431a      	orrs	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002566:	bf00      	nop
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3330      	adds	r3, #48	; 0x30
 80025a8:	461a      	mov	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	4413      	add	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	211f      	movs	r1, #31
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	f003 011f 	and.w	r1, r3, #31
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	431a      	orrs	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3314      	adds	r3, #20
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	0e5b      	lsrs	r3, r3, #25
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	4413      	add	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	0d1b      	lsrs	r3, r3, #20
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2107      	movs	r1, #7
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	401a      	ands	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	0d1b      	lsrs	r3, r3, #20
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	431a      	orrs	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	43db      	mvns	r3, r3
 8002662:	401a      	ands	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0318 	and.w	r3, r3, #24
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <LL_ADC_SetChannelSingleDiff+0x44>)
 800266c:	40d9      	lsrs	r1, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	400b      	ands	r3, r1
 8002672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002676:	431a      	orrs	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	0007ffff 	.word	0x0007ffff

08002690 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6093      	str	r3, [r2, #8]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c8:	d101      	bne.n	80026ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002718:	d101      	bne.n	800271e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <LL_ADC_IsEnabled+0x18>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <LL_ADC_IsEnabled+0x1a>
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800278a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d101      	bne.n	80027ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d101      	bne.n	80027e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e12c      	b.n	8002a64 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fa87 	bl	8001d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff3f 	bl	80026b4 <LL_ADC_IsDeepPowerDownEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff25 	bl	8002690 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff5a 	bl	8002704 <LL_ADC_IsInternalRegulatorEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d115      	bne.n	8002882 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff3e 	bl	80026dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002860:	4b82      	ldr	r3, [pc, #520]	; (8002a6c <HAL_ADC_Init+0x27c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	4a82      	ldr	r2, [pc, #520]	; (8002a70 <HAL_ADC_Init+0x280>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002874:	e002      	b.n	800287c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3b01      	subs	r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f9      	bne.n	8002876 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff3c 	bl	8002704 <LL_ADC_IsInternalRegulatorEnabled>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff75 	bl	80027a2 <LL_ADC_REG_IsConversionOngoing>
 80028b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 80c5 	bne.w	8002a52 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80c1 	bne.w	8002a52 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028d8:	f043 0202 	orr.w	r2, r3, #2
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff35 	bl	8002754 <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f0:	4860      	ldr	r0, [pc, #384]	; (8002a74 <HAL_ADC_Init+0x284>)
 80028f2:	f7ff ff2f 	bl	8002754 <LL_ADC_IsEnabled>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4619      	mov	r1, r3
 8002902:	485d      	ldr	r0, [pc, #372]	; (8002a78 <HAL_ADC_Init+0x288>)
 8002904:	f7ff fdac 	bl	8002460 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7e5b      	ldrb	r3, [r3, #25]
 800290c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002912:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002918:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800291e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002926:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d106      	bne.n	8002944 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	3b01      	subs	r3, #1
 800293c:	045b      	lsls	r3, r3, #17
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <HAL_ADC_Init+0x28c>)
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	69b9      	ldr	r1, [r7, #24]
 8002970:	430b      	orrs	r3, r1
 8002972:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff12 	bl	80027a2 <LL_ADC_REG_IsConversionOngoing>
 800297e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff1f 	bl	80027c8 <LL_ADC_INJ_IsConversionOngoing>
 800298a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d13d      	bne.n	8002a0e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d13a      	bne.n	8002a0e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800299c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b4:	f023 0302 	bic.w	r3, r3, #2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	69b9      	ldr	r1, [r7, #24]
 80029be:	430b      	orrs	r3, r1
 80029c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d118      	bne.n	80029fe <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029ee:	430a      	orrs	r2, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	611a      	str	r2, [r3, #16]
 80029fc:	e007      	b.n	8002a0e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10c      	bne.n	8002a30 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f023 010f 	bic.w	r1, r3, #15
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	1e5a      	subs	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2e:	e007      	b.n	8002a40 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 020f 	bic.w	r2, r2, #15
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	f023 0303 	bic.w	r3, r3, #3
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
 8002a50:	e007      	b.n	8002a62 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	f043 0210 	orr.w	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a62:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	2000000c 	.word	0x2000000c
 8002a70:	053e2d63 	.word	0x053e2d63
 8002a74:	50040000 	.word	0x50040000
 8002a78:	50040300 	.word	0x50040300
 8002a7c:	fff0c007 	.word	0xfff0c007

08002a80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fe86 	bl	80027a2 <LL_ADC_REG_IsConversionOngoing>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d167      	bne.n	8002b6c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_Start_DMA+0x2a>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e063      	b.n	8002b72 <HAL_ADC_Start_DMA+0xf2>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fc52 	bl	800335c <ADC_Enable>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d14f      	bne.n	8002b62 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	f023 0206 	bic.w	r2, r3, #6
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	659a      	str	r2, [r3, #88]	; 0x58
 8002aee:	e002      	b.n	8002af6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	4a20      	ldr	r2, [pc, #128]	; (8002b7c <HAL_ADC_Start_DMA+0xfc>)
 8002afc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	4a1f      	ldr	r2, [pc, #124]	; (8002b80 <HAL_ADC_Start_DMA+0x100>)
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_ADC_Start_DMA+0x104>)
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	221c      	movs	r2, #28
 8002b14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0210 	orr.w	r2, r2, #16
 8002b2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3340      	adds	r3, #64	; 0x40
 8002b48:	4619      	mov	r1, r3
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f000 ff08 	bl	8003962 <HAL_DMA_Start_IT>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fe0d 	bl	800277a <LL_ADC_REG_StartConversion>
 8002b60:	e006      	b.n	8002b70 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b6a:	e001      	b.n	8002b70 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08003421 	.word	0x08003421
 8002b80:	080034f9 	.word	0x080034f9
 8002b84:	08003515 	.word	0x08003515

08002b88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b0b6      	sub	sp, #216	; 0xd8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x22>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e3b9      	b.n	8003332 <HAL_ADC_ConfigChannel+0x796>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fde9 	bl	80027a2 <LL_ADC_REG_IsConversionOngoing>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 839e 	bne.w	8003314 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d824      	bhi.n	8002c2a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	3b02      	subs	r3, #2
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d81b      	bhi.n	8002c22 <HAL_ADC_ConfigChannel+0x86>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <HAL_ADC_ConfigChannel+0x54>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c09 	.word	0x08002c09
 8002bf8:	08002c11 	.word	0x08002c11
 8002bfc:	08002c19 	.word	0x08002c19
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	220c      	movs	r2, #12
 8002c04:	605a      	str	r2, [r3, #4]
          break;
 8002c06:	e011      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2212      	movs	r2, #18
 8002c0c:	605a      	str	r2, [r3, #4]
          break;
 8002c0e:	e00d      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2218      	movs	r2, #24
 8002c14:	605a      	str	r2, [r3, #4]
          break;
 8002c16:	e009      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1e:	605a      	str	r2, [r3, #4]
          break;
 8002c20:	e004      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2206      	movs	r2, #6
 8002c26:	605a      	str	r2, [r3, #4]
          break;
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c2a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f7ff fcad 	bl	8002598 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fdad 	bl	80027a2 <LL_ADC_REG_IsConversionOngoing>
 8002c48:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fdb9 	bl	80027c8 <LL_ADC_INJ_IsConversionOngoing>
 8002c56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 81a6 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 81a1 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff fcb8 	bl	80025f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6919      	ldr	r1, [r3, #16]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cb2:	f7ff fc09 	bl	80024c8 <LL_ADC_SetOffset>
 8002cb6:	e17b      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fc26 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10a      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x148>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fc1b 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	f003 021f 	and.w	r2, r3, #31
 8002ce2:	e01e      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x186>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fc10 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e004      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x19e>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	e018      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1d0>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e004      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fbdf 	bl	800253c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2101      	movs	r1, #1
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fbc3 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x20e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fbb8 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	e01e      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x24c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fbad 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002dc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e004      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x264>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	e018      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x296>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e004      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d106      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fb7c 	bl	800253c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb60 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x2d4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fb55 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	e01e      	b.n	8002eae <HAL_ADC_ConfigChannel+0x312>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fb4a 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e004      	b.n	8002eac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x32a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	0e9b      	lsrs	r3, r3, #26
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	e016      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x358>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e004      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fb1b 	bl	800253c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff faff 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x396>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2103      	movs	r1, #3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff faf4 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	e017      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x3c6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2103      	movs	r1, #3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fae9 	bl	8002510 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f4c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e003      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d105      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x3de>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e9b      	lsrs	r3, r3, #26
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	e011      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x402>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d106      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2103      	movs	r1, #3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fac6 	bl	800253c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fbcd 	bl	8002754 <LL_ADC_IsEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f040 813f 	bne.w	8003240 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6819      	ldr	r1, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f7ff fb3a 	bl	8002648 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a8e      	ldr	r2, [pc, #568]	; (8003214 <HAL_ADC_ConfigChannel+0x678>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f040 8130 	bne.w	8003240 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x46c>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	bf94      	ite	ls
 8003000:	2301      	movls	r3, #1
 8003002:	2300      	movhi	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e019      	b.n	800303c <HAL_ADC_ConfigChannel+0x4a0>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003018:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800301a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e003      	b.n	800302c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	2b09      	cmp	r3, #9
 8003034:	bf94      	ite	ls
 8003036:	2301      	movls	r3, #1
 8003038:	2300      	movhi	r3, #0
 800303a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800303c:	2b00      	cmp	r3, #0
 800303e:	d079      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_ADC_ConfigChannel+0x4c0>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	069b      	lsls	r3, r3, #26
 8003056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800305a:	e015      	b.n	8003088 <HAL_ADC_ConfigChannel+0x4ec>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800306a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800306e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	e003      	b.n	8003080 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	069b      	lsls	r3, r3, #26
 8003084:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x50c>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	e017      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x53c>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e003      	b.n	80030cc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	ea42 0103 	orr.w	r1, r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x562>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	3301      	adds	r3, #1
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	051b      	lsls	r3, r3, #20
 80030fc:	e018      	b.n	8003130 <HAL_ADC_ConfigChannel+0x594>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800310c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e003      	b.n	8003122 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800311a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	3301      	adds	r3, #1
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	430b      	orrs	r3, r1
 8003132:	e080      	b.n	8003236 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x5b4>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314e:	e015      	b.n	800317c <HAL_ADC_ConfigChannel+0x5e0>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e003      	b.n	8003174 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_ADC_ConfigChannel+0x600>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	3301      	adds	r3, #1
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	e017      	b.n	80031cc <HAL_ADC_ConfigChannel+0x630>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	61fb      	str	r3, [r7, #28]
  return result;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e003      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	ea42 0103 	orr.w	r1, r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x65c>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	3b1e      	subs	r3, #30
 80031f0:	051b      	lsls	r3, r3, #20
 80031f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031f6:	e01d      	b.n	8003234 <HAL_ADC_ConfigChannel+0x698>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	613b      	str	r3, [r7, #16]
  return result;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e005      	b.n	8003220 <HAL_ADC_ConfigChannel+0x684>
 8003214:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3301      	adds	r3, #1
 8003222:	f003 021f 	and.w	r2, r3, #31
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	3b1e      	subs	r3, #30
 800322e:	051b      	lsls	r3, r3, #20
 8003230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003234:	430b      	orrs	r3, r1
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	6892      	ldr	r2, [r2, #8]
 800323a:	4619      	mov	r1, r3
 800323c:	f7ff f9d8 	bl	80025f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b3d      	ldr	r3, [pc, #244]	; (800333c <HAL_ADC_ConfigChannel+0x7a0>)
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d06c      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800324c:	483c      	ldr	r0, [pc, #240]	; (8003340 <HAL_ADC_ConfigChannel+0x7a4>)
 800324e:	f7ff f92d 	bl	80024ac <LL_ADC_GetCommonPathInternalCh>
 8003252:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3a      	ldr	r2, [pc, #232]	; (8003344 <HAL_ADC_ConfigChannel+0x7a8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d127      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d121      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a35      	ldr	r2, [pc, #212]	; (8003348 <HAL_ADC_ConfigChannel+0x7ac>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d157      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800327a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800327e:	4619      	mov	r1, r3
 8003280:	482f      	ldr	r0, [pc, #188]	; (8003340 <HAL_ADC_ConfigChannel+0x7a4>)
 8003282:	f7ff f900 	bl	8002486 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003286:	4b31      	ldr	r3, [pc, #196]	; (800334c <HAL_ADC_ConfigChannel+0x7b0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	4a30      	ldr	r2, [pc, #192]	; (8003350 <HAL_ADC_ConfigChannel+0x7b4>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032a0:	e002      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f9      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ae:	e03a      	b.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <HAL_ADC_ConfigChannel+0x7b8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d113      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x746>
 80032ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <HAL_ADC_ConfigChannel+0x7ac>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d12a      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d8:	4619      	mov	r1, r3
 80032da:	4819      	ldr	r0, [pc, #100]	; (8003340 <HAL_ADC_ConfigChannel+0x7a4>)
 80032dc:	f7ff f8d3 	bl	8002486 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e0:	e021      	b.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <HAL_ADC_ConfigChannel+0x7bc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d11c      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d116      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <HAL_ADC_ConfigChannel+0x7ac>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800330a:	4619      	mov	r1, r3
 800330c:	480c      	ldr	r0, [pc, #48]	; (8003340 <HAL_ADC_ConfigChannel+0x7a4>)
 800330e:	f7ff f8ba 	bl	8002486 <LL_ADC_SetCommonPathInternalCh>
 8003312:	e008      	b.n	8003326 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800332e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003332:	4618      	mov	r0, r3
 8003334:	37d8      	adds	r7, #216	; 0xd8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	80080000 	.word	0x80080000
 8003340:	50040300 	.word	0x50040300
 8003344:	c7520000 	.word	0xc7520000
 8003348:	50040000 	.word	0x50040000
 800334c:	2000000c 	.word	0x2000000c
 8003350:	053e2d63 	.word	0x053e2d63
 8003354:	cb840000 	.word	0xcb840000
 8003358:	80000001 	.word	0x80000001

0800335c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f9f3 	bl	8002754 <LL_ADC_IsEnabled>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d14d      	bne.n	8003410 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <ADC_Enable+0xc0>)
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f043 0210 	orr.w	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e039      	b.n	8003412 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f9c2 	bl	800272c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033a8:	f7ff f84e 	bl	8002448 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033ae:	e028      	b.n	8003402 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff f9cd 	bl	8002754 <LL_ADC_IsEnabled>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff f9b1 	bl	800272c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ca:	f7ff f83d 	bl	8002448 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d914      	bls.n	8003402 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d00d      	beq.n	8003402 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	f043 0210 	orr.w	r2, r3, #16
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f043 0201 	orr.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e007      	b.n	8003412 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d1cf      	bne.n	80033b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	8000003f 	.word	0x8000003f

08003420 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d14b      	bne.n	80034d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d021      	beq.n	8003498 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f88a 	bl	8002572 <LL_ADC_REG_IsTriggerSourceSWStart>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d032      	beq.n	80034ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d12b      	bne.n	80034ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11f      	bne.n	80034ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
 8003496:	e018      	b.n	80034ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d111      	bne.n	80034ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	f043 0201 	orr.w	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7fe fbec 	bl	8001ca8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034d0:	e00e      	b.n	80034f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fb52 	bl	8002b88 <HAL_ADC_ErrorCallback>
}
 80034e4:	e004      	b.n	80034f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7fe fbb4 	bl	8001c74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003526:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff fb24 	bl	8002b88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <__NVIC_SetPriorityGrouping>:
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357a:	4a04      	ldr	r2, [pc, #16]	; (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	60d3      	str	r3, [r2, #12]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_GetPriorityGrouping>:
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 0307 	and.w	r3, r3, #7
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_EnableIRQ>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db0b      	blt.n	80035d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <__NVIC_EnableIRQ+0x38>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2001      	movs	r0, #1
 80035ce:	fa00 f202 	lsl.w	r2, r0, r2
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	; (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <NVIC_EncodePriority>:
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf28      	it	cs
 800365a:	2304      	movcs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	2b06      	cmp	r3, #6
 8003664:	d902      	bls.n	800366c <NVIC_EncodePriority+0x30>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3b03      	subs	r3, #3
 800366a:	e000      	b.n	800366e <NVIC_EncodePriority+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	4313      	orrs	r3, r2
}
 8003696:	4618      	mov	r0, r3
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <SysTick_Config>:
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b4:	d301      	bcc.n	80036ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80036b6:	2301      	movs	r3, #1
 80036b8:	e00f      	b.n	80036da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ba:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <SysTick_Config+0x40>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c2:	210f      	movs	r1, #15
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	f7ff ff8e 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <SysTick_Config+0x40>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <SysTick_Config+0x40>)
 80036d4:	2207      	movs	r2, #7
 80036d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000e010 	.word	0xe000e010

080036e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff29 	bl	8003548 <__NVIC_SetPriorityGrouping>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003710:	f7ff ff3e 	bl	8003590 <__NVIC_GetPriorityGrouping>
 8003714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f7ff ff8e 	bl	800363c <NVIC_EncodePriority>
 8003720:	4602      	mov	r2, r0
 8003722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff5d 	bl	80035e8 <__NVIC_SetPriority>
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff31 	bl	80035ac <__NVIC_EnableIRQ>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffa2 	bl	80036a4 <SysTick_Config>
 8003760:	4603      	mov	r3, r0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e098      	b.n	80038b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_DMA_Init+0x150>)
 8003786:	429a      	cmp	r2, r3
 8003788:	d80f      	bhi.n	80037aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <HAL_DMA_Init+0x154>)
 8003792:	4413      	add	r3, r2
 8003794:	4a4b      	ldr	r2, [pc, #300]	; (80038c4 <HAL_DMA_Init+0x158>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	009a      	lsls	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a48      	ldr	r2, [pc, #288]	; (80038c8 <HAL_DMA_Init+0x15c>)
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
 80037a8:	e00e      	b.n	80037c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b46      	ldr	r3, [pc, #280]	; (80038cc <HAL_DMA_Init+0x160>)
 80037b2:	4413      	add	r3, r2
 80037b4:	4a43      	ldr	r2, [pc, #268]	; (80038c4 <HAL_DMA_Init+0x158>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	009a      	lsls	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a42      	ldr	r2, [pc, #264]	; (80038d0 <HAL_DMA_Init+0x164>)
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003822:	d039      	beq.n	8003898 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <HAL_DMA_Init+0x15c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d11a      	bne.n	8003864 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_DMA_Init+0x168>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f003 031c 	and.w	r3, r3, #28
 800383a:	210f      	movs	r1, #15
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	4924      	ldr	r1, [pc, #144]	; (80038d4 <HAL_DMA_Init+0x168>)
 8003844:	4013      	ands	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_DMA_Init+0x168>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f003 031c 	and.w	r3, r3, #28
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	491d      	ldr	r1, [pc, #116]	; (80038d4 <HAL_DMA_Init+0x168>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
 8003862:	e019      	b.n	8003898 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003864:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <HAL_DMA_Init+0x16c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f003 031c 	and.w	r3, r3, #28
 8003870:	210f      	movs	r1, #15
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	4917      	ldr	r1, [pc, #92]	; (80038d8 <HAL_DMA_Init+0x16c>)
 800387a:	4013      	ands	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_DMA_Init+0x16c>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f003 031c 	and.w	r3, r3, #28
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	4911      	ldr	r1, [pc, #68]	; (80038d8 <HAL_DMA_Init+0x16c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40020407 	.word	0x40020407
 80038c0:	bffdfff8 	.word	0xbffdfff8
 80038c4:	cccccccd 	.word	0xcccccccd
 80038c8:	40020000 	.word	0x40020000
 80038cc:	bffdfbf8 	.word	0xbffdfbf8
 80038d0:	40020400 	.word	0x40020400
 80038d4:	400200a8 	.word	0x400200a8
 80038d8:	400204a8 	.word	0x400204a8

080038dc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_DMA_Start+0x20>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e02e      	b.n	800395a <HAL_DMA_Start+0x7e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d11d      	bne.n	800394c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f923 	bl	8003b80 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e005      	b.n	8003958 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8003954:	2302      	movs	r3, #2
 8003956:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_DMA_Start_IT+0x20>
 800397e:	2302      	movs	r3, #2
 8003980:	e04b      	b.n	8003a1a <HAL_DMA_Start_IT+0xb8>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d13a      	bne.n	8003a0c <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f8e0 	bl	8003b80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 020e 	orr.w	r2, r2, #14
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e00f      	b.n	80039fa <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0204 	bic.w	r2, r2, #4
 80039e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 020a 	orr.w	r2, r2, #10
 80039f8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e005      	b.n	8003a18 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
 8003a16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f003 031c 	and.w	r3, r3, #28
 8003a42:	2204      	movs	r2, #4
 8003a44:	409a      	lsls	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d026      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x7a>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d021      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0204 	bic.w	r2, r2, #4
 8003a74:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 021c 	and.w	r2, r3, #28
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2104      	movs	r1, #4
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d071      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003a9a:	e06c      	b.n	8003b76 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f003 031c 	and.w	r3, r3, #28
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02e      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xec>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d029      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 020a 	bic.w	r2, r2, #10
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f003 021c 	and.w	r2, r3, #28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2102      	movs	r1, #2
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d038      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b0c:	e033      	b.n	8003b76 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f003 031c 	and.w	r3, r3, #28
 8003b16:	2208      	movs	r2, #8
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d02a      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x156>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d025      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 020e 	bic.w	r2, r2, #14
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f003 021c 	and.w	r2, r3, #28
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2101      	movs	r1, #1
 8003b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
}
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f003 021c 	and.w	r2, r3, #28
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d108      	bne.n	8003bc4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bc2:	e007      	b.n	8003bd4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bee:	e154      	b.n	8003e9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8146 	beq.w	8003e94 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d005      	beq.n	8003c20 <HAL_GPIO_Init+0x40>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d130      	bne.n	8003c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c56:	2201      	movs	r2, #1
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 0201 	and.w	r2, r3, #1
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d017      	beq.n	8003cbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	2203      	movs	r2, #3
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d123      	bne.n	8003d12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	08da      	lsrs	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3208      	adds	r2, #8
 8003cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	220f      	movs	r2, #15
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	08da      	lsrs	r2, r3, #3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3208      	adds	r2, #8
 8003d0c:	6939      	ldr	r1, [r7, #16]
 8003d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 0203 	and.w	r2, r3, #3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a0 	beq.w	8003e94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d54:	4b58      	ldr	r3, [pc, #352]	; (8003eb8 <HAL_GPIO_Init+0x2d8>)
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	4a57      	ldr	r2, [pc, #348]	; (8003eb8 <HAL_GPIO_Init+0x2d8>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d60:	4b55      	ldr	r3, [pc, #340]	; (8003eb8 <HAL_GPIO_Init+0x2d8>)
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d6c:	4a53      	ldr	r2, [pc, #332]	; (8003ebc <HAL_GPIO_Init+0x2dc>)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	3302      	adds	r3, #2
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	220f      	movs	r2, #15
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d96:	d019      	beq.n	8003dcc <HAL_GPIO_Init+0x1ec>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a49      	ldr	r2, [pc, #292]	; (8003ec0 <HAL_GPIO_Init+0x2e0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_GPIO_Init+0x1e8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a48      	ldr	r2, [pc, #288]	; (8003ec4 <HAL_GPIO_Init+0x2e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00d      	beq.n	8003dc4 <HAL_GPIO_Init+0x1e4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a47      	ldr	r2, [pc, #284]	; (8003ec8 <HAL_GPIO_Init+0x2e8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <HAL_GPIO_Init+0x1e0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a46      	ldr	r2, [pc, #280]	; (8003ecc <HAL_GPIO_Init+0x2ec>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_GPIO_Init+0x1dc>
 8003db8:	2304      	movs	r3, #4
 8003dba:	e008      	b.n	8003dce <HAL_GPIO_Init+0x1ee>
 8003dbc:	2307      	movs	r3, #7
 8003dbe:	e006      	b.n	8003dce <HAL_GPIO_Init+0x1ee>
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e004      	b.n	8003dce <HAL_GPIO_Init+0x1ee>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e002      	b.n	8003dce <HAL_GPIO_Init+0x1ee>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_GPIO_Init+0x1ee>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	f002 0203 	and.w	r2, r2, #3
 8003dd4:	0092      	lsls	r2, r2, #2
 8003dd6:	4093      	lsls	r3, r2
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dde:	4937      	ldr	r1, [pc, #220]	; (8003ebc <HAL_GPIO_Init+0x2dc>)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	089b      	lsrs	r3, r3, #2
 8003de4:	3302      	adds	r3, #2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dec:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e10:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e3a:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e8e:	4a10      	ldr	r2, [pc, #64]	; (8003ed0 <HAL_GPIO_Init+0x2f0>)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3301      	adds	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f aea3 	bne.w	8003bf0 <HAL_GPIO_Init+0x10>
  }
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40010000 	.word	0x40010000
 8003ec0:	48000400 	.word	0x48000400
 8003ec4:	48000800 	.word	0x48000800
 8003ec8:	48000c00 	.word	0x48000c00
 8003ecc:	48001000 	.word	0x48001000
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee4:	787b      	ldrb	r3, [r7, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ef0:	e002      	b.n	8003ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0af      	b.n	8004076 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd ff82 	bl	8001e34 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e00a      	b.n	8003f64 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3304      	adds	r3, #4
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3301      	adds	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	d9f1      	bls.n	8003f4e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0204 	orr.w	r2, r2, #4
 8003f78:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_LCD_Init+0x17c>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6851      	ldr	r1, [r2, #4]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6892      	ldr	r2, [r2, #8]
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	69d2      	ldr	r2, [r2, #28]
 8003f9e:	4311      	orrs	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6a12      	ldr	r2, [r2, #32]
 8003fa4:	4311      	orrs	r1, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6992      	ldr	r2, [r2, #24]
 8003faa:	4311      	orrs	r1, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f862 	bl	8004084 <LCD_WaitForSynchro>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_LCD_Init+0xca>
  {
    return status;
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	e053      	b.n	8004076 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004006:	f7fe fa1f 	bl	8002448 <HAL_GetTick>
 800400a:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800400c:	e00c      	b.n	8004028 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800400e:	f7fe fa1b 	bl	8002448 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401c:	d904      	bls.n	8004028 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2208      	movs	r2, #8
 8004022:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e026      	b.n	8004076 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d1eb      	bne.n	800400e <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004036:	f7fe fa07 	bl	8002448 <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800403c:	e00c      	b.n	8004058 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800403e:	f7fe fa03 	bl	8002448 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800404c:	d904      	bls.n	8004058 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2210      	movs	r2, #16
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e00e      	b.n	8004076 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d1eb      	bne.n	800403e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	fc00000e 	.word	0xfc00000e

08004084 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800408c:	f7fe f9dc 	bl	8002448 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004092:	e00c      	b.n	80040ae <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004094:	f7fe f9d8 	bl	8002448 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040a2:	d904      	bls.n	80040ae <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e007      	b.n	80040be <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d1eb      	bne.n	8004094 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40007000 	.word	0x40007000

080040e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f2:	d130      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d038      	beq.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800410a:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2232      	movs	r2, #50	; 0x32
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0c9b      	lsrs	r3, r3, #18
 8004124:	3301      	adds	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004128:	e002      	b.n	8004130 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b01      	subs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d102      	bne.n	8004144 <HAL_PWREx_ControlVoltageScaling+0x60>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f2      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d110      	bne.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e00f      	b.n	8004176 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800415e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004162:	d007      	beq.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416c:	4a05      	ldr	r2, [pc, #20]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004172:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40007000 	.word	0x40007000
 8004188:	2000000c 	.word	0x2000000c
 800418c:	431bde83 	.word	0x431bde83

08004190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f000 bc11 	b.w	80049c6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a4:	4ba0      	ldr	r3, [pc, #640]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ae:	4b9e      	ldr	r3, [pc, #632]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80e4 	beq.w	800438e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <HAL_RCC_OscConfig+0x4c>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	f040 808b 	bne.w	80042ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	f040 8087 	bne.w	80042ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041dc:	4b92      	ldr	r3, [pc, #584]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_OscConfig+0x64>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e3e8      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	4b8b      	ldr	r3, [pc, #556]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_RCC_OscConfig+0x7e>
 8004204:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420c:	e005      	b.n	800421a <HAL_RCC_OscConfig+0x8a>
 800420e:	4b86      	ldr	r3, [pc, #536]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421a:	4293      	cmp	r3, r2
 800421c:	d223      	bcs.n	8004266 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fd7a 	bl	8004d1c <RCC_SetFlashLatencyFromMSIRange>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e3c9      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004232:	4b7d      	ldr	r3, [pc, #500]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7c      	ldr	r2, [pc, #496]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b7a      	ldr	r3, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	4977      	ldr	r1, [pc, #476]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004250:	4b75      	ldr	r3, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	4972      	ldr	r1, [pc, #456]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
 8004264:	e025      	b.n	80042b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004266:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6f      	ldr	r2, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800426c:	f043 0308 	orr.w	r3, r3, #8
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b6d      	ldr	r3, [pc, #436]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	496a      	ldr	r1, [pc, #424]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004284:	4b68      	ldr	r3, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4965      	ldr	r1, [pc, #404]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fd3a 	bl	8004d1c <RCC_SetFlashLatencyFromMSIRange>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e389      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042b2:	f000 fc6f 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	495a      	ldr	r1, [pc, #360]	; (800442c <HAL_RCC_OscConfig+0x29c>)
 80042c4:	5ccb      	ldrb	r3, [r1, r3]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	4a58      	ldr	r2, [pc, #352]	; (8004430 <HAL_RCC_OscConfig+0x2a0>)
 80042d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042d2:	4b58      	ldr	r3, [pc, #352]	; (8004434 <HAL_RCC_OscConfig+0x2a4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe f866 	bl	80023a8 <HAL_InitTick>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d052      	beq.n	800438c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	e36d      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d032      	beq.n	8004358 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042f2:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4c      	ldr	r2, [pc, #304]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042fe:	f7fe f8a3 	bl	8002448 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004306:	f7fe f89f 	bl	8002448 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e356      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004318:	4b43      	ldr	r3, [pc, #268]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004324:	4b40      	ldr	r3, [pc, #256]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	493a      	ldr	r1, [pc, #232]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	4935      	ldr	r1, [pc, #212]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
 8004356:	e01a      	b.n	800438e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004358:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a32      	ldr	r2, [pc, #200]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004364:	f7fe f870 	bl	8002448 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800436c:	f7fe f86c 	bl	8002448 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e323      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800437e:	4b2a      	ldr	r3, [pc, #168]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x1dc>
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800438c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d073      	beq.n	8004482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d005      	beq.n	80043ac <HAL_RCC_OscConfig+0x21c>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d10e      	bne.n	80043c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d063      	beq.n	8004480 <HAL_RCC_OscConfig+0x2f0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d15f      	bne.n	8004480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e300      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x24c>
 80043ce:	4b16      	ldr	r3, [pc, #88]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e01d      	b.n	8004418 <HAL_RCC_OscConfig+0x288>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x270>
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0x288>
 8004400:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a05      	ldr	r2, [pc, #20]	; (8004428 <HAL_RCC_OscConfig+0x298>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01b      	beq.n	8004458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe f812 	bl	8002448 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004426:	e010      	b.n	800444a <HAL_RCC_OscConfig+0x2ba>
 8004428:	40021000 	.word	0x40021000
 800442c:	08009110 	.word	0x08009110
 8004430:	2000000c 	.word	0x2000000c
 8004434:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fe f806 	bl	8002448 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e2bd      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444a:	4baf      	ldr	r3, [pc, #700]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x2a8>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd fff6 	bl	8002448 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fd fff2 	bl	8002448 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e2a9      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004472:	4ba5      	ldr	r3, [pc, #660]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x2d0>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d060      	beq.n	8004550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_OscConfig+0x310>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b0c      	cmp	r3, #12
 8004498:	d119      	bne.n	80044ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d116      	bne.n	80044ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a0:	4b99      	ldr	r3, [pc, #612]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_OscConfig+0x328>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e286      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b8:	4b93      	ldr	r3, [pc, #588]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	4990      	ldr	r1, [pc, #576]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044cc:	e040      	b.n	8004550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d023      	beq.n	800451e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d6:	4b8c      	ldr	r3, [pc, #560]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a8b      	ldr	r2, [pc, #556]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fd ffb1 	bl	8002448 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ea:	f7fd ffad 	bl	8002448 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e264      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044fc:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004508:	4b7f      	ldr	r3, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	497c      	ldr	r1, [pc, #496]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
 800451c:	e018      	b.n	8004550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451e:	4b7a      	ldr	r3, [pc, #488]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a79      	ldr	r2, [pc, #484]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7fd ff8d 	bl	8002448 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004532:	f7fd ff89 	bl	8002448 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e240      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004544:	4b70      	ldr	r3, [pc, #448]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f0      	bne.n	8004532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d03c      	beq.n	80045d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01c      	beq.n	800459e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004564:	4b68      	ldr	r3, [pc, #416]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	4a67      	ldr	r2, [pc, #412]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fd ff68 	bl	8002448 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457c:	f7fd ff64 	bl	8002448 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e21b      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ef      	beq.n	800457c <HAL_RCC_OscConfig+0x3ec>
 800459c:	e01b      	b.n	80045d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800459e:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80045a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a4:	4a58      	ldr	r2, [pc, #352]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7fd ff4b 	bl	8002448 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fd ff47 	bl	8002448 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e1fe      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045c8:	4b4f      	ldr	r3, [pc, #316]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80045ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1ef      	bne.n	80045b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80a6 	beq.w	8004730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e4:	2300      	movs	r3, #0
 80045e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045e8:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10d      	bne.n	8004610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f4:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	4a43      	ldr	r2, [pc, #268]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004600:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460c:	2301      	movs	r3, #1
 800460e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004610:	4b3e      	ldr	r3, [pc, #248]	; (800470c <HAL_RCC_OscConfig+0x57c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d118      	bne.n	800464e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800461c:	4b3b      	ldr	r3, [pc, #236]	; (800470c <HAL_RCC_OscConfig+0x57c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a3a      	ldr	r2, [pc, #232]	; (800470c <HAL_RCC_OscConfig+0x57c>)
 8004622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004628:	f7fd ff0e 	bl	8002448 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004630:	f7fd ff0a 	bl	8002448 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1c1      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004642:	4b32      	ldr	r3, [pc, #200]	; (800470c <HAL_RCC_OscConfig+0x57c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d108      	bne.n	8004668 <HAL_RCC_OscConfig+0x4d8>
 8004656:	4b2c      	ldr	r3, [pc, #176]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	4a2a      	ldr	r2, [pc, #168]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004666:	e024      	b.n	80046b2 <HAL_RCC_OscConfig+0x522>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b05      	cmp	r3, #5
 800466e:	d110      	bne.n	8004692 <HAL_RCC_OscConfig+0x502>
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a24      	ldr	r2, [pc, #144]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004678:	f043 0304 	orr.w	r3, r3, #4
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004690:	e00f      	b.n	80046b2 <HAL_RCC_OscConfig+0x522>
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046a2:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80046aa:	f023 0304 	bic.w	r3, r3, #4
 80046ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fd fec5 	bl	8002448 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fd fec1 	bl	8002448 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e176      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_OscConfig+0x578>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ed      	beq.n	80046c2 <HAL_RCC_OscConfig+0x532>
 80046e6:	e01a      	b.n	800471e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd feae 	bl	8002448 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ee:	e00f      	b.n	8004710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd feaa 	bl	8002448 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d906      	bls.n	8004710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e15f      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004710:	4baa      	ldr	r3, [pc, #680]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e8      	bne.n	80046f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4ba5      	ldr	r3, [pc, #660]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	4aa4      	ldr	r2, [pc, #656]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 800472a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d03c      	beq.n	80047b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01c      	beq.n	800477e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004744:	4b9d      	ldr	r3, [pc, #628]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800474a:	4a9c      	ldr	r2, [pc, #624]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fd fe78 	bl	8002448 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800475c:	f7fd fe74 	bl	8002448 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e12b      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800476e:	4b93      	ldr	r3, [pc, #588]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ef      	beq.n	800475c <HAL_RCC_OscConfig+0x5cc>
 800477c:	e01b      	b.n	80047b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800477e:	4b8f      	ldr	r3, [pc, #572]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004784:	4a8d      	ldr	r2, [pc, #564]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f7fd fe5b 	bl	8002448 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004796:	f7fd fe57 	bl	8002448 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e10e      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047a8:	4b84      	ldr	r3, [pc, #528]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80047aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ef      	bne.n	8004796 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8102 	beq.w	80049c4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f040 80c5 	bne.w	8004954 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047ca:	4b7c      	ldr	r3, [pc, #496]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0203 	and.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d12c      	bne.n	8004838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	3b01      	subs	r3, #1
 80047ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d123      	bne.n	8004838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d11b      	bne.n	8004838 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d113      	bne.n	8004838 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	3b01      	subs	r3, #1
 800481e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d109      	bne.n	8004838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	3b01      	subs	r3, #1
 8004832:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d067      	beq.n	8004908 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d062      	beq.n	8004904 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800483e:	4b5f      	ldr	r3, [pc, #380]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0bb      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800484e:	4b5b      	ldr	r3, [pc, #364]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5a      	ldr	r2, [pc, #360]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004858:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800485a:	f7fd fdf5 	bl	8002448 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004862:	f7fd fdf1 	bl	8002448 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e0a8      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004874:	4b51      	ldr	r3, [pc, #324]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f0      	bne.n	8004862 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004880:	4b4e      	ldr	r3, [pc, #312]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4b4e      	ldr	r3, [pc, #312]	; (80049c0 <HAL_RCC_OscConfig+0x830>)
 8004886:	4013      	ands	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004890:	3a01      	subs	r2, #1
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	4311      	orrs	r1, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800489a:	0212      	lsls	r2, r2, #8
 800489c:	4311      	orrs	r1, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048a2:	0852      	lsrs	r2, r2, #1
 80048a4:	3a01      	subs	r2, #1
 80048a6:	0552      	lsls	r2, r2, #21
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048ae:	0852      	lsrs	r2, r2, #1
 80048b0:	3a01      	subs	r2, #1
 80048b2:	0652      	lsls	r2, r2, #25
 80048b4:	4311      	orrs	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048ba:	06d2      	lsls	r2, r2, #27
 80048bc:	430a      	orrs	r2, r1
 80048be:	493f      	ldr	r1, [pc, #252]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048c4:	4b3d      	ldr	r3, [pc, #244]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3c      	ldr	r2, [pc, #240]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80048ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d0:	4b3a      	ldr	r3, [pc, #232]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a39      	ldr	r2, [pc, #228]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80048d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048dc:	f7fd fdb4 	bl	8002448 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd fdb0 	bl	8002448 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e067      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004902:	e05f      	b.n	80049c4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e05e      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004908:	4b2c      	ldr	r3, [pc, #176]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d157      	bne.n	80049c4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004914:	4b29      	ldr	r3, [pc, #164]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 800491a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4a25      	ldr	r2, [pc, #148]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800492c:	f7fd fd8c 	bl	8002448 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fd fd88 	bl	8002448 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e03f      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x7a4>
 8004952:	e037      	b.n	80049c4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d02d      	beq.n	80049b6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495a:	4b18      	ldr	r3, [pc, #96]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a17      	ldr	r2, [pc, #92]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004964:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004966:	4b15      	ldr	r3, [pc, #84]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4a11      	ldr	r2, [pc, #68]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004978:	f023 0303 	bic.w	r3, r3, #3
 800497c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	4a0e      	ldr	r2, [pc, #56]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 8004984:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fd fd5b 	bl	8002448 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004996:	f7fd fd57 	bl	8002448 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e00e      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <HAL_RCC_OscConfig+0x82c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x806>
 80049b4:	e006      	b.n	80049c4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e005      	b.n	80049c6 <HAL_RCC_OscConfig+0x836>
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0c8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b66      	ldr	r3, [pc, #408]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d910      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 0207 	bic.w	r2, r3, #7
 80049fa:	4961      	ldr	r1, [pc, #388]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b5f      	ldr	r3, [pc, #380]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0b0      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d04c      	beq.n	8004aba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a28:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d121      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e09e      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d115      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e092      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a58:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e086      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a68:	4b46      	ldr	r3, [pc, #280]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e07e      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a78:	4b42      	ldr	r3, [pc, #264]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f023 0203 	bic.w	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	493f      	ldr	r1, [pc, #252]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8a:	f7fd fcdd 	bl	8002448 <HAL_GetTick>
 8004a8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a92:	f7fd fcd9 	bl	8002448 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e066      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 020c 	and.w	r2, r3, #12
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d1eb      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac6:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	492c      	ldr	r1, [pc, #176]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d210      	bcs.n	8004b08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 0207 	bic.w	r2, r3, #7
 8004aee:	4924      	ldr	r1, [pc, #144]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af6:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <HAL_RCC_ClockConfig+0x1b0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d001      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e036      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b14:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	4918      	ldr	r1, [pc, #96]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b32:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4910      	ldr	r1, [pc, #64]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b46:	f000 f825 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <HAL_RCC_ClockConfig+0x1b4>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	490c      	ldr	r1, [pc, #48]	; (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	5ccb      	ldrb	r3, [r1, r3]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd fc1c 	bl	80023a8 <HAL_InitTick>
 8004b70:	4603      	mov	r3, r0
 8004b72:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b74:	7afb      	ldrb	r3, [r7, #11]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40021000 	.word	0x40021000
 8004b88:	08009110 	.word	0x08009110
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	20000010 	.word	0x20000010

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	; 0x24
 8004b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bac:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d121      	bne.n	8004c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d11e      	bne.n	8004c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bc8:	4b34      	ldr	r3, [pc, #208]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bd4:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e005      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bf0:	4a2b      	ldr	r2, [pc, #172]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10d      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d102      	bne.n	8004c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	e004      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c18:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d134      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c22:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d003      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0xac>
 8004c38:	e005      	b.n	8004c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c3c:	617b      	str	r3, [r7, #20]
      break;
 8004c3e:	e005      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c42:	617b      	str	r3, [r7, #20]
      break;
 8004c44:	e002      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	617b      	str	r3, [r7, #20]
      break;
 8004c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	3301      	adds	r3, #1
 8004c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	fb02 f203 	mul.w	r2, r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	0e5b      	lsrs	r3, r3, #25
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	08009128 	.word	0x08009128
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	007a1200 	.word	0x007a1200

08004cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	2000000c 	.word	0x2000000c

08004cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cc8:	f7ff fff0 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4904      	ldr	r1, [pc, #16]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	08009120 	.word	0x08009120

08004cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cf4:	f7ff ffda 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0adb      	lsrs	r3, r3, #11
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4904      	ldr	r1, [pc, #16]	; (8004d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08009120 	.word	0x08009120

08004d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d28:	4b2a      	ldr	r3, [pc, #168]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d34:	f7ff f9c8 	bl	80040c8 <HAL_PWREx_GetVoltageRange>
 8004d38:	6178      	str	r0, [r7, #20]
 8004d3a:	e014      	b.n	8004d66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b25      	ldr	r3, [pc, #148]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	4a24      	ldr	r2, [pc, #144]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6593      	str	r3, [r2, #88]	; 0x58
 8004d48:	4b22      	ldr	r3, [pc, #136]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d54:	f7ff f9b8 	bl	80040c8 <HAL_PWREx_GetVoltageRange>
 8004d58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6c:	d10b      	bne.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b80      	cmp	r3, #128	; 0x80
 8004d72:	d919      	bls.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2ba0      	cmp	r3, #160	; 0xa0
 8004d78:	d902      	bls.n	8004d80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	e013      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d80:	2301      	movs	r3, #1
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	e010      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b80      	cmp	r3, #128	; 0x80
 8004d8a:	d902      	bls.n	8004d92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	e00a      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d102      	bne.n	8004d9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d98:	2302      	movs	r3, #2
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	e004      	b.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b70      	cmp	r3, #112	; 0x70
 8004da2:	d101      	bne.n	8004da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004da4:	2301      	movs	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 0207 	bic.w	r2, r3, #7
 8004db0:	4909      	ldr	r1, [pc, #36]	; (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40022000 	.word	0x40022000

08004ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004de4:	2300      	movs	r3, #0
 8004de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de8:	2300      	movs	r3, #0
 8004dea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d031      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e00:	d01a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004e02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e06:	d814      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e10:	d10f      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e12:	4b5d      	ldr	r3, [pc, #372]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4a5c      	ldr	r2, [pc, #368]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e1e:	e00c      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fa1e 	bl	8005268 <RCCEx_PLLSAI1_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e30:	e003      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	74fb      	strb	r3, [r7, #19]
      break;
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e40:	4b51      	ldr	r3, [pc, #324]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	494e      	ldr	r1, [pc, #312]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e56:	e001      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
 8004e5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 809e 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e6e:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e88:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e90:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea0:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a39      	ldr	r2, [pc, #228]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eac:	f7fd facc 	bl	8002448 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fd fac8 	bl	8002448 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec6:	e005      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec8:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ef      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d15a      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eda:	4b2b      	ldr	r3, [pc, #172]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d019      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f02:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f22:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d016      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fd fa88 	bl	8002448 <HAL_GetTick>
 8004f38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fd fa84 	bl	8002448 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d902      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	74fb      	strb	r3, [r7, #19]
            break;
 8004f52:	e006      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ec      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	4904      	ldr	r1, [pc, #16]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f7e:	e009      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
 8004f84:	e006      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f94:	7c7b      	ldrb	r3, [r7, #17]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4bb2      	ldr	r3, [pc, #712]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4ab1      	ldr	r2, [pc, #708]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb2:	4bac      	ldr	r3, [pc, #688]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 0203 	bic.w	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	49a8      	ldr	r1, [pc, #672]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd4:	4ba3      	ldr	r3, [pc, #652]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 020c 	bic.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	49a0      	ldr	r1, [pc, #640]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff6:	4b9b      	ldr	r3, [pc, #620]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005004:	4997      	ldr	r1, [pc, #604]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005018:	4b92      	ldr	r3, [pc, #584]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	498f      	ldr	r1, [pc, #572]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800503a:	4b8a      	ldr	r3, [pc, #552]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	4986      	ldr	r1, [pc, #536]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800505c:	4b81      	ldr	r3, [pc, #516]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	497e      	ldr	r1, [pc, #504]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507e:	4b79      	ldr	r3, [pc, #484]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	4975      	ldr	r1, [pc, #468]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050a0:	4b70      	ldr	r3, [pc, #448]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	496d      	ldr	r1, [pc, #436]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050c2:	4b68      	ldr	r3, [pc, #416]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	4964      	ldr	r1, [pc, #400]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d028      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e4:	4b5f      	ldr	r3, [pc, #380]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f2:	495c      	ldr	r1, [pc, #368]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005102:	d106      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005104:	4b57      	ldr	r3, [pc, #348]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4a56      	ldr	r2, [pc, #344]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510e:	60d3      	str	r3, [r2, #12]
 8005110:	e011      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800511a:	d10c      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	2101      	movs	r1, #1
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f8a0 	bl	8005268 <RCCEx_PLLSAI1_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d028      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005142:	4b48      	ldr	r3, [pc, #288]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005150:	4944      	ldr	r1, [pc, #272]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005160:	d106      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005162:	4b40      	ldr	r3, [pc, #256]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4a3f      	ldr	r2, [pc, #252]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800516c:	60d3      	str	r3, [r2, #12]
 800516e:	e011      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005178:	d10c      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	2101      	movs	r1, #1
 8005180:	4618      	mov	r0, r3
 8005182:	f000 f871 	bl	8005268 <RCCEx_PLLSAI1_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d028      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051a0:	4b30      	ldr	r3, [pc, #192]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ae:	492d      	ldr	r1, [pc, #180]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051be:	d106      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c0:	4b28      	ldr	r3, [pc, #160]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a27      	ldr	r2, [pc, #156]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ca:	60d3      	str	r3, [r2, #12]
 80051cc:	e011      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	2101      	movs	r1, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f842 	bl	8005268 <RCCEx_PLLSAI1_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01c      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051fe:	4b19      	ldr	r3, [pc, #100]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	4915      	ldr	r1, [pc, #84]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521c:	d10c      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	2102      	movs	r1, #2
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f81f 	bl	8005268 <RCCEx_PLLSAI1_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005244:	4b07      	ldr	r3, [pc, #28]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	4904      	ldr	r1, [pc, #16]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800525a:	7cbb      	ldrb	r3, [r7, #18]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000

08005268 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005276:	4b74      	ldr	r3, [pc, #464]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d018      	beq.n	80052b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005282:	4b71      	ldr	r3, [pc, #452]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0203 	and.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d10d      	bne.n	80052ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
       ||
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800529a:	4b6b      	ldr	r3, [pc, #428]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
       ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d047      	beq.n	800533e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	e044      	b.n	800533e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d018      	beq.n	80052ee <RCCEx_PLLSAI1_Config+0x86>
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d825      	bhi.n	800530c <RCCEx_PLLSAI1_Config+0xa4>
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d002      	beq.n	80052ca <RCCEx_PLLSAI1_Config+0x62>
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d009      	beq.n	80052dc <RCCEx_PLLSAI1_Config+0x74>
 80052c8:	e020      	b.n	800530c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ca:	4b5f      	ldr	r3, [pc, #380]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d11d      	bne.n	8005312 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052da:	e01a      	b.n	8005312 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052dc:	4b5a      	ldr	r3, [pc, #360]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d116      	bne.n	8005316 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ec:	e013      	b.n	8005316 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052ee:	4b56      	ldr	r3, [pc, #344]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052fa:	4b53      	ldr	r3, [pc, #332]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800530a:	e006      	b.n	800531a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	e004      	b.n	800531c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800531a:	bf00      	nop
    }

    if(status == HAL_OK)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005322:	4b49      	ldr	r3, [pc, #292]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6819      	ldr	r1, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	430b      	orrs	r3, r1
 8005338:	4943      	ldr	r1, [pc, #268]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d17c      	bne.n	800543e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005344:	4b40      	ldr	r3, [pc, #256]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 800534a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800534e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005350:	f7fd f87a 	bl	8002448 <HAL_GetTick>
 8005354:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005356:	e009      	b.n	800536c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005358:	f7fd f876 	bl	8002448 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d902      	bls.n	800536c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	73fb      	strb	r3, [r7, #15]
        break;
 800536a:	e005      	b.n	8005378 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800536c:	4b36      	ldr	r3, [pc, #216]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1ef      	bne.n	8005358 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d15f      	bne.n	800543e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d110      	bne.n	80053a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005384:	4b30      	ldr	r3, [pc, #192]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800538c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6892      	ldr	r2, [r2, #8]
 8005394:	0211      	lsls	r1, r2, #8
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	68d2      	ldr	r2, [r2, #12]
 800539a:	06d2      	lsls	r2, r2, #27
 800539c:	430a      	orrs	r2, r1
 800539e:	492a      	ldr	r1, [pc, #168]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	610b      	str	r3, [r1, #16]
 80053a4:	e027      	b.n	80053f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d112      	bne.n	80053d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053ac:	4b26      	ldr	r3, [pc, #152]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6892      	ldr	r2, [r2, #8]
 80053bc:	0211      	lsls	r1, r2, #8
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6912      	ldr	r2, [r2, #16]
 80053c2:	0852      	lsrs	r2, r2, #1
 80053c4:	3a01      	subs	r2, #1
 80053c6:	0552      	lsls	r2, r2, #21
 80053c8:	430a      	orrs	r2, r1
 80053ca:	491f      	ldr	r1, [pc, #124]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	610b      	str	r3, [r1, #16]
 80053d0:	e011      	b.n	80053f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053d2:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6892      	ldr	r2, [r2, #8]
 80053e2:	0211      	lsls	r1, r2, #8
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6952      	ldr	r2, [r2, #20]
 80053e8:	0852      	lsrs	r2, r2, #1
 80053ea:	3a01      	subs	r2, #1
 80053ec:	0652      	lsls	r2, r2, #25
 80053ee:	430a      	orrs	r2, r1
 80053f0:	4915      	ldr	r1, [pc, #84]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005400:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fd f821 	bl	8002448 <HAL_GetTick>
 8005406:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005408:	e009      	b.n	800541e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800540a:	f7fd f81d 	bl	8002448 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d902      	bls.n	800541e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	73fb      	strb	r3, [r7, #15]
          break;
 800541c:	e005      	b.n	800542a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0ef      	beq.n	800540a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	4903      	ldr	r1, [pc, #12]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e0>)
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000

0800544c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e049      	b.n	80054f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fc fd7a 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 f9ee 	bl	800586c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	d001      	beq.n	8005514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e033      	b.n	800557c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <HAL_TIM_Base_Start+0x8c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIM_Base_Start+0x3e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d004      	beq.n	800553a <HAL_TIM_Base_Start+0x3e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a15      	ldr	r2, [pc, #84]	; (800558c <HAL_TIM_Base_Start+0x90>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d115      	bne.n	8005566 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <HAL_TIM_Base_Start+0x94>)
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b06      	cmp	r3, #6
 800554a:	d015      	beq.n	8005578 <HAL_TIM_Base_Start+0x7c>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005552:	d011      	beq.n	8005578 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	e008      	b.n	8005578 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e000      	b.n	800557a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40014000 	.word	0x40014000
 8005590:	00010007 	.word	0x00010007

08005594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e049      	b.n	800563a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc fcb8 	bl	8001f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 f94a 	bl	800586c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800565e:	2302      	movs	r3, #2
 8005660:	e0ff      	b.n	8005862 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b14      	cmp	r3, #20
 800566e:	f200 80f0 	bhi.w	8005852 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	080056cd 	.word	0x080056cd
 800567c:	08005853 	.word	0x08005853
 8005680:	08005853 	.word	0x08005853
 8005684:	08005853 	.word	0x08005853
 8005688:	0800570d 	.word	0x0800570d
 800568c:	08005853 	.word	0x08005853
 8005690:	08005853 	.word	0x08005853
 8005694:	08005853 	.word	0x08005853
 8005698:	0800574f 	.word	0x0800574f
 800569c:	08005853 	.word	0x08005853
 80056a0:	08005853 	.word	0x08005853
 80056a4:	08005853 	.word	0x08005853
 80056a8:	0800578f 	.word	0x0800578f
 80056ac:	08005853 	.word	0x08005853
 80056b0:	08005853 	.word	0x08005853
 80056b4:	08005853 	.word	0x08005853
 80056b8:	080057d1 	.word	0x080057d1
 80056bc:	08005853 	.word	0x08005853
 80056c0:	08005853 	.word	0x08005853
 80056c4:	08005853 	.word	0x08005853
 80056c8:	08005811 	.word	0x08005811
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f92e 	bl	8005934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0208 	orr.w	r2, r2, #8
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0204 	bic.w	r2, r2, #4
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	619a      	str	r2, [r3, #24]
      break;
 800570a:	e0a5      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f98a 	bl	8005a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	021a      	lsls	r2, r3, #8
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	619a      	str	r2, [r3, #24]
      break;
 800574c:	e084      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f9e3 	bl	8005b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0208 	orr.w	r2, r2, #8
 8005768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0204 	bic.w	r2, r2, #4
 8005778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69d9      	ldr	r1, [r3, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	61da      	str	r2, [r3, #28]
      break;
 800578c:	e064      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fa3b 	bl	8005c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	021a      	lsls	r2, r3, #8
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	61da      	str	r2, [r3, #28]
      break;
 80057ce:	e043      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fa78 	bl	8005ccc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0208 	orr.w	r2, r2, #8
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0204 	bic.w	r2, r2, #4
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800580e:	e023      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fab0 	bl	8005d7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800582a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	021a      	lsls	r2, r3, #8
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005850:	e002      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	75fb      	strb	r3, [r7, #23]
      break;
 8005856:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005860:	7dfb      	ldrb	r3, [r7, #23]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop

0800586c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a2a      	ldr	r2, [pc, #168]	; (8005928 <TIM_Base_SetConfig+0xbc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_Base_SetConfig+0x20>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d108      	bne.n	800589e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a21      	ldr	r2, [pc, #132]	; (8005928 <TIM_Base_SetConfig+0xbc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00b      	beq.n	80058be <TIM_Base_SetConfig+0x52>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d007      	beq.n	80058be <TIM_Base_SetConfig+0x52>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1e      	ldr	r2, [pc, #120]	; (800592c <TIM_Base_SetConfig+0xc0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_Base_SetConfig+0x52>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <TIM_Base_SetConfig+0xc4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d108      	bne.n	80058d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a0c      	ldr	r2, [pc, #48]	; (8005928 <TIM_Base_SetConfig+0xbc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d007      	beq.n	800590c <TIM_Base_SetConfig+0xa0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a0b      	ldr	r2, [pc, #44]	; (800592c <TIM_Base_SetConfig+0xc0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_Base_SetConfig+0xa0>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <TIM_Base_SetConfig+0xc4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d103      	bne.n	8005914 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	615a      	str	r2, [r3, #20]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40014000 	.word	0x40014000
 8005930:	40014400 	.word	0x40014400

08005934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f023 0201 	bic.w	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0302 	bic.w	r3, r3, #2
 8005980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a24      	ldr	r2, [pc, #144]	; (8005a20 <TIM_OC1_SetConfig+0xec>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_OC1_SetConfig+0x70>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <TIM_OC1_SetConfig+0xf0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC1_SetConfig+0x70>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <TIM_OC1_SetConfig+0xf4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10c      	bne.n	80059be <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0308 	bic.w	r3, r3, #8
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 0304 	bic.w	r3, r3, #4
 80059bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <TIM_OC1_SetConfig+0xec>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_OC1_SetConfig+0xa2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <TIM_OC1_SetConfig+0xf0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC1_SetConfig+0xa2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <TIM_OC1_SetConfig+0xf4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d111      	bne.n	80059fa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40014400 	.word	0x40014400

08005a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f023 0210 	bic.w	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0320 	bic.w	r3, r3, #32
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <TIM_OC2_SetConfig+0xe8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10d      	bne.n	8005aac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <TIM_OC2_SetConfig+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC2_SetConfig+0x98>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <TIM_OC2_SetConfig+0xec>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC2_SetConfig+0x98>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a17      	ldr	r2, [pc, #92]	; (8005b1c <TIM_OC2_SetConfig+0xf0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d113      	bne.n	8005aec <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400

08005b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <TIM_OC3_SetConfig+0xe4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10d      	bne.n	8005b9e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <TIM_OC3_SetConfig+0xe4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <TIM_OC3_SetConfig+0x96>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <TIM_OC3_SetConfig+0xe8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC3_SetConfig+0x96>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <TIM_OC3_SetConfig+0xec>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d113      	bne.n	8005bde <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40014400 	.word	0x40014400

08005c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a14      	ldr	r2, [pc, #80]	; (8005cc0 <TIM_OC4_SetConfig+0xb0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_OC4_SetConfig+0x74>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <TIM_OC4_SetConfig+0xb4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC4_SetConfig+0x74>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a12      	ldr	r2, [pc, #72]	; (8005cc8 <TIM_OC4_SetConfig+0xb8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d109      	bne.n	8005c98 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	019b      	lsls	r3, r3, #6
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400

08005ccc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	041b      	lsls	r3, r3, #16
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <TIM_OC5_SetConfig+0xa4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_OC5_SetConfig+0x6a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <TIM_OC5_SetConfig+0xa8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC5_SetConfig+0x6a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <TIM_OC5_SetConfig+0xac>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d109      	bne.n	8005d4a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40012c00 	.word	0x40012c00
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400

08005d7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	051b      	lsls	r3, r3, #20
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a14      	ldr	r2, [pc, #80]	; (8005e24 <TIM_OC6_SetConfig+0xa8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d007      	beq.n	8005de8 <TIM_OC6_SetConfig+0x6c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <TIM_OC6_SetConfig+0xac>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_OC6_SetConfig+0x6c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a12      	ldr	r2, [pc, #72]	; (8005e2c <TIM_OC6_SetConfig+0xb0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d109      	bne.n	8005dfc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40014400 	.word	0x40014400

08005e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e04f      	b.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d108      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a14      	ldr	r2, [pc, #80]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a10      	ldr	r2, [pc, #64]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d10c      	bne.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40014000 	.word	0x40014000

08005efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e040      	b.n	8005f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fc f8c6 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f82c 	bl	8005f98 <UART_SetConfig>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e022      	b.n	8005f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa54 	bl	8006400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fadb 	bl	8006544 <UART_CheckIdleState>
 8005f8e:	4603      	mov	r3, r0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f98:	b5b0      	push	{r4, r5, r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4baa      	ldr	r3, [pc, #680]	; (800626c <UART_SetConfig+0x2d4>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a9f      	ldr	r2, [pc, #636]	; (8006270 <UART_SetConfig+0x2d8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a96      	ldr	r2, [pc, #600]	; (8006274 <UART_SetConfig+0x2dc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d121      	bne.n	8006062 <UART_SetConfig+0xca>
 800601e:	4b96      	ldr	r3, [pc, #600]	; (8006278 <UART_SetConfig+0x2e0>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	2b03      	cmp	r3, #3
 800602a:	d817      	bhi.n	800605c <UART_SetConfig+0xc4>
 800602c:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <UART_SetConfig+0x9c>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006045 	.word	0x08006045
 8006038:	08006051 	.word	0x08006051
 800603c:	0800604b 	.word	0x0800604b
 8006040:	08006057 	.word	0x08006057
 8006044:	2301      	movs	r3, #1
 8006046:	76fb      	strb	r3, [r7, #27]
 8006048:	e096      	b.n	8006178 <UART_SetConfig+0x1e0>
 800604a:	2302      	movs	r3, #2
 800604c:	76fb      	strb	r3, [r7, #27]
 800604e:	e093      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006050:	2304      	movs	r3, #4
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e090      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006056:	2308      	movs	r3, #8
 8006058:	76fb      	strb	r3, [r7, #27]
 800605a:	e08d      	b.n	8006178 <UART_SetConfig+0x1e0>
 800605c:	2310      	movs	r3, #16
 800605e:	76fb      	strb	r3, [r7, #27]
 8006060:	e08a      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a85      	ldr	r2, [pc, #532]	; (800627c <UART_SetConfig+0x2e4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d132      	bne.n	80060d2 <UART_SetConfig+0x13a>
 800606c:	4b82      	ldr	r3, [pc, #520]	; (8006278 <UART_SetConfig+0x2e0>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	2b0c      	cmp	r3, #12
 8006078:	d828      	bhi.n	80060cc <UART_SetConfig+0x134>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0xe8>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	080060b5 	.word	0x080060b5
 8006084:	080060cd 	.word	0x080060cd
 8006088:	080060cd 	.word	0x080060cd
 800608c:	080060cd 	.word	0x080060cd
 8006090:	080060c1 	.word	0x080060c1
 8006094:	080060cd 	.word	0x080060cd
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060bb 	.word	0x080060bb
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060cd 	.word	0x080060cd
 80060b0:	080060c7 	.word	0x080060c7
 80060b4:	2300      	movs	r3, #0
 80060b6:	76fb      	strb	r3, [r7, #27]
 80060b8:	e05e      	b.n	8006178 <UART_SetConfig+0x1e0>
 80060ba:	2302      	movs	r3, #2
 80060bc:	76fb      	strb	r3, [r7, #27]
 80060be:	e05b      	b.n	8006178 <UART_SetConfig+0x1e0>
 80060c0:	2304      	movs	r3, #4
 80060c2:	76fb      	strb	r3, [r7, #27]
 80060c4:	e058      	b.n	8006178 <UART_SetConfig+0x1e0>
 80060c6:	2308      	movs	r3, #8
 80060c8:	76fb      	strb	r3, [r7, #27]
 80060ca:	e055      	b.n	8006178 <UART_SetConfig+0x1e0>
 80060cc:	2310      	movs	r3, #16
 80060ce:	76fb      	strb	r3, [r7, #27]
 80060d0:	e052      	b.n	8006178 <UART_SetConfig+0x1e0>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a6a      	ldr	r2, [pc, #424]	; (8006280 <UART_SetConfig+0x2e8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d120      	bne.n	800611e <UART_SetConfig+0x186>
 80060dc:	4b66      	ldr	r3, [pc, #408]	; (8006278 <UART_SetConfig+0x2e0>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060e6:	2b30      	cmp	r3, #48	; 0x30
 80060e8:	d013      	beq.n	8006112 <UART_SetConfig+0x17a>
 80060ea:	2b30      	cmp	r3, #48	; 0x30
 80060ec:	d814      	bhi.n	8006118 <UART_SetConfig+0x180>
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d009      	beq.n	8006106 <UART_SetConfig+0x16e>
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d810      	bhi.n	8006118 <UART_SetConfig+0x180>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <UART_SetConfig+0x168>
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d006      	beq.n	800610c <UART_SetConfig+0x174>
 80060fe:	e00b      	b.n	8006118 <UART_SetConfig+0x180>
 8006100:	2300      	movs	r3, #0
 8006102:	76fb      	strb	r3, [r7, #27]
 8006104:	e038      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006106:	2302      	movs	r3, #2
 8006108:	76fb      	strb	r3, [r7, #27]
 800610a:	e035      	b.n	8006178 <UART_SetConfig+0x1e0>
 800610c:	2304      	movs	r3, #4
 800610e:	76fb      	strb	r3, [r7, #27]
 8006110:	e032      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006112:	2308      	movs	r3, #8
 8006114:	76fb      	strb	r3, [r7, #27]
 8006116:	e02f      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006118:	2310      	movs	r3, #16
 800611a:	76fb      	strb	r3, [r7, #27]
 800611c:	e02c      	b.n	8006178 <UART_SetConfig+0x1e0>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a53      	ldr	r2, [pc, #332]	; (8006270 <UART_SetConfig+0x2d8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d125      	bne.n	8006174 <UART_SetConfig+0x1dc>
 8006128:	4b53      	ldr	r3, [pc, #332]	; (8006278 <UART_SetConfig+0x2e0>)
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006132:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006136:	d017      	beq.n	8006168 <UART_SetConfig+0x1d0>
 8006138:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800613c:	d817      	bhi.n	800616e <UART_SetConfig+0x1d6>
 800613e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006142:	d00b      	beq.n	800615c <UART_SetConfig+0x1c4>
 8006144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006148:	d811      	bhi.n	800616e <UART_SetConfig+0x1d6>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <UART_SetConfig+0x1be>
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006152:	d006      	beq.n	8006162 <UART_SetConfig+0x1ca>
 8006154:	e00b      	b.n	800616e <UART_SetConfig+0x1d6>
 8006156:	2300      	movs	r3, #0
 8006158:	76fb      	strb	r3, [r7, #27]
 800615a:	e00d      	b.n	8006178 <UART_SetConfig+0x1e0>
 800615c:	2302      	movs	r3, #2
 800615e:	76fb      	strb	r3, [r7, #27]
 8006160:	e00a      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006162:	2304      	movs	r3, #4
 8006164:	76fb      	strb	r3, [r7, #27]
 8006166:	e007      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006168:	2308      	movs	r3, #8
 800616a:	76fb      	strb	r3, [r7, #27]
 800616c:	e004      	b.n	8006178 <UART_SetConfig+0x1e0>
 800616e:	2310      	movs	r3, #16
 8006170:	76fb      	strb	r3, [r7, #27]
 8006172:	e001      	b.n	8006178 <UART_SetConfig+0x1e0>
 8006174:	2310      	movs	r3, #16
 8006176:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a3c      	ldr	r2, [pc, #240]	; (8006270 <UART_SetConfig+0x2d8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	f040 8082 	bne.w	8006288 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006184:	7efb      	ldrb	r3, [r7, #27]
 8006186:	2b08      	cmp	r3, #8
 8006188:	d823      	bhi.n	80061d2 <UART_SetConfig+0x23a>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0x1f8>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061b5 	.word	0x080061b5
 8006194:	080061d3 	.word	0x080061d3
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061d3 	.word	0x080061d3
 80061a0:	080061c3 	.word	0x080061c3
 80061a4:	080061d3 	.word	0x080061d3
 80061a8:	080061d3 	.word	0x080061d3
 80061ac:	080061d3 	.word	0x080061d3
 80061b0:	080061cb 	.word	0x080061cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b4:	f7fe fd86 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 80061b8:	6178      	str	r0, [r7, #20]
        break;
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061bc:	4b31      	ldr	r3, [pc, #196]	; (8006284 <UART_SetConfig+0x2ec>)
 80061be:	617b      	str	r3, [r7, #20]
        break;
 80061c0:	e00c      	b.n	80061dc <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c2:	f7fe fce7 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 80061c6:	6178      	str	r0, [r7, #20]
        break;
 80061c8:	e008      	b.n	80061dc <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ce:	617b      	str	r3, [r7, #20]
        break;
 80061d0:	e004      	b.n	80061dc <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	76bb      	strb	r3, [r7, #26]
        break;
 80061da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8100 	beq.w	80063e4 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	4413      	add	r3, r2
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d305      	bcc.n	8006200 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d902      	bls.n	8006206 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	76bb      	strb	r3, [r7, #26]
 8006204:	e0ee      	b.n	80063e4 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4618      	mov	r0, r3
 800620a:	f04f 0100 	mov.w	r1, #0
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	020b      	lsls	r3, r1, #8
 8006218:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800621c:	0202      	lsls	r2, r0, #8
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	6849      	ldr	r1, [r1, #4]
 8006222:	0849      	lsrs	r1, r1, #1
 8006224:	4608      	mov	r0, r1
 8006226:	f04f 0100 	mov.w	r1, #0
 800622a:	1814      	adds	r4, r2, r0
 800622c:	eb43 0501 	adc.w	r5, r3, r1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	461a      	mov	r2, r3
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa fcab 	bl	8000b98 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4613      	mov	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006250:	d308      	bcc.n	8006264 <UART_SetConfig+0x2cc>
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006258:	d204      	bcs.n	8006264 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	60da      	str	r2, [r3, #12]
 8006262:	e0bf      	b.n	80063e4 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	76bb      	strb	r3, [r7, #26]
 8006268:	e0bc      	b.n	80063e4 <UART_SetConfig+0x44c>
 800626a:	bf00      	nop
 800626c:	efff69f3 	.word	0xefff69f3
 8006270:	40008000 	.word	0x40008000
 8006274:	40013800 	.word	0x40013800
 8006278:	40021000 	.word	0x40021000
 800627c:	40004400 	.word	0x40004400
 8006280:	40004800 	.word	0x40004800
 8006284:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006290:	d15b      	bne.n	800634a <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8006292:	7efb      	ldrb	r3, [r7, #27]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d828      	bhi.n	80062ea <UART_SetConfig+0x352>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <UART_SetConfig+0x308>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062cd 	.word	0x080062cd
 80062a8:	080062d5 	.word	0x080062d5
 80062ac:	080062eb 	.word	0x080062eb
 80062b0:	080062db 	.word	0x080062db
 80062b4:	080062eb 	.word	0x080062eb
 80062b8:	080062eb 	.word	0x080062eb
 80062bc:	080062eb 	.word	0x080062eb
 80062c0:	080062e3 	.word	0x080062e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c4:	f7fe fcfe 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 80062c8:	6178      	str	r0, [r7, #20]
        break;
 80062ca:	e013      	b.n	80062f4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fe fd10 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 80062d0:	6178      	str	r0, [r7, #20]
        break;
 80062d2:	e00f      	b.n	80062f4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062d4:	4b49      	ldr	r3, [pc, #292]	; (80063fc <UART_SetConfig+0x464>)
 80062d6:	617b      	str	r3, [r7, #20]
        break;
 80062d8:	e00c      	b.n	80062f4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062da:	f7fe fc5b 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 80062de:	6178      	str	r0, [r7, #20]
        break;
 80062e0:	e008      	b.n	80062f4 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e6:	617b      	str	r3, [r7, #20]
        break;
 80062e8:	e004      	b.n	80062f4 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	76bb      	strb	r3, [r7, #26]
        break;
 80062f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d074      	beq.n	80063e4 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	005a      	lsls	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d916      	bls.n	8006344 <UART_SetConfig+0x3ac>
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d212      	bcs.n	8006344 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f023 030f 	bic.w	r3, r3, #15
 8006326:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	b29b      	uxth	r3, r3
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	b29a      	uxth	r2, r3
 8006334:	89fb      	ldrh	r3, [r7, #14]
 8006336:	4313      	orrs	r3, r2
 8006338:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	89fa      	ldrh	r2, [r7, #14]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	e04f      	b.n	80063e4 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	76bb      	strb	r3, [r7, #26]
 8006348:	e04c      	b.n	80063e4 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800634a:	7efb      	ldrb	r3, [r7, #27]
 800634c:	2b08      	cmp	r3, #8
 800634e:	d828      	bhi.n	80063a2 <UART_SetConfig+0x40a>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x3c0>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800637d 	.word	0x0800637d
 800635c:	08006385 	.word	0x08006385
 8006360:	0800638d 	.word	0x0800638d
 8006364:	080063a3 	.word	0x080063a3
 8006368:	08006393 	.word	0x08006393
 800636c:	080063a3 	.word	0x080063a3
 8006370:	080063a3 	.word	0x080063a3
 8006374:	080063a3 	.word	0x080063a3
 8006378:	0800639b 	.word	0x0800639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7fe fca2 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8006380:	6178      	str	r0, [r7, #20]
        break;
 8006382:	e013      	b.n	80063ac <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006384:	f7fe fcb4 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8006388:	6178      	str	r0, [r7, #20]
        break;
 800638a:	e00f      	b.n	80063ac <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800638c:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <UART_SetConfig+0x464>)
 800638e:	617b      	str	r3, [r7, #20]
        break;
 8006390:	e00c      	b.n	80063ac <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006392:	f7fe fbff 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8006396:	6178      	str	r0, [r7, #20]
        break;
 8006398:	e008      	b.n	80063ac <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639e:	617b      	str	r3, [r7, #20]
        break;
 80063a0:	e004      	b.n	80063ac <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	76bb      	strb	r3, [r7, #26]
        break;
 80063aa:	bf00      	nop
    }

    if (pclk != 0U)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d018      	beq.n	80063e4 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	085a      	lsrs	r2, r3, #1
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	441a      	add	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b0f      	cmp	r3, #15
 80063ca:	d909      	bls.n	80063e0 <UART_SetConfig+0x448>
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d2:	d205      	bcs.n	80063e0 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	e001      	b.n	80063e4 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bdb0      	pop	{r4, r5, r7, pc}
 80063fa:	bf00      	nop
 80063fc:	00f42400 	.word	0x00f42400

08006400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01a      	beq.n	8006516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fe:	d10a      	bne.n	8006516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af02      	add	r7, sp, #8
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006554:	f7fb ff78 	bl	8002448 <HAL_GetTick>
 8006558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b08      	cmp	r3, #8
 8006566:	d10e      	bne.n	8006586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f82d 	bl	80065d6 <UART_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e023      	b.n	80065ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d10e      	bne.n	80065b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f817 	bl	80065d6 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e00d      	b.n	80065ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b09c      	sub	sp, #112	; 0x70
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	4613      	mov	r3, r2
 80065e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e6:	e0a5      	b.n	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	f000 80a1 	beq.w	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f2:	f7fb ff29 	bl	8002448 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065fe:	429a      	cmp	r2, r3
 8006600:	d302      	bcc.n	8006608 <UART_WaitOnFlagUntilTimeout+0x32>
 8006602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006604:	2b00      	cmp	r3, #0
 8006606:	d13e      	bne.n	8006686 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800661c:	667b      	str	r3, [r7, #100]	; 0x64
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006628:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800662c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e6      	bne.n	8006608 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	663b      	str	r3, [r7, #96]	; 0x60
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800665a:	64ba      	str	r2, [r7, #72]	; 0x48
 800665c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e067      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d04f      	beq.n	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a2:	d147      	bne.n	8006734 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
 80066ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e6      	bne.n	80066ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	613b      	str	r3, [r7, #16]
   return(result);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3308      	adds	r3, #8
 80066fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006700:	623a      	str	r2, [r7, #32]
 8006702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69f9      	ldr	r1, [r7, #28]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	61bb      	str	r3, [r7, #24]
   return(result);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2220      	movs	r2, #32
 800671e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e010      	b.n	8006756 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	429a      	cmp	r2, r3
 8006750:	f43f af4a 	beq.w	80065e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3770      	adds	r7, #112	; 0x70
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <__errno>:
 8006760:	4b01      	ldr	r3, [pc, #4]	; (8006768 <__errno+0x8>)
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000018 	.word	0x20000018

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4d0d      	ldr	r5, [pc, #52]	; (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	; (80067a8 <__libc_init_array+0x3c>)
 8006772:	1b64      	subs	r4, r4, r5
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2600      	movs	r6, #0
 8006778:	42a6      	cmp	r6, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4d0b      	ldr	r5, [pc, #44]	; (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	; (80067b0 <__libc_init_array+0x44>)
 8006780:	f002 fbb0 	bl	8008ee4 <_init>
 8006784:	1b64      	subs	r4, r4, r5
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2600      	movs	r6, #0
 800678a:	42a6      	cmp	r6, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f855 3b04 	ldr.w	r3, [r5], #4
 8006794:	4798      	blx	r3
 8006796:	3601      	adds	r6, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f855 3b04 	ldr.w	r3, [r5], #4
 800679e:	4798      	blx	r3
 80067a0:	3601      	adds	r6, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	08009440 	.word	0x08009440
 80067a8:	08009440 	.word	0x08009440
 80067ac:	08009440 	.word	0x08009440
 80067b0:	08009444 	.word	0x08009444

080067b4 <memcpy>:
 80067b4:	440a      	add	r2, r1
 80067b6:	4291      	cmp	r1, r2
 80067b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80067bc:	d100      	bne.n	80067c0 <memcpy+0xc>
 80067be:	4770      	bx	lr
 80067c0:	b510      	push	{r4, lr}
 80067c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ca:	4291      	cmp	r1, r2
 80067cc:	d1f9      	bne.n	80067c2 <memcpy+0xe>
 80067ce:	bd10      	pop	{r4, pc}

080067d0 <memset>:
 80067d0:	4402      	add	r2, r0
 80067d2:	4603      	mov	r3, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d100      	bne.n	80067da <memset+0xa>
 80067d8:	4770      	bx	lr
 80067da:	f803 1b01 	strb.w	r1, [r3], #1
 80067de:	e7f9      	b.n	80067d4 <memset+0x4>

080067e0 <iprintf>:
 80067e0:	b40f      	push	{r0, r1, r2, r3}
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <iprintf+0x2c>)
 80067e4:	b513      	push	{r0, r1, r4, lr}
 80067e6:	681c      	ldr	r4, [r3, #0]
 80067e8:	b124      	cbz	r4, 80067f4 <iprintf+0x14>
 80067ea:	69a3      	ldr	r3, [r4, #24]
 80067ec:	b913      	cbnz	r3, 80067f4 <iprintf+0x14>
 80067ee:	4620      	mov	r0, r4
 80067f0:	f000 f866 	bl	80068c0 <__sinit>
 80067f4:	ab05      	add	r3, sp, #20
 80067f6:	9a04      	ldr	r2, [sp, #16]
 80067f8:	68a1      	ldr	r1, [r4, #8]
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f983 	bl	8006b08 <_vfiprintf_r>
 8006802:	b002      	add	sp, #8
 8006804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006808:	b004      	add	sp, #16
 800680a:	4770      	bx	lr
 800680c:	20000018 	.word	0x20000018

08006810 <std>:
 8006810:	2300      	movs	r3, #0
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	e9c0 3300 	strd	r3, r3, [r0]
 800681a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681e:	6083      	str	r3, [r0, #8]
 8006820:	8181      	strh	r1, [r0, #12]
 8006822:	6643      	str	r3, [r0, #100]	; 0x64
 8006824:	81c2      	strh	r2, [r0, #14]
 8006826:	6183      	str	r3, [r0, #24]
 8006828:	4619      	mov	r1, r3
 800682a:	2208      	movs	r2, #8
 800682c:	305c      	adds	r0, #92	; 0x5c
 800682e:	f7ff ffcf 	bl	80067d0 <memset>
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <std+0x38>)
 8006834:	6263      	str	r3, [r4, #36]	; 0x24
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <std+0x3c>)
 8006838:	62a3      	str	r3, [r4, #40]	; 0x28
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <std+0x40>)
 800683c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <std+0x44>)
 8006840:	6224      	str	r4, [r4, #32]
 8006842:	6323      	str	r3, [r4, #48]	; 0x30
 8006844:	bd10      	pop	{r4, pc}
 8006846:	bf00      	nop
 8006848:	080070b1 	.word	0x080070b1
 800684c:	080070d3 	.word	0x080070d3
 8006850:	0800710b 	.word	0x0800710b
 8006854:	0800712f 	.word	0x0800712f

08006858 <_cleanup_r>:
 8006858:	4901      	ldr	r1, [pc, #4]	; (8006860 <_cleanup_r+0x8>)
 800685a:	f000 b8af 	b.w	80069bc <_fwalk_reent>
 800685e:	bf00      	nop
 8006860:	08007409 	.word	0x08007409

08006864 <__sfmoreglue>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	1e4a      	subs	r2, r1, #1
 8006868:	2568      	movs	r5, #104	; 0x68
 800686a:	4355      	muls	r5, r2
 800686c:	460e      	mov	r6, r1
 800686e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006872:	f000 f8c5 	bl	8006a00 <_malloc_r>
 8006876:	4604      	mov	r4, r0
 8006878:	b140      	cbz	r0, 800688c <__sfmoreglue+0x28>
 800687a:	2100      	movs	r1, #0
 800687c:	e9c0 1600 	strd	r1, r6, [r0]
 8006880:	300c      	adds	r0, #12
 8006882:	60a0      	str	r0, [r4, #8]
 8006884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006888:	f7ff ffa2 	bl	80067d0 <memset>
 800688c:	4620      	mov	r0, r4
 800688e:	bd70      	pop	{r4, r5, r6, pc}

08006890 <__sfp_lock_acquire>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__sfp_lock_acquire+0x8>)
 8006892:	f000 b8b3 	b.w	80069fc <__retarget_lock_acquire_recursive>
 8006896:	bf00      	nop
 8006898:	20000db0 	.word	0x20000db0

0800689c <__sfp_lock_release>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__sfp_lock_release+0x8>)
 800689e:	f000 b8ae 	b.w	80069fe <__retarget_lock_release_recursive>
 80068a2:	bf00      	nop
 80068a4:	20000db0 	.word	0x20000db0

080068a8 <__sinit_lock_acquire>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sinit_lock_acquire+0x8>)
 80068aa:	f000 b8a7 	b.w	80069fc <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000dab 	.word	0x20000dab

080068b4 <__sinit_lock_release>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sinit_lock_release+0x8>)
 80068b6:	f000 b8a2 	b.w	80069fe <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000dab 	.word	0x20000dab

080068c0 <__sinit>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	4604      	mov	r4, r0
 80068c4:	f7ff fff0 	bl	80068a8 <__sinit_lock_acquire>
 80068c8:	69a3      	ldr	r3, [r4, #24]
 80068ca:	b11b      	cbz	r3, 80068d4 <__sinit+0x14>
 80068cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d0:	f7ff bff0 	b.w	80068b4 <__sinit_lock_release>
 80068d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068d8:	6523      	str	r3, [r4, #80]	; 0x50
 80068da:	4b13      	ldr	r3, [pc, #76]	; (8006928 <__sinit+0x68>)
 80068dc:	4a13      	ldr	r2, [pc, #76]	; (800692c <__sinit+0x6c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	bf04      	itt	eq
 80068e6:	2301      	moveq	r3, #1
 80068e8:	61a3      	streq	r3, [r4, #24]
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f820 	bl	8006930 <__sfp>
 80068f0:	6060      	str	r0, [r4, #4]
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f81c 	bl	8006930 <__sfp>
 80068f8:	60a0      	str	r0, [r4, #8]
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 f818 	bl	8006930 <__sfp>
 8006900:	2200      	movs	r2, #0
 8006902:	60e0      	str	r0, [r4, #12]
 8006904:	2104      	movs	r1, #4
 8006906:	6860      	ldr	r0, [r4, #4]
 8006908:	f7ff ff82 	bl	8006810 <std>
 800690c:	68a0      	ldr	r0, [r4, #8]
 800690e:	2201      	movs	r2, #1
 8006910:	2109      	movs	r1, #9
 8006912:	f7ff ff7d 	bl	8006810 <std>
 8006916:	68e0      	ldr	r0, [r4, #12]
 8006918:	2202      	movs	r2, #2
 800691a:	2112      	movs	r1, #18
 800691c:	f7ff ff78 	bl	8006810 <std>
 8006920:	2301      	movs	r3, #1
 8006922:	61a3      	str	r3, [r4, #24]
 8006924:	e7d2      	b.n	80068cc <__sinit+0xc>
 8006926:	bf00      	nop
 8006928:	08009158 	.word	0x08009158
 800692c:	08006859 	.word	0x08006859

08006930 <__sfp>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	4607      	mov	r7, r0
 8006934:	f7ff ffac 	bl	8006890 <__sfp_lock_acquire>
 8006938:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <__sfp+0x84>)
 800693a:	681e      	ldr	r6, [r3, #0]
 800693c:	69b3      	ldr	r3, [r6, #24]
 800693e:	b913      	cbnz	r3, 8006946 <__sfp+0x16>
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff ffbd 	bl	80068c0 <__sinit>
 8006946:	3648      	adds	r6, #72	; 0x48
 8006948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800694c:	3b01      	subs	r3, #1
 800694e:	d503      	bpl.n	8006958 <__sfp+0x28>
 8006950:	6833      	ldr	r3, [r6, #0]
 8006952:	b30b      	cbz	r3, 8006998 <__sfp+0x68>
 8006954:	6836      	ldr	r6, [r6, #0]
 8006956:	e7f7      	b.n	8006948 <__sfp+0x18>
 8006958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800695c:	b9d5      	cbnz	r5, 8006994 <__sfp+0x64>
 800695e:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <__sfp+0x88>)
 8006960:	60e3      	str	r3, [r4, #12]
 8006962:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006966:	6665      	str	r5, [r4, #100]	; 0x64
 8006968:	f000 f847 	bl	80069fa <__retarget_lock_init_recursive>
 800696c:	f7ff ff96 	bl	800689c <__sfp_lock_release>
 8006970:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006974:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006978:	6025      	str	r5, [r4, #0]
 800697a:	61a5      	str	r5, [r4, #24]
 800697c:	2208      	movs	r2, #8
 800697e:	4629      	mov	r1, r5
 8006980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006984:	f7ff ff24 	bl	80067d0 <memset>
 8006988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800698c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006990:	4620      	mov	r0, r4
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006994:	3468      	adds	r4, #104	; 0x68
 8006996:	e7d9      	b.n	800694c <__sfp+0x1c>
 8006998:	2104      	movs	r1, #4
 800699a:	4638      	mov	r0, r7
 800699c:	f7ff ff62 	bl	8006864 <__sfmoreglue>
 80069a0:	4604      	mov	r4, r0
 80069a2:	6030      	str	r0, [r6, #0]
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d1d5      	bne.n	8006954 <__sfp+0x24>
 80069a8:	f7ff ff78 	bl	800689c <__sfp_lock_release>
 80069ac:	230c      	movs	r3, #12
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	e7ee      	b.n	8006990 <__sfp+0x60>
 80069b2:	bf00      	nop
 80069b4:	08009158 	.word	0x08009158
 80069b8:	ffff0001 	.word	0xffff0001

080069bc <_fwalk_reent>:
 80069bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	4606      	mov	r6, r0
 80069c2:	4688      	mov	r8, r1
 80069c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069c8:	2700      	movs	r7, #0
 80069ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ce:	f1b9 0901 	subs.w	r9, r9, #1
 80069d2:	d505      	bpl.n	80069e0 <_fwalk_reent+0x24>
 80069d4:	6824      	ldr	r4, [r4, #0]
 80069d6:	2c00      	cmp	r4, #0
 80069d8:	d1f7      	bne.n	80069ca <_fwalk_reent+0xe>
 80069da:	4638      	mov	r0, r7
 80069dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e0:	89ab      	ldrh	r3, [r5, #12]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d907      	bls.n	80069f6 <_fwalk_reent+0x3a>
 80069e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069ea:	3301      	adds	r3, #1
 80069ec:	d003      	beq.n	80069f6 <_fwalk_reent+0x3a>
 80069ee:	4629      	mov	r1, r5
 80069f0:	4630      	mov	r0, r6
 80069f2:	47c0      	blx	r8
 80069f4:	4307      	orrs	r7, r0
 80069f6:	3568      	adds	r5, #104	; 0x68
 80069f8:	e7e9      	b.n	80069ce <_fwalk_reent+0x12>

080069fa <__retarget_lock_init_recursive>:
 80069fa:	4770      	bx	lr

080069fc <__retarget_lock_acquire_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_release_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <_malloc_r>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	1ccd      	adds	r5, r1, #3
 8006a04:	f025 0503 	bic.w	r5, r5, #3
 8006a08:	3508      	adds	r5, #8
 8006a0a:	2d0c      	cmp	r5, #12
 8006a0c:	bf38      	it	cc
 8006a0e:	250c      	movcc	r5, #12
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	4606      	mov	r6, r0
 8006a14:	db01      	blt.n	8006a1a <_malloc_r+0x1a>
 8006a16:	42a9      	cmp	r1, r5
 8006a18:	d903      	bls.n	8006a22 <_malloc_r+0x22>
 8006a1a:	230c      	movs	r3, #12
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	2000      	movs	r0, #0
 8006a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a22:	f000 fda3 	bl	800756c <__malloc_lock>
 8006a26:	4921      	ldr	r1, [pc, #132]	; (8006aac <_malloc_r+0xac>)
 8006a28:	680a      	ldr	r2, [r1, #0]
 8006a2a:	4614      	mov	r4, r2
 8006a2c:	b99c      	cbnz	r4, 8006a56 <_malloc_r+0x56>
 8006a2e:	4f20      	ldr	r7, [pc, #128]	; (8006ab0 <_malloc_r+0xb0>)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	b923      	cbnz	r3, 8006a3e <_malloc_r+0x3e>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 fb2a 	bl	8007090 <_sbrk_r>
 8006a3c:	6038      	str	r0, [r7, #0]
 8006a3e:	4629      	mov	r1, r5
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 fb25 	bl	8007090 <_sbrk_r>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d123      	bne.n	8006a92 <_malloc_r+0x92>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f000 fd92 	bl	8007578 <__malloc_unlock>
 8006a54:	e7e3      	b.n	8006a1e <_malloc_r+0x1e>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	1b5b      	subs	r3, r3, r5
 8006a5a:	d417      	bmi.n	8006a8c <_malloc_r+0x8c>
 8006a5c:	2b0b      	cmp	r3, #11
 8006a5e:	d903      	bls.n	8006a68 <_malloc_r+0x68>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	441c      	add	r4, r3
 8006a64:	6025      	str	r5, [r4, #0]
 8006a66:	e004      	b.n	8006a72 <_malloc_r+0x72>
 8006a68:	6863      	ldr	r3, [r4, #4]
 8006a6a:	42a2      	cmp	r2, r4
 8006a6c:	bf0c      	ite	eq
 8006a6e:	600b      	streq	r3, [r1, #0]
 8006a70:	6053      	strne	r3, [r2, #4]
 8006a72:	4630      	mov	r0, r6
 8006a74:	f000 fd80 	bl	8007578 <__malloc_unlock>
 8006a78:	f104 000b 	add.w	r0, r4, #11
 8006a7c:	1d23      	adds	r3, r4, #4
 8006a7e:	f020 0007 	bic.w	r0, r0, #7
 8006a82:	1ac2      	subs	r2, r0, r3
 8006a84:	d0cc      	beq.n	8006a20 <_malloc_r+0x20>
 8006a86:	1a1b      	subs	r3, r3, r0
 8006a88:	50a3      	str	r3, [r4, r2]
 8006a8a:	e7c9      	b.n	8006a20 <_malloc_r+0x20>
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	6864      	ldr	r4, [r4, #4]
 8006a90:	e7cc      	b.n	8006a2c <_malloc_r+0x2c>
 8006a92:	1cc4      	adds	r4, r0, #3
 8006a94:	f024 0403 	bic.w	r4, r4, #3
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d0e3      	beq.n	8006a64 <_malloc_r+0x64>
 8006a9c:	1a21      	subs	r1, r4, r0
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f000 faf6 	bl	8007090 <_sbrk_r>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d1dd      	bne.n	8006a64 <_malloc_r+0x64>
 8006aa8:	e7cf      	b.n	8006a4a <_malloc_r+0x4a>
 8006aaa:	bf00      	nop
 8006aac:	20000b50 	.word	0x20000b50
 8006ab0:	20000b54 	.word	0x20000b54

08006ab4 <__sfputc_r>:
 8006ab4:	6893      	ldr	r3, [r2, #8]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	b410      	push	{r4}
 8006abc:	6093      	str	r3, [r2, #8]
 8006abe:	da08      	bge.n	8006ad2 <__sfputc_r+0x1e>
 8006ac0:	6994      	ldr	r4, [r2, #24]
 8006ac2:	42a3      	cmp	r3, r4
 8006ac4:	db01      	blt.n	8006aca <__sfputc_r+0x16>
 8006ac6:	290a      	cmp	r1, #10
 8006ac8:	d103      	bne.n	8006ad2 <__sfputc_r+0x1e>
 8006aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ace:	f000 bb33 	b.w	8007138 <__swbuf_r>
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	1c58      	adds	r0, r3, #1
 8006ad6:	6010      	str	r0, [r2, #0]
 8006ad8:	7019      	strb	r1, [r3, #0]
 8006ada:	4608      	mov	r0, r1
 8006adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <__sfputs_r>:
 8006ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	4614      	mov	r4, r2
 8006aea:	18d5      	adds	r5, r2, r3
 8006aec:	42ac      	cmp	r4, r5
 8006aee:	d101      	bne.n	8006af4 <__sfputs_r+0x12>
 8006af0:	2000      	movs	r0, #0
 8006af2:	e007      	b.n	8006b04 <__sfputs_r+0x22>
 8006af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af8:	463a      	mov	r2, r7
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7ff ffda 	bl	8006ab4 <__sfputc_r>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d1f3      	bne.n	8006aec <__sfputs_r+0xa>
 8006b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b08 <_vfiprintf_r>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	b09d      	sub	sp, #116	; 0x74
 8006b10:	4614      	mov	r4, r2
 8006b12:	4698      	mov	r8, r3
 8006b14:	4606      	mov	r6, r0
 8006b16:	b118      	cbz	r0, 8006b20 <_vfiprintf_r+0x18>
 8006b18:	6983      	ldr	r3, [r0, #24]
 8006b1a:	b90b      	cbnz	r3, 8006b20 <_vfiprintf_r+0x18>
 8006b1c:	f7ff fed0 	bl	80068c0 <__sinit>
 8006b20:	4b89      	ldr	r3, [pc, #548]	; (8006d48 <_vfiprintf_r+0x240>)
 8006b22:	429d      	cmp	r5, r3
 8006b24:	d11b      	bne.n	8006b5e <_vfiprintf_r+0x56>
 8006b26:	6875      	ldr	r5, [r6, #4]
 8006b28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b2a:	07d9      	lsls	r1, r3, #31
 8006b2c:	d405      	bmi.n	8006b3a <_vfiprintf_r+0x32>
 8006b2e:	89ab      	ldrh	r3, [r5, #12]
 8006b30:	059a      	lsls	r2, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_vfiprintf_r+0x32>
 8006b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b36:	f7ff ff61 	bl	80069fc <__retarget_lock_acquire_recursive>
 8006b3a:	89ab      	ldrh	r3, [r5, #12]
 8006b3c:	071b      	lsls	r3, r3, #28
 8006b3e:	d501      	bpl.n	8006b44 <_vfiprintf_r+0x3c>
 8006b40:	692b      	ldr	r3, [r5, #16]
 8006b42:	b9eb      	cbnz	r3, 8006b80 <_vfiprintf_r+0x78>
 8006b44:	4629      	mov	r1, r5
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 fb5a 	bl	8007200 <__swsetup_r>
 8006b4c:	b1c0      	cbz	r0, 8006b80 <_vfiprintf_r+0x78>
 8006b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b50:	07dc      	lsls	r4, r3, #31
 8006b52:	d50e      	bpl.n	8006b72 <_vfiprintf_r+0x6a>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	b01d      	add	sp, #116	; 0x74
 8006b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5e:	4b7b      	ldr	r3, [pc, #492]	; (8006d4c <_vfiprintf_r+0x244>)
 8006b60:	429d      	cmp	r5, r3
 8006b62:	d101      	bne.n	8006b68 <_vfiprintf_r+0x60>
 8006b64:	68b5      	ldr	r5, [r6, #8]
 8006b66:	e7df      	b.n	8006b28 <_vfiprintf_r+0x20>
 8006b68:	4b79      	ldr	r3, [pc, #484]	; (8006d50 <_vfiprintf_r+0x248>)
 8006b6a:	429d      	cmp	r5, r3
 8006b6c:	bf08      	it	eq
 8006b6e:	68f5      	ldreq	r5, [r6, #12]
 8006b70:	e7da      	b.n	8006b28 <_vfiprintf_r+0x20>
 8006b72:	89ab      	ldrh	r3, [r5, #12]
 8006b74:	0598      	lsls	r0, r3, #22
 8006b76:	d4ed      	bmi.n	8006b54 <_vfiprintf_r+0x4c>
 8006b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b7a:	f7ff ff40 	bl	80069fe <__retarget_lock_release_recursive>
 8006b7e:	e7e9      	b.n	8006b54 <_vfiprintf_r+0x4c>
 8006b80:	2300      	movs	r3, #0
 8006b82:	9309      	str	r3, [sp, #36]	; 0x24
 8006b84:	2320      	movs	r3, #32
 8006b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b8e:	2330      	movs	r3, #48	; 0x30
 8006b90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d54 <_vfiprintf_r+0x24c>
 8006b94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b98:	f04f 0901 	mov.w	r9, #1
 8006b9c:	4623      	mov	r3, r4
 8006b9e:	469a      	mov	sl, r3
 8006ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ba4:	b10a      	cbz	r2, 8006baa <_vfiprintf_r+0xa2>
 8006ba6:	2a25      	cmp	r2, #37	; 0x25
 8006ba8:	d1f9      	bne.n	8006b9e <_vfiprintf_r+0x96>
 8006baa:	ebba 0b04 	subs.w	fp, sl, r4
 8006bae:	d00b      	beq.n	8006bc8 <_vfiprintf_r+0xc0>
 8006bb0:	465b      	mov	r3, fp
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff ff93 	bl	8006ae2 <__sfputs_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f000 80aa 	beq.w	8006d16 <_vfiprintf_r+0x20e>
 8006bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc4:	445a      	add	r2, fp
 8006bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80a2 	beq.w	8006d16 <_vfiprintf_r+0x20e>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bdc:	f10a 0a01 	add.w	sl, sl, #1
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	9307      	str	r3, [sp, #28]
 8006be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006be8:	931a      	str	r3, [sp, #104]	; 0x68
 8006bea:	4654      	mov	r4, sl
 8006bec:	2205      	movs	r2, #5
 8006bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf2:	4858      	ldr	r0, [pc, #352]	; (8006d54 <_vfiprintf_r+0x24c>)
 8006bf4:	f7f9 faec 	bl	80001d0 <memchr>
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	b9d8      	cbnz	r0, 8006c34 <_vfiprintf_r+0x12c>
 8006bfc:	06d1      	lsls	r1, r2, #27
 8006bfe:	bf44      	itt	mi
 8006c00:	2320      	movmi	r3, #32
 8006c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c06:	0713      	lsls	r3, r2, #28
 8006c08:	bf44      	itt	mi
 8006c0a:	232b      	movmi	r3, #43	; 0x2b
 8006c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c10:	f89a 3000 	ldrb.w	r3, [sl]
 8006c14:	2b2a      	cmp	r3, #42	; 0x2a
 8006c16:	d015      	beq.n	8006c44 <_vfiprintf_r+0x13c>
 8006c18:	9a07      	ldr	r2, [sp, #28]
 8006c1a:	4654      	mov	r4, sl
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f04f 0c0a 	mov.w	ip, #10
 8006c22:	4621      	mov	r1, r4
 8006c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c28:	3b30      	subs	r3, #48	; 0x30
 8006c2a:	2b09      	cmp	r3, #9
 8006c2c:	d94e      	bls.n	8006ccc <_vfiprintf_r+0x1c4>
 8006c2e:	b1b0      	cbz	r0, 8006c5e <_vfiprintf_r+0x156>
 8006c30:	9207      	str	r2, [sp, #28]
 8006c32:	e014      	b.n	8006c5e <_vfiprintf_r+0x156>
 8006c34:	eba0 0308 	sub.w	r3, r0, r8
 8006c38:	fa09 f303 	lsl.w	r3, r9, r3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	46a2      	mov	sl, r4
 8006c42:	e7d2      	b.n	8006bea <_vfiprintf_r+0xe2>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	1d19      	adds	r1, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	9103      	str	r1, [sp, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bfbb      	ittet	lt
 8006c50:	425b      	neglt	r3, r3
 8006c52:	f042 0202 	orrlt.w	r2, r2, #2
 8006c56:	9307      	strge	r3, [sp, #28]
 8006c58:	9307      	strlt	r3, [sp, #28]
 8006c5a:	bfb8      	it	lt
 8006c5c:	9204      	strlt	r2, [sp, #16]
 8006c5e:	7823      	ldrb	r3, [r4, #0]
 8006c60:	2b2e      	cmp	r3, #46	; 0x2e
 8006c62:	d10c      	bne.n	8006c7e <_vfiprintf_r+0x176>
 8006c64:	7863      	ldrb	r3, [r4, #1]
 8006c66:	2b2a      	cmp	r3, #42	; 0x2a
 8006c68:	d135      	bne.n	8006cd6 <_vfiprintf_r+0x1ce>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	1d1a      	adds	r2, r3, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	9203      	str	r2, [sp, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bfb8      	it	lt
 8006c76:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c7a:	3402      	adds	r4, #2
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d64 <_vfiprintf_r+0x25c>
 8006c82:	7821      	ldrb	r1, [r4, #0]
 8006c84:	2203      	movs	r2, #3
 8006c86:	4650      	mov	r0, sl
 8006c88:	f7f9 faa2 	bl	80001d0 <memchr>
 8006c8c:	b140      	cbz	r0, 8006ca0 <_vfiprintf_r+0x198>
 8006c8e:	2340      	movs	r3, #64	; 0x40
 8006c90:	eba0 000a 	sub.w	r0, r0, sl
 8006c94:	fa03 f000 	lsl.w	r0, r3, r0
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	4303      	orrs	r3, r0
 8006c9c:	3401      	adds	r4, #1
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca4:	482c      	ldr	r0, [pc, #176]	; (8006d58 <_vfiprintf_r+0x250>)
 8006ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006caa:	2206      	movs	r2, #6
 8006cac:	f7f9 fa90 	bl	80001d0 <memchr>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d03f      	beq.n	8006d34 <_vfiprintf_r+0x22c>
 8006cb4:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <_vfiprintf_r+0x254>)
 8006cb6:	bb1b      	cbnz	r3, 8006d00 <_vfiprintf_r+0x1f8>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	3307      	adds	r3, #7
 8006cbc:	f023 0307 	bic.w	r3, r3, #7
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	9303      	str	r3, [sp, #12]
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	443b      	add	r3, r7
 8006cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cca:	e767      	b.n	8006b9c <_vfiprintf_r+0x94>
 8006ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	e7a5      	b.n	8006c22 <_vfiprintf_r+0x11a>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	3401      	adds	r4, #1
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ce8:	3a30      	subs	r2, #48	; 0x30
 8006cea:	2a09      	cmp	r2, #9
 8006cec:	d903      	bls.n	8006cf6 <_vfiprintf_r+0x1ee>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0c5      	beq.n	8006c7e <_vfiprintf_r+0x176>
 8006cf2:	9105      	str	r1, [sp, #20]
 8006cf4:	e7c3      	b.n	8006c7e <_vfiprintf_r+0x176>
 8006cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e7f0      	b.n	8006ce2 <_vfiprintf_r+0x1da>
 8006d00:	ab03      	add	r3, sp, #12
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	462a      	mov	r2, r5
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <_vfiprintf_r+0x258>)
 8006d08:	a904      	add	r1, sp, #16
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f3af 8000 	nop.w
 8006d10:	4607      	mov	r7, r0
 8006d12:	1c78      	adds	r0, r7, #1
 8006d14:	d1d6      	bne.n	8006cc4 <_vfiprintf_r+0x1bc>
 8006d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d18:	07d9      	lsls	r1, r3, #31
 8006d1a:	d405      	bmi.n	8006d28 <_vfiprintf_r+0x220>
 8006d1c:	89ab      	ldrh	r3, [r5, #12]
 8006d1e:	059a      	lsls	r2, r3, #22
 8006d20:	d402      	bmi.n	8006d28 <_vfiprintf_r+0x220>
 8006d22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d24:	f7ff fe6b 	bl	80069fe <__retarget_lock_release_recursive>
 8006d28:	89ab      	ldrh	r3, [r5, #12]
 8006d2a:	065b      	lsls	r3, r3, #25
 8006d2c:	f53f af12 	bmi.w	8006b54 <_vfiprintf_r+0x4c>
 8006d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d32:	e711      	b.n	8006b58 <_vfiprintf_r+0x50>
 8006d34:	ab03      	add	r3, sp, #12
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	462a      	mov	r2, r5
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <_vfiprintf_r+0x258>)
 8006d3c:	a904      	add	r1, sp, #16
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 f880 	bl	8006e44 <_printf_i>
 8006d44:	e7e4      	b.n	8006d10 <_vfiprintf_r+0x208>
 8006d46:	bf00      	nop
 8006d48:	0800917c 	.word	0x0800917c
 8006d4c:	0800919c 	.word	0x0800919c
 8006d50:	0800915c 	.word	0x0800915c
 8006d54:	080091bc 	.word	0x080091bc
 8006d58:	080091c6 	.word	0x080091c6
 8006d5c:	00000000 	.word	0x00000000
 8006d60:	08006ae3 	.word	0x08006ae3
 8006d64:	080091c2 	.word	0x080091c2

08006d68 <_printf_common>:
 8006d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	4699      	mov	r9, r3
 8006d70:	688a      	ldr	r2, [r1, #8]
 8006d72:	690b      	ldr	r3, [r1, #16]
 8006d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	bfb8      	it	lt
 8006d7c:	4613      	movlt	r3, r2
 8006d7e:	6033      	str	r3, [r6, #0]
 8006d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d84:	4607      	mov	r7, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b10a      	cbz	r2, 8006d8e <_printf_common+0x26>
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	0699      	lsls	r1, r3, #26
 8006d92:	bf42      	ittt	mi
 8006d94:	6833      	ldrmi	r3, [r6, #0]
 8006d96:	3302      	addmi	r3, #2
 8006d98:	6033      	strmi	r3, [r6, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	f015 0506 	ands.w	r5, r5, #6
 8006da0:	d106      	bne.n	8006db0 <_printf_common+0x48>
 8006da2:	f104 0a19 	add.w	sl, r4, #25
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	6832      	ldr	r2, [r6, #0]
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	dc26      	bgt.n	8006dfe <_printf_common+0x96>
 8006db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006db4:	1e13      	subs	r3, r2, #0
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	bf18      	it	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	0692      	lsls	r2, r2, #26
 8006dbe:	d42b      	bmi.n	8006e18 <_printf_common+0xb0>
 8006dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d01e      	beq.n	8006e0c <_printf_common+0xa4>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	68e5      	ldr	r5, [r4, #12]
 8006dd2:	6832      	ldr	r2, [r6, #0]
 8006dd4:	f003 0306 	and.w	r3, r3, #6
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	bf08      	it	eq
 8006ddc:	1aad      	subeq	r5, r5, r2
 8006dde:	68a3      	ldr	r3, [r4, #8]
 8006de0:	6922      	ldr	r2, [r4, #16]
 8006de2:	bf0c      	ite	eq
 8006de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006de8:	2500      	movne	r5, #0
 8006dea:	4293      	cmp	r3, r2
 8006dec:	bfc4      	itt	gt
 8006dee:	1a9b      	subgt	r3, r3, r2
 8006df0:	18ed      	addgt	r5, r5, r3
 8006df2:	2600      	movs	r6, #0
 8006df4:	341a      	adds	r4, #26
 8006df6:	42b5      	cmp	r5, r6
 8006df8:	d11a      	bne.n	8006e30 <_printf_common+0xc8>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e008      	b.n	8006e10 <_printf_common+0xa8>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4652      	mov	r2, sl
 8006e02:	4649      	mov	r1, r9
 8006e04:	4638      	mov	r0, r7
 8006e06:	47c0      	blx	r8
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d103      	bne.n	8006e14 <_printf_common+0xac>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e14:	3501      	adds	r5, #1
 8006e16:	e7c6      	b.n	8006da6 <_printf_common+0x3e>
 8006e18:	18e1      	adds	r1, r4, r3
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	2030      	movs	r0, #48	; 0x30
 8006e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e22:	4422      	add	r2, r4
 8006e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	e7c7      	b.n	8006dc0 <_printf_common+0x58>
 8006e30:	2301      	movs	r3, #1
 8006e32:	4622      	mov	r2, r4
 8006e34:	4649      	mov	r1, r9
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c0      	blx	r8
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d0e6      	beq.n	8006e0c <_printf_common+0xa4>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	e7d9      	b.n	8006df6 <_printf_common+0x8e>
	...

08006e44 <_printf_i>:
 8006e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	460c      	mov	r4, r1
 8006e4a:	4691      	mov	r9, r2
 8006e4c:	7e27      	ldrb	r7, [r4, #24]
 8006e4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e50:	2f78      	cmp	r7, #120	; 0x78
 8006e52:	4680      	mov	r8, r0
 8006e54:	469a      	mov	sl, r3
 8006e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e5a:	d807      	bhi.n	8006e6c <_printf_i+0x28>
 8006e5c:	2f62      	cmp	r7, #98	; 0x62
 8006e5e:	d80a      	bhi.n	8006e76 <_printf_i+0x32>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f000 80d8 	beq.w	8007016 <_printf_i+0x1d2>
 8006e66:	2f58      	cmp	r7, #88	; 0x58
 8006e68:	f000 80a3 	beq.w	8006fb2 <_printf_i+0x16e>
 8006e6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e74:	e03a      	b.n	8006eec <_printf_i+0xa8>
 8006e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e7a:	2b15      	cmp	r3, #21
 8006e7c:	d8f6      	bhi.n	8006e6c <_printf_i+0x28>
 8006e7e:	a001      	add	r0, pc, #4	; (adr r0, 8006e84 <_printf_i+0x40>)
 8006e80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006e6d 	.word	0x08006e6d
 8006e90:	08006e6d 	.word	0x08006e6d
 8006e94:	08006e6d 	.word	0x08006e6d
 8006e98:	08006e6d 	.word	0x08006e6d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e6d 	.word	0x08006e6d
 8006ea4:	08006e6d 	.word	0x08006e6d
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006ffd 	.word	0x08006ffd
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	08006fdf 	.word	0x08006fdf
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	0800701f 	.word	0x0800701f
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fe7 	.word	0x08006fe7
 8006edc:	680b      	ldr	r3, [r1, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	600a      	str	r2, [r1, #0]
 8006ee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0a3      	b.n	8007038 <_printf_i+0x1f4>
 8006ef0:	6825      	ldr	r5, [r4, #0]
 8006ef2:	6808      	ldr	r0, [r1, #0]
 8006ef4:	062e      	lsls	r6, r5, #24
 8006ef6:	f100 0304 	add.w	r3, r0, #4
 8006efa:	d50a      	bpl.n	8006f12 <_printf_i+0xce>
 8006efc:	6805      	ldr	r5, [r0, #0]
 8006efe:	600b      	str	r3, [r1, #0]
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	da03      	bge.n	8006f0c <_printf_i+0xc8>
 8006f04:	232d      	movs	r3, #45	; 0x2d
 8006f06:	426d      	negs	r5, r5
 8006f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0c:	485e      	ldr	r0, [pc, #376]	; (8007088 <_printf_i+0x244>)
 8006f0e:	230a      	movs	r3, #10
 8006f10:	e019      	b.n	8006f46 <_printf_i+0x102>
 8006f12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f16:	6805      	ldr	r5, [r0, #0]
 8006f18:	600b      	str	r3, [r1, #0]
 8006f1a:	bf18      	it	ne
 8006f1c:	b22d      	sxthne	r5, r5
 8006f1e:	e7ef      	b.n	8006f00 <_printf_i+0xbc>
 8006f20:	680b      	ldr	r3, [r1, #0]
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	1d18      	adds	r0, r3, #4
 8006f26:	6008      	str	r0, [r1, #0]
 8006f28:	0628      	lsls	r0, r5, #24
 8006f2a:	d501      	bpl.n	8006f30 <_printf_i+0xec>
 8006f2c:	681d      	ldr	r5, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <_printf_i+0xf2>
 8006f30:	0669      	lsls	r1, r5, #25
 8006f32:	d5fb      	bpl.n	8006f2c <_printf_i+0xe8>
 8006f34:	881d      	ldrh	r5, [r3, #0]
 8006f36:	4854      	ldr	r0, [pc, #336]	; (8007088 <_printf_i+0x244>)
 8006f38:	2f6f      	cmp	r7, #111	; 0x6f
 8006f3a:	bf0c      	ite	eq
 8006f3c:	2308      	moveq	r3, #8
 8006f3e:	230a      	movne	r3, #10
 8006f40:	2100      	movs	r1, #0
 8006f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f46:	6866      	ldr	r6, [r4, #4]
 8006f48:	60a6      	str	r6, [r4, #8]
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	bfa2      	ittt	ge
 8006f4e:	6821      	ldrge	r1, [r4, #0]
 8006f50:	f021 0104 	bicge.w	r1, r1, #4
 8006f54:	6021      	strge	r1, [r4, #0]
 8006f56:	b90d      	cbnz	r5, 8006f5c <_printf_i+0x118>
 8006f58:	2e00      	cmp	r6, #0
 8006f5a:	d04d      	beq.n	8006ff8 <_printf_i+0x1b4>
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f62:	fb03 5711 	mls	r7, r3, r1, r5
 8006f66:	5dc7      	ldrb	r7, [r0, r7]
 8006f68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f6c:	462f      	mov	r7, r5
 8006f6e:	42bb      	cmp	r3, r7
 8006f70:	460d      	mov	r5, r1
 8006f72:	d9f4      	bls.n	8006f5e <_printf_i+0x11a>
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d10b      	bne.n	8006f90 <_printf_i+0x14c>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	07df      	lsls	r7, r3, #31
 8006f7c:	d508      	bpl.n	8006f90 <_printf_i+0x14c>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	6861      	ldr	r1, [r4, #4]
 8006f82:	4299      	cmp	r1, r3
 8006f84:	bfde      	ittt	le
 8006f86:	2330      	movle	r3, #48	; 0x30
 8006f88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f90:	1b92      	subs	r2, r2, r6
 8006f92:	6122      	str	r2, [r4, #16]
 8006f94:	f8cd a000 	str.w	sl, [sp]
 8006f98:	464b      	mov	r3, r9
 8006f9a:	aa03      	add	r2, sp, #12
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f7ff fee2 	bl	8006d68 <_printf_common>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d14c      	bne.n	8007042 <_printf_i+0x1fe>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	b004      	add	sp, #16
 8006fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb2:	4835      	ldr	r0, [pc, #212]	; (8007088 <_printf_i+0x244>)
 8006fb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	680e      	ldr	r6, [r1, #0]
 8006fbc:	061f      	lsls	r7, r3, #24
 8006fbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fc2:	600e      	str	r6, [r1, #0]
 8006fc4:	d514      	bpl.n	8006ff0 <_printf_i+0x1ac>
 8006fc6:	07d9      	lsls	r1, r3, #31
 8006fc8:	bf44      	itt	mi
 8006fca:	f043 0320 	orrmi.w	r3, r3, #32
 8006fce:	6023      	strmi	r3, [r4, #0]
 8006fd0:	b91d      	cbnz	r5, 8006fda <_printf_i+0x196>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	f023 0320 	bic.w	r3, r3, #32
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	2310      	movs	r3, #16
 8006fdc:	e7b0      	b.n	8006f40 <_printf_i+0xfc>
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	2378      	movs	r3, #120	; 0x78
 8006fe8:	4828      	ldr	r0, [pc, #160]	; (800708c <_printf_i+0x248>)
 8006fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fee:	e7e3      	b.n	8006fb8 <_printf_i+0x174>
 8006ff0:	065e      	lsls	r6, r3, #25
 8006ff2:	bf48      	it	mi
 8006ff4:	b2ad      	uxthmi	r5, r5
 8006ff6:	e7e6      	b.n	8006fc6 <_printf_i+0x182>
 8006ff8:	4616      	mov	r6, r2
 8006ffa:	e7bb      	b.n	8006f74 <_printf_i+0x130>
 8006ffc:	680b      	ldr	r3, [r1, #0]
 8006ffe:	6826      	ldr	r6, [r4, #0]
 8007000:	6960      	ldr	r0, [r4, #20]
 8007002:	1d1d      	adds	r5, r3, #4
 8007004:	600d      	str	r5, [r1, #0]
 8007006:	0635      	lsls	r5, r6, #24
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	d501      	bpl.n	8007010 <_printf_i+0x1cc>
 800700c:	6018      	str	r0, [r3, #0]
 800700e:	e002      	b.n	8007016 <_printf_i+0x1d2>
 8007010:	0671      	lsls	r1, r6, #25
 8007012:	d5fb      	bpl.n	800700c <_printf_i+0x1c8>
 8007014:	8018      	strh	r0, [r3, #0]
 8007016:	2300      	movs	r3, #0
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	4616      	mov	r6, r2
 800701c:	e7ba      	b.n	8006f94 <_printf_i+0x150>
 800701e:	680b      	ldr	r3, [r1, #0]
 8007020:	1d1a      	adds	r2, r3, #4
 8007022:	600a      	str	r2, [r1, #0]
 8007024:	681e      	ldr	r6, [r3, #0]
 8007026:	6862      	ldr	r2, [r4, #4]
 8007028:	2100      	movs	r1, #0
 800702a:	4630      	mov	r0, r6
 800702c:	f7f9 f8d0 	bl	80001d0 <memchr>
 8007030:	b108      	cbz	r0, 8007036 <_printf_i+0x1f2>
 8007032:	1b80      	subs	r0, r0, r6
 8007034:	6060      	str	r0, [r4, #4]
 8007036:	6863      	ldr	r3, [r4, #4]
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	2300      	movs	r3, #0
 800703c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007040:	e7a8      	b.n	8006f94 <_printf_i+0x150>
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	4632      	mov	r2, r6
 8007046:	4649      	mov	r1, r9
 8007048:	4640      	mov	r0, r8
 800704a:	47d0      	blx	sl
 800704c:	3001      	adds	r0, #1
 800704e:	d0ab      	beq.n	8006fa8 <_printf_i+0x164>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	079b      	lsls	r3, r3, #30
 8007054:	d413      	bmi.n	800707e <_printf_i+0x23a>
 8007056:	68e0      	ldr	r0, [r4, #12]
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	4298      	cmp	r0, r3
 800705c:	bfb8      	it	lt
 800705e:	4618      	movlt	r0, r3
 8007060:	e7a4      	b.n	8006fac <_printf_i+0x168>
 8007062:	2301      	movs	r3, #1
 8007064:	4632      	mov	r2, r6
 8007066:	4649      	mov	r1, r9
 8007068:	4640      	mov	r0, r8
 800706a:	47d0      	blx	sl
 800706c:	3001      	adds	r0, #1
 800706e:	d09b      	beq.n	8006fa8 <_printf_i+0x164>
 8007070:	3501      	adds	r5, #1
 8007072:	68e3      	ldr	r3, [r4, #12]
 8007074:	9903      	ldr	r1, [sp, #12]
 8007076:	1a5b      	subs	r3, r3, r1
 8007078:	42ab      	cmp	r3, r5
 800707a:	dcf2      	bgt.n	8007062 <_printf_i+0x21e>
 800707c:	e7eb      	b.n	8007056 <_printf_i+0x212>
 800707e:	2500      	movs	r5, #0
 8007080:	f104 0619 	add.w	r6, r4, #25
 8007084:	e7f5      	b.n	8007072 <_printf_i+0x22e>
 8007086:	bf00      	nop
 8007088:	080091cd 	.word	0x080091cd
 800708c:	080091de 	.word	0x080091de

08007090 <_sbrk_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d06      	ldr	r5, [pc, #24]	; (80070ac <_sbrk_r+0x1c>)
 8007094:	2300      	movs	r3, #0
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7fb f8f2 	bl	8002284 <_sbrk>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_sbrk_r+0x1a>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_sbrk_r+0x1a>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20000db4 	.word	0x20000db4

080070b0 <__sread>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	460c      	mov	r4, r1
 80070b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b8:	f000 fab4 	bl	8007624 <_read_r>
 80070bc:	2800      	cmp	r0, #0
 80070be:	bfab      	itete	ge
 80070c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070c2:	89a3      	ldrhlt	r3, [r4, #12]
 80070c4:	181b      	addge	r3, r3, r0
 80070c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ca:	bfac      	ite	ge
 80070cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80070ce:	81a3      	strhlt	r3, [r4, #12]
 80070d0:	bd10      	pop	{r4, pc}

080070d2 <__swrite>:
 80070d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d6:	461f      	mov	r7, r3
 80070d8:	898b      	ldrh	r3, [r1, #12]
 80070da:	05db      	lsls	r3, r3, #23
 80070dc:	4605      	mov	r5, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	4616      	mov	r6, r2
 80070e2:	d505      	bpl.n	80070f0 <__swrite+0x1e>
 80070e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e8:	2302      	movs	r3, #2
 80070ea:	2200      	movs	r2, #0
 80070ec:	f000 f9c8 	bl	8007480 <_lseek_r>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070fa:	81a3      	strh	r3, [r4, #12]
 80070fc:	4632      	mov	r2, r6
 80070fe:	463b      	mov	r3, r7
 8007100:	4628      	mov	r0, r5
 8007102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007106:	f000 b869 	b.w	80071dc <_write_r>

0800710a <__sseek>:
 800710a:	b510      	push	{r4, lr}
 800710c:	460c      	mov	r4, r1
 800710e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007112:	f000 f9b5 	bl	8007480 <_lseek_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	bf15      	itete	ne
 800711c:	6560      	strne	r0, [r4, #84]	; 0x54
 800711e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007126:	81a3      	strheq	r3, [r4, #12]
 8007128:	bf18      	it	ne
 800712a:	81a3      	strhne	r3, [r4, #12]
 800712c:	bd10      	pop	{r4, pc}

0800712e <__sclose>:
 800712e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007132:	f000 b8d3 	b.w	80072dc <_close_r>
	...

08007138 <__swbuf_r>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	460e      	mov	r6, r1
 800713c:	4614      	mov	r4, r2
 800713e:	4605      	mov	r5, r0
 8007140:	b118      	cbz	r0, 800714a <__swbuf_r+0x12>
 8007142:	6983      	ldr	r3, [r0, #24]
 8007144:	b90b      	cbnz	r3, 800714a <__swbuf_r+0x12>
 8007146:	f7ff fbbb 	bl	80068c0 <__sinit>
 800714a:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <__swbuf_r+0x98>)
 800714c:	429c      	cmp	r4, r3
 800714e:	d12b      	bne.n	80071a8 <__swbuf_r+0x70>
 8007150:	686c      	ldr	r4, [r5, #4]
 8007152:	69a3      	ldr	r3, [r4, #24]
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	071a      	lsls	r2, r3, #28
 800715a:	d52f      	bpl.n	80071bc <__swbuf_r+0x84>
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	b36b      	cbz	r3, 80071bc <__swbuf_r+0x84>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	6820      	ldr	r0, [r4, #0]
 8007164:	1ac0      	subs	r0, r0, r3
 8007166:	6963      	ldr	r3, [r4, #20]
 8007168:	b2f6      	uxtb	r6, r6
 800716a:	4283      	cmp	r3, r0
 800716c:	4637      	mov	r7, r6
 800716e:	dc04      	bgt.n	800717a <__swbuf_r+0x42>
 8007170:	4621      	mov	r1, r4
 8007172:	4628      	mov	r0, r5
 8007174:	f000 f948 	bl	8007408 <_fflush_r>
 8007178:	bb30      	cbnz	r0, 80071c8 <__swbuf_r+0x90>
 800717a:	68a3      	ldr	r3, [r4, #8]
 800717c:	3b01      	subs	r3, #1
 800717e:	60a3      	str	r3, [r4, #8]
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	6022      	str	r2, [r4, #0]
 8007186:	701e      	strb	r6, [r3, #0]
 8007188:	6963      	ldr	r3, [r4, #20]
 800718a:	3001      	adds	r0, #1
 800718c:	4283      	cmp	r3, r0
 800718e:	d004      	beq.n	800719a <__swbuf_r+0x62>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	07db      	lsls	r3, r3, #31
 8007194:	d506      	bpl.n	80071a4 <__swbuf_r+0x6c>
 8007196:	2e0a      	cmp	r6, #10
 8007198:	d104      	bne.n	80071a4 <__swbuf_r+0x6c>
 800719a:	4621      	mov	r1, r4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 f933 	bl	8007408 <_fflush_r>
 80071a2:	b988      	cbnz	r0, 80071c8 <__swbuf_r+0x90>
 80071a4:	4638      	mov	r0, r7
 80071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <__swbuf_r+0x9c>)
 80071aa:	429c      	cmp	r4, r3
 80071ac:	d101      	bne.n	80071b2 <__swbuf_r+0x7a>
 80071ae:	68ac      	ldr	r4, [r5, #8]
 80071b0:	e7cf      	b.n	8007152 <__swbuf_r+0x1a>
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <__swbuf_r+0xa0>)
 80071b4:	429c      	cmp	r4, r3
 80071b6:	bf08      	it	eq
 80071b8:	68ec      	ldreq	r4, [r5, #12]
 80071ba:	e7ca      	b.n	8007152 <__swbuf_r+0x1a>
 80071bc:	4621      	mov	r1, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 f81e 	bl	8007200 <__swsetup_r>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d0cb      	beq.n	8007160 <__swbuf_r+0x28>
 80071c8:	f04f 37ff 	mov.w	r7, #4294967295
 80071cc:	e7ea      	b.n	80071a4 <__swbuf_r+0x6c>
 80071ce:	bf00      	nop
 80071d0:	0800917c 	.word	0x0800917c
 80071d4:	0800919c 	.word	0x0800919c
 80071d8:	0800915c 	.word	0x0800915c

080071dc <_write_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4d07      	ldr	r5, [pc, #28]	; (80071fc <_write_r+0x20>)
 80071e0:	4604      	mov	r4, r0
 80071e2:	4608      	mov	r0, r1
 80071e4:	4611      	mov	r1, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	602a      	str	r2, [r5, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f7f9 fe77 	bl	8000ede <_write>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_write_r+0x1e>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_write_r+0x1e>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	20000db4 	.word	0x20000db4

08007200 <__swsetup_r>:
 8007200:	4b32      	ldr	r3, [pc, #200]	; (80072cc <__swsetup_r+0xcc>)
 8007202:	b570      	push	{r4, r5, r6, lr}
 8007204:	681d      	ldr	r5, [r3, #0]
 8007206:	4606      	mov	r6, r0
 8007208:	460c      	mov	r4, r1
 800720a:	b125      	cbz	r5, 8007216 <__swsetup_r+0x16>
 800720c:	69ab      	ldr	r3, [r5, #24]
 800720e:	b913      	cbnz	r3, 8007216 <__swsetup_r+0x16>
 8007210:	4628      	mov	r0, r5
 8007212:	f7ff fb55 	bl	80068c0 <__sinit>
 8007216:	4b2e      	ldr	r3, [pc, #184]	; (80072d0 <__swsetup_r+0xd0>)
 8007218:	429c      	cmp	r4, r3
 800721a:	d10f      	bne.n	800723c <__swsetup_r+0x3c>
 800721c:	686c      	ldr	r4, [r5, #4]
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007224:	0719      	lsls	r1, r3, #28
 8007226:	d42c      	bmi.n	8007282 <__swsetup_r+0x82>
 8007228:	06dd      	lsls	r5, r3, #27
 800722a:	d411      	bmi.n	8007250 <__swsetup_r+0x50>
 800722c:	2309      	movs	r3, #9
 800722e:	6033      	str	r3, [r6, #0]
 8007230:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	e03e      	b.n	80072ba <__swsetup_r+0xba>
 800723c:	4b25      	ldr	r3, [pc, #148]	; (80072d4 <__swsetup_r+0xd4>)
 800723e:	429c      	cmp	r4, r3
 8007240:	d101      	bne.n	8007246 <__swsetup_r+0x46>
 8007242:	68ac      	ldr	r4, [r5, #8]
 8007244:	e7eb      	b.n	800721e <__swsetup_r+0x1e>
 8007246:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <__swsetup_r+0xd8>)
 8007248:	429c      	cmp	r4, r3
 800724a:	bf08      	it	eq
 800724c:	68ec      	ldreq	r4, [r5, #12]
 800724e:	e7e6      	b.n	800721e <__swsetup_r+0x1e>
 8007250:	0758      	lsls	r0, r3, #29
 8007252:	d512      	bpl.n	800727a <__swsetup_r+0x7a>
 8007254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007256:	b141      	cbz	r1, 800726a <__swsetup_r+0x6a>
 8007258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800725c:	4299      	cmp	r1, r3
 800725e:	d002      	beq.n	8007266 <__swsetup_r+0x66>
 8007260:	4630      	mov	r0, r6
 8007262:	f000 f98f 	bl	8007584 <_free_r>
 8007266:	2300      	movs	r3, #0
 8007268:	6363      	str	r3, [r4, #52]	; 0x34
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	2300      	movs	r3, #0
 8007274:	6063      	str	r3, [r4, #4]
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	89a3      	ldrh	r3, [r4, #12]
 800727c:	f043 0308 	orr.w	r3, r3, #8
 8007280:	81a3      	strh	r3, [r4, #12]
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	b94b      	cbnz	r3, 800729a <__swsetup_r+0x9a>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800728c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007290:	d003      	beq.n	800729a <__swsetup_r+0x9a>
 8007292:	4621      	mov	r1, r4
 8007294:	4630      	mov	r0, r6
 8007296:	f000 f929 	bl	80074ec <__smakebuf_r>
 800729a:	89a0      	ldrh	r0, [r4, #12]
 800729c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072a0:	f010 0301 	ands.w	r3, r0, #1
 80072a4:	d00a      	beq.n	80072bc <__swsetup_r+0xbc>
 80072a6:	2300      	movs	r3, #0
 80072a8:	60a3      	str	r3, [r4, #8]
 80072aa:	6963      	ldr	r3, [r4, #20]
 80072ac:	425b      	negs	r3, r3
 80072ae:	61a3      	str	r3, [r4, #24]
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	b943      	cbnz	r3, 80072c6 <__swsetup_r+0xc6>
 80072b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072b8:	d1ba      	bne.n	8007230 <__swsetup_r+0x30>
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	0781      	lsls	r1, r0, #30
 80072be:	bf58      	it	pl
 80072c0:	6963      	ldrpl	r3, [r4, #20]
 80072c2:	60a3      	str	r3, [r4, #8]
 80072c4:	e7f4      	b.n	80072b0 <__swsetup_r+0xb0>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e7f7      	b.n	80072ba <__swsetup_r+0xba>
 80072ca:	bf00      	nop
 80072cc:	20000018 	.word	0x20000018
 80072d0:	0800917c 	.word	0x0800917c
 80072d4:	0800919c 	.word	0x0800919c
 80072d8:	0800915c 	.word	0x0800915c

080072dc <_close_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d06      	ldr	r5, [pc, #24]	; (80072f8 <_close_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fa ff97 	bl	800221a <_close>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_close_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_close_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000db4 	.word	0x20000db4

080072fc <__sflush_r>:
 80072fc:	898a      	ldrh	r2, [r1, #12]
 80072fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007302:	4605      	mov	r5, r0
 8007304:	0710      	lsls	r0, r2, #28
 8007306:	460c      	mov	r4, r1
 8007308:	d458      	bmi.n	80073bc <__sflush_r+0xc0>
 800730a:	684b      	ldr	r3, [r1, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	dc05      	bgt.n	800731c <__sflush_r+0x20>
 8007310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	dc02      	bgt.n	800731c <__sflush_r+0x20>
 8007316:	2000      	movs	r0, #0
 8007318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800731e:	2e00      	cmp	r6, #0
 8007320:	d0f9      	beq.n	8007316 <__sflush_r+0x1a>
 8007322:	2300      	movs	r3, #0
 8007324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007328:	682f      	ldr	r7, [r5, #0]
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	d032      	beq.n	8007394 <__sflush_r+0x98>
 800732e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	075a      	lsls	r2, r3, #29
 8007334:	d505      	bpl.n	8007342 <__sflush_r+0x46>
 8007336:	6863      	ldr	r3, [r4, #4]
 8007338:	1ac0      	subs	r0, r0, r3
 800733a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800733c:	b10b      	cbz	r3, 8007342 <__sflush_r+0x46>
 800733e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007340:	1ac0      	subs	r0, r0, r3
 8007342:	2300      	movs	r3, #0
 8007344:	4602      	mov	r2, r0
 8007346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007348:	6a21      	ldr	r1, [r4, #32]
 800734a:	4628      	mov	r0, r5
 800734c:	47b0      	blx	r6
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	d106      	bne.n	8007362 <__sflush_r+0x66>
 8007354:	6829      	ldr	r1, [r5, #0]
 8007356:	291d      	cmp	r1, #29
 8007358:	d82c      	bhi.n	80073b4 <__sflush_r+0xb8>
 800735a:	4a2a      	ldr	r2, [pc, #168]	; (8007404 <__sflush_r+0x108>)
 800735c:	40ca      	lsrs	r2, r1
 800735e:	07d6      	lsls	r6, r2, #31
 8007360:	d528      	bpl.n	80073b4 <__sflush_r+0xb8>
 8007362:	2200      	movs	r2, #0
 8007364:	6062      	str	r2, [r4, #4]
 8007366:	04d9      	lsls	r1, r3, #19
 8007368:	6922      	ldr	r2, [r4, #16]
 800736a:	6022      	str	r2, [r4, #0]
 800736c:	d504      	bpl.n	8007378 <__sflush_r+0x7c>
 800736e:	1c42      	adds	r2, r0, #1
 8007370:	d101      	bne.n	8007376 <__sflush_r+0x7a>
 8007372:	682b      	ldr	r3, [r5, #0]
 8007374:	b903      	cbnz	r3, 8007378 <__sflush_r+0x7c>
 8007376:	6560      	str	r0, [r4, #84]	; 0x54
 8007378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800737a:	602f      	str	r7, [r5, #0]
 800737c:	2900      	cmp	r1, #0
 800737e:	d0ca      	beq.n	8007316 <__sflush_r+0x1a>
 8007380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007384:	4299      	cmp	r1, r3
 8007386:	d002      	beq.n	800738e <__sflush_r+0x92>
 8007388:	4628      	mov	r0, r5
 800738a:	f000 f8fb 	bl	8007584 <_free_r>
 800738e:	2000      	movs	r0, #0
 8007390:	6360      	str	r0, [r4, #52]	; 0x34
 8007392:	e7c1      	b.n	8007318 <__sflush_r+0x1c>
 8007394:	6a21      	ldr	r1, [r4, #32]
 8007396:	2301      	movs	r3, #1
 8007398:	4628      	mov	r0, r5
 800739a:	47b0      	blx	r6
 800739c:	1c41      	adds	r1, r0, #1
 800739e:	d1c7      	bne.n	8007330 <__sflush_r+0x34>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0c4      	beq.n	8007330 <__sflush_r+0x34>
 80073a6:	2b1d      	cmp	r3, #29
 80073a8:	d001      	beq.n	80073ae <__sflush_r+0xb2>
 80073aa:	2b16      	cmp	r3, #22
 80073ac:	d101      	bne.n	80073b2 <__sflush_r+0xb6>
 80073ae:	602f      	str	r7, [r5, #0]
 80073b0:	e7b1      	b.n	8007316 <__sflush_r+0x1a>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	e7ad      	b.n	8007318 <__sflush_r+0x1c>
 80073bc:	690f      	ldr	r7, [r1, #16]
 80073be:	2f00      	cmp	r7, #0
 80073c0:	d0a9      	beq.n	8007316 <__sflush_r+0x1a>
 80073c2:	0793      	lsls	r3, r2, #30
 80073c4:	680e      	ldr	r6, [r1, #0]
 80073c6:	bf08      	it	eq
 80073c8:	694b      	ldreq	r3, [r1, #20]
 80073ca:	600f      	str	r7, [r1, #0]
 80073cc:	bf18      	it	ne
 80073ce:	2300      	movne	r3, #0
 80073d0:	eba6 0807 	sub.w	r8, r6, r7
 80073d4:	608b      	str	r3, [r1, #8]
 80073d6:	f1b8 0f00 	cmp.w	r8, #0
 80073da:	dd9c      	ble.n	8007316 <__sflush_r+0x1a>
 80073dc:	6a21      	ldr	r1, [r4, #32]
 80073de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073e0:	4643      	mov	r3, r8
 80073e2:	463a      	mov	r2, r7
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b0      	blx	r6
 80073e8:	2800      	cmp	r0, #0
 80073ea:	dc06      	bgt.n	80073fa <__sflush_r+0xfe>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	e78e      	b.n	8007318 <__sflush_r+0x1c>
 80073fa:	4407      	add	r7, r0
 80073fc:	eba8 0800 	sub.w	r8, r8, r0
 8007400:	e7e9      	b.n	80073d6 <__sflush_r+0xda>
 8007402:	bf00      	nop
 8007404:	20400001 	.word	0x20400001

08007408 <_fflush_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	690b      	ldr	r3, [r1, #16]
 800740c:	4605      	mov	r5, r0
 800740e:	460c      	mov	r4, r1
 8007410:	b913      	cbnz	r3, 8007418 <_fflush_r+0x10>
 8007412:	2500      	movs	r5, #0
 8007414:	4628      	mov	r0, r5
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	b118      	cbz	r0, 8007422 <_fflush_r+0x1a>
 800741a:	6983      	ldr	r3, [r0, #24]
 800741c:	b90b      	cbnz	r3, 8007422 <_fflush_r+0x1a>
 800741e:	f7ff fa4f 	bl	80068c0 <__sinit>
 8007422:	4b14      	ldr	r3, [pc, #80]	; (8007474 <_fflush_r+0x6c>)
 8007424:	429c      	cmp	r4, r3
 8007426:	d11b      	bne.n	8007460 <_fflush_r+0x58>
 8007428:	686c      	ldr	r4, [r5, #4]
 800742a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0ef      	beq.n	8007412 <_fflush_r+0xa>
 8007432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007434:	07d0      	lsls	r0, r2, #31
 8007436:	d404      	bmi.n	8007442 <_fflush_r+0x3a>
 8007438:	0599      	lsls	r1, r3, #22
 800743a:	d402      	bmi.n	8007442 <_fflush_r+0x3a>
 800743c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800743e:	f7ff fadd 	bl	80069fc <__retarget_lock_acquire_recursive>
 8007442:	4628      	mov	r0, r5
 8007444:	4621      	mov	r1, r4
 8007446:	f7ff ff59 	bl	80072fc <__sflush_r>
 800744a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800744c:	07da      	lsls	r2, r3, #31
 800744e:	4605      	mov	r5, r0
 8007450:	d4e0      	bmi.n	8007414 <_fflush_r+0xc>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	059b      	lsls	r3, r3, #22
 8007456:	d4dd      	bmi.n	8007414 <_fflush_r+0xc>
 8007458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800745a:	f7ff fad0 	bl	80069fe <__retarget_lock_release_recursive>
 800745e:	e7d9      	b.n	8007414 <_fflush_r+0xc>
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <_fflush_r+0x70>)
 8007462:	429c      	cmp	r4, r3
 8007464:	d101      	bne.n	800746a <_fflush_r+0x62>
 8007466:	68ac      	ldr	r4, [r5, #8]
 8007468:	e7df      	b.n	800742a <_fflush_r+0x22>
 800746a:	4b04      	ldr	r3, [pc, #16]	; (800747c <_fflush_r+0x74>)
 800746c:	429c      	cmp	r4, r3
 800746e:	bf08      	it	eq
 8007470:	68ec      	ldreq	r4, [r5, #12]
 8007472:	e7da      	b.n	800742a <_fflush_r+0x22>
 8007474:	0800917c 	.word	0x0800917c
 8007478:	0800919c 	.word	0x0800919c
 800747c:	0800915c 	.word	0x0800915c

08007480 <_lseek_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4d07      	ldr	r5, [pc, #28]	; (80074a0 <_lseek_r+0x20>)
 8007484:	4604      	mov	r4, r0
 8007486:	4608      	mov	r0, r1
 8007488:	4611      	mov	r1, r2
 800748a:	2200      	movs	r2, #0
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	f7fa feea 	bl	8002268 <_lseek>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_lseek_r+0x1e>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_lseek_r+0x1e>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	20000db4 	.word	0x20000db4

080074a4 <__swhatbuf_r>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	460e      	mov	r6, r1
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	2900      	cmp	r1, #0
 80074ae:	b096      	sub	sp, #88	; 0x58
 80074b0:	4614      	mov	r4, r2
 80074b2:	461d      	mov	r5, r3
 80074b4:	da07      	bge.n	80074c6 <__swhatbuf_r+0x22>
 80074b6:	2300      	movs	r3, #0
 80074b8:	602b      	str	r3, [r5, #0]
 80074ba:	89b3      	ldrh	r3, [r6, #12]
 80074bc:	061a      	lsls	r2, r3, #24
 80074be:	d410      	bmi.n	80074e2 <__swhatbuf_r+0x3e>
 80074c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c4:	e00e      	b.n	80074e4 <__swhatbuf_r+0x40>
 80074c6:	466a      	mov	r2, sp
 80074c8:	f000 f8be 	bl	8007648 <_fstat_r>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dbf2      	blt.n	80074b6 <__swhatbuf_r+0x12>
 80074d0:	9a01      	ldr	r2, [sp, #4]
 80074d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074da:	425a      	negs	r2, r3
 80074dc:	415a      	adcs	r2, r3
 80074de:	602a      	str	r2, [r5, #0]
 80074e0:	e7ee      	b.n	80074c0 <__swhatbuf_r+0x1c>
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	2000      	movs	r0, #0
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	b016      	add	sp, #88	; 0x58
 80074ea:	bd70      	pop	{r4, r5, r6, pc}

080074ec <__smakebuf_r>:
 80074ec:	898b      	ldrh	r3, [r1, #12]
 80074ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f0:	079d      	lsls	r5, r3, #30
 80074f2:	4606      	mov	r6, r0
 80074f4:	460c      	mov	r4, r1
 80074f6:	d507      	bpl.n	8007508 <__smakebuf_r+0x1c>
 80074f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	6123      	str	r3, [r4, #16]
 8007500:	2301      	movs	r3, #1
 8007502:	6163      	str	r3, [r4, #20]
 8007504:	b002      	add	sp, #8
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	ab01      	add	r3, sp, #4
 800750a:	466a      	mov	r2, sp
 800750c:	f7ff ffca 	bl	80074a4 <__swhatbuf_r>
 8007510:	9900      	ldr	r1, [sp, #0]
 8007512:	4605      	mov	r5, r0
 8007514:	4630      	mov	r0, r6
 8007516:	f7ff fa73 	bl	8006a00 <_malloc_r>
 800751a:	b948      	cbnz	r0, 8007530 <__smakebuf_r+0x44>
 800751c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d4ef      	bmi.n	8007504 <__smakebuf_r+0x18>
 8007524:	f023 0303 	bic.w	r3, r3, #3
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	e7e3      	b.n	80074f8 <__smakebuf_r+0xc>
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <__smakebuf_r+0x7c>)
 8007532:	62b3      	str	r3, [r6, #40]	; 0x28
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	6020      	str	r0, [r4, #0]
 8007538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	9b00      	ldr	r3, [sp, #0]
 8007540:	6163      	str	r3, [r4, #20]
 8007542:	9b01      	ldr	r3, [sp, #4]
 8007544:	6120      	str	r0, [r4, #16]
 8007546:	b15b      	cbz	r3, 8007560 <__smakebuf_r+0x74>
 8007548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754c:	4630      	mov	r0, r6
 800754e:	f000 f88d 	bl	800766c <_isatty_r>
 8007552:	b128      	cbz	r0, 8007560 <__smakebuf_r+0x74>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	89a0      	ldrh	r0, [r4, #12]
 8007562:	4305      	orrs	r5, r0
 8007564:	81a5      	strh	r5, [r4, #12]
 8007566:	e7cd      	b.n	8007504 <__smakebuf_r+0x18>
 8007568:	08006859 	.word	0x08006859

0800756c <__malloc_lock>:
 800756c:	4801      	ldr	r0, [pc, #4]	; (8007574 <__malloc_lock+0x8>)
 800756e:	f7ff ba45 	b.w	80069fc <__retarget_lock_acquire_recursive>
 8007572:	bf00      	nop
 8007574:	20000dac 	.word	0x20000dac

08007578 <__malloc_unlock>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__malloc_unlock+0x8>)
 800757a:	f7ff ba40 	b.w	80069fe <__retarget_lock_release_recursive>
 800757e:	bf00      	nop
 8007580:	20000dac 	.word	0x20000dac

08007584 <_free_r>:
 8007584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007586:	2900      	cmp	r1, #0
 8007588:	d048      	beq.n	800761c <_free_r+0x98>
 800758a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800758e:	9001      	str	r0, [sp, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f1a1 0404 	sub.w	r4, r1, #4
 8007596:	bfb8      	it	lt
 8007598:	18e4      	addlt	r4, r4, r3
 800759a:	f7ff ffe7 	bl	800756c <__malloc_lock>
 800759e:	4a20      	ldr	r2, [pc, #128]	; (8007620 <_free_r+0x9c>)
 80075a0:	9801      	ldr	r0, [sp, #4]
 80075a2:	6813      	ldr	r3, [r2, #0]
 80075a4:	4615      	mov	r5, r2
 80075a6:	b933      	cbnz	r3, 80075b6 <_free_r+0x32>
 80075a8:	6063      	str	r3, [r4, #4]
 80075aa:	6014      	str	r4, [r2, #0]
 80075ac:	b003      	add	sp, #12
 80075ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b2:	f7ff bfe1 	b.w	8007578 <__malloc_unlock>
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	d90b      	bls.n	80075d2 <_free_r+0x4e>
 80075ba:	6821      	ldr	r1, [r4, #0]
 80075bc:	1862      	adds	r2, r4, r1
 80075be:	4293      	cmp	r3, r2
 80075c0:	bf04      	itt	eq
 80075c2:	681a      	ldreq	r2, [r3, #0]
 80075c4:	685b      	ldreq	r3, [r3, #4]
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	bf04      	itt	eq
 80075ca:	1852      	addeq	r2, r2, r1
 80075cc:	6022      	streq	r2, [r4, #0]
 80075ce:	602c      	str	r4, [r5, #0]
 80075d0:	e7ec      	b.n	80075ac <_free_r+0x28>
 80075d2:	461a      	mov	r2, r3
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	b10b      	cbz	r3, 80075dc <_free_r+0x58>
 80075d8:	42a3      	cmp	r3, r4
 80075da:	d9fa      	bls.n	80075d2 <_free_r+0x4e>
 80075dc:	6811      	ldr	r1, [r2, #0]
 80075de:	1855      	adds	r5, r2, r1
 80075e0:	42a5      	cmp	r5, r4
 80075e2:	d10b      	bne.n	80075fc <_free_r+0x78>
 80075e4:	6824      	ldr	r4, [r4, #0]
 80075e6:	4421      	add	r1, r4
 80075e8:	1854      	adds	r4, r2, r1
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	6011      	str	r1, [r2, #0]
 80075ee:	d1dd      	bne.n	80075ac <_free_r+0x28>
 80075f0:	681c      	ldr	r4, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	6053      	str	r3, [r2, #4]
 80075f6:	4421      	add	r1, r4
 80075f8:	6011      	str	r1, [r2, #0]
 80075fa:	e7d7      	b.n	80075ac <_free_r+0x28>
 80075fc:	d902      	bls.n	8007604 <_free_r+0x80>
 80075fe:	230c      	movs	r3, #12
 8007600:	6003      	str	r3, [r0, #0]
 8007602:	e7d3      	b.n	80075ac <_free_r+0x28>
 8007604:	6825      	ldr	r5, [r4, #0]
 8007606:	1961      	adds	r1, r4, r5
 8007608:	428b      	cmp	r3, r1
 800760a:	bf04      	itt	eq
 800760c:	6819      	ldreq	r1, [r3, #0]
 800760e:	685b      	ldreq	r3, [r3, #4]
 8007610:	6063      	str	r3, [r4, #4]
 8007612:	bf04      	itt	eq
 8007614:	1949      	addeq	r1, r1, r5
 8007616:	6021      	streq	r1, [r4, #0]
 8007618:	6054      	str	r4, [r2, #4]
 800761a:	e7c7      	b.n	80075ac <_free_r+0x28>
 800761c:	b003      	add	sp, #12
 800761e:	bd30      	pop	{r4, r5, pc}
 8007620:	20000b50 	.word	0x20000b50

08007624 <_read_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	4d07      	ldr	r5, [pc, #28]	; (8007644 <_read_r+0x20>)
 8007628:	4604      	mov	r4, r0
 800762a:	4608      	mov	r0, r1
 800762c:	4611      	mov	r1, r2
 800762e:	2200      	movs	r2, #0
 8007630:	602a      	str	r2, [r5, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	f7fa fdd4 	bl	80021e0 <_read>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d102      	bne.n	8007642 <_read_r+0x1e>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b103      	cbz	r3, 8007642 <_read_r+0x1e>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	20000db4 	.word	0x20000db4

08007648 <_fstat_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_fstat_r+0x20>)
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	4611      	mov	r1, r2
 8007654:	602b      	str	r3, [r5, #0]
 8007656:	f7fa fdec 	bl	8002232 <_fstat>
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	d102      	bne.n	8007664 <_fstat_r+0x1c>
 800765e:	682b      	ldr	r3, [r5, #0]
 8007660:	b103      	cbz	r3, 8007664 <_fstat_r+0x1c>
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	bd38      	pop	{r3, r4, r5, pc}
 8007666:	bf00      	nop
 8007668:	20000db4 	.word	0x20000db4

0800766c <_isatty_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d06      	ldr	r5, [pc, #24]	; (8007688 <_isatty_r+0x1c>)
 8007670:	2300      	movs	r3, #0
 8007672:	4604      	mov	r4, r0
 8007674:	4608      	mov	r0, r1
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	f7fa fdeb 	bl	8002252 <_isatty>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_isatty_r+0x1a>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_isatty_r+0x1a>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	20000db4 	.word	0x20000db4
 800768c:	00000000 	.word	0x00000000

08007690 <cos>:
 8007690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007692:	ec53 2b10 	vmov	r2, r3, d0
 8007696:	4824      	ldr	r0, [pc, #144]	; (8007728 <cos+0x98>)
 8007698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800769c:	4281      	cmp	r1, r0
 800769e:	dc06      	bgt.n	80076ae <cos+0x1e>
 80076a0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007720 <cos+0x90>
 80076a4:	f000 fca4 	bl	8007ff0 <__kernel_cos>
 80076a8:	ec51 0b10 	vmov	r0, r1, d0
 80076ac:	e007      	b.n	80076be <cos+0x2e>
 80076ae:	481f      	ldr	r0, [pc, #124]	; (800772c <cos+0x9c>)
 80076b0:	4281      	cmp	r1, r0
 80076b2:	dd09      	ble.n	80076c8 <cos+0x38>
 80076b4:	ee10 0a10 	vmov	r0, s0
 80076b8:	4619      	mov	r1, r3
 80076ba:	f7f8 fddd 	bl	8000278 <__aeabi_dsub>
 80076be:	ec41 0b10 	vmov	d0, r0, r1
 80076c2:	b005      	add	sp, #20
 80076c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80076c8:	4668      	mov	r0, sp
 80076ca:	f000 f9d1 	bl	8007a70 <__ieee754_rem_pio2>
 80076ce:	f000 0003 	and.w	r0, r0, #3
 80076d2:	2801      	cmp	r0, #1
 80076d4:	d007      	beq.n	80076e6 <cos+0x56>
 80076d6:	2802      	cmp	r0, #2
 80076d8:	d012      	beq.n	8007700 <cos+0x70>
 80076da:	b9c0      	cbnz	r0, 800770e <cos+0x7e>
 80076dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076e0:	ed9d 0b00 	vldr	d0, [sp]
 80076e4:	e7de      	b.n	80076a4 <cos+0x14>
 80076e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076ea:	ed9d 0b00 	vldr	d0, [sp]
 80076ee:	f001 f887 	bl	8008800 <__kernel_sin>
 80076f2:	ec53 2b10 	vmov	r2, r3, d0
 80076f6:	ee10 0a10 	vmov	r0, s0
 80076fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80076fe:	e7de      	b.n	80076be <cos+0x2e>
 8007700:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007704:	ed9d 0b00 	vldr	d0, [sp]
 8007708:	f000 fc72 	bl	8007ff0 <__kernel_cos>
 800770c:	e7f1      	b.n	80076f2 <cos+0x62>
 800770e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007712:	ed9d 0b00 	vldr	d0, [sp]
 8007716:	2001      	movs	r0, #1
 8007718:	f001 f872 	bl	8008800 <__kernel_sin>
 800771c:	e7c4      	b.n	80076a8 <cos+0x18>
 800771e:	bf00      	nop
	...
 8007728:	3fe921fb 	.word	0x3fe921fb
 800772c:	7fefffff 	.word	0x7fefffff

08007730 <round>:
 8007730:	ec51 0b10 	vmov	r0, r1, d0
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800773a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800773e:	2c13      	cmp	r4, #19
 8007740:	ee10 2a10 	vmov	r2, s0
 8007744:	460b      	mov	r3, r1
 8007746:	dc19      	bgt.n	800777c <round+0x4c>
 8007748:	2c00      	cmp	r4, #0
 800774a:	da09      	bge.n	8007760 <round+0x30>
 800774c:	3401      	adds	r4, #1
 800774e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007752:	d103      	bne.n	800775c <round+0x2c>
 8007754:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007758:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800775c:	2100      	movs	r1, #0
 800775e:	e028      	b.n	80077b2 <round+0x82>
 8007760:	4d15      	ldr	r5, [pc, #84]	; (80077b8 <round+0x88>)
 8007762:	4125      	asrs	r5, r4
 8007764:	ea01 0605 	and.w	r6, r1, r5
 8007768:	4332      	orrs	r2, r6
 800776a:	d00e      	beq.n	800778a <round+0x5a>
 800776c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007770:	fa42 f404 	asr.w	r4, r2, r4
 8007774:	4423      	add	r3, r4
 8007776:	ea23 0305 	bic.w	r3, r3, r5
 800777a:	e7ef      	b.n	800775c <round+0x2c>
 800777c:	2c33      	cmp	r4, #51	; 0x33
 800777e:	dd07      	ble.n	8007790 <round+0x60>
 8007780:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007784:	d101      	bne.n	800778a <round+0x5a>
 8007786:	f7f8 fd79 	bl	800027c <__adddf3>
 800778a:	ec41 0b10 	vmov	d0, r0, r1
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007794:	f04f 35ff 	mov.w	r5, #4294967295
 8007798:	40f5      	lsrs	r5, r6
 800779a:	4228      	tst	r0, r5
 800779c:	d0f5      	beq.n	800778a <round+0x5a>
 800779e:	2101      	movs	r1, #1
 80077a0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80077a4:	fa01 f404 	lsl.w	r4, r1, r4
 80077a8:	1912      	adds	r2, r2, r4
 80077aa:	bf28      	it	cs
 80077ac:	185b      	addcs	r3, r3, r1
 80077ae:	ea22 0105 	bic.w	r1, r2, r5
 80077b2:	4608      	mov	r0, r1
 80077b4:	4619      	mov	r1, r3
 80077b6:	e7e8      	b.n	800778a <round+0x5a>
 80077b8:	000fffff 	.word	0x000fffff
 80077bc:	00000000 	.word	0x00000000

080077c0 <sin>:
 80077c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077c2:	ec53 2b10 	vmov	r2, r3, d0
 80077c6:	4826      	ldr	r0, [pc, #152]	; (8007860 <sin+0xa0>)
 80077c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80077cc:	4281      	cmp	r1, r0
 80077ce:	dc07      	bgt.n	80077e0 <sin+0x20>
 80077d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007858 <sin+0x98>
 80077d4:	2000      	movs	r0, #0
 80077d6:	f001 f813 	bl	8008800 <__kernel_sin>
 80077da:	ec51 0b10 	vmov	r0, r1, d0
 80077de:	e007      	b.n	80077f0 <sin+0x30>
 80077e0:	4820      	ldr	r0, [pc, #128]	; (8007864 <sin+0xa4>)
 80077e2:	4281      	cmp	r1, r0
 80077e4:	dd09      	ble.n	80077fa <sin+0x3a>
 80077e6:	ee10 0a10 	vmov	r0, s0
 80077ea:	4619      	mov	r1, r3
 80077ec:	f7f8 fd44 	bl	8000278 <__aeabi_dsub>
 80077f0:	ec41 0b10 	vmov	d0, r0, r1
 80077f4:	b005      	add	sp, #20
 80077f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80077fa:	4668      	mov	r0, sp
 80077fc:	f000 f938 	bl	8007a70 <__ieee754_rem_pio2>
 8007800:	f000 0003 	and.w	r0, r0, #3
 8007804:	2801      	cmp	r0, #1
 8007806:	d008      	beq.n	800781a <sin+0x5a>
 8007808:	2802      	cmp	r0, #2
 800780a:	d00d      	beq.n	8007828 <sin+0x68>
 800780c:	b9d0      	cbnz	r0, 8007844 <sin+0x84>
 800780e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007812:	ed9d 0b00 	vldr	d0, [sp]
 8007816:	2001      	movs	r0, #1
 8007818:	e7dd      	b.n	80077d6 <sin+0x16>
 800781a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800781e:	ed9d 0b00 	vldr	d0, [sp]
 8007822:	f000 fbe5 	bl	8007ff0 <__kernel_cos>
 8007826:	e7d8      	b.n	80077da <sin+0x1a>
 8007828:	ed9d 1b02 	vldr	d1, [sp, #8]
 800782c:	ed9d 0b00 	vldr	d0, [sp]
 8007830:	2001      	movs	r0, #1
 8007832:	f000 ffe5 	bl	8008800 <__kernel_sin>
 8007836:	ec53 2b10 	vmov	r2, r3, d0
 800783a:	ee10 0a10 	vmov	r0, s0
 800783e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007842:	e7d5      	b.n	80077f0 <sin+0x30>
 8007844:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007848:	ed9d 0b00 	vldr	d0, [sp]
 800784c:	f000 fbd0 	bl	8007ff0 <__kernel_cos>
 8007850:	e7f1      	b.n	8007836 <sin+0x76>
 8007852:	bf00      	nop
 8007854:	f3af 8000 	nop.w
	...
 8007860:	3fe921fb 	.word	0x3fe921fb
 8007864:	7fefffff 	.word	0x7fefffff

08007868 <atan2>:
 8007868:	f000 b836 	b.w	80078d8 <__ieee754_atan2>

0800786c <sqrt>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	ed2d 8b02 	vpush	{d8}
 8007872:	ec55 4b10 	vmov	r4, r5, d0
 8007876:	f000 fb05 	bl	8007e84 <__ieee754_sqrt>
 800787a:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <sqrt+0x64>)
 800787c:	eeb0 8a40 	vmov.f32	s16, s0
 8007880:	eef0 8a60 	vmov.f32	s17, s1
 8007884:	f993 3000 	ldrsb.w	r3, [r3]
 8007888:	3301      	adds	r3, #1
 800788a:	d019      	beq.n	80078c0 <sqrt+0x54>
 800788c:	4622      	mov	r2, r4
 800788e:	462b      	mov	r3, r5
 8007890:	4620      	mov	r0, r4
 8007892:	4629      	mov	r1, r5
 8007894:	f7f9 f942 	bl	8000b1c <__aeabi_dcmpun>
 8007898:	b990      	cbnz	r0, 80078c0 <sqrt+0x54>
 800789a:	2200      	movs	r2, #0
 800789c:	2300      	movs	r3, #0
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7f9 f913 	bl	8000acc <__aeabi_dcmplt>
 80078a6:	b158      	cbz	r0, 80078c0 <sqrt+0x54>
 80078a8:	f7fe ff5a 	bl	8006760 <__errno>
 80078ac:	2321      	movs	r3, #33	; 0x21
 80078ae:	6003      	str	r3, [r0, #0]
 80078b0:	2200      	movs	r2, #0
 80078b2:	2300      	movs	r3, #0
 80078b4:	4610      	mov	r0, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	f7f8 ffc0 	bl	800083c <__aeabi_ddiv>
 80078bc:	ec41 0b18 	vmov	d8, r0, r1
 80078c0:	eeb0 0a48 	vmov.f32	s0, s16
 80078c4:	eef0 0a68 	vmov.f32	s1, s17
 80078c8:	ecbd 8b02 	vpop	{d8}
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	bf00      	nop
 80078d0:	2000007c 	.word	0x2000007c
 80078d4:	00000000 	.word	0x00000000

080078d8 <__ieee754_atan2>:
 80078d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078dc:	ec57 6b11 	vmov	r6, r7, d1
 80078e0:	4273      	negs	r3, r6
 80078e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007a68 <__ieee754_atan2+0x190>
 80078e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80078ea:	4333      	orrs	r3, r6
 80078ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80078f0:	4573      	cmp	r3, lr
 80078f2:	ec51 0b10 	vmov	r0, r1, d0
 80078f6:	ee11 8a10 	vmov	r8, s2
 80078fa:	d80a      	bhi.n	8007912 <__ieee754_atan2+0x3a>
 80078fc:	4244      	negs	r4, r0
 80078fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007902:	4304      	orrs	r4, r0
 8007904:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007908:	4574      	cmp	r4, lr
 800790a:	ee10 9a10 	vmov	r9, s0
 800790e:	468c      	mov	ip, r1
 8007910:	d907      	bls.n	8007922 <__ieee754_atan2+0x4a>
 8007912:	4632      	mov	r2, r6
 8007914:	463b      	mov	r3, r7
 8007916:	f7f8 fcb1 	bl	800027c <__adddf3>
 800791a:	ec41 0b10 	vmov	d0, r0, r1
 800791e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007922:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007926:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800792a:	4334      	orrs	r4, r6
 800792c:	d103      	bne.n	8007936 <__ieee754_atan2+0x5e>
 800792e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007932:	f001 b825 	b.w	8008980 <atan>
 8007936:	17bc      	asrs	r4, r7, #30
 8007938:	f004 0402 	and.w	r4, r4, #2
 800793c:	ea53 0909 	orrs.w	r9, r3, r9
 8007940:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007944:	d107      	bne.n	8007956 <__ieee754_atan2+0x7e>
 8007946:	2c02      	cmp	r4, #2
 8007948:	d060      	beq.n	8007a0c <__ieee754_atan2+0x134>
 800794a:	2c03      	cmp	r4, #3
 800794c:	d1e5      	bne.n	800791a <__ieee754_atan2+0x42>
 800794e:	a142      	add	r1, pc, #264	; (adr r1, 8007a58 <__ieee754_atan2+0x180>)
 8007950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007954:	e7e1      	b.n	800791a <__ieee754_atan2+0x42>
 8007956:	ea52 0808 	orrs.w	r8, r2, r8
 800795a:	d106      	bne.n	800796a <__ieee754_atan2+0x92>
 800795c:	f1bc 0f00 	cmp.w	ip, #0
 8007960:	da5f      	bge.n	8007a22 <__ieee754_atan2+0x14a>
 8007962:	a13f      	add	r1, pc, #252	; (adr r1, 8007a60 <__ieee754_atan2+0x188>)
 8007964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007968:	e7d7      	b.n	800791a <__ieee754_atan2+0x42>
 800796a:	4572      	cmp	r2, lr
 800796c:	d10f      	bne.n	800798e <__ieee754_atan2+0xb6>
 800796e:	4293      	cmp	r3, r2
 8007970:	f104 34ff 	add.w	r4, r4, #4294967295
 8007974:	d107      	bne.n	8007986 <__ieee754_atan2+0xae>
 8007976:	2c02      	cmp	r4, #2
 8007978:	d84c      	bhi.n	8007a14 <__ieee754_atan2+0x13c>
 800797a:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <__ieee754_atan2+0x178>)
 800797c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007980:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007984:	e7c9      	b.n	800791a <__ieee754_atan2+0x42>
 8007986:	2c02      	cmp	r4, #2
 8007988:	d848      	bhi.n	8007a1c <__ieee754_atan2+0x144>
 800798a:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <__ieee754_atan2+0x17c>)
 800798c:	e7f6      	b.n	800797c <__ieee754_atan2+0xa4>
 800798e:	4573      	cmp	r3, lr
 8007990:	d0e4      	beq.n	800795c <__ieee754_atan2+0x84>
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007998:	ea4f 5223 	mov.w	r2, r3, asr #20
 800799c:	da1e      	bge.n	80079dc <__ieee754_atan2+0x104>
 800799e:	2f00      	cmp	r7, #0
 80079a0:	da01      	bge.n	80079a6 <__ieee754_atan2+0xce>
 80079a2:	323c      	adds	r2, #60	; 0x3c
 80079a4:	db1e      	blt.n	80079e4 <__ieee754_atan2+0x10c>
 80079a6:	4632      	mov	r2, r6
 80079a8:	463b      	mov	r3, r7
 80079aa:	f7f8 ff47 	bl	800083c <__aeabi_ddiv>
 80079ae:	ec41 0b10 	vmov	d0, r0, r1
 80079b2:	f001 f985 	bl	8008cc0 <fabs>
 80079b6:	f000 ffe3 	bl	8008980 <atan>
 80079ba:	ec51 0b10 	vmov	r0, r1, d0
 80079be:	2c01      	cmp	r4, #1
 80079c0:	d013      	beq.n	80079ea <__ieee754_atan2+0x112>
 80079c2:	2c02      	cmp	r4, #2
 80079c4:	d015      	beq.n	80079f2 <__ieee754_atan2+0x11a>
 80079c6:	2c00      	cmp	r4, #0
 80079c8:	d0a7      	beq.n	800791a <__ieee754_atan2+0x42>
 80079ca:	a319      	add	r3, pc, #100	; (adr r3, 8007a30 <__ieee754_atan2+0x158>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f7f8 fc52 	bl	8000278 <__aeabi_dsub>
 80079d4:	a318      	add	r3, pc, #96	; (adr r3, 8007a38 <__ieee754_atan2+0x160>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	e014      	b.n	8007a06 <__ieee754_atan2+0x12e>
 80079dc:	a118      	add	r1, pc, #96	; (adr r1, 8007a40 <__ieee754_atan2+0x168>)
 80079de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079e2:	e7ec      	b.n	80079be <__ieee754_atan2+0xe6>
 80079e4:	2000      	movs	r0, #0
 80079e6:	2100      	movs	r1, #0
 80079e8:	e7e9      	b.n	80079be <__ieee754_atan2+0xe6>
 80079ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079ee:	4619      	mov	r1, r3
 80079f0:	e793      	b.n	800791a <__ieee754_atan2+0x42>
 80079f2:	a30f      	add	r3, pc, #60	; (adr r3, 8007a30 <__ieee754_atan2+0x158>)
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	f7f8 fc3e 	bl	8000278 <__aeabi_dsub>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	a10d      	add	r1, pc, #52	; (adr r1, 8007a38 <__ieee754_atan2+0x160>)
 8007a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a06:	f7f8 fc37 	bl	8000278 <__aeabi_dsub>
 8007a0a:	e786      	b.n	800791a <__ieee754_atan2+0x42>
 8007a0c:	a10a      	add	r1, pc, #40	; (adr r1, 8007a38 <__ieee754_atan2+0x160>)
 8007a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a12:	e782      	b.n	800791a <__ieee754_atan2+0x42>
 8007a14:	a10c      	add	r1, pc, #48	; (adr r1, 8007a48 <__ieee754_atan2+0x170>)
 8007a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a1a:	e77e      	b.n	800791a <__ieee754_atan2+0x42>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	2100      	movs	r1, #0
 8007a20:	e77b      	b.n	800791a <__ieee754_atan2+0x42>
 8007a22:	a107      	add	r1, pc, #28	; (adr r1, 8007a40 <__ieee754_atan2+0x168>)
 8007a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a28:	e777      	b.n	800791a <__ieee754_atan2+0x42>
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w
 8007a30:	33145c07 	.word	0x33145c07
 8007a34:	3ca1a626 	.word	0x3ca1a626
 8007a38:	54442d18 	.word	0x54442d18
 8007a3c:	400921fb 	.word	0x400921fb
 8007a40:	54442d18 	.word	0x54442d18
 8007a44:	3ff921fb 	.word	0x3ff921fb
 8007a48:	54442d18 	.word	0x54442d18
 8007a4c:	3fe921fb 	.word	0x3fe921fb
 8007a50:	080091f0 	.word	0x080091f0
 8007a54:	08009208 	.word	0x08009208
 8007a58:	54442d18 	.word	0x54442d18
 8007a5c:	c00921fb 	.word	0xc00921fb
 8007a60:	54442d18 	.word	0x54442d18
 8007a64:	bff921fb 	.word	0xbff921fb
 8007a68:	7ff00000 	.word	0x7ff00000
 8007a6c:	00000000 	.word	0x00000000

08007a70 <__ieee754_rem_pio2>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	ed2d 8b02 	vpush	{d8}
 8007a78:	ec55 4b10 	vmov	r4, r5, d0
 8007a7c:	4bca      	ldr	r3, [pc, #808]	; (8007da8 <__ieee754_rem_pio2+0x338>)
 8007a7e:	b08b      	sub	sp, #44	; 0x2c
 8007a80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007a84:	4598      	cmp	r8, r3
 8007a86:	4682      	mov	sl, r0
 8007a88:	9502      	str	r5, [sp, #8]
 8007a8a:	dc08      	bgt.n	8007a9e <__ieee754_rem_pio2+0x2e>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2300      	movs	r3, #0
 8007a90:	ed80 0b00 	vstr	d0, [r0]
 8007a94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007a98:	f04f 0b00 	mov.w	fp, #0
 8007a9c:	e028      	b.n	8007af0 <__ieee754_rem_pio2+0x80>
 8007a9e:	4bc3      	ldr	r3, [pc, #780]	; (8007dac <__ieee754_rem_pio2+0x33c>)
 8007aa0:	4598      	cmp	r8, r3
 8007aa2:	dc78      	bgt.n	8007b96 <__ieee754_rem_pio2+0x126>
 8007aa4:	9b02      	ldr	r3, [sp, #8]
 8007aa6:	4ec2      	ldr	r6, [pc, #776]	; (8007db0 <__ieee754_rem_pio2+0x340>)
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	ee10 0a10 	vmov	r0, s0
 8007aae:	a3b0      	add	r3, pc, #704	; (adr r3, 8007d70 <__ieee754_rem_pio2+0x300>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	dd39      	ble.n	8007b2c <__ieee754_rem_pio2+0xbc>
 8007ab8:	f7f8 fbde 	bl	8000278 <__aeabi_dsub>
 8007abc:	45b0      	cmp	r8, r6
 8007abe:	4604      	mov	r4, r0
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	d01b      	beq.n	8007afc <__ieee754_rem_pio2+0x8c>
 8007ac4:	a3ac      	add	r3, pc, #688	; (adr r3, 8007d78 <__ieee754_rem_pio2+0x308>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f7f8 fbd5 	bl	8000278 <__aeabi_dsub>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	e9ca 2300 	strd	r2, r3, [sl]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 fbcd 	bl	8000278 <__aeabi_dsub>
 8007ade:	a3a6      	add	r3, pc, #664	; (adr r3, 8007d78 <__ieee754_rem_pio2+0x308>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 fbc8 	bl	8000278 <__aeabi_dsub>
 8007ae8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007aec:	f04f 0b01 	mov.w	fp, #1
 8007af0:	4658      	mov	r0, fp
 8007af2:	b00b      	add	sp, #44	; 0x2c
 8007af4:	ecbd 8b02 	vpop	{d8}
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x310>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fbb9 	bl	8000278 <__aeabi_dsub>
 8007b06:	a3a0      	add	r3, pc, #640	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x318>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	460d      	mov	r5, r1
 8007b10:	f7f8 fbb2 	bl	8000278 <__aeabi_dsub>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	e9ca 2300 	strd	r2, r3, [sl]
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 fbaa 	bl	8000278 <__aeabi_dsub>
 8007b24:	a398      	add	r3, pc, #608	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x318>)
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	e7db      	b.n	8007ae4 <__ieee754_rem_pio2+0x74>
 8007b2c:	f7f8 fba6 	bl	800027c <__adddf3>
 8007b30:	45b0      	cmp	r8, r6
 8007b32:	4604      	mov	r4, r0
 8007b34:	460d      	mov	r5, r1
 8007b36:	d016      	beq.n	8007b66 <__ieee754_rem_pio2+0xf6>
 8007b38:	a38f      	add	r3, pc, #572	; (adr r3, 8007d78 <__ieee754_rem_pio2+0x308>)
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f7f8 fb9d 	bl	800027c <__adddf3>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	e9ca 2300 	strd	r2, r3, [sl]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7f8 fb93 	bl	8000278 <__aeabi_dsub>
 8007b52:	a389      	add	r3, pc, #548	; (adr r3, 8007d78 <__ieee754_rem_pio2+0x308>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fb90 	bl	800027c <__adddf3>
 8007b5c:	f04f 3bff 	mov.w	fp, #4294967295
 8007b60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b64:	e7c4      	b.n	8007af0 <__ieee754_rem_pio2+0x80>
 8007b66:	a386      	add	r3, pc, #536	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x310>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f7f8 fb86 	bl	800027c <__adddf3>
 8007b70:	a385      	add	r3, pc, #532	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x318>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	4604      	mov	r4, r0
 8007b78:	460d      	mov	r5, r1
 8007b7a:	f7f8 fb7f 	bl	800027c <__adddf3>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	e9ca 2300 	strd	r2, r3, [sl]
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 fb75 	bl	8000278 <__aeabi_dsub>
 8007b8e:	a37e      	add	r3, pc, #504	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x318>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	e7e0      	b.n	8007b58 <__ieee754_rem_pio2+0xe8>
 8007b96:	4b87      	ldr	r3, [pc, #540]	; (8007db4 <__ieee754_rem_pio2+0x344>)
 8007b98:	4598      	cmp	r8, r3
 8007b9a:	f300 80d9 	bgt.w	8007d50 <__ieee754_rem_pio2+0x2e0>
 8007b9e:	f001 f88f 	bl	8008cc0 <fabs>
 8007ba2:	ec55 4b10 	vmov	r4, r5, d0
 8007ba6:	ee10 0a10 	vmov	r0, s0
 8007baa:	a379      	add	r3, pc, #484	; (adr r3, 8007d90 <__ieee754_rem_pio2+0x320>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7f8 fd19 	bl	80005e8 <__aeabi_dmul>
 8007bb6:	4b80      	ldr	r3, [pc, #512]	; (8007db8 <__ieee754_rem_pio2+0x348>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7f8 fb5f 	bl	800027c <__adddf3>
 8007bbe:	f7f8 ffc3 	bl	8000b48 <__aeabi_d2iz>
 8007bc2:	4683      	mov	fp, r0
 8007bc4:	f7f8 fca6 	bl	8000514 <__aeabi_i2d>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	ec43 2b18 	vmov	d8, r2, r3
 8007bd0:	a367      	add	r3, pc, #412	; (adr r3, 8007d70 <__ieee754_rem_pio2+0x300>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fd07 	bl	80005e8 <__aeabi_dmul>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7f8 fb49 	bl	8000278 <__aeabi_dsub>
 8007be6:	a364      	add	r3, pc, #400	; (adr r3, 8007d78 <__ieee754_rem_pio2+0x308>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	4606      	mov	r6, r0
 8007bee:	460f      	mov	r7, r1
 8007bf0:	ec51 0b18 	vmov	r0, r1, d8
 8007bf4:	f7f8 fcf8 	bl	80005e8 <__aeabi_dmul>
 8007bf8:	f1bb 0f1f 	cmp.w	fp, #31
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	460d      	mov	r5, r1
 8007c00:	dc0d      	bgt.n	8007c1e <__ieee754_rem_pio2+0x1ae>
 8007c02:	4b6e      	ldr	r3, [pc, #440]	; (8007dbc <__ieee754_rem_pio2+0x34c>)
 8007c04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	4543      	cmp	r3, r8
 8007c0e:	d006      	beq.n	8007c1e <__ieee754_rem_pio2+0x1ae>
 8007c10:	4622      	mov	r2, r4
 8007c12:	462b      	mov	r3, r5
 8007c14:	4630      	mov	r0, r6
 8007c16:	4639      	mov	r1, r7
 8007c18:	f7f8 fb2e 	bl	8000278 <__aeabi_dsub>
 8007c1c:	e00f      	b.n	8007c3e <__ieee754_rem_pio2+0x1ce>
 8007c1e:	462b      	mov	r3, r5
 8007c20:	4622      	mov	r2, r4
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 fb27 	bl	8000278 <__aeabi_dsub>
 8007c2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007c38:	f1b8 0f10 	cmp.w	r8, #16
 8007c3c:	dc02      	bgt.n	8007c44 <__ieee754_rem_pio2+0x1d4>
 8007c3e:	e9ca 0100 	strd	r0, r1, [sl]
 8007c42:	e039      	b.n	8007cb8 <__ieee754_rem_pio2+0x248>
 8007c44:	a34e      	add	r3, pc, #312	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x310>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	ec51 0b18 	vmov	r0, r1, d8
 8007c4e:	f7f8 fccb 	bl	80005e8 <__aeabi_dmul>
 8007c52:	4604      	mov	r4, r0
 8007c54:	460d      	mov	r5, r1
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 fb0b 	bl	8000278 <__aeabi_dsub>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fb03 	bl	8000278 <__aeabi_dsub>
 8007c72:	4622      	mov	r2, r4
 8007c74:	462b      	mov	r3, r5
 8007c76:	f7f8 faff 	bl	8000278 <__aeabi_dsub>
 8007c7a:	a343      	add	r3, pc, #268	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x318>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	4604      	mov	r4, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	ec51 0b18 	vmov	r0, r1, d8
 8007c88:	f7f8 fcae 	bl	80005e8 <__aeabi_dmul>
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	462b      	mov	r3, r5
 8007c90:	f7f8 faf2 	bl	8000278 <__aeabi_dsub>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	f7f8 faea 	bl	8000278 <__aeabi_dsub>
 8007ca4:	9a03      	ldr	r2, [sp, #12]
 8007ca6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b31      	cmp	r3, #49	; 0x31
 8007cae:	dc24      	bgt.n	8007cfa <__ieee754_rem_pio2+0x28a>
 8007cb0:	e9ca 0100 	strd	r0, r1, [sl]
 8007cb4:	4646      	mov	r6, r8
 8007cb6:	464f      	mov	r7, r9
 8007cb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4642      	mov	r2, r8
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 fad8 	bl	8000278 <__aeabi_dsub>
 8007cc8:	462b      	mov	r3, r5
 8007cca:	4622      	mov	r2, r4
 8007ccc:	f7f8 fad4 	bl	8000278 <__aeabi_dsub>
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cd8:	f6bf af0a 	bge.w	8007af0 <__ieee754_rem_pio2+0x80>
 8007cdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ce0:	f8ca 3004 	str.w	r3, [sl, #4]
 8007ce4:	f8ca 8000 	str.w	r8, [sl]
 8007ce8:	f8ca 0008 	str.w	r0, [sl, #8]
 8007cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cf0:	f8ca 300c 	str.w	r3, [sl, #12]
 8007cf4:	f1cb 0b00 	rsb	fp, fp, #0
 8007cf8:	e6fa      	b.n	8007af0 <__ieee754_rem_pio2+0x80>
 8007cfa:	a327      	add	r3, pc, #156	; (adr r3, 8007d98 <__ieee754_rem_pio2+0x328>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	ec51 0b18 	vmov	r0, r1, d8
 8007d04:	f7f8 fc70 	bl	80005e8 <__aeabi_dmul>
 8007d08:	4604      	mov	r4, r0
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 fab0 	bl	8000278 <__aeabi_dsub>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	460f      	mov	r7, r1
 8007d20:	4640      	mov	r0, r8
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 faa8 	bl	8000278 <__aeabi_dsub>
 8007d28:	4622      	mov	r2, r4
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	f7f8 faa4 	bl	8000278 <__aeabi_dsub>
 8007d30:	a31b      	add	r3, pc, #108	; (adr r3, 8007da0 <__ieee754_rem_pio2+0x330>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	ec51 0b18 	vmov	r0, r1, d8
 8007d3e:	f7f8 fc53 	bl	80005e8 <__aeabi_dmul>
 8007d42:	4622      	mov	r2, r4
 8007d44:	462b      	mov	r3, r5
 8007d46:	f7f8 fa97 	bl	8000278 <__aeabi_dsub>
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	e75f      	b.n	8007c10 <__ieee754_rem_pio2+0x1a0>
 8007d50:	4b1b      	ldr	r3, [pc, #108]	; (8007dc0 <__ieee754_rem_pio2+0x350>)
 8007d52:	4598      	cmp	r8, r3
 8007d54:	dd36      	ble.n	8007dc4 <__ieee754_rem_pio2+0x354>
 8007d56:	ee10 2a10 	vmov	r2, s0
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7f8 fa8a 	bl	8000278 <__aeabi_dsub>
 8007d64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d68:	e9ca 0100 	strd	r0, r1, [sl]
 8007d6c:	e694      	b.n	8007a98 <__ieee754_rem_pio2+0x28>
 8007d6e:	bf00      	nop
 8007d70:	54400000 	.word	0x54400000
 8007d74:	3ff921fb 	.word	0x3ff921fb
 8007d78:	1a626331 	.word	0x1a626331
 8007d7c:	3dd0b461 	.word	0x3dd0b461
 8007d80:	1a600000 	.word	0x1a600000
 8007d84:	3dd0b461 	.word	0x3dd0b461
 8007d88:	2e037073 	.word	0x2e037073
 8007d8c:	3ba3198a 	.word	0x3ba3198a
 8007d90:	6dc9c883 	.word	0x6dc9c883
 8007d94:	3fe45f30 	.word	0x3fe45f30
 8007d98:	2e000000 	.word	0x2e000000
 8007d9c:	3ba3198a 	.word	0x3ba3198a
 8007da0:	252049c1 	.word	0x252049c1
 8007da4:	397b839a 	.word	0x397b839a
 8007da8:	3fe921fb 	.word	0x3fe921fb
 8007dac:	4002d97b 	.word	0x4002d97b
 8007db0:	3ff921fb 	.word	0x3ff921fb
 8007db4:	413921fb 	.word	0x413921fb
 8007db8:	3fe00000 	.word	0x3fe00000
 8007dbc:	08009220 	.word	0x08009220
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007dc8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007dcc:	ee10 0a10 	vmov	r0, s0
 8007dd0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007dd4:	ee10 6a10 	vmov	r6, s0
 8007dd8:	460f      	mov	r7, r1
 8007dda:	f7f8 feb5 	bl	8000b48 <__aeabi_d2iz>
 8007dde:	f7f8 fb99 	bl	8000514 <__aeabi_i2d>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4630      	mov	r0, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dee:	f7f8 fa43 	bl	8000278 <__aeabi_dsub>
 8007df2:	4b22      	ldr	r3, [pc, #136]	; (8007e7c <__ieee754_rem_pio2+0x40c>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	f7f8 fbf7 	bl	80005e8 <__aeabi_dmul>
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	f7f8 fea3 	bl	8000b48 <__aeabi_d2iz>
 8007e02:	f7f8 fb87 	bl	8000514 <__aeabi_i2d>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e12:	f7f8 fa31 	bl	8000278 <__aeabi_dsub>
 8007e16:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <__ieee754_rem_pio2+0x40c>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f7f8 fbe5 	bl	80005e8 <__aeabi_dmul>
 8007e1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e22:	ad04      	add	r5, sp, #16
 8007e24:	f04f 0803 	mov.w	r8, #3
 8007e28:	46a9      	mov	r9, r5
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	2700      	movs	r7, #0
 8007e2e:	4632      	mov	r2, r6
 8007e30:	463b      	mov	r3, r7
 8007e32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007e36:	46c3      	mov	fp, r8
 8007e38:	3d08      	subs	r5, #8
 8007e3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e3e:	f7f8 fe3b 	bl	8000ab8 <__aeabi_dcmpeq>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d1f3      	bne.n	8007e2e <__ieee754_rem_pio2+0x3be>
 8007e46:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <__ieee754_rem_pio2+0x410>)
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	4622      	mov	r2, r4
 8007e50:	465b      	mov	r3, fp
 8007e52:	4651      	mov	r1, sl
 8007e54:	4648      	mov	r0, r9
 8007e56:	f000 f993 	bl	8008180 <__kernel_rem_pio2>
 8007e5a:	9b02      	ldr	r3, [sp, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	4683      	mov	fp, r0
 8007e60:	f6bf ae46 	bge.w	8007af0 <__ieee754_rem_pio2+0x80>
 8007e64:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007e68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e6c:	f8ca 3004 	str.w	r3, [sl, #4]
 8007e70:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007e74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e78:	e73a      	b.n	8007cf0 <__ieee754_rem_pio2+0x280>
 8007e7a:	bf00      	nop
 8007e7c:	41700000 	.word	0x41700000
 8007e80:	080092a0 	.word	0x080092a0

08007e84 <__ieee754_sqrt>:
 8007e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e88:	ec55 4b10 	vmov	r4, r5, d0
 8007e8c:	4e56      	ldr	r6, [pc, #344]	; (8007fe8 <__ieee754_sqrt+0x164>)
 8007e8e:	43ae      	bics	r6, r5
 8007e90:	ee10 0a10 	vmov	r0, s0
 8007e94:	ee10 3a10 	vmov	r3, s0
 8007e98:	4629      	mov	r1, r5
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	d110      	bne.n	8007ec0 <__ieee754_sqrt+0x3c>
 8007e9e:	ee10 2a10 	vmov	r2, s0
 8007ea2:	462b      	mov	r3, r5
 8007ea4:	f7f8 fba0 	bl	80005e8 <__aeabi_dmul>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f9e4 	bl	800027c <__adddf3>
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	ec45 4b10 	vmov	d0, r4, r5
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	dc10      	bgt.n	8007ee6 <__ieee754_sqrt+0x62>
 8007ec4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ec8:	4330      	orrs	r0, r6
 8007eca:	d0f5      	beq.n	8007eb8 <__ieee754_sqrt+0x34>
 8007ecc:	b15d      	cbz	r5, 8007ee6 <__ieee754_sqrt+0x62>
 8007ece:	ee10 2a10 	vmov	r2, s0
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	ee10 0a10 	vmov	r0, s0
 8007ed8:	f7f8 f9ce 	bl	8000278 <__aeabi_dsub>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	f7f8 fcac 	bl	800083c <__aeabi_ddiv>
 8007ee4:	e7e6      	b.n	8007eb4 <__ieee754_sqrt+0x30>
 8007ee6:	1509      	asrs	r1, r1, #20
 8007ee8:	d076      	beq.n	8007fd8 <__ieee754_sqrt+0x154>
 8007eea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007eee:	07ce      	lsls	r6, r1, #31
 8007ef0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007ef4:	bf5e      	ittt	pl
 8007ef6:	0fda      	lsrpl	r2, r3, #31
 8007ef8:	005b      	lslpl	r3, r3, #1
 8007efa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007efe:	0fda      	lsrs	r2, r3, #31
 8007f00:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007f04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007f08:	2000      	movs	r0, #0
 8007f0a:	106d      	asrs	r5, r5, #1
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	f04f 0e16 	mov.w	lr, #22
 8007f12:	4684      	mov	ip, r0
 8007f14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f18:	eb0c 0401 	add.w	r4, ip, r1
 8007f1c:	4294      	cmp	r4, r2
 8007f1e:	bfde      	ittt	le
 8007f20:	1b12      	suble	r2, r2, r4
 8007f22:	eb04 0c01 	addle.w	ip, r4, r1
 8007f26:	1840      	addle	r0, r0, r1
 8007f28:	0052      	lsls	r2, r2, #1
 8007f2a:	f1be 0e01 	subs.w	lr, lr, #1
 8007f2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007f36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f3a:	d1ed      	bne.n	8007f18 <__ieee754_sqrt+0x94>
 8007f3c:	4671      	mov	r1, lr
 8007f3e:	2720      	movs	r7, #32
 8007f40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f44:	4562      	cmp	r2, ip
 8007f46:	eb04 060e 	add.w	r6, r4, lr
 8007f4a:	dc02      	bgt.n	8007f52 <__ieee754_sqrt+0xce>
 8007f4c:	d113      	bne.n	8007f76 <__ieee754_sqrt+0xf2>
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	d811      	bhi.n	8007f76 <__ieee754_sqrt+0xf2>
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	eb06 0e04 	add.w	lr, r6, r4
 8007f58:	da43      	bge.n	8007fe2 <__ieee754_sqrt+0x15e>
 8007f5a:	f1be 0f00 	cmp.w	lr, #0
 8007f5e:	db40      	blt.n	8007fe2 <__ieee754_sqrt+0x15e>
 8007f60:	f10c 0801 	add.w	r8, ip, #1
 8007f64:	eba2 020c 	sub.w	r2, r2, ip
 8007f68:	429e      	cmp	r6, r3
 8007f6a:	bf88      	it	hi
 8007f6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f70:	1b9b      	subs	r3, r3, r6
 8007f72:	4421      	add	r1, r4
 8007f74:	46c4      	mov	ip, r8
 8007f76:	0052      	lsls	r2, r2, #1
 8007f78:	3f01      	subs	r7, #1
 8007f7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007f82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f86:	d1dd      	bne.n	8007f44 <__ieee754_sqrt+0xc0>
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d006      	beq.n	8007f9a <__ieee754_sqrt+0x116>
 8007f8c:	1c4c      	adds	r4, r1, #1
 8007f8e:	bf13      	iteet	ne
 8007f90:	3101      	addne	r1, #1
 8007f92:	3001      	addeq	r0, #1
 8007f94:	4639      	moveq	r1, r7
 8007f96:	f021 0101 	bicne.w	r1, r1, #1
 8007f9a:	1043      	asrs	r3, r0, #1
 8007f9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007fa0:	0849      	lsrs	r1, r1, #1
 8007fa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007fa6:	07c2      	lsls	r2, r0, #31
 8007fa8:	bf48      	it	mi
 8007faa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007fae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	463d      	mov	r5, r7
 8007fb6:	e77f      	b.n	8007eb8 <__ieee754_sqrt+0x34>
 8007fb8:	0ada      	lsrs	r2, r3, #11
 8007fba:	3815      	subs	r0, #21
 8007fbc:	055b      	lsls	r3, r3, #21
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	d0fa      	beq.n	8007fb8 <__ieee754_sqrt+0x134>
 8007fc2:	02d7      	lsls	r7, r2, #11
 8007fc4:	d50a      	bpl.n	8007fdc <__ieee754_sqrt+0x158>
 8007fc6:	f1c1 0420 	rsb	r4, r1, #32
 8007fca:	fa23 f404 	lsr.w	r4, r3, r4
 8007fce:	1e4d      	subs	r5, r1, #1
 8007fd0:	408b      	lsls	r3, r1
 8007fd2:	4322      	orrs	r2, r4
 8007fd4:	1b41      	subs	r1, r0, r5
 8007fd6:	e788      	b.n	8007eea <__ieee754_sqrt+0x66>
 8007fd8:	4608      	mov	r0, r1
 8007fda:	e7f0      	b.n	8007fbe <__ieee754_sqrt+0x13a>
 8007fdc:	0052      	lsls	r2, r2, #1
 8007fde:	3101      	adds	r1, #1
 8007fe0:	e7ef      	b.n	8007fc2 <__ieee754_sqrt+0x13e>
 8007fe2:	46e0      	mov	r8, ip
 8007fe4:	e7be      	b.n	8007f64 <__ieee754_sqrt+0xe0>
 8007fe6:	bf00      	nop
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	00000000 	.word	0x00000000

08007ff0 <__kernel_cos>:
 8007ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	ec57 6b10 	vmov	r6, r7, d0
 8007ff8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007ffc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008000:	ed8d 1b00 	vstr	d1, [sp]
 8008004:	da07      	bge.n	8008016 <__kernel_cos+0x26>
 8008006:	ee10 0a10 	vmov	r0, s0
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fd9c 	bl	8000b48 <__aeabi_d2iz>
 8008010:	2800      	cmp	r0, #0
 8008012:	f000 8088 	beq.w	8008126 <__kernel_cos+0x136>
 8008016:	4632      	mov	r2, r6
 8008018:	463b      	mov	r3, r7
 800801a:	4630      	mov	r0, r6
 800801c:	4639      	mov	r1, r7
 800801e:	f7f8 fae3 	bl	80005e8 <__aeabi_dmul>
 8008022:	4b51      	ldr	r3, [pc, #324]	; (8008168 <__kernel_cos+0x178>)
 8008024:	2200      	movs	r2, #0
 8008026:	4604      	mov	r4, r0
 8008028:	460d      	mov	r5, r1
 800802a:	f7f8 fadd 	bl	80005e8 <__aeabi_dmul>
 800802e:	a340      	add	r3, pc, #256	; (adr r3, 8008130 <__kernel_cos+0x140>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	4682      	mov	sl, r0
 8008036:	468b      	mov	fp, r1
 8008038:	4620      	mov	r0, r4
 800803a:	4629      	mov	r1, r5
 800803c:	f7f8 fad4 	bl	80005e8 <__aeabi_dmul>
 8008040:	a33d      	add	r3, pc, #244	; (adr r3, 8008138 <__kernel_cos+0x148>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f919 	bl	800027c <__adddf3>
 800804a:	4622      	mov	r2, r4
 800804c:	462b      	mov	r3, r5
 800804e:	f7f8 facb 	bl	80005e8 <__aeabi_dmul>
 8008052:	a33b      	add	r3, pc, #236	; (adr r3, 8008140 <__kernel_cos+0x150>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 f90e 	bl	8000278 <__aeabi_dsub>
 800805c:	4622      	mov	r2, r4
 800805e:	462b      	mov	r3, r5
 8008060:	f7f8 fac2 	bl	80005e8 <__aeabi_dmul>
 8008064:	a338      	add	r3, pc, #224	; (adr r3, 8008148 <__kernel_cos+0x158>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f907 	bl	800027c <__adddf3>
 800806e:	4622      	mov	r2, r4
 8008070:	462b      	mov	r3, r5
 8008072:	f7f8 fab9 	bl	80005e8 <__aeabi_dmul>
 8008076:	a336      	add	r3, pc, #216	; (adr r3, 8008150 <__kernel_cos+0x160>)
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	f7f8 f8fc 	bl	8000278 <__aeabi_dsub>
 8008080:	4622      	mov	r2, r4
 8008082:	462b      	mov	r3, r5
 8008084:	f7f8 fab0 	bl	80005e8 <__aeabi_dmul>
 8008088:	a333      	add	r3, pc, #204	; (adr r3, 8008158 <__kernel_cos+0x168>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 f8f5 	bl	800027c <__adddf3>
 8008092:	4622      	mov	r2, r4
 8008094:	462b      	mov	r3, r5
 8008096:	f7f8 faa7 	bl	80005e8 <__aeabi_dmul>
 800809a:	4622      	mov	r2, r4
 800809c:	462b      	mov	r3, r5
 800809e:	f7f8 faa3 	bl	80005e8 <__aeabi_dmul>
 80080a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 fa9b 	bl	80005e8 <__aeabi_dmul>
 80080b2:	460b      	mov	r3, r1
 80080b4:	4602      	mov	r2, r0
 80080b6:	4629      	mov	r1, r5
 80080b8:	4620      	mov	r0, r4
 80080ba:	f7f8 f8dd 	bl	8000278 <__aeabi_dsub>
 80080be:	4b2b      	ldr	r3, [pc, #172]	; (800816c <__kernel_cos+0x17c>)
 80080c0:	4598      	cmp	r8, r3
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	dc10      	bgt.n	80080ea <__kernel_cos+0xfa>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4650      	mov	r0, sl
 80080ce:	4659      	mov	r1, fp
 80080d0:	f7f8 f8d2 	bl	8000278 <__aeabi_dsub>
 80080d4:	460b      	mov	r3, r1
 80080d6:	4926      	ldr	r1, [pc, #152]	; (8008170 <__kernel_cos+0x180>)
 80080d8:	4602      	mov	r2, r0
 80080da:	2000      	movs	r0, #0
 80080dc:	f7f8 f8cc 	bl	8000278 <__aeabi_dsub>
 80080e0:	ec41 0b10 	vmov	d0, r0, r1
 80080e4:	b003      	add	sp, #12
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	4b22      	ldr	r3, [pc, #136]	; (8008174 <__kernel_cos+0x184>)
 80080ec:	4920      	ldr	r1, [pc, #128]	; (8008170 <__kernel_cos+0x180>)
 80080ee:	4598      	cmp	r8, r3
 80080f0:	bfcc      	ite	gt
 80080f2:	4d21      	ldrgt	r5, [pc, #132]	; (8008178 <__kernel_cos+0x188>)
 80080f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80080f8:	2400      	movs	r4, #0
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	2000      	movs	r0, #0
 8008100:	f7f8 f8ba 	bl	8000278 <__aeabi_dsub>
 8008104:	4622      	mov	r2, r4
 8008106:	4680      	mov	r8, r0
 8008108:	4689      	mov	r9, r1
 800810a:	462b      	mov	r3, r5
 800810c:	4650      	mov	r0, sl
 800810e:	4659      	mov	r1, fp
 8008110:	f7f8 f8b2 	bl	8000278 <__aeabi_dsub>
 8008114:	4632      	mov	r2, r6
 8008116:	463b      	mov	r3, r7
 8008118:	f7f8 f8ae 	bl	8000278 <__aeabi_dsub>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4640      	mov	r0, r8
 8008122:	4649      	mov	r1, r9
 8008124:	e7da      	b.n	80080dc <__kernel_cos+0xec>
 8008126:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008160 <__kernel_cos+0x170>
 800812a:	e7db      	b.n	80080e4 <__kernel_cos+0xf4>
 800812c:	f3af 8000 	nop.w
 8008130:	be8838d4 	.word	0xbe8838d4
 8008134:	bda8fae9 	.word	0xbda8fae9
 8008138:	bdb4b1c4 	.word	0xbdb4b1c4
 800813c:	3e21ee9e 	.word	0x3e21ee9e
 8008140:	809c52ad 	.word	0x809c52ad
 8008144:	3e927e4f 	.word	0x3e927e4f
 8008148:	19cb1590 	.word	0x19cb1590
 800814c:	3efa01a0 	.word	0x3efa01a0
 8008150:	16c15177 	.word	0x16c15177
 8008154:	3f56c16c 	.word	0x3f56c16c
 8008158:	5555554c 	.word	0x5555554c
 800815c:	3fa55555 	.word	0x3fa55555
 8008160:	00000000 	.word	0x00000000
 8008164:	3ff00000 	.word	0x3ff00000
 8008168:	3fe00000 	.word	0x3fe00000
 800816c:	3fd33332 	.word	0x3fd33332
 8008170:	3ff00000 	.word	0x3ff00000
 8008174:	3fe90000 	.word	0x3fe90000
 8008178:	3fd20000 	.word	0x3fd20000
 800817c:	00000000 	.word	0x00000000

08008180 <__kernel_rem_pio2>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	ed2d 8b02 	vpush	{d8}
 8008188:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800818c:	f112 0f14 	cmn.w	r2, #20
 8008190:	9308      	str	r3, [sp, #32]
 8008192:	9101      	str	r1, [sp, #4]
 8008194:	4bc6      	ldr	r3, [pc, #792]	; (80084b0 <__kernel_rem_pio2+0x330>)
 8008196:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008198:	9009      	str	r0, [sp, #36]	; 0x24
 800819a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	9b08      	ldr	r3, [sp, #32]
 80081a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80081a6:	bfa8      	it	ge
 80081a8:	1ed4      	subge	r4, r2, #3
 80081aa:	9306      	str	r3, [sp, #24]
 80081ac:	bfb2      	itee	lt
 80081ae:	2400      	movlt	r4, #0
 80081b0:	2318      	movge	r3, #24
 80081b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80081b6:	f06f 0317 	mvn.w	r3, #23
 80081ba:	fb04 3303 	mla	r3, r4, r3, r3
 80081be:	eb03 0a02 	add.w	sl, r3, r2
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	9a06      	ldr	r2, [sp, #24]
 80081c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80084a0 <__kernel_rem_pio2+0x320>
 80081ca:	eb03 0802 	add.w	r8, r3, r2
 80081ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80081d0:	1aa7      	subs	r7, r4, r2
 80081d2:	ae20      	add	r6, sp, #128	; 0x80
 80081d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80081d8:	2500      	movs	r5, #0
 80081da:	4545      	cmp	r5, r8
 80081dc:	dd18      	ble.n	8008210 <__kernel_rem_pio2+0x90>
 80081de:	9b08      	ldr	r3, [sp, #32]
 80081e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80081e4:	aa20      	add	r2, sp, #128	; 0x80
 80081e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80084a0 <__kernel_rem_pio2+0x320>
 80081ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80081ee:	f1c3 0301 	rsb	r3, r3, #1
 80081f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80081f6:	9307      	str	r3, [sp, #28]
 80081f8:	9b07      	ldr	r3, [sp, #28]
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	4443      	add	r3, r8
 80081fe:	429a      	cmp	r2, r3
 8008200:	db2f      	blt.n	8008262 <__kernel_rem_pio2+0xe2>
 8008202:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008206:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800820a:	462f      	mov	r7, r5
 800820c:	2600      	movs	r6, #0
 800820e:	e01b      	b.n	8008248 <__kernel_rem_pio2+0xc8>
 8008210:	42ef      	cmn	r7, r5
 8008212:	d407      	bmi.n	8008224 <__kernel_rem_pio2+0xa4>
 8008214:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008218:	f7f8 f97c 	bl	8000514 <__aeabi_i2d>
 800821c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008220:	3501      	adds	r5, #1
 8008222:	e7da      	b.n	80081da <__kernel_rem_pio2+0x5a>
 8008224:	ec51 0b18 	vmov	r0, r1, d8
 8008228:	e7f8      	b.n	800821c <__kernel_rem_pio2+0x9c>
 800822a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008232:	f7f8 f9d9 	bl	80005e8 <__aeabi_dmul>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800823e:	f7f8 f81d 	bl	800027c <__adddf3>
 8008242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008246:	3601      	adds	r6, #1
 8008248:	9b06      	ldr	r3, [sp, #24]
 800824a:	429e      	cmp	r6, r3
 800824c:	f1a7 0708 	sub.w	r7, r7, #8
 8008250:	ddeb      	ble.n	800822a <__kernel_rem_pio2+0xaa>
 8008252:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008256:	3508      	adds	r5, #8
 8008258:	ecab 7b02 	vstmia	fp!, {d7}
 800825c:	f108 0801 	add.w	r8, r8, #1
 8008260:	e7ca      	b.n	80081f8 <__kernel_rem_pio2+0x78>
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	aa0c      	add	r2, sp, #48	; 0x30
 8008266:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800826a:	930b      	str	r3, [sp, #44]	; 0x2c
 800826c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800826e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008272:	9c04      	ldr	r4, [sp, #16]
 8008274:	930a      	str	r3, [sp, #40]	; 0x28
 8008276:	ab98      	add	r3, sp, #608	; 0x260
 8008278:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800827c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008280:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008284:	f8cd b008 	str.w	fp, [sp, #8]
 8008288:	4625      	mov	r5, r4
 800828a:	2d00      	cmp	r5, #0
 800828c:	dc78      	bgt.n	8008380 <__kernel_rem_pio2+0x200>
 800828e:	ec47 6b10 	vmov	d0, r6, r7
 8008292:	4650      	mov	r0, sl
 8008294:	f000 fda0 	bl	8008dd8 <scalbn>
 8008298:	ec57 6b10 	vmov	r6, r7, d0
 800829c:	2200      	movs	r2, #0
 800829e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80082a2:	ee10 0a10 	vmov	r0, s0
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f8 f99e 	bl	80005e8 <__aeabi_dmul>
 80082ac:	ec41 0b10 	vmov	d0, r0, r1
 80082b0:	f000 fd12 	bl	8008cd8 <floor>
 80082b4:	4b7f      	ldr	r3, [pc, #508]	; (80084b4 <__kernel_rem_pio2+0x334>)
 80082b6:	ec51 0b10 	vmov	r0, r1, d0
 80082ba:	2200      	movs	r2, #0
 80082bc:	f7f8 f994 	bl	80005e8 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f7 ffd6 	bl	8000278 <__aeabi_dsub>
 80082cc:	460f      	mov	r7, r1
 80082ce:	4606      	mov	r6, r0
 80082d0:	f7f8 fc3a 	bl	8000b48 <__aeabi_d2iz>
 80082d4:	9007      	str	r0, [sp, #28]
 80082d6:	f7f8 f91d 	bl	8000514 <__aeabi_i2d>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f7 ffc9 	bl	8000278 <__aeabi_dsub>
 80082e6:	f1ba 0f00 	cmp.w	sl, #0
 80082ea:	4606      	mov	r6, r0
 80082ec:	460f      	mov	r7, r1
 80082ee:	dd70      	ble.n	80083d2 <__kernel_rem_pio2+0x252>
 80082f0:	1e62      	subs	r2, r4, #1
 80082f2:	ab0c      	add	r3, sp, #48	; 0x30
 80082f4:	9d07      	ldr	r5, [sp, #28]
 80082f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80082fa:	f1ca 0118 	rsb	r1, sl, #24
 80082fe:	fa40 f301 	asr.w	r3, r0, r1
 8008302:	441d      	add	r5, r3
 8008304:	408b      	lsls	r3, r1
 8008306:	1ac0      	subs	r0, r0, r3
 8008308:	ab0c      	add	r3, sp, #48	; 0x30
 800830a:	9507      	str	r5, [sp, #28]
 800830c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008310:	f1ca 0317 	rsb	r3, sl, #23
 8008314:	fa40 f303 	asr.w	r3, r0, r3
 8008318:	9302      	str	r3, [sp, #8]
 800831a:	9b02      	ldr	r3, [sp, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	dd66      	ble.n	80083ee <__kernel_rem_pio2+0x26e>
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	2200      	movs	r2, #0
 8008324:	3301      	adds	r3, #1
 8008326:	9307      	str	r3, [sp, #28]
 8008328:	4615      	mov	r5, r2
 800832a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800832e:	4294      	cmp	r4, r2
 8008330:	f300 8099 	bgt.w	8008466 <__kernel_rem_pio2+0x2e6>
 8008334:	f1ba 0f00 	cmp.w	sl, #0
 8008338:	dd07      	ble.n	800834a <__kernel_rem_pio2+0x1ca>
 800833a:	f1ba 0f01 	cmp.w	sl, #1
 800833e:	f000 80a5 	beq.w	800848c <__kernel_rem_pio2+0x30c>
 8008342:	f1ba 0f02 	cmp.w	sl, #2
 8008346:	f000 80c1 	beq.w	80084cc <__kernel_rem_pio2+0x34c>
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d14e      	bne.n	80083ee <__kernel_rem_pio2+0x26e>
 8008350:	4632      	mov	r2, r6
 8008352:	463b      	mov	r3, r7
 8008354:	4958      	ldr	r1, [pc, #352]	; (80084b8 <__kernel_rem_pio2+0x338>)
 8008356:	2000      	movs	r0, #0
 8008358:	f7f7 ff8e 	bl	8000278 <__aeabi_dsub>
 800835c:	4606      	mov	r6, r0
 800835e:	460f      	mov	r7, r1
 8008360:	2d00      	cmp	r5, #0
 8008362:	d044      	beq.n	80083ee <__kernel_rem_pio2+0x26e>
 8008364:	4650      	mov	r0, sl
 8008366:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80084a8 <__kernel_rem_pio2+0x328>
 800836a:	f000 fd35 	bl	8008dd8 <scalbn>
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	ec53 2b10 	vmov	r2, r3, d0
 8008376:	f7f7 ff7f 	bl	8000278 <__aeabi_dsub>
 800837a:	4606      	mov	r6, r0
 800837c:	460f      	mov	r7, r1
 800837e:	e036      	b.n	80083ee <__kernel_rem_pio2+0x26e>
 8008380:	4b4e      	ldr	r3, [pc, #312]	; (80084bc <__kernel_rem_pio2+0x33c>)
 8008382:	2200      	movs	r2, #0
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f8 f92e 	bl	80005e8 <__aeabi_dmul>
 800838c:	f7f8 fbdc 	bl	8000b48 <__aeabi_d2iz>
 8008390:	f7f8 f8c0 	bl	8000514 <__aeabi_i2d>
 8008394:	4b4a      	ldr	r3, [pc, #296]	; (80084c0 <__kernel_rem_pio2+0x340>)
 8008396:	2200      	movs	r2, #0
 8008398:	4680      	mov	r8, r0
 800839a:	4689      	mov	r9, r1
 800839c:	f7f8 f924 	bl	80005e8 <__aeabi_dmul>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f7 ff66 	bl	8000278 <__aeabi_dsub>
 80083ac:	f7f8 fbcc 	bl	8000b48 <__aeabi_d2iz>
 80083b0:	9b02      	ldr	r3, [sp, #8]
 80083b2:	f843 0b04 	str.w	r0, [r3], #4
 80083b6:	3d01      	subs	r5, #1
 80083b8:	9302      	str	r3, [sp, #8]
 80083ba:	ab70      	add	r3, sp, #448	; 0x1c0
 80083bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	4640      	mov	r0, r8
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7f7 ff58 	bl	800027c <__adddf3>
 80083cc:	4606      	mov	r6, r0
 80083ce:	460f      	mov	r7, r1
 80083d0:	e75b      	b.n	800828a <__kernel_rem_pio2+0x10a>
 80083d2:	d105      	bne.n	80083e0 <__kernel_rem_pio2+0x260>
 80083d4:	1e63      	subs	r3, r4, #1
 80083d6:	aa0c      	add	r2, sp, #48	; 0x30
 80083d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80083dc:	15c3      	asrs	r3, r0, #23
 80083de:	e79b      	b.n	8008318 <__kernel_rem_pio2+0x198>
 80083e0:	4b38      	ldr	r3, [pc, #224]	; (80084c4 <__kernel_rem_pio2+0x344>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	f7f8 fb86 	bl	8000af4 <__aeabi_dcmpge>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d139      	bne.n	8008460 <__kernel_rem_pio2+0x2e0>
 80083ec:	9002      	str	r0, [sp, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	2300      	movs	r3, #0
 80083f2:	4630      	mov	r0, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f8 fb5f 	bl	8000ab8 <__aeabi_dcmpeq>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f000 80b4 	beq.w	8008568 <__kernel_rem_pio2+0x3e8>
 8008400:	f104 3bff 	add.w	fp, r4, #4294967295
 8008404:	465b      	mov	r3, fp
 8008406:	2200      	movs	r2, #0
 8008408:	9904      	ldr	r1, [sp, #16]
 800840a:	428b      	cmp	r3, r1
 800840c:	da65      	bge.n	80084da <__kernel_rem_pio2+0x35a>
 800840e:	2a00      	cmp	r2, #0
 8008410:	d07b      	beq.n	800850a <__kernel_rem_pio2+0x38a>
 8008412:	ab0c      	add	r3, sp, #48	; 0x30
 8008414:	f1aa 0a18 	sub.w	sl, sl, #24
 8008418:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80a0 	beq.w	8008562 <__kernel_rem_pio2+0x3e2>
 8008422:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80084a8 <__kernel_rem_pio2+0x328>
 8008426:	4650      	mov	r0, sl
 8008428:	f000 fcd6 	bl	8008dd8 <scalbn>
 800842c:	4f23      	ldr	r7, [pc, #140]	; (80084bc <__kernel_rem_pio2+0x33c>)
 800842e:	ec55 4b10 	vmov	r4, r5, d0
 8008432:	46d8      	mov	r8, fp
 8008434:	2600      	movs	r6, #0
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	f280 80cf 	bge.w	80085dc <__kernel_rem_pio2+0x45c>
 800843e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80084a0 <__kernel_rem_pio2+0x320>
 8008442:	465f      	mov	r7, fp
 8008444:	f04f 0800 	mov.w	r8, #0
 8008448:	2f00      	cmp	r7, #0
 800844a:	f2c0 80fd 	blt.w	8008648 <__kernel_rem_pio2+0x4c8>
 800844e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008450:	f8df a074 	ldr.w	sl, [pc, #116]	; 80084c8 <__kernel_rem_pio2+0x348>
 8008454:	ec55 4b18 	vmov	r4, r5, d8
 8008458:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800845c:	2600      	movs	r6, #0
 800845e:	e0e5      	b.n	800862c <__kernel_rem_pio2+0x4ac>
 8008460:	2302      	movs	r3, #2
 8008462:	9302      	str	r3, [sp, #8]
 8008464:	e75c      	b.n	8008320 <__kernel_rem_pio2+0x1a0>
 8008466:	f8db 3000 	ldr.w	r3, [fp]
 800846a:	b955      	cbnz	r5, 8008482 <__kernel_rem_pio2+0x302>
 800846c:	b123      	cbz	r3, 8008478 <__kernel_rem_pio2+0x2f8>
 800846e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008472:	f8cb 3000 	str.w	r3, [fp]
 8008476:	2301      	movs	r3, #1
 8008478:	3201      	adds	r2, #1
 800847a:	f10b 0b04 	add.w	fp, fp, #4
 800847e:	461d      	mov	r5, r3
 8008480:	e755      	b.n	800832e <__kernel_rem_pio2+0x1ae>
 8008482:	1acb      	subs	r3, r1, r3
 8008484:	f8cb 3000 	str.w	r3, [fp]
 8008488:	462b      	mov	r3, r5
 800848a:	e7f5      	b.n	8008478 <__kernel_rem_pio2+0x2f8>
 800848c:	1e62      	subs	r2, r4, #1
 800848e:	ab0c      	add	r3, sp, #48	; 0x30
 8008490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008494:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008498:	a90c      	add	r1, sp, #48	; 0x30
 800849a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800849e:	e754      	b.n	800834a <__kernel_rem_pio2+0x1ca>
	...
 80084ac:	3ff00000 	.word	0x3ff00000
 80084b0:	080093e8 	.word	0x080093e8
 80084b4:	40200000 	.word	0x40200000
 80084b8:	3ff00000 	.word	0x3ff00000
 80084bc:	3e700000 	.word	0x3e700000
 80084c0:	41700000 	.word	0x41700000
 80084c4:	3fe00000 	.word	0x3fe00000
 80084c8:	080093a8 	.word	0x080093a8
 80084cc:	1e62      	subs	r2, r4, #1
 80084ce:	ab0c      	add	r3, sp, #48	; 0x30
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80084d8:	e7de      	b.n	8008498 <__kernel_rem_pio2+0x318>
 80084da:	a90c      	add	r1, sp, #48	; 0x30
 80084dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	430a      	orrs	r2, r1
 80084e4:	e790      	b.n	8008408 <__kernel_rem_pio2+0x288>
 80084e6:	3301      	adds	r3, #1
 80084e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d0fa      	beq.n	80084e6 <__kernel_rem_pio2+0x366>
 80084f0:	9a08      	ldr	r2, [sp, #32]
 80084f2:	18e3      	adds	r3, r4, r3
 80084f4:	18a6      	adds	r6, r4, r2
 80084f6:	aa20      	add	r2, sp, #128	; 0x80
 80084f8:	1c65      	adds	r5, r4, #1
 80084fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80084fe:	9302      	str	r3, [sp, #8]
 8008500:	9b02      	ldr	r3, [sp, #8]
 8008502:	42ab      	cmp	r3, r5
 8008504:	da04      	bge.n	8008510 <__kernel_rem_pio2+0x390>
 8008506:	461c      	mov	r4, r3
 8008508:	e6b5      	b.n	8008276 <__kernel_rem_pio2+0xf6>
 800850a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850c:	2301      	movs	r3, #1
 800850e:	e7eb      	b.n	80084e8 <__kernel_rem_pio2+0x368>
 8008510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008512:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008516:	f7f7 fffd 	bl	8000514 <__aeabi_i2d>
 800851a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008520:	46b3      	mov	fp, r6
 8008522:	461c      	mov	r4, r3
 8008524:	2700      	movs	r7, #0
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	f04f 0900 	mov.w	r9, #0
 800852e:	9b06      	ldr	r3, [sp, #24]
 8008530:	429f      	cmp	r7, r3
 8008532:	dd06      	ble.n	8008542 <__kernel_rem_pio2+0x3c2>
 8008534:	ab70      	add	r3, sp, #448	; 0x1c0
 8008536:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800853a:	e9c3 8900 	strd	r8, r9, [r3]
 800853e:	3501      	adds	r5, #1
 8008540:	e7de      	b.n	8008500 <__kernel_rem_pio2+0x380>
 8008542:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008546:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800854a:	f7f8 f84d 	bl	80005e8 <__aeabi_dmul>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4640      	mov	r0, r8
 8008554:	4649      	mov	r1, r9
 8008556:	f7f7 fe91 	bl	800027c <__adddf3>
 800855a:	3701      	adds	r7, #1
 800855c:	4680      	mov	r8, r0
 800855e:	4689      	mov	r9, r1
 8008560:	e7e5      	b.n	800852e <__kernel_rem_pio2+0x3ae>
 8008562:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008566:	e754      	b.n	8008412 <__kernel_rem_pio2+0x292>
 8008568:	ec47 6b10 	vmov	d0, r6, r7
 800856c:	f1ca 0000 	rsb	r0, sl, #0
 8008570:	f000 fc32 	bl	8008dd8 <scalbn>
 8008574:	ec57 6b10 	vmov	r6, r7, d0
 8008578:	4b9f      	ldr	r3, [pc, #636]	; (80087f8 <__kernel_rem_pio2+0x678>)
 800857a:	ee10 0a10 	vmov	r0, s0
 800857e:	2200      	movs	r2, #0
 8008580:	4639      	mov	r1, r7
 8008582:	f7f8 fab7 	bl	8000af4 <__aeabi_dcmpge>
 8008586:	b300      	cbz	r0, 80085ca <__kernel_rem_pio2+0x44a>
 8008588:	4b9c      	ldr	r3, [pc, #624]	; (80087fc <__kernel_rem_pio2+0x67c>)
 800858a:	2200      	movs	r2, #0
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f8 f82a 	bl	80005e8 <__aeabi_dmul>
 8008594:	f7f8 fad8 	bl	8000b48 <__aeabi_d2iz>
 8008598:	4605      	mov	r5, r0
 800859a:	f7f7 ffbb 	bl	8000514 <__aeabi_i2d>
 800859e:	4b96      	ldr	r3, [pc, #600]	; (80087f8 <__kernel_rem_pio2+0x678>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	f7f8 f821 	bl	80005e8 <__aeabi_dmul>
 80085a6:	460b      	mov	r3, r1
 80085a8:	4602      	mov	r2, r0
 80085aa:	4639      	mov	r1, r7
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7f7 fe63 	bl	8000278 <__aeabi_dsub>
 80085b2:	f7f8 fac9 	bl	8000b48 <__aeabi_d2iz>
 80085b6:	f104 0b01 	add.w	fp, r4, #1
 80085ba:	ab0c      	add	r3, sp, #48	; 0x30
 80085bc:	f10a 0a18 	add.w	sl, sl, #24
 80085c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80085c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80085c8:	e72b      	b.n	8008422 <__kernel_rem_pio2+0x2a2>
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f7f8 fabb 	bl	8000b48 <__aeabi_d2iz>
 80085d2:	ab0c      	add	r3, sp, #48	; 0x30
 80085d4:	46a3      	mov	fp, r4
 80085d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80085da:	e722      	b.n	8008422 <__kernel_rem_pio2+0x2a2>
 80085dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80085de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80085e2:	ab0c      	add	r3, sp, #48	; 0x30
 80085e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80085e8:	f7f7 ff94 	bl	8000514 <__aeabi_i2d>
 80085ec:	4622      	mov	r2, r4
 80085ee:	462b      	mov	r3, r5
 80085f0:	f7f7 fffa 	bl	80005e8 <__aeabi_dmul>
 80085f4:	4632      	mov	r2, r6
 80085f6:	e9c9 0100 	strd	r0, r1, [r9]
 80085fa:	463b      	mov	r3, r7
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f7 fff2 	bl	80005e8 <__aeabi_dmul>
 8008604:	f108 38ff 	add.w	r8, r8, #4294967295
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	e713      	b.n	8008436 <__kernel_rem_pio2+0x2b6>
 800860e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008612:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008616:	f7f7 ffe7 	bl	80005e8 <__aeabi_dmul>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f7 fe2b 	bl	800027c <__adddf3>
 8008626:	3601      	adds	r6, #1
 8008628:	4604      	mov	r4, r0
 800862a:	460d      	mov	r5, r1
 800862c:	9b04      	ldr	r3, [sp, #16]
 800862e:	429e      	cmp	r6, r3
 8008630:	dc01      	bgt.n	8008636 <__kernel_rem_pio2+0x4b6>
 8008632:	45b0      	cmp	r8, r6
 8008634:	daeb      	bge.n	800860e <__kernel_rem_pio2+0x48e>
 8008636:	ab48      	add	r3, sp, #288	; 0x120
 8008638:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800863c:	e9c3 4500 	strd	r4, r5, [r3]
 8008640:	3f01      	subs	r7, #1
 8008642:	f108 0801 	add.w	r8, r8, #1
 8008646:	e6ff      	b.n	8008448 <__kernel_rem_pio2+0x2c8>
 8008648:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800864a:	2b02      	cmp	r3, #2
 800864c:	dc0b      	bgt.n	8008666 <__kernel_rem_pio2+0x4e6>
 800864e:	2b00      	cmp	r3, #0
 8008650:	dc6e      	bgt.n	8008730 <__kernel_rem_pio2+0x5b0>
 8008652:	d045      	beq.n	80086e0 <__kernel_rem_pio2+0x560>
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	f003 0007 	and.w	r0, r3, #7
 800865a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800865e:	ecbd 8b02 	vpop	{d8}
 8008662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008666:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008668:	2b03      	cmp	r3, #3
 800866a:	d1f3      	bne.n	8008654 <__kernel_rem_pio2+0x4d4>
 800866c:	ab48      	add	r3, sp, #288	; 0x120
 800866e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008672:	46d0      	mov	r8, sl
 8008674:	46d9      	mov	r9, fp
 8008676:	f1b9 0f00 	cmp.w	r9, #0
 800867a:	f1a8 0808 	sub.w	r8, r8, #8
 800867e:	dc64      	bgt.n	800874a <__kernel_rem_pio2+0x5ca>
 8008680:	465c      	mov	r4, fp
 8008682:	2c01      	cmp	r4, #1
 8008684:	f1aa 0a08 	sub.w	sl, sl, #8
 8008688:	dc7e      	bgt.n	8008788 <__kernel_rem_pio2+0x608>
 800868a:	2000      	movs	r0, #0
 800868c:	2100      	movs	r1, #0
 800868e:	f1bb 0f01 	cmp.w	fp, #1
 8008692:	f300 8097 	bgt.w	80087c4 <__kernel_rem_pio2+0x644>
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800869c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f040 8099 	bne.w	80087d8 <__kernel_rem_pio2+0x658>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	e9c3 5600 	strd	r5, r6, [r3]
 80086ac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80086b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80086b4:	e7ce      	b.n	8008654 <__kernel_rem_pio2+0x4d4>
 80086b6:	ab48      	add	r3, sp, #288	; 0x120
 80086b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f7f7 fddc 	bl	800027c <__adddf3>
 80086c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086c8:	f1bb 0f00 	cmp.w	fp, #0
 80086cc:	daf3      	bge.n	80086b6 <__kernel_rem_pio2+0x536>
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	b113      	cbz	r3, 80086d8 <__kernel_rem_pio2+0x558>
 80086d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086d6:	4619      	mov	r1, r3
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	e9c3 0100 	strd	r0, r1, [r3]
 80086de:	e7b9      	b.n	8008654 <__kernel_rem_pio2+0x4d4>
 80086e0:	2000      	movs	r0, #0
 80086e2:	2100      	movs	r1, #0
 80086e4:	e7f0      	b.n	80086c8 <__kernel_rem_pio2+0x548>
 80086e6:	ab48      	add	r3, sp, #288	; 0x120
 80086e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	f7f7 fdc4 	bl	800027c <__adddf3>
 80086f4:	3c01      	subs	r4, #1
 80086f6:	2c00      	cmp	r4, #0
 80086f8:	daf5      	bge.n	80086e6 <__kernel_rem_pio2+0x566>
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	b1e3      	cbz	r3, 8008738 <__kernel_rem_pio2+0x5b8>
 80086fe:	4602      	mov	r2, r0
 8008700:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008704:	9c01      	ldr	r4, [sp, #4]
 8008706:	e9c4 2300 	strd	r2, r3, [r4]
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008712:	f7f7 fdb1 	bl	8000278 <__aeabi_dsub>
 8008716:	ad4a      	add	r5, sp, #296	; 0x128
 8008718:	2401      	movs	r4, #1
 800871a:	45a3      	cmp	fp, r4
 800871c:	da0f      	bge.n	800873e <__kernel_rem_pio2+0x5be>
 800871e:	9b02      	ldr	r3, [sp, #8]
 8008720:	b113      	cbz	r3, 8008728 <__kernel_rem_pio2+0x5a8>
 8008722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008726:	4619      	mov	r1, r3
 8008728:	9b01      	ldr	r3, [sp, #4]
 800872a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800872e:	e791      	b.n	8008654 <__kernel_rem_pio2+0x4d4>
 8008730:	465c      	mov	r4, fp
 8008732:	2000      	movs	r0, #0
 8008734:	2100      	movs	r1, #0
 8008736:	e7de      	b.n	80086f6 <__kernel_rem_pio2+0x576>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	e7e2      	b.n	8008704 <__kernel_rem_pio2+0x584>
 800873e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008742:	f7f7 fd9b 	bl	800027c <__adddf3>
 8008746:	3401      	adds	r4, #1
 8008748:	e7e7      	b.n	800871a <__kernel_rem_pio2+0x59a>
 800874a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800874e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008752:	4620      	mov	r0, r4
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	4629      	mov	r1, r5
 800875a:	f7f7 fd8f 	bl	800027c <__adddf3>
 800875e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	4620      	mov	r0, r4
 8008768:	4629      	mov	r1, r5
 800876a:	f7f7 fd85 	bl	8000278 <__aeabi_dsub>
 800876e:	4632      	mov	r2, r6
 8008770:	463b      	mov	r3, r7
 8008772:	f7f7 fd83 	bl	800027c <__adddf3>
 8008776:	ed9d 7b04 	vldr	d7, [sp, #16]
 800877a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800877e:	ed88 7b00 	vstr	d7, [r8]
 8008782:	f109 39ff 	add.w	r9, r9, #4294967295
 8008786:	e776      	b.n	8008676 <__kernel_rem_pio2+0x4f6>
 8008788:	e9da 8900 	ldrd	r8, r9, [sl]
 800878c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008790:	4640      	mov	r0, r8
 8008792:	4632      	mov	r2, r6
 8008794:	463b      	mov	r3, r7
 8008796:	4649      	mov	r1, r9
 8008798:	f7f7 fd70 	bl	800027c <__adddf3>
 800879c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4640      	mov	r0, r8
 80087a6:	4649      	mov	r1, r9
 80087a8:	f7f7 fd66 	bl	8000278 <__aeabi_dsub>
 80087ac:	4632      	mov	r2, r6
 80087ae:	463b      	mov	r3, r7
 80087b0:	f7f7 fd64 	bl	800027c <__adddf3>
 80087b4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80087b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80087bc:	ed8a 7b00 	vstr	d7, [sl]
 80087c0:	3c01      	subs	r4, #1
 80087c2:	e75e      	b.n	8008682 <__kernel_rem_pio2+0x502>
 80087c4:	ab48      	add	r3, sp, #288	; 0x120
 80087c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 fd55 	bl	800027c <__adddf3>
 80087d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087d6:	e75a      	b.n	800868e <__kernel_rem_pio2+0x50e>
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	9a01      	ldr	r2, [sp, #4]
 80087dc:	601d      	str	r5, [r3, #0]
 80087de:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80087e2:	605c      	str	r4, [r3, #4]
 80087e4:	609f      	str	r7, [r3, #8]
 80087e6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80087ea:	60d3      	str	r3, [r2, #12]
 80087ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087f0:	6110      	str	r0, [r2, #16]
 80087f2:	6153      	str	r3, [r2, #20]
 80087f4:	e72e      	b.n	8008654 <__kernel_rem_pio2+0x4d4>
 80087f6:	bf00      	nop
 80087f8:	41700000 	.word	0x41700000
 80087fc:	3e700000 	.word	0x3e700000

08008800 <__kernel_sin>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ed2d 8b04 	vpush	{d8-d9}
 8008808:	eeb0 8a41 	vmov.f32	s16, s2
 800880c:	eef0 8a61 	vmov.f32	s17, s3
 8008810:	ec55 4b10 	vmov	r4, r5, d0
 8008814:	b083      	sub	sp, #12
 8008816:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800881a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800881e:	9001      	str	r0, [sp, #4]
 8008820:	da06      	bge.n	8008830 <__kernel_sin+0x30>
 8008822:	ee10 0a10 	vmov	r0, s0
 8008826:	4629      	mov	r1, r5
 8008828:	f7f8 f98e 	bl	8000b48 <__aeabi_d2iz>
 800882c:	2800      	cmp	r0, #0
 800882e:	d051      	beq.n	80088d4 <__kernel_sin+0xd4>
 8008830:	4622      	mov	r2, r4
 8008832:	462b      	mov	r3, r5
 8008834:	4620      	mov	r0, r4
 8008836:	4629      	mov	r1, r5
 8008838:	f7f7 fed6 	bl	80005e8 <__aeabi_dmul>
 800883c:	4682      	mov	sl, r0
 800883e:	468b      	mov	fp, r1
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4620      	mov	r0, r4
 8008846:	4629      	mov	r1, r5
 8008848:	f7f7 fece 	bl	80005e8 <__aeabi_dmul>
 800884c:	a341      	add	r3, pc, #260	; (adr r3, 8008954 <__kernel_sin+0x154>)
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	4680      	mov	r8, r0
 8008854:	4689      	mov	r9, r1
 8008856:	4650      	mov	r0, sl
 8008858:	4659      	mov	r1, fp
 800885a:	f7f7 fec5 	bl	80005e8 <__aeabi_dmul>
 800885e:	a33f      	add	r3, pc, #252	; (adr r3, 800895c <__kernel_sin+0x15c>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fd08 	bl	8000278 <__aeabi_dsub>
 8008868:	4652      	mov	r2, sl
 800886a:	465b      	mov	r3, fp
 800886c:	f7f7 febc 	bl	80005e8 <__aeabi_dmul>
 8008870:	a33c      	add	r3, pc, #240	; (adr r3, 8008964 <__kernel_sin+0x164>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fd01 	bl	800027c <__adddf3>
 800887a:	4652      	mov	r2, sl
 800887c:	465b      	mov	r3, fp
 800887e:	f7f7 feb3 	bl	80005e8 <__aeabi_dmul>
 8008882:	a33a      	add	r3, pc, #232	; (adr r3, 800896c <__kernel_sin+0x16c>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fcf6 	bl	8000278 <__aeabi_dsub>
 800888c:	4652      	mov	r2, sl
 800888e:	465b      	mov	r3, fp
 8008890:	f7f7 feaa 	bl	80005e8 <__aeabi_dmul>
 8008894:	a337      	add	r3, pc, #220	; (adr r3, 8008974 <__kernel_sin+0x174>)
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fcef 	bl	800027c <__adddf3>
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	4606      	mov	r6, r0
 80088a2:	460f      	mov	r7, r1
 80088a4:	b9eb      	cbnz	r3, 80088e2 <__kernel_sin+0xe2>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4650      	mov	r0, sl
 80088ac:	4659      	mov	r1, fp
 80088ae:	f7f7 fe9b 	bl	80005e8 <__aeabi_dmul>
 80088b2:	a325      	add	r3, pc, #148	; (adr r3, 8008948 <__kernel_sin+0x148>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f7f7 fcde 	bl	8000278 <__aeabi_dsub>
 80088bc:	4642      	mov	r2, r8
 80088be:	464b      	mov	r3, r9
 80088c0:	f7f7 fe92 	bl	80005e8 <__aeabi_dmul>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4620      	mov	r0, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	f7f7 fcd6 	bl	800027c <__adddf3>
 80088d0:	4604      	mov	r4, r0
 80088d2:	460d      	mov	r5, r1
 80088d4:	ec45 4b10 	vmov	d0, r4, r5
 80088d8:	b003      	add	sp, #12
 80088da:	ecbd 8b04 	vpop	{d8-d9}
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <__kernel_sin+0x150>)
 80088e4:	ec51 0b18 	vmov	r0, r1, d8
 80088e8:	2200      	movs	r2, #0
 80088ea:	f7f7 fe7d 	bl	80005e8 <__aeabi_dmul>
 80088ee:	4632      	mov	r2, r6
 80088f0:	ec41 0b19 	vmov	d9, r0, r1
 80088f4:	463b      	mov	r3, r7
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f7 fe75 	bl	80005e8 <__aeabi_dmul>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	ec51 0b19 	vmov	r0, r1, d9
 8008906:	f7f7 fcb7 	bl	8000278 <__aeabi_dsub>
 800890a:	4652      	mov	r2, sl
 800890c:	465b      	mov	r3, fp
 800890e:	f7f7 fe6b 	bl	80005e8 <__aeabi_dmul>
 8008912:	ec53 2b18 	vmov	r2, r3, d8
 8008916:	f7f7 fcaf 	bl	8000278 <__aeabi_dsub>
 800891a:	a30b      	add	r3, pc, #44	; (adr r3, 8008948 <__kernel_sin+0x148>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	4606      	mov	r6, r0
 8008922:	460f      	mov	r7, r1
 8008924:	4640      	mov	r0, r8
 8008926:	4649      	mov	r1, r9
 8008928:	f7f7 fe5e 	bl	80005e8 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4630      	mov	r0, r6
 8008932:	4639      	mov	r1, r7
 8008934:	f7f7 fca2 	bl	800027c <__adddf3>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f7f7 fc9a 	bl	8000278 <__aeabi_dsub>
 8008944:	e7c4      	b.n	80088d0 <__kernel_sin+0xd0>
 8008946:	bf00      	nop
 8008948:	55555549 	.word	0x55555549
 800894c:	3fc55555 	.word	0x3fc55555
 8008950:	3fe00000 	.word	0x3fe00000
 8008954:	5acfd57c 	.word	0x5acfd57c
 8008958:	3de5d93a 	.word	0x3de5d93a
 800895c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008960:	3e5ae5e6 	.word	0x3e5ae5e6
 8008964:	57b1fe7d 	.word	0x57b1fe7d
 8008968:	3ec71de3 	.word	0x3ec71de3
 800896c:	19c161d5 	.word	0x19c161d5
 8008970:	3f2a01a0 	.word	0x3f2a01a0
 8008974:	1110f8a6 	.word	0x1110f8a6
 8008978:	3f811111 	.word	0x3f811111
 800897c:	00000000 	.word	0x00000000

08008980 <atan>:
 8008980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	ec55 4b10 	vmov	r4, r5, d0
 8008988:	4bc3      	ldr	r3, [pc, #780]	; (8008c98 <atan+0x318>)
 800898a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800898e:	429e      	cmp	r6, r3
 8008990:	46ab      	mov	fp, r5
 8008992:	dd18      	ble.n	80089c6 <atan+0x46>
 8008994:	4bc1      	ldr	r3, [pc, #772]	; (8008c9c <atan+0x31c>)
 8008996:	429e      	cmp	r6, r3
 8008998:	dc01      	bgt.n	800899e <atan+0x1e>
 800899a:	d109      	bne.n	80089b0 <atan+0x30>
 800899c:	b144      	cbz	r4, 80089b0 <atan+0x30>
 800899e:	4622      	mov	r2, r4
 80089a0:	462b      	mov	r3, r5
 80089a2:	4620      	mov	r0, r4
 80089a4:	4629      	mov	r1, r5
 80089a6:	f7f7 fc69 	bl	800027c <__adddf3>
 80089aa:	4604      	mov	r4, r0
 80089ac:	460d      	mov	r5, r1
 80089ae:	e006      	b.n	80089be <atan+0x3e>
 80089b0:	f1bb 0f00 	cmp.w	fp, #0
 80089b4:	f300 8131 	bgt.w	8008c1a <atan+0x29a>
 80089b8:	a59b      	add	r5, pc, #620	; (adr r5, 8008c28 <atan+0x2a8>)
 80089ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80089be:	ec45 4b10 	vmov	d0, r4, r5
 80089c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	4bb6      	ldr	r3, [pc, #728]	; (8008ca0 <atan+0x320>)
 80089c8:	429e      	cmp	r6, r3
 80089ca:	dc14      	bgt.n	80089f6 <atan+0x76>
 80089cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80089d0:	429e      	cmp	r6, r3
 80089d2:	dc0d      	bgt.n	80089f0 <atan+0x70>
 80089d4:	a396      	add	r3, pc, #600	; (adr r3, 8008c30 <atan+0x2b0>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	ee10 0a10 	vmov	r0, s0
 80089de:	4629      	mov	r1, r5
 80089e0:	f7f7 fc4c 	bl	800027c <__adddf3>
 80089e4:	4baf      	ldr	r3, [pc, #700]	; (8008ca4 <atan+0x324>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	f7f8 f88e 	bl	8000b08 <__aeabi_dcmpgt>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d1e6      	bne.n	80089be <atan+0x3e>
 80089f0:	f04f 3aff 	mov.w	sl, #4294967295
 80089f4:	e02b      	b.n	8008a4e <atan+0xce>
 80089f6:	f000 f963 	bl	8008cc0 <fabs>
 80089fa:	4bab      	ldr	r3, [pc, #684]	; (8008ca8 <atan+0x328>)
 80089fc:	429e      	cmp	r6, r3
 80089fe:	ec55 4b10 	vmov	r4, r5, d0
 8008a02:	f300 80bf 	bgt.w	8008b84 <atan+0x204>
 8008a06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008a0a:	429e      	cmp	r6, r3
 8008a0c:	f300 80a0 	bgt.w	8008b50 <atan+0x1d0>
 8008a10:	ee10 2a10 	vmov	r2, s0
 8008a14:	ee10 0a10 	vmov	r0, s0
 8008a18:	462b      	mov	r3, r5
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f7f7 fc2e 	bl	800027c <__adddf3>
 8008a20:	4ba0      	ldr	r3, [pc, #640]	; (8008ca4 <atan+0x324>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	f7f7 fc28 	bl	8000278 <__aeabi_dsub>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a32:	4620      	mov	r0, r4
 8008a34:	4629      	mov	r1, r5
 8008a36:	f7f7 fc21 	bl	800027c <__adddf3>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4639      	mov	r1, r7
 8008a42:	f7f7 fefb 	bl	800083c <__aeabi_ddiv>
 8008a46:	f04f 0a00 	mov.w	sl, #0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	4622      	mov	r2, r4
 8008a50:	462b      	mov	r3, r5
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	f7f7 fdc7 	bl	80005e8 <__aeabi_dmul>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4680      	mov	r8, r0
 8008a60:	4689      	mov	r9, r1
 8008a62:	f7f7 fdc1 	bl	80005e8 <__aeabi_dmul>
 8008a66:	a374      	add	r3, pc, #464	; (adr r3, 8008c38 <atan+0x2b8>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	f7f7 fdba 	bl	80005e8 <__aeabi_dmul>
 8008a74:	a372      	add	r3, pc, #456	; (adr r3, 8008c40 <atan+0x2c0>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fbff 	bl	800027c <__adddf3>
 8008a7e:	4632      	mov	r2, r6
 8008a80:	463b      	mov	r3, r7
 8008a82:	f7f7 fdb1 	bl	80005e8 <__aeabi_dmul>
 8008a86:	a370      	add	r3, pc, #448	; (adr r3, 8008c48 <atan+0x2c8>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 fbf6 	bl	800027c <__adddf3>
 8008a90:	4632      	mov	r2, r6
 8008a92:	463b      	mov	r3, r7
 8008a94:	f7f7 fda8 	bl	80005e8 <__aeabi_dmul>
 8008a98:	a36d      	add	r3, pc, #436	; (adr r3, 8008c50 <atan+0x2d0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fbed 	bl	800027c <__adddf3>
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	463b      	mov	r3, r7
 8008aa6:	f7f7 fd9f 	bl	80005e8 <__aeabi_dmul>
 8008aaa:	a36b      	add	r3, pc, #428	; (adr r3, 8008c58 <atan+0x2d8>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f7 fbe4 	bl	800027c <__adddf3>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	f7f7 fd96 	bl	80005e8 <__aeabi_dmul>
 8008abc:	a368      	add	r3, pc, #416	; (adr r3, 8008c60 <atan+0x2e0>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fbdb 	bl	800027c <__adddf3>
 8008ac6:	4642      	mov	r2, r8
 8008ac8:	464b      	mov	r3, r9
 8008aca:	f7f7 fd8d 	bl	80005e8 <__aeabi_dmul>
 8008ace:	a366      	add	r3, pc, #408	; (adr r3, 8008c68 <atan+0x2e8>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fd84 	bl	80005e8 <__aeabi_dmul>
 8008ae0:	a363      	add	r3, pc, #396	; (adr r3, 8008c70 <atan+0x2f0>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fbc7 	bl	8000278 <__aeabi_dsub>
 8008aea:	4632      	mov	r2, r6
 8008aec:	463b      	mov	r3, r7
 8008aee:	f7f7 fd7b 	bl	80005e8 <__aeabi_dmul>
 8008af2:	a361      	add	r3, pc, #388	; (adr r3, 8008c78 <atan+0x2f8>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fbbe 	bl	8000278 <__aeabi_dsub>
 8008afc:	4632      	mov	r2, r6
 8008afe:	463b      	mov	r3, r7
 8008b00:	f7f7 fd72 	bl	80005e8 <__aeabi_dmul>
 8008b04:	a35e      	add	r3, pc, #376	; (adr r3, 8008c80 <atan+0x300>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fbb5 	bl	8000278 <__aeabi_dsub>
 8008b0e:	4632      	mov	r2, r6
 8008b10:	463b      	mov	r3, r7
 8008b12:	f7f7 fd69 	bl	80005e8 <__aeabi_dmul>
 8008b16:	a35c      	add	r3, pc, #368	; (adr r3, 8008c88 <atan+0x308>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fbac 	bl	8000278 <__aeabi_dsub>
 8008b20:	4632      	mov	r2, r6
 8008b22:	463b      	mov	r3, r7
 8008b24:	f7f7 fd60 	bl	80005e8 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fba4 	bl	800027c <__adddf3>
 8008b34:	4622      	mov	r2, r4
 8008b36:	462b      	mov	r3, r5
 8008b38:	f7f7 fd56 	bl	80005e8 <__aeabi_dmul>
 8008b3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	d14b      	bne.n	8008bde <atan+0x25e>
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 fb95 	bl	8000278 <__aeabi_dsub>
 8008b4e:	e72c      	b.n	80089aa <atan+0x2a>
 8008b50:	ee10 0a10 	vmov	r0, s0
 8008b54:	4b53      	ldr	r3, [pc, #332]	; (8008ca4 <atan+0x324>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 fb8d 	bl	8000278 <__aeabi_dsub>
 8008b5e:	4b51      	ldr	r3, [pc, #324]	; (8008ca4 <atan+0x324>)
 8008b60:	4606      	mov	r6, r0
 8008b62:	460f      	mov	r7, r1
 8008b64:	2200      	movs	r2, #0
 8008b66:	4620      	mov	r0, r4
 8008b68:	4629      	mov	r1, r5
 8008b6a:	f7f7 fb87 	bl	800027c <__adddf3>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4630      	mov	r0, r6
 8008b74:	4639      	mov	r1, r7
 8008b76:	f7f7 fe61 	bl	800083c <__aeabi_ddiv>
 8008b7a:	f04f 0a01 	mov.w	sl, #1
 8008b7e:	4604      	mov	r4, r0
 8008b80:	460d      	mov	r5, r1
 8008b82:	e764      	b.n	8008a4e <atan+0xce>
 8008b84:	4b49      	ldr	r3, [pc, #292]	; (8008cac <atan+0x32c>)
 8008b86:	429e      	cmp	r6, r3
 8008b88:	da1d      	bge.n	8008bc6 <atan+0x246>
 8008b8a:	ee10 0a10 	vmov	r0, s0
 8008b8e:	4b48      	ldr	r3, [pc, #288]	; (8008cb0 <atan+0x330>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	4629      	mov	r1, r5
 8008b94:	f7f7 fb70 	bl	8000278 <__aeabi_dsub>
 8008b98:	4b45      	ldr	r3, [pc, #276]	; (8008cb0 <atan+0x330>)
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	f7f7 fd20 	bl	80005e8 <__aeabi_dmul>
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	; (8008ca4 <atan+0x324>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	f7f7 fb66 	bl	800027c <__adddf3>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 fe40 	bl	800083c <__aeabi_ddiv>
 8008bbc:	f04f 0a02 	mov.w	sl, #2
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	460d      	mov	r5, r1
 8008bc4:	e743      	b.n	8008a4e <atan+0xce>
 8008bc6:	462b      	mov	r3, r5
 8008bc8:	ee10 2a10 	vmov	r2, s0
 8008bcc:	4939      	ldr	r1, [pc, #228]	; (8008cb4 <atan+0x334>)
 8008bce:	2000      	movs	r0, #0
 8008bd0:	f7f7 fe34 	bl	800083c <__aeabi_ddiv>
 8008bd4:	f04f 0a03 	mov.w	sl, #3
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	e737      	b.n	8008a4e <atan+0xce>
 8008bde:	4b36      	ldr	r3, [pc, #216]	; (8008cb8 <atan+0x338>)
 8008be0:	4e36      	ldr	r6, [pc, #216]	; (8008cbc <atan+0x33c>)
 8008be2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008be6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008bea:	e9da 2300 	ldrd	r2, r3, [sl]
 8008bee:	f7f7 fb43 	bl	8000278 <__aeabi_dsub>
 8008bf2:	4622      	mov	r2, r4
 8008bf4:	462b      	mov	r3, r5
 8008bf6:	f7f7 fb3f 	bl	8000278 <__aeabi_dsub>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008c02:	f7f7 fb39 	bl	8000278 <__aeabi_dsub>
 8008c06:	f1bb 0f00 	cmp.w	fp, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	f6bf aed6 	bge.w	80089be <atan+0x3e>
 8008c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c16:	461d      	mov	r5, r3
 8008c18:	e6d1      	b.n	80089be <atan+0x3e>
 8008c1a:	a51d      	add	r5, pc, #116	; (adr r5, 8008c90 <atan+0x310>)
 8008c1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008c20:	e6cd      	b.n	80089be <atan+0x3e>
 8008c22:	bf00      	nop
 8008c24:	f3af 8000 	nop.w
 8008c28:	54442d18 	.word	0x54442d18
 8008c2c:	bff921fb 	.word	0xbff921fb
 8008c30:	8800759c 	.word	0x8800759c
 8008c34:	7e37e43c 	.word	0x7e37e43c
 8008c38:	e322da11 	.word	0xe322da11
 8008c3c:	3f90ad3a 	.word	0x3f90ad3a
 8008c40:	24760deb 	.word	0x24760deb
 8008c44:	3fa97b4b 	.word	0x3fa97b4b
 8008c48:	a0d03d51 	.word	0xa0d03d51
 8008c4c:	3fb10d66 	.word	0x3fb10d66
 8008c50:	c54c206e 	.word	0xc54c206e
 8008c54:	3fb745cd 	.word	0x3fb745cd
 8008c58:	920083ff 	.word	0x920083ff
 8008c5c:	3fc24924 	.word	0x3fc24924
 8008c60:	5555550d 	.word	0x5555550d
 8008c64:	3fd55555 	.word	0x3fd55555
 8008c68:	2c6a6c2f 	.word	0x2c6a6c2f
 8008c6c:	bfa2b444 	.word	0xbfa2b444
 8008c70:	52defd9a 	.word	0x52defd9a
 8008c74:	3fadde2d 	.word	0x3fadde2d
 8008c78:	af749a6d 	.word	0xaf749a6d
 8008c7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008c80:	fe231671 	.word	0xfe231671
 8008c84:	3fbc71c6 	.word	0x3fbc71c6
 8008c88:	9998ebc4 	.word	0x9998ebc4
 8008c8c:	3fc99999 	.word	0x3fc99999
 8008c90:	54442d18 	.word	0x54442d18
 8008c94:	3ff921fb 	.word	0x3ff921fb
 8008c98:	440fffff 	.word	0x440fffff
 8008c9c:	7ff00000 	.word	0x7ff00000
 8008ca0:	3fdbffff 	.word	0x3fdbffff
 8008ca4:	3ff00000 	.word	0x3ff00000
 8008ca8:	3ff2ffff 	.word	0x3ff2ffff
 8008cac:	40038000 	.word	0x40038000
 8008cb0:	3ff80000 	.word	0x3ff80000
 8008cb4:	bff00000 	.word	0xbff00000
 8008cb8:	08009418 	.word	0x08009418
 8008cbc:	080093f8 	.word	0x080093f8

08008cc0 <fabs>:
 8008cc0:	ec51 0b10 	vmov	r0, r1, d0
 8008cc4:	ee10 2a10 	vmov	r2, s0
 8008cc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ccc:	ec43 2b10 	vmov	d0, r2, r3
 8008cd0:	4770      	bx	lr
 8008cd2:	0000      	movs	r0, r0
 8008cd4:	0000      	movs	r0, r0
	...

08008cd8 <floor>:
 8008cd8:	ec51 0b10 	vmov	r0, r1, d0
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008ce4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008ce8:	2e13      	cmp	r6, #19
 8008cea:	ee10 5a10 	vmov	r5, s0
 8008cee:	ee10 8a10 	vmov	r8, s0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	dc32      	bgt.n	8008d5c <floor+0x84>
 8008cf6:	2e00      	cmp	r6, #0
 8008cf8:	da14      	bge.n	8008d24 <floor+0x4c>
 8008cfa:	a333      	add	r3, pc, #204	; (adr r3, 8008dc8 <floor+0xf0>)
 8008cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d00:	f7f7 fabc 	bl	800027c <__adddf3>
 8008d04:	2200      	movs	r2, #0
 8008d06:	2300      	movs	r3, #0
 8008d08:	f7f7 fefe 	bl	8000b08 <__aeabi_dcmpgt>
 8008d0c:	b138      	cbz	r0, 8008d1e <floor+0x46>
 8008d0e:	2c00      	cmp	r4, #0
 8008d10:	da57      	bge.n	8008dc2 <floor+0xea>
 8008d12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008d16:	431d      	orrs	r5, r3
 8008d18:	d001      	beq.n	8008d1e <floor+0x46>
 8008d1a:	4c2d      	ldr	r4, [pc, #180]	; (8008dd0 <floor+0xf8>)
 8008d1c:	2500      	movs	r5, #0
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	e025      	b.n	8008d70 <floor+0x98>
 8008d24:	4f2b      	ldr	r7, [pc, #172]	; (8008dd4 <floor+0xfc>)
 8008d26:	4137      	asrs	r7, r6
 8008d28:	ea01 0307 	and.w	r3, r1, r7
 8008d2c:	4303      	orrs	r3, r0
 8008d2e:	d01f      	beq.n	8008d70 <floor+0x98>
 8008d30:	a325      	add	r3, pc, #148	; (adr r3, 8008dc8 <floor+0xf0>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 faa1 	bl	800027c <__adddf3>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	f7f7 fee3 	bl	8000b08 <__aeabi_dcmpgt>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d0eb      	beq.n	8008d1e <floor+0x46>
 8008d46:	2c00      	cmp	r4, #0
 8008d48:	bfbe      	ittt	lt
 8008d4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008d4e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008d52:	19a4      	addlt	r4, r4, r6
 8008d54:	ea24 0407 	bic.w	r4, r4, r7
 8008d58:	2500      	movs	r5, #0
 8008d5a:	e7e0      	b.n	8008d1e <floor+0x46>
 8008d5c:	2e33      	cmp	r6, #51	; 0x33
 8008d5e:	dd0b      	ble.n	8008d78 <floor+0xa0>
 8008d60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d64:	d104      	bne.n	8008d70 <floor+0x98>
 8008d66:	ee10 2a10 	vmov	r2, s0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	f7f7 fa86 	bl	800027c <__adddf3>
 8008d70:	ec41 0b10 	vmov	d0, r0, r1
 8008d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d78:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d80:	fa23 f707 	lsr.w	r7, r3, r7
 8008d84:	4207      	tst	r7, r0
 8008d86:	d0f3      	beq.n	8008d70 <floor+0x98>
 8008d88:	a30f      	add	r3, pc, #60	; (adr r3, 8008dc8 <floor+0xf0>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fa75 	bl	800027c <__adddf3>
 8008d92:	2200      	movs	r2, #0
 8008d94:	2300      	movs	r3, #0
 8008d96:	f7f7 feb7 	bl	8000b08 <__aeabi_dcmpgt>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d0bf      	beq.n	8008d1e <floor+0x46>
 8008d9e:	2c00      	cmp	r4, #0
 8008da0:	da02      	bge.n	8008da8 <floor+0xd0>
 8008da2:	2e14      	cmp	r6, #20
 8008da4:	d103      	bne.n	8008dae <floor+0xd6>
 8008da6:	3401      	adds	r4, #1
 8008da8:	ea25 0507 	bic.w	r5, r5, r7
 8008dac:	e7b7      	b.n	8008d1e <floor+0x46>
 8008dae:	2301      	movs	r3, #1
 8008db0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008db4:	fa03 f606 	lsl.w	r6, r3, r6
 8008db8:	4435      	add	r5, r6
 8008dba:	4545      	cmp	r5, r8
 8008dbc:	bf38      	it	cc
 8008dbe:	18e4      	addcc	r4, r4, r3
 8008dc0:	e7f2      	b.n	8008da8 <floor+0xd0>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	462c      	mov	r4, r5
 8008dc6:	e7aa      	b.n	8008d1e <floor+0x46>
 8008dc8:	8800759c 	.word	0x8800759c
 8008dcc:	7e37e43c 	.word	0x7e37e43c
 8008dd0:	bff00000 	.word	0xbff00000
 8008dd4:	000fffff 	.word	0x000fffff

08008dd8 <scalbn>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	ec55 4b10 	vmov	r4, r5, d0
 8008dde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008de2:	4606      	mov	r6, r0
 8008de4:	462b      	mov	r3, r5
 8008de6:	b99a      	cbnz	r2, 8008e10 <scalbn+0x38>
 8008de8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008dec:	4323      	orrs	r3, r4
 8008dee:	d036      	beq.n	8008e5e <scalbn+0x86>
 8008df0:	4b39      	ldr	r3, [pc, #228]	; (8008ed8 <scalbn+0x100>)
 8008df2:	4629      	mov	r1, r5
 8008df4:	ee10 0a10 	vmov	r0, s0
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f7f7 fbf5 	bl	80005e8 <__aeabi_dmul>
 8008dfe:	4b37      	ldr	r3, [pc, #220]	; (8008edc <scalbn+0x104>)
 8008e00:	429e      	cmp	r6, r3
 8008e02:	4604      	mov	r4, r0
 8008e04:	460d      	mov	r5, r1
 8008e06:	da10      	bge.n	8008e2a <scalbn+0x52>
 8008e08:	a32b      	add	r3, pc, #172	; (adr r3, 8008eb8 <scalbn+0xe0>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	e03a      	b.n	8008e86 <scalbn+0xae>
 8008e10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008e14:	428a      	cmp	r2, r1
 8008e16:	d10c      	bne.n	8008e32 <scalbn+0x5a>
 8008e18:	ee10 2a10 	vmov	r2, s0
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4629      	mov	r1, r5
 8008e20:	f7f7 fa2c 	bl	800027c <__adddf3>
 8008e24:	4604      	mov	r4, r0
 8008e26:	460d      	mov	r5, r1
 8008e28:	e019      	b.n	8008e5e <scalbn+0x86>
 8008e2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e2e:	460b      	mov	r3, r1
 8008e30:	3a36      	subs	r2, #54	; 0x36
 8008e32:	4432      	add	r2, r6
 8008e34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008e38:	428a      	cmp	r2, r1
 8008e3a:	dd08      	ble.n	8008e4e <scalbn+0x76>
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	a120      	add	r1, pc, #128	; (adr r1, 8008ec0 <scalbn+0xe8>)
 8008e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e44:	da1c      	bge.n	8008e80 <scalbn+0xa8>
 8008e46:	a120      	add	r1, pc, #128	; (adr r1, 8008ec8 <scalbn+0xf0>)
 8008e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e4c:	e018      	b.n	8008e80 <scalbn+0xa8>
 8008e4e:	2a00      	cmp	r2, #0
 8008e50:	dd08      	ble.n	8008e64 <scalbn+0x8c>
 8008e52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e5e:	ec45 4b10 	vmov	d0, r4, r5
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008e68:	da19      	bge.n	8008e9e <scalbn+0xc6>
 8008e6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e6e:	429e      	cmp	r6, r3
 8008e70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008e74:	dd0a      	ble.n	8008e8c <scalbn+0xb4>
 8008e76:	a112      	add	r1, pc, #72	; (adr r1, 8008ec0 <scalbn+0xe8>)
 8008e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e2      	bne.n	8008e46 <scalbn+0x6e>
 8008e80:	a30f      	add	r3, pc, #60	; (adr r3, 8008ec0 <scalbn+0xe8>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fbaf 	bl	80005e8 <__aeabi_dmul>
 8008e8a:	e7cb      	b.n	8008e24 <scalbn+0x4c>
 8008e8c:	a10a      	add	r1, pc, #40	; (adr r1, 8008eb8 <scalbn+0xe0>)
 8008e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0b8      	beq.n	8008e08 <scalbn+0x30>
 8008e96:	a10e      	add	r1, pc, #56	; (adr r1, 8008ed0 <scalbn+0xf8>)
 8008e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e9c:	e7b4      	b.n	8008e08 <scalbn+0x30>
 8008e9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ea2:	3236      	adds	r2, #54	; 0x36
 8008ea4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ea8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008eac:	4620      	mov	r0, r4
 8008eae:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <scalbn+0x108>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	e7e8      	b.n	8008e86 <scalbn+0xae>
 8008eb4:	f3af 8000 	nop.w
 8008eb8:	c2f8f359 	.word	0xc2f8f359
 8008ebc:	01a56e1f 	.word	0x01a56e1f
 8008ec0:	8800759c 	.word	0x8800759c
 8008ec4:	7e37e43c 	.word	0x7e37e43c
 8008ec8:	8800759c 	.word	0x8800759c
 8008ecc:	fe37e43c 	.word	0xfe37e43c
 8008ed0:	c2f8f359 	.word	0xc2f8f359
 8008ed4:	81a56e1f 	.word	0x81a56e1f
 8008ed8:	43500000 	.word	0x43500000
 8008edc:	ffff3cb0 	.word	0xffff3cb0
 8008ee0:	3c900000 	.word	0x3c900000

08008ee4 <_init>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr

08008ef0 <_fini>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	bf00      	nop
 8008ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef6:	bc08      	pop	{r3}
 8008ef8:	469e      	mov	lr, r3
 8008efa:	4770      	bx	lr
