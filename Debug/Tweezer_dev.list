
Tweezer_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a164  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023830  0800a2f8  0800a2f8  0001a2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802db28  0802db28  000400d8  2**0
                  CONTENTS
  4 .ARM          00000008  0802db28  0802db28  0003db28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802db30  0802db30  000400d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802db30  0802db30  0003db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802db34  0802db34  0003db34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0802db38  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d68  200000d8  0802dc10  000400d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  0802dc10  00040e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017963  00000000  00000000  00040108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298b  00000000  00000000  00057a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0005a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0005b678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e6e  00000000  00000000  0005c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b34  00000000  00000000  0008266e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec760  00000000  00000000  000971a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df4  00000000  00000000  00183958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2dc 	.word	0x0800a2dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800a2dc 	.word	0x0800a2dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f3c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d013      	beq.n	8000f70 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f4c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f50:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00b      	beq.n	8000f70 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f58:	e000      	b.n	8000f5c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f5a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f9      	beq.n	8000f5a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <movingAvg>:
static void MX_DMA_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
int movingAvg(int *ptrArrNumbers, long *ptrSum, int pos, int len, int nextNum)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	68f9      	ldr	r1, [r7, #12]
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad2      	subs	r2, r2, r3
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	441a      	add	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]
  //return the average
  return *ptrSum / len;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <configure>:
// configures data into an array of 4 individual values
void configure(int* ptr, int D){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
      //int dec = D*100;
		int dec = D;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	613b      	str	r3, [r7, #16]
      ptr += 3;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	330c      	adds	r3, #12
 8000fda:	607b      	str	r3, [r7, #4]
      for(int i = 0; i < 4; i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e029      	b.n	8001036 <configure+0x6e>
            int x = pow(10,i);
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff fa96 	bl	8000514 <__aeabi_i2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	ec43 2b11 	vmov	d1, r2, r3
 8000ff0:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001048 <configure+0x80>
 8000ff4:	f006 feba 	bl	8007d6c <pow>
 8000ff8:	ec53 2b10 	vmov	r2, r3, d0
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fda2 	bl	8000b48 <__aeabi_d2iz>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
            *ptr = (dec/x)%10;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <configure+0x88>)
 8001012:	fb83 2301 	smull	r2, r3, r3, r1
 8001016:	109a      	asrs	r2, r3, #2
 8001018:	17cb      	asrs	r3, r1, #31
 800101a:	1ad2      	subs	r2, r2, r3
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	1aca      	subs	r2, r1, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
            ptr--;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3b04      	subs	r3, #4
 800102e:	607b      	str	r3, [r7, #4]
      for(int i = 0; i < 4; i++){
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b03      	cmp	r3, #3
 800103a:	ddd2      	ble.n	8000fe2 <configure+0x1a>
      }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	00000000 	.word	0x00000000
 800104c:	40240000 	.word	0x40240000
 8001050:	66666667 	.word	0x66666667

08001054 <DisplayUpdate>:
void DisplayUpdate(uint16_t* displayptr, int* dataptr){
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	; 0x40
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
      int LS = 3;
 800105e:	2303      	movs	r3, #3
 8001060:	63fb      	str	r3, [r7, #60]	; 0x3c
      uint16_t *originaldisplayptr = displayptr;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

      for(int j = 2; j < 6; j++){
 8001066:	2302      	movs	r3, #2
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
 800106a:	e192      	b.n	8001392 <DisplayUpdate+0x33e>
            displayptr = originaldisplayptr;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	607b      	str	r3, [r7, #4]
            switch (*dataptr){
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b09      	cmp	r3, #9
 8001076:	f200 8182 	bhi.w	800137e <DisplayUpdate+0x32a>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <DisplayUpdate+0x2c>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010a9 	.word	0x080010a9
 8001084:	080010e9 	.word	0x080010e9
 8001088:	0800114d 	.word	0x0800114d
 800108c:	0800118d 	.word	0x0800118d
 8001090:	080011cd 	.word	0x080011cd
 8001094:	0800120d 	.word	0x0800120d
 8001098:	0800124d 	.word	0x0800124d
 800109c:	0800128d 	.word	0x0800128d
 80010a0:	080012cd 	.word	0x080012cd
 80010a4:	0800130d 	.word	0x0800130d
                  case 0:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80010a8:	2300      	movs	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
 80010ac:	e018      	b.n	80010e0 <DisplayUpdate+0x8c>
                              *displayptr = Display[i] ^ (X0[i] << LS);
 80010ae:	4a99      	ldr	r2, [pc, #612]	; (8001314 <DisplayUpdate+0x2c0>)
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4997      	ldr	r1, [pc, #604]	; (8001318 <DisplayUpdate+0x2c4>)
 80010ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c0:	4619      	mov	r1, r3
 80010c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4053      	eors	r3, r2
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3302      	adds	r3, #2
 80010d8:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80010da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010dc:	3301      	adds	r3, #1
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
 80010e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d9e3      	bls.n	80010ae <DisplayUpdate+0x5a>
                        }
                        break;
 80010e6:	e14a      	b.n	800137e <DisplayUpdate+0x32a>
                  case 1:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80010e8:	2300      	movs	r3, #0
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
 80010ec:	e02a      	b.n	8001144 <DisplayUpdate+0xf0>
                              *displayptr = Display[i] ^ (X1[i] << LS);
 80010ee:	4a89      	ldr	r2, [pc, #548]	; (8001314 <DisplayUpdate+0x2c0>)
 80010f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4988      	ldr	r1, [pc, #544]	; (800131c <DisplayUpdate+0x2c8>)
 80010fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001100:	4619      	mov	r1, r3
 8001102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	b21b      	sxth	r3, r3
 800110a:	4053      	eors	r3, r2
 800110c:	b21b      	sxth	r3, r3
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	801a      	strh	r2, [r3, #0]
                              printf("LS = %i\n", X1[i] << LS);
 8001114:	4a81      	ldr	r2, [pc, #516]	; (800131c <DisplayUpdate+0x2c8>)
 8001116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800111c:	461a      	mov	r2, r3
 800111e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	4619      	mov	r1, r3
 8001126:	487e      	ldr	r0, [pc, #504]	; (8001320 <DisplayUpdate+0x2cc>)
 8001128:	f005 fda0 	bl	8006c6c <iprintf>
                              printf("display ptr = %i\n", *displayptr);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	487c      	ldr	r0, [pc, #496]	; (8001324 <DisplayUpdate+0x2d0>)
 8001134:	f005 fd9a 	bl	8006c6c <iprintf>
                              displayptr++;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3302      	adds	r3, #2
 800113c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001140:	3301      	adds	r3, #1
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
 8001144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001146:	2b03      	cmp	r3, #3
 8001148:	d9d1      	bls.n	80010ee <DisplayUpdate+0x9a>
                        }
                        break;
 800114a:	e118      	b.n	800137e <DisplayUpdate+0x32a>
                  case 2:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001150:	e018      	b.n	8001184 <DisplayUpdate+0x130>
                              *displayptr = Display[i] ^ (X2[i] << LS);
 8001152:	4a70      	ldr	r2, [pc, #448]	; (8001314 <DisplayUpdate+0x2c0>)
 8001154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800115a:	b21a      	sxth	r2, r3
 800115c:	4972      	ldr	r1, [pc, #456]	; (8001328 <DisplayUpdate+0x2d4>)
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001164:	4619      	mov	r1, r3
 8001166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	b21b      	sxth	r3, r3
 800116e:	4053      	eors	r3, r2
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3302      	adds	r3, #2
 800117c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	3301      	adds	r3, #1
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	2b03      	cmp	r3, #3
 8001188:	d9e3      	bls.n	8001152 <DisplayUpdate+0xfe>
                        }
                        break;
 800118a:	e0f8      	b.n	800137e <DisplayUpdate+0x32a>
                  case 3:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001190:	e018      	b.n	80011c4 <DisplayUpdate+0x170>
                              *displayptr = Display[i] ^ (X3[i] << LS);
 8001192:	4a60      	ldr	r2, [pc, #384]	; (8001314 <DisplayUpdate+0x2c0>)
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119a:	b21a      	sxth	r2, r3
 800119c:	4963      	ldr	r1, [pc, #396]	; (800132c <DisplayUpdate+0x2d8>)
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011a4:	4619      	mov	r1, r3
 80011a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4053      	eors	r3, r2
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3302      	adds	r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	3301      	adds	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d9e3      	bls.n	8001192 <DisplayUpdate+0x13e>
                        }
                        break;
 80011ca:	e0d8      	b.n	800137e <DisplayUpdate+0x32a>
                  case 4:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
 80011d0:	e018      	b.n	8001204 <DisplayUpdate+0x1b0>
                              *displayptr = Display[i] ^ (X4[i] << LS);
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <DisplayUpdate+0x2c0>)
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4954      	ldr	r1, [pc, #336]	; (8001330 <DisplayUpdate+0x2dc>)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e4:	4619      	mov	r1, r3
 80011e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4053      	eors	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3302      	adds	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	2b03      	cmp	r3, #3
 8001208:	d9e3      	bls.n	80011d2 <DisplayUpdate+0x17e>
                        }
                        break;
 800120a:	e0b8      	b.n	800137e <DisplayUpdate+0x32a>
                  case 5:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	e018      	b.n	8001244 <DisplayUpdate+0x1f0>
                              *displayptr = Display[i] ^ (X5[i] << LS);
 8001212:	4a40      	ldr	r2, [pc, #256]	; (8001314 <DisplayUpdate+0x2c0>)
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800121a:	b21a      	sxth	r2, r3
 800121c:	4945      	ldr	r1, [pc, #276]	; (8001334 <DisplayUpdate+0x2e0>)
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001224:	4619      	mov	r1, r3
 8001226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	b21b      	sxth	r3, r3
 800122e:	4053      	eors	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	b29a      	uxth	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3302      	adds	r3, #2
 800123c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	3301      	adds	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d9e3      	bls.n	8001212 <DisplayUpdate+0x1be>
                        }
                        break;
 800124a:	e098      	b.n	800137e <DisplayUpdate+0x32a>
                  case 6:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	e018      	b.n	8001284 <DisplayUpdate+0x230>
                              *displayptr = Display[i] ^ (X6[i] << LS);
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <DisplayUpdate+0x2c0>)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	b21a      	sxth	r2, r3
 800125c:	4936      	ldr	r1, [pc, #216]	; (8001338 <DisplayUpdate+0x2e4>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001264:	4619      	mov	r1, r3
 8001266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	b21b      	sxth	r3, r3
 800126e:	4053      	eors	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3302      	adds	r3, #2
 800127c:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d9e3      	bls.n	8001252 <DisplayUpdate+0x1fe>
                        }
                        break;
 800128a:	e078      	b.n	800137e <DisplayUpdate+0x32a>
                  case 7:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	e018      	b.n	80012c4 <DisplayUpdate+0x270>
                              *displayptr = Display[i] ^ (X7[i] << LS);
 8001292:	4a20      	ldr	r2, [pc, #128]	; (8001314 <DisplayUpdate+0x2c0>)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129a:	b21a      	sxth	r2, r3
 800129c:	4927      	ldr	r1, [pc, #156]	; (800133c <DisplayUpdate+0x2e8>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a4:	4619      	mov	r1, r3
 80012a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4053      	eors	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3302      	adds	r3, #2
 80012bc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d9e3      	bls.n	8001292 <DisplayUpdate+0x23e>
                        }
                        break;
 80012ca:	e058      	b.n	800137e <DisplayUpdate+0x32a>
                  case 8:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e018      	b.n	8001304 <DisplayUpdate+0x2b0>
                              *displayptr = Display[i] ^ (X8[i] << LS);
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <DisplayUpdate+0x2c0>)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4918      	ldr	r1, [pc, #96]	; (8001340 <DisplayUpdate+0x2ec>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e4:	4619      	mov	r1, r3
 80012e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4053      	eors	r3, r2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3302      	adds	r3, #2
 80012fc:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9e3      	bls.n	80012d2 <DisplayUpdate+0x27e>
                        }
                        break;
 800130a:	e038      	b.n	800137e <DisplayUpdate+0x32a>
                  case 9:
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	e031      	b.n	8001376 <DisplayUpdate+0x322>
 8001312:	bf00      	nop
 8001314:	200000f4 	.word	0x200000f4
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	0800a2f8 	.word	0x0800a2f8
 8001324:	0800a304 	.word	0x0800a304
 8001328:	20000010 	.word	0x20000010
 800132c:	20000018 	.word	0x20000018
 8001330:	20000020 	.word	0x20000020
 8001334:	20000028 	.word	0x20000028
 8001338:	20000030 	.word	0x20000030
 800133c:	20000038 	.word	0x20000038
 8001340:	20000040 	.word	0x20000040
                              *displayptr = Display[i] ^ (X9[i] << LS);
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <DisplayUpdate+0x350>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134c:	b21a      	sxth	r2, r3
 800134e:	4916      	ldr	r1, [pc, #88]	; (80013a8 <DisplayUpdate+0x354>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001356:	4619      	mov	r1, r3
 8001358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	b21b      	sxth	r3, r3
 8001360:	4053      	eors	r3, r2
 8001362:	b21b      	sxth	r3, r3
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	801a      	strh	r2, [r3, #0]
                              displayptr++;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3302      	adds	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
                        for(int i = 0; i < sizeof(data)/sizeof(data[0]); i++){
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	3301      	adds	r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d9e3      	bls.n	8001344 <DisplayUpdate+0x2f0>
                        }
                        break;
 800137c:	bf00      	nop
            }
            LS =  LS + j;
 800137e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001382:	4413      	add	r3, r2
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
            dataptr++;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3304      	adds	r3, #4
 800138a:	603b      	str	r3, [r7, #0]
      for(int j = 2; j < 6; j++){
 800138c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800138e:	3301      	adds	r3, #1
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
 8001392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001394:	2b05      	cmp	r3, #5
 8001396:	f77f ae69 	ble.w	800106c <DisplayUpdate+0x18>
      }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200000f4 	.word	0x200000f4
 80013a8:	20000048 	.word	0x20000048

080013ac <_write>:
//DISPLAYYYYYY^^^^^^^
int _write(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e009      	b.n	80013d6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	60ba      	str	r2, [r7, #8]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fdb0 	bl	8000f30 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbf1      	blt.n	80013c2 <_write+0x16>
  return len;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <generateLuts>:
void generateLuts()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
    for (int i = 0; i < 32; i++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e03c      	b.n	800146e <generateLuts+0x86>
    {
        double angle = (2 * M_PI * (double)i * k) / 32;
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff f88d 	bl	8000514 <__aeabi_i2d>
 80013fa:	a325      	add	r3, pc, #148	; (adr r3, 8001490 <generateLuts+0xa8>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f8f2 	bl	80005e8 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <generateLuts+0x98>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f8e9 	bl	80005e8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <generateLuts+0x9c>)
 8001424:	f7ff fa0a 	bl	800083c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	e9c7 2300 	strd	r2, r3, [r7]

        cosAngLut[i] = cos(angle);
 8001430:	ed97 0b00 	vldr	d0, [r7]
 8001434:	f006 fb70 	bl	8007b18 <cos>
 8001438:	eeb0 7a40 	vmov.f32	s14, s0
 800143c:	eef0 7a60 	vmov.f32	s15, s1
 8001440:	4a11      	ldr	r2, [pc, #68]	; (8001488 <generateLuts+0xa0>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	ed83 7b00 	vstr	d7, [r3]
        sinAngLut[i] = sin(angle);
 800144c:	ed97 0b00 	vldr	d0, [r7]
 8001450:	f006 fbfa 	bl	8007c48 <sin>
 8001454:	eeb0 7a40 	vmov.f32	s14, s0
 8001458:	eef0 7a60 	vmov.f32	s15, s1
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <generateLuts+0xa4>)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < 32; i++)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b1f      	cmp	r3, #31
 8001472:	ddbf      	ble.n	80013f4 <generateLuts+0xc>
    }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000050 	.word	0x20000050
 8001484:	40400000 	.word	0x40400000
 8001488:	20000680 	.word	0x20000680
 800148c:	20000780 	.word	0x20000780
 8001490:	54442d18 	.word	0x54442d18
 8001494:	401921fb 	.word	0x401921fb

08001498 <calcBuffLoc>:
uint32_t calcBuffLoc(uint32_t startPos, uint32_t offSet, uint32_t buffSize)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
    uint32_t newLoc = startPos + offSet;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

    if (newLoc < buffSize)
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d201      	bcs.n	80014b8 <calcBuffLoc+0x20>
    {
        return newLoc;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	e002      	b.n	80014be <calcBuffLoc+0x26>
    }
    else
    {
        return newLoc - buffSize; // Loop Around
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	1ad3      	subs	r3, r2, r3
    }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	0000      	movs	r0, r0
 80014cc:	0000      	movs	r0, r0
	...

080014d0 <constrainAngle>:
float constrainAngle(float x){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
	x= fmod(x,360);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff f82c 	bl	8000538 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001530 <constrainAngle+0x60>
 80014e8:	ec43 2b10 	vmov	d0, r2, r3
 80014ec:	f006 fc02 	bl	8007cf4 <fmod>
 80014f0:	ec53 2b10 	vmov	r2, r3, d0
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb4e 	bl	8000b98 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	607b      	str	r3, [r7, #4]
	if (x<0){
 8001500:	edd7 7a01 	vldr	s15, [r7, #4]
 8001504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d507      	bpl.n	800151e <constrainAngle+0x4e>
		x += 360;
 800150e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001512:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001538 <constrainAngle+0x68>
 8001516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800151a:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return x;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ee07 3a90 	vmov	s15, r3
}
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	40768000 	.word	0x40768000
 8001538:	43b40000 	.word	0x43b40000

0800153c <generate_ODR_Buff>:
void generate_ODR_Buff()
{
 800153c:	b580      	push	{r7, lr}
 800153e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001542:	af00      	add	r7, sp, #0
	const uint8_t singlePhaseBuff[TX_BUFF_SIZE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0};
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	4a9c      	ldr	r2, [pc, #624]	; (80017bc <generate_ODR_Buff+0x280>)
 800154a:	4618      	mov	r0, r3
 800154c:	4611      	mov	r1, r2
 800154e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001552:	461a      	mov	r2, r3
 8001554:	f005 fb74 	bl	8006c40 <memcpy>
	//const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 1, 1, 1, 1, 1};//ORIGINAL
	//const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 0, 0, 0, 0, 1};//shorter active period
	//const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 0, 0, 0, 0, 0};//NO BIAS TEST
	const uint8_t biasBuff[BIAS_BUFF_SIZE] = {1, 1, 1, 0, 0, 0, 0, 0};// FOR TESTING ON BREADBOARD
 8001558:	463b      	mov	r3, r7
 800155a:	4a99      	ldr	r2, [pc, #612]	; (80017c0 <generate_ODR_Buff+0x284>)
 800155c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001560:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t tx0Loc, tx1Loc, tx2Loc, tx3Loc, tx4Loc, tx5Loc, tx6Loc, tx7Loc = 0; // 0 ... 512-1: TX buffer locations
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	uint32_t biasLoc = 0;                                                        // 0 ... 8-1: Bias buffer location
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	uint32_t period = 0;                                                         // Period signal current output pin state
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	uint32_t timeBase = 0;                                                       // Timebase signal current output pin state
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	uint32_t adcTrig = 0;                                                        // ADC external trigger signal current output pin state
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint32_t ODRVal = 0;                                                        // Output data register state for all signals combined
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800158e:	e109      	b.n	80017a4 <generate_ODR_Buff+0x268>
	{
		tx0Loc = i;
 8001590:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001594:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		/* Calculate other TX signals LUT location 45 degrees phase shifted */
		tx1Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 1, TX_BUFF_SIZE);
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	2140      	movs	r1, #64	; 0x40
 800159e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015a2:	f7ff ff79 	bl	8001498 <calcBuffLoc>
 80015a6:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		tx2Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 2, TX_BUFF_SIZE);
 80015aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015b4:	f7ff ff70 	bl	8001498 <calcBuffLoc>
 80015b8:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		tx3Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 3, TX_BUFF_SIZE);
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	21c0      	movs	r1, #192	; 0xc0
 80015c2:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015c6:	f7ff ff67 	bl	8001498 <calcBuffLoc>
 80015ca:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		tx4Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 4, TX_BUFF_SIZE);
 80015ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d6:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015da:	f7ff ff5d 	bl	8001498 <calcBuffLoc>
 80015de:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		tx5Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 5, TX_BUFF_SIZE);
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80015ea:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80015ee:	f7ff ff53 	bl	8001498 <calcBuffLoc>
 80015f2:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		tx6Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 6, TX_BUFF_SIZE);
 80015f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80015fe:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001602:	f7ff ff49 	bl	8001498 <calcBuffLoc>
 8001606:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
		tx7Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 7, TX_BUFF_SIZE);
 800160a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001612:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001616:	f7ff ff3f 	bl	8001498 <calcBuffLoc>
 800161a:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230

		/* calculate debug signals */
		period = (tx0Loc < TX_BUFF_SIZE / 2) ? 0 : 1;
 800161e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	bf8c      	ite	hi
 8001626:	2301      	movhi	r3, #1
 8001628:	2300      	movls	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		timeBase = (tx0Loc % 2) ? 0 : 1; //flips every sample, timebase for debugging
 8001630:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

		/* Calculate ADC external trigger signal */
		adcTrig = ((tx0Loc + 7) % 8) ? 0 : 1; //ADC trigger signal every 8T, Offset by 6 to align ADC trigger (rising edge) on second period when the bias is low.
 8001646:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800164a:	3307      	adds	r3, #7
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		//adcTrig = ((tx0Loc) % 8) ? 0 : 1;
		/* building the OCTL value */
		ODRVal = 0; //Set all pins low default
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

		if (singlePhaseBuff[tx0Loc])
 8001664:	f107 0208 	add.w	r2, r7, #8
 8001668:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <generate_ODR_Buff+0x144>
			ODRVal |= PWM0_Pin;
 8001674:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx1Loc])
 8001680:	f107 0208 	add.w	r2, r7, #8
 8001684:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001688:	4413      	add	r3, r2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <generate_ODR_Buff+0x160>
			ODRVal |= PWM45_Pin;
 8001690:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx2Loc])
 800169c:	f107 0208 	add.w	r2, r7, #8
 80016a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <generate_ODR_Buff+0x17c>
			ODRVal |= PWM90_Pin;
 80016ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx3Loc])
 80016b8:	f107 0208 	add.w	r2, r7, #8
 80016bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <generate_ODR_Buff+0x198>
			ODRVal |= PWM135_Pin;
 80016c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx4Loc])
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <generate_ODR_Buff+0x1b4>
			ODRVal |= PWM180_Pin;
 80016e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx5Loc])
 80016f0:	f107 0208 	add.w	r2, r7, #8
 80016f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <generate_ODR_Buff+0x1d0>
			ODRVal |= PWM225_Pin; //STM32l433RCTxP does not have Port C Pin 5
 8001700:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001708:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx6Loc])
 800170c:	f107 0208 	add.w	r2, r7, #8
 8001710:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <generate_ODR_Buff+0x1ec>
			ODRVal |= PWM270_Pin;
 800171c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx7Loc])
 8001728:	f107 0208 	add.w	r2, r7, #8
 800172c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <generate_ODR_Buff+0x208>
			ODRVal |= PWM315_Pin;
 8001738:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (biasBuff[biasLoc])
 8001744:	463a      	mov	r2, r7
 8001746:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <generate_ODR_Buff+0x222>
			ODRVal |= BIAS_Pin; // Bias signal: 8T Period 3T LOW 5T HIGH
 8001752:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (adcTrig)
 800175e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <generate_ODR_Buff+0x236>
			ODRVal |= ADC_TRIG_OUT_Pin; // ADC external trigger signal: 8T Period
 8001766:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
			ODRVal |= TIMEBASE_Pin;     // DBG signal: TimeBase smallest period 1T
		if (period)
			ODRVal |= PERIOD_Pin; // DBG signal: Period is the modulated Sine period. 512/2=256, 256T HIGH followed by 256T LOW*/

		/* Store OCTL value in buffer */
		ODR_Buff[i] = ODRVal;
 8001772:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001776:	b299      	uxth	r1, r3
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <generate_ODR_Buff+0x288>)
 800177a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800177e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		/* Loop over bias signal template buffer when end is reached*/
		biasLoc++;
 8001782:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001786:	3301      	adds	r3, #1
 8001788:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
		if (biasLoc >= BIAS_BUFF_SIZE)
 800178c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001790:	2b07      	cmp	r3, #7
 8001792:	d902      	bls.n	800179a <generate_ODR_Buff+0x25e>
			biasLoc = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 800179a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800179e:	3301      	adds	r3, #1
 80017a0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80017a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80017a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ac:	f4ff aef0 	bcc.w	8001590 <generate_ODR_Buff+0x54>
	}
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0800a318 	.word	0x0800a318
 80017c0:	0800a518 	.word	0x0800a518
 80017c4:	200000fc 	.word	0x200000fc

080017c8 <sensor_signalProcessing>:
void sensor_signalProcessing()
{
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b08a      	sub	sp, #40	; 0x28
 80017ce:	af00      	add	r7, sp, #0
    /*Split even and odd samples */
    int eLoc = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    int oLoc = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < 64; i++)
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	e02c      	b.n	8001838 <sensor_signalProcessing+0x70>
    {
        if (i % 2)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d012      	beq.n	800180e <sensor_signalProcessing+0x46>
        {
            even[eLoc] = (double)processBuff[i];
 80017e8:	4a9f      	ldr	r2, [pc, #636]	; (8001a68 <sensor_signalProcessing+0x2a0>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe7f 	bl	80004f4 <__aeabi_ui2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	489c      	ldr	r0, [pc, #624]	; (8001a6c <sensor_signalProcessing+0x2a4>)
 80017fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fe:	00c9      	lsls	r1, r1, #3
 8001800:	4401      	add	r1, r0
 8001802:	e9c1 2300 	strd	r2, r3, [r1]
            eLoc++;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	3301      	adds	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
 800180c:	e011      	b.n	8001832 <sensor_signalProcessing+0x6a>
        }
        else
        {
            odd[oLoc] = (double)processBuff[i];
 800180e:	4a96      	ldr	r2, [pc, #600]	; (8001a68 <sensor_signalProcessing+0x2a0>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe6c 	bl	80004f4 <__aeabi_ui2d>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4893      	ldr	r0, [pc, #588]	; (8001a70 <sensor_signalProcessing+0x2a8>)
 8001822:	6a39      	ldr	r1, [r7, #32]
 8001824:	00c9      	lsls	r1, r1, #3
 8001826:	4401      	add	r1, r0
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
            oLoc++;
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	3301      	adds	r3, #1
 8001830:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < 64; i++)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3301      	adds	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2b3f      	cmp	r3, #63	; 0x3f
 800183c:	d9cf      	bls.n	80017de <sensor_signalProcessing+0x16>
        }
    }

    /* demodulate: convert sampled signal to sine*/
    for (uint32_t i = 0; i < 32; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	e018      	b.n	8001876 <sensor_signalProcessing+0xae>
    {
        demol[i] = even[i] - odd[i];
 8001844:	4a89      	ldr	r2, [pc, #548]	; (8001a6c <sensor_signalProcessing+0x2a4>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001850:	4a87      	ldr	r2, [pc, #540]	; (8001a70 <sensor_signalProcessing+0x2a8>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fd0c 	bl	8000278 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4883      	ldr	r0, [pc, #524]	; (8001a74 <sensor_signalProcessing+0x2ac>)
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	00c9      	lsls	r1, r1, #3
 800186a:	4401      	add	r1, r0
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint32_t i = 0; i < 32; i++)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	3301      	adds	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b1f      	cmp	r3, #31
 800187a:	d9e3      	bls.n	8001844 <sensor_signalProcessing+0x7c>
    //     sumrealTemp += (double)demolLp[i] * cos(angle);
    //     sumimagTemp += -(double)demolLp[i] * sin(angle);
    // }

    /* Fast dft using precomputed lookup tables for cos and sine part*/
    double sumrealTemp = 0;
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double sumimagTemp = 0;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 2302 	strd	r2, r3, [r7, #8]

    for (uint32_t i = 0; i < 32; i++)
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	e037      	b.n	800190a <sensor_signalProcessing+0x142>
    {
        sumrealTemp += (double)demol[i] * cosAngLut[i];
 800189a:	4a76      	ldr	r2, [pc, #472]	; (8001a74 <sensor_signalProcessing+0x2ac>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a6:	4a74      	ldr	r2, [pc, #464]	; (8001a78 <sensor_signalProcessing+0x2b0>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fe99 	bl	80005e8 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018be:	f7fe fcdd 	bl	800027c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        sumimagTemp += -(double)demol[i] * sinAngLut[i];
 80018ca:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <sensor_signalProcessing+0x2ac>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	4692      	mov	sl, r2
 80018d8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80018dc:	4a67      	ldr	r2, [pc, #412]	; (8001a7c <sensor_signalProcessing+0x2b4>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	4650      	mov	r0, sl
 80018ea:	4659      	mov	r1, fp
 80018ec:	f7fe fe7c 	bl	80005e8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f8:	f7fe fcc0 	bl	800027c <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 2302 	strd	r2, r3, [r7, #8]
    for (uint32_t i = 0; i < 32; i++)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b1f      	cmp	r3, #31
 800190e:	d9c4      	bls.n	800189a <sensor_signalProcessing+0xd2>
    }

    // dft coefficients at the frequency bin of interest (1hz) in complex form
    real = sumrealTemp; //X-axis
 8001910:	495b      	ldr	r1, [pc, #364]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 8001912:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001916:	e9c1 2300 	strd	r2, r3, [r1]
    imag = sumimagTemp; //Y-axis
 800191a:	495a      	ldr	r1, [pc, #360]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 800191c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001920:	e9c1 2300 	strd	r2, r3, [r1]

    // Calculate phase
    if (real >= 0 && imag >= 0)
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 8001926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f7ff f8df 	bl	8000af4 <__aeabi_dcmpge>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d026      	beq.n	800198a <sensor_signalProcessing+0x1c2>
 800193c:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f7ff f8d3 	bl	8000af4 <__aeabi_dcmpge>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01a      	beq.n	800198a <sensor_signalProcessing+0x1c2>
    {
        //1-Quadrant (top right) [+, +]
        phaseRad = atan2(imag, real);
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 8001956:	ed93 7b00 	vldr	d7, [r3]
 800195a:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 800195c:	ed93 6b00 	vldr	d6, [r3]
 8001960:	eeb0 1a46 	vmov.f32	s2, s12
 8001964:	eef0 1a66 	vmov.f32	s3, s13
 8001968:	eeb0 0a47 	vmov.f32	s0, s14
 800196c:	eef0 0a67 	vmov.f32	s1, s15
 8001970:	f006 f9be 	bl	8007cf0 <atan2>
 8001974:	eeb0 7a40 	vmov.f32	s14, s0
 8001978:	eef0 7a60 	vmov.f32	s15, s1
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <sensor_signalProcessing+0x2c0>)
 800197e:	ed83 7b00 	vstr	d7, [r3]
        quadrant = 1;
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <sensor_signalProcessing+0x2c4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e0b9      	b.n	8001afe <sensor_signalProcessing+0x336>
    }
    else if (real < 0 && imag >= 0)
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 800198c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f7ff f898 	bl	8000acc <__aeabi_dcmplt>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d026      	beq.n	80019f0 <sensor_signalProcessing+0x228>
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 80019a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f7ff f8a0 	bl	8000af4 <__aeabi_dcmpge>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01a      	beq.n	80019f0 <sensor_signalProcessing+0x228>
    {
        //2-Quadrant (top left) [-, +]
        phaseRad = atan2(imag, real);
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 80019bc:	ed93 7b00 	vldr	d7, [r3]
 80019c0:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 80019c2:	ed93 6b00 	vldr	d6, [r3]
 80019c6:	eeb0 1a46 	vmov.f32	s2, s12
 80019ca:	eef0 1a66 	vmov.f32	s3, s13
 80019ce:	eeb0 0a47 	vmov.f32	s0, s14
 80019d2:	eef0 0a67 	vmov.f32	s1, s15
 80019d6:	f006 f98b 	bl	8007cf0 <atan2>
 80019da:	eeb0 7a40 	vmov.f32	s14, s0
 80019de:	eef0 7a60 	vmov.f32	s15, s1
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <sensor_signalProcessing+0x2c0>)
 80019e4:	ed83 7b00 	vstr	d7, [r3]
        quadrant = 2;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <sensor_signalProcessing+0x2c4>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e086      	b.n	8001afe <sensor_signalProcessing+0x336>
    }
    else if (real < 0 && imag < 0)
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 80019f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	f7ff f865 	bl	8000acc <__aeabi_dcmplt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d043      	beq.n	8001a90 <sensor_signalProcessing+0x2c8>
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 8001a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	f7ff f859 	bl	8000acc <__aeabi_dcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d037      	beq.n	8001a90 <sensor_signalProcessing+0x2c8>
    {
        //3-Quadrant (bottom left) [-, -]
        phaseRad = 2 * M_PI + atan2(imag, real);
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <sensor_signalProcessing+0x2bc>)
 8001a22:	ed93 7b00 	vldr	d7, [r3]
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <sensor_signalProcessing+0x2b8>)
 8001a28:	ed93 6b00 	vldr	d6, [r3]
 8001a2c:	eeb0 1a46 	vmov.f32	s2, s12
 8001a30:	eef0 1a66 	vmov.f32	s3, s13
 8001a34:	eeb0 0a47 	vmov.f32	s0, s14
 8001a38:	eef0 0a67 	vmov.f32	s1, s15
 8001a3c:	f006 f958 	bl	8007cf0 <atan2>
 8001a40:	ec51 0b10 	vmov	r0, r1, d0
 8001a44:	a306      	add	r3, pc, #24	; (adr r3, 8001a60 <sensor_signalProcessing+0x298>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fc17 	bl	800027c <__adddf3>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <sensor_signalProcessing+0x2c0>)
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]
        quadrant = 3;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <sensor_signalProcessing+0x2c4>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e04e      	b.n	8001afe <sensor_signalProcessing+0x336>
 8001a60:	54442d18 	.word	0x54442d18
 8001a64:	401921fb 	.word	0x401921fb
 8001a68:	200005fc 	.word	0x200005fc
 8001a6c:	20000880 	.word	0x20000880
 8001a70:	20000980 	.word	0x20000980
 8001a74:	20000a80 	.word	0x20000a80
 8001a78:	20000680 	.word	0x20000680
 8001a7c:	20000780 	.word	0x20000780
 8001a80:	20000b80 	.word	0x20000b80
 8001a84:	20000b88 	.word	0x20000b88
 8001a88:	20000b98 	.word	0x20000b98
 8001a8c:	20000058 	.word	0x20000058
    }
    else if (real >= 0 && imag < 0)
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <sensor_signalProcessing+0x408>)
 8001a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f7ff f829 	bl	8000af4 <__aeabi_dcmpge>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02a      	beq.n	8001afe <sensor_signalProcessing+0x336>
 8001aa8:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <sensor_signalProcessing+0x40c>)
 8001aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f7ff f809 	bl	8000acc <__aeabi_dcmplt>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01e      	beq.n	8001afe <sensor_signalProcessing+0x336>
    {
        //4-Quadrant (bottom right) [+, -] #Optimization: do not check last quadrant just use else
        phaseRad = 2 * M_PI + atan2(imag, real);
 8001ac0:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <sensor_signalProcessing+0x40c>)
 8001ac2:	ed93 7b00 	vldr	d7, [r3]
 8001ac6:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <sensor_signalProcessing+0x408>)
 8001ac8:	ed93 6b00 	vldr	d6, [r3]
 8001acc:	eeb0 1a46 	vmov.f32	s2, s12
 8001ad0:	eef0 1a66 	vmov.f32	s3, s13
 8001ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad8:	eef0 0a67 	vmov.f32	s1, s15
 8001adc:	f006 f908 	bl	8007cf0 <atan2>
 8001ae0:	ec51 0b10 	vmov	r0, r1, d0
 8001ae4:	a336      	add	r3, pc, #216	; (adr r3, 8001bc0 <sensor_signalProcessing+0x3f8>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fbc7 	bl	800027c <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4939      	ldr	r1, [pc, #228]	; (8001bd8 <sensor_signalProcessing+0x410>)
 8001af4:	e9c1 2300 	strd	r2, r3, [r1]
        quadrant = 4;
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <sensor_signalProcessing+0x414>)
 8001afa:	2204      	movs	r2, #4
 8001afc:	601a      	str	r2, [r3, #0]
    }

    phaseDeg = (phaseRad * 180) / M_PI; // 0 to 360 degrees
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <sensor_signalProcessing+0x410>)
 8001b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <sensor_signalProcessing+0x418>)
 8001b0a:	f7fe fd6d 	bl	80005e8 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	a32c      	add	r3, pc, #176	; (adr r3, 8001bc8 <sensor_signalProcessing+0x400>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fe8e 	bl	800083c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	492f      	ldr	r1, [pc, #188]	; (8001be4 <sensor_signalProcessing+0x41c>)
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]
    phaseDegDisp = round((phaseRad * 180) / M_PI);
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <sensor_signalProcessing+0x410>)
 8001b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <sensor_signalProcessing+0x418>)
 8001b36:	f7fe fd57 	bl	80005e8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	a321      	add	r3, pc, #132	; (adr r3, 8001bc8 <sensor_signalProcessing+0x400>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fe78 	bl	800083c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	ec43 2b17 	vmov	d7, r2, r3
 8001b54:	eeb0 0a47 	vmov.f32	s0, s14
 8001b58:	eef0 0a67 	vmov.f32	s1, s15
 8001b5c:	f006 f82c 	bl	8007bb8 <round>
 8001b60:	eeb0 7a40 	vmov.f32	s14, s0
 8001b64:	eef0 7a60 	vmov.f32	s15, s1
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <sensor_signalProcessing+0x420>)
 8001b6a:	ed83 7b00 	vstr	d7, [r3]
    }
    else{
    	logcount = 1025;
    }*/
    // Calculate magnitude
    magnitude = sqrt(fabs(real) + fabs(imag));
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <sensor_signalProcessing+0x408>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	4614      	mov	r4, r2
 8001b76:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <sensor_signalProcessing+0x40c>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	4690      	mov	r8, r2
 8001b82:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b86:	4642      	mov	r2, r8
 8001b88:	464b      	mov	r3, r9
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fb75 	bl	800027c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ec43 2b17 	vmov	d7, r2, r3
 8001b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9e:	eef0 0a67 	vmov.f32	s1, s15
 8001ba2:	f006 f991 	bl	8007ec8 <sqrt>
 8001ba6:	eeb0 7a40 	vmov.f32	s14, s0
 8001baa:	eef0 7a60 	vmov.f32	s15, s1
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <sensor_signalProcessing+0x424>)
 8001bb0:	ed83 7b00 	vstr	d7, [r3]
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bbe:	bf00      	nop
 8001bc0:	54442d18 	.word	0x54442d18
 8001bc4:	401921fb 	.word	0x401921fb
 8001bc8:	54442d18 	.word	0x54442d18
 8001bcc:	400921fb 	.word	0x400921fb
 8001bd0:	20000b80 	.word	0x20000b80
 8001bd4:	20000b88 	.word	0x20000b88
 8001bd8:	20000b98 	.word	0x20000b98
 8001bdc:	20000058 	.word	0x20000058
 8001be0:	40668000 	.word	0x40668000
 8001be4:	20000ba0 	.word	0x20000ba0
 8001be8:	20000ba8 	.word	0x20000ba8
 8001bec:	20000b90 	.word	0x20000b90

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf6:	f000 ff5d 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bfa:	f000 f9a5 	bl	8001f48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8001bfe:	f000 fb59 	bl	80022b4 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c02:	f000 fb89 	bl	8002318 <MX_GPIO_Init>
  MX_LCD_Init();
 8001c06:	f000 fa59 	bl	80020bc <MX_LCD_Init>
  MX_ADC1_Init();
 8001c0a:	f000 f9f1 	bl	8001ff0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001c0e:	f000 fb21 	bl	8002254 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001c12:	f000 fb4f 	bl	80022b4 <MX_DMA_Init>
  MX_TIM6_Init();
 8001c16:	f000 fae7 	bl	80021e8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001c1a:	f000 fa95 	bl	8002148 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  generate_ODR_Buff();
 8001c1e:	f7ff fc8d 	bl	800153c <generate_ODR_Buff>
  generateLuts();
 8001c22:	f7ff fbe1 	bl	80013e8 <generateLuts>
  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)&ODR_Buff, (uint32_t)&GPIOC->ODR, TX_BUFF_SIZE);
 8001c26:	49b3      	ldr	r1, [pc, #716]	; (8001ef4 <main+0x304>)
 8001c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2c:	4ab2      	ldr	r2, [pc, #712]	; (8001ef8 <main+0x308>)
 8001c2e:	48b3      	ldr	r0, [pc, #716]	; (8001efc <main+0x30c>)
 8001c30:	f002 f9fa 	bl	8004028 <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8001c34:	4bb2      	ldr	r3, [pc, #712]	; (8001f00 <main+0x310>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4bb1      	ldr	r3, [pc, #708]	; (8001f00 <main+0x310>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c42:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim6);
 8001c44:	48ae      	ldr	r0, [pc, #696]	; (8001f00 <main+0x310>)
 8001c46:	f004 f925 	bl	8005e94 <HAL_TIM_Base_Start>
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples, SAMPLE_BUFF_SIZE);
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	49ad      	ldr	r1, [pc, #692]	; (8001f04 <main+0x314>)
 8001c4e:	48ae      	ldr	r0, [pc, #696]	; (8001f08 <main+0x318>)
 8001c50:	f001 fabc 	bl	80031cc <HAL_ADC_Start_DMA>
	for(int i=size-1; i>=0; ){
		  reverse[k++] = data[i--];
	}*/


	for(int i = 0; i < 4; i++){
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	e00a      	b.n	8001c70 <main+0x80>
		  printf("Display = %d \n", Display[i]);
 8001c5a:	4aac      	ldr	r2, [pc, #688]	; (8001f0c <main+0x31c>)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c62:	4619      	mov	r1, r3
 8001c64:	48aa      	ldr	r0, [pc, #680]	; (8001f10 <main+0x320>)
 8001c66:	f005 f801 	bl	8006c6c <iprintf>
	for(int i = 0; i < 4; i++){
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	ddf1      	ble.n	8001c5a <main+0x6a>
	}
	int arrNumbers[5] = {0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
	int pos = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
	  int newAvg = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
	  long sum = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	603b      	str	r3, [r7, #0]
	  int len = sizeof(arrNumbers) / sizeof(int);
 8001c90:	2305      	movs	r3, #5
 8001c92:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)==0){
 8001c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f002 fcc0 	bl	8004620 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <main+0xca>
		  zero = phaseDeg;
 8001ca6:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <main+0x324>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ff72 	bl	8000b98 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a98      	ldr	r2, [pc, #608]	; (8001f18 <main+0x328>)
 8001cb8:	6013      	str	r3, [r2, #0]
		  /*for(int i=0; i<len; i++){
			  arrNumbers[i] = 0;
		  }*/
	  }
	  if(dataRdyFlag)
 8001cba:	4b98      	ldr	r3, [pc, #608]	; (8001f1c <main+0x32c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8083 	beq.w	8001dca <main+0x1da>
	  {
		  sensor_signalProcessing();
 8001cc4:	f7ff fd80 	bl	80017c8 <sensor_signalProcessing>
		  memset(Display, 0x00, 8);
 8001cc8:	2208      	movs	r2, #8
 8001cca:	2100      	movs	r1, #0
 8001ccc:	488f      	ldr	r0, [pc, #572]	; (8001f0c <main+0x31c>)
 8001cce:	f004 ffc5 	bl	8006c5c <memset>
		 		  	  tempf = constrainAngle(phaseDeg-offset);
 8001cd2:	4b90      	ldr	r3, [pc, #576]	; (8001f14 <main+0x324>)
 8001cd4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cd8:	4b91      	ldr	r3, [pc, #580]	; (8001f20 <main+0x330>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc2b 	bl	8000538 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fac5 	bl	8000278 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff4f 	bl	8000b98 <__aeabi_d2f>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	ee00 3a10 	vmov	s0, r3
 8001d00:	f7ff fbe6 	bl	80014d0 <constrainAngle>
 8001d04:	eef0 7a40 	vmov.f32	s15, s0
 8001d08:	4b86      	ldr	r3, [pc, #536]	; (8001f24 <main+0x334>)
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempf *= 100;
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <main+0x334>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001f28 <main+0x338>
 8001d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1c:	4b81      	ldr	r3, [pc, #516]	; (8001f24 <main+0x334>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempi = (int)tempf;
 8001d22:	4b80      	ldr	r3, [pc, #512]	; (8001f24 <main+0x334>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2c:	ee17 2a90 	vmov	r2, s15
 8001d30:	4b7e      	ldr	r3, [pc, #504]	; (8001f2c <main+0x33c>)
 8001d32:	601a      	str	r2, [r3, #0]
		 		  	  tempf = constrainAngle(zero-offset);
 8001d34:	4b78      	ldr	r3, [pc, #480]	; (8001f18 <main+0x328>)
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <main+0x330>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d44:	eeb0 0a67 	vmov.f32	s0, s15
 8001d48:	f7ff fbc2 	bl	80014d0 <constrainAngle>
 8001d4c:	eef0 7a40 	vmov.f32	s15, s0
 8001d50:	4b74      	ldr	r3, [pc, #464]	; (8001f24 <main+0x334>)
 8001d52:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempf *= 100;
 8001d56:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <main+0x334>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001f28 <main+0x338>
 8001d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <main+0x334>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
		 		  	  tempi2 = (int)tempf;
 8001d6a:	4b6e      	ldr	r3, [pc, #440]	; (8001f24 <main+0x334>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d74:	ee17 2a90 	vmov	r2, s15
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <main+0x340>)
 8001d7a:	601a      	str	r2, [r3, #0]
		 		  	newAvg = movingAvg(arrNumbers, &sum, pos, len, angleLut[tempi]-angleLut[tempi2]);
 8001d7c:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <main+0x33c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6c      	ldr	r2, [pc, #432]	; (8001f34 <main+0x344>)
 8001d82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d86:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <main+0x340>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	496a      	ldr	r1, [pc, #424]	; (8001f34 <main+0x344>)
 8001d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	4639      	mov	r1, r7
 8001d94:	1d38      	adds	r0, r7, #4
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6a3a      	ldr	r2, [r7, #32]
 8001d9c:	f7ff f8ef 	bl	8000f7e <movingAvg>
 8001da0:	61f8      	str	r0, [r7, #28]
		 		  	pos++;
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	3301      	adds	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
		 		  	    if (pos >= len){
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	db01      	blt.n	8001db4 <main+0x1c4>
		 		  	      pos = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
		 		  	    }
		 		  	  configure(data, abs(newAvg));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bfb8      	it	lt
 8001dba:	425b      	neglt	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	485e      	ldr	r0, [pc, #376]	; (8001f38 <main+0x348>)
 8001dc0:	f7ff f902 	bl	8000fc8 <configure>
		 		  	  //configure(data, angleLut[tempi]);

		  dataRdyFlag = 0;
 8001dc4:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <main+0x32c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
	  }
	  if(HAL_GetTick()-lastTime>display_delay){
 8001dca:	f000 fee3 	bl	8002b94 <HAL_GetTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a5a      	ldr	r2, [pc, #360]	; (8001f3c <main+0x34c>)
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	2b32      	cmp	r3, #50	; 0x32
 8001dd8:	f67f af5c 	bls.w	8001c94 <main+0xa4>
		  lastTime = HAL_GetTick();
 8001ddc:	f000 feda 	bl	8002b94 <HAL_GetTick>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <main+0x34c>)
 8001de6:	601a      	str	r2, [r3, #0]
		  DisplayUpdate(Display, data);
 8001de8:	4953      	ldr	r1, [pc, #332]	; (8001f38 <main+0x348>)
 8001dea:	4848      	ldr	r0, [pc, #288]	; (8001f0c <main+0x31c>)
 8001dec:	f7ff f932 	bl	8001054 <DisplayUpdate>
		  		  	  HAL_LCD_Clear(&hlcd);
 8001df0:	4853      	ldr	r0, [pc, #332]	; (8001f40 <main+0x350>)
 8001df2:	f002 fd84 	bl	80048fe <HAL_LCD_Clear>
		  		  	  //HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER0, 0xffff, 0x0040);
		  		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER0, 0xffff, Display[0]|0x0040);
 8001df6:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <main+0x31c>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e04:	2100      	movs	r1, #0
 8001e06:	484e      	ldr	r0, [pc, #312]	; (8001f40 <main+0x350>)
 8001e08:	f002 fd1e 	bl	8004848 <HAL_LCD_Write>
		  		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER2, 0xffff, Display[1]);
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <main+0x31c>)
 8001e0e:	885b      	ldrh	r3, [r3, #2]
 8001e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e14:	2102      	movs	r1, #2
 8001e16:	484a      	ldr	r0, [pc, #296]	; (8001f40 <main+0x350>)
 8001e18:	f002 fd16 	bl	8004848 <HAL_LCD_Write>
		  		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER4, 0xffff, Display[2]);
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <main+0x31c>)
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e24:	2104      	movs	r1, #4
 8001e26:	4846      	ldr	r0, [pc, #280]	; (8001f40 <main+0x350>)
 8001e28:	f002 fd0e 	bl	8004848 <HAL_LCD_Write>
		  		  	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER6, 0xffff, Display[3]);
 8001e2c:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <main+0x31c>)
 8001e2e:	88db      	ldrh	r3, [r3, #6]
 8001e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e34:	2106      	movs	r1, #6
 8001e36:	4842      	ldr	r0, [pc, #264]	; (8001f40 <main+0x350>)
 8001e38:	f002 fd06 	bl	8004848 <HAL_LCD_Write>
		  		  	  HAL_LCD_UpdateDisplayRequest(&hlcd);
 8001e3c:	4840      	ldr	r0, [pc, #256]	; (8001f40 <main+0x350>)
 8001e3e:	f002 fdb4 	bl	80049aa <HAL_LCD_UpdateDisplayRequest>
		  		  	if(newAvg>20){
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2b14      	cmp	r3, #20
 8001e46:	dd17      	ble.n	8001e78 <main+0x288>
		  		  			  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f002 fbfe 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2102      	movs	r1, #2
 8001e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5c:	f002 fbf8 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e66:	4837      	ldr	r0, [pc, #220]	; (8001f44 <main+0x354>)
 8001e68:	f002 fbf2 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e72:	4834      	ldr	r0, [pc, #208]	; (8001f44 <main+0x354>)
 8001e74:	f002 fbec 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  	  }
		  		  	if(newAvg<-20){
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f113 0f14 	cmn.w	r3, #20
 8001e7e:	da17      	bge.n	8001eb0 <main+0x2c0>
		  		  			  			  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2101      	movs	r1, #1
 8001e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e88:	f002 fbe2 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2102      	movs	r1, #2
 8001e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e94:	f002 fbdc 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e9e:	4829      	ldr	r0, [pc, #164]	; (8001f44 <main+0x354>)
 8001ea0:	f002 fbd6 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eaa:	4826      	ldr	r0, [pc, #152]	; (8001f44 <main+0x354>)
 8001eac:	f002 fbd0 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  			  	  }
		  		  	if(newAvg<20 && newAvg>-20){
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b13      	cmp	r3, #19
 8001eb4:	f73f aeee 	bgt.w	8001c94 <main+0xa4>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f113 0f13 	cmn.w	r3, #19
 8001ebe:	f6ff aee9 	blt.w	8001c94 <main+0xa4>
		  		  			  			  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eca:	f002 fbc1 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f002 fbbb 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee0:	4818      	ldr	r0, [pc, #96]	; (8001f44 <main+0x354>)
 8001ee2:	f002 fbb5 	bl	8004650 <HAL_GPIO_WritePin>
		  		  			  			  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eec:	4815      	ldr	r0, [pc, #84]	; (8001f44 <main+0x354>)
 8001eee:	f002 fbaf 	bl	8004650 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)==0){
 8001ef2:	e6cf      	b.n	8001c94 <main+0xa4>
 8001ef4:	200000fc 	.word	0x200000fc
 8001ef8:	48000814 	.word	0x48000814
 8001efc:	20000cb8 	.word	0x20000cb8
 8001f00:	20000d58 	.word	0x20000d58
 8001f04:	200004fc 	.word	0x200004fc
 8001f08:	20000bcc 	.word	0x20000bcc
 8001f0c:	200000f4 	.word	0x200000f4
 8001f10:	0800a520 	.word	0x0800a520
 8001f14:	20000ba0 	.word	0x20000ba0
 8001f18:	20000060 	.word	0x20000060
 8001f1c:	20000bb0 	.word	0x20000bb0
 8001f20:	2000005c 	.word	0x2000005c
 8001f24:	20000c30 	.word	0x20000c30
 8001f28:	42c80000 	.word	0x42c80000
 8001f2c:	20000bc8 	.word	0x20000bc8
 8001f30:	20000bc4 	.word	0x20000bc4
 8001f34:	0800a530 	.word	0x0800a530
 8001f38:	20000d48 	.word	0x20000d48
 8001f3c:	20000bb4 	.word	0x20000bb4
 8001f40:	20000da4 	.word	0x20000da4
 8001f44:	48000400 	.word	0x48000400

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b096      	sub	sp, #88	; 0x58
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	2244      	movs	r2, #68	; 0x44
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fe80 	bl	8006c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f6e:	f002 fd85 	bl	8004a7c <HAL_PWREx_ControlVoltageScaling>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f78:	f000 faac 	bl	80024d4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f7c:	230a      	movs	r3, #10
 8001f7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f86:	2310      	movs	r3, #16
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f92:	2302      	movs	r3, #2
 8001f94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001f96:	2302      	movs	r3, #2
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fdba 	bl	8004b28 <HAL_RCC_OscConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001fba:	f000 fa8b 	bl	80024d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 f9c6 	bl	8005368 <HAL_RCC_ClockConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fe2:	f000 fa77 	bl	80024d4 <Error_Handler>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3758      	adds	r7, #88	; 0x58
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
 8002004:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002008:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <MX_ADC1_Init+0xc4>)
 800200a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <MX_ADC1_Init+0xc0>)
 800200e:	2200      	movs	r2, #0
 8002010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <MX_ADC1_Init+0xc0>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002026:	2204      	movs	r2, #4
 8002028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <MX_ADC1_Init+0xc0>)
 800202c:	2200      	movs	r2, #0
 800202e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002030:	4b1f      	ldr	r3, [pc, #124]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002032:	2200      	movs	r2, #0
 8002034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002038:	2201      	movs	r2, #1
 800203a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <MX_ADC1_Init+0xc0>)
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002046:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <MX_ADC1_Init+0xc0>)
 800204e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_ADC1_Init+0xc0>)
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800206a:	4811      	ldr	r0, [pc, #68]	; (80020b0 <MX_ADC1_Init+0xc0>)
 800206c:	f000 ff66 	bl	8002f3c <HAL_ADC_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002076:	f000 fa2d 	bl	80024d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_ADC1_Init+0xc8>)
 800207c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800207e:	2306      	movs	r3, #6
 8002080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002086:	237f      	movs	r3, #127	; 0x7f
 8002088:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800208a:	2304      	movs	r3, #4
 800208c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002092:	463b      	mov	r3, r7
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_ADC1_Init+0xc0>)
 8002098:	f001 f926 	bl	80032e8 <HAL_ADC_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80020a2:	f000 fa17 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000bcc 	.word	0x20000bcc
 80020b4:	50040000 	.word	0x50040000
 80020b8:	21800100 	.word	0x21800100

080020bc <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <MX_LCD_Init+0x84>)
 80020c2:	4a20      	ldr	r2, [pc, #128]	; (8002144 <MX_LCD_Init+0x88>)
 80020c4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <MX_LCD_Init+0x84>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_31;
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <MX_LCD_Init+0x84>)
 80020ce:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020d2:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_LCD_Init+0x84>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <MX_LCD_Init+0x84>)
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <MX_LCD_Init+0x84>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_3;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <MX_LCD_Init+0x84>)
 80020e8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80020ec:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_3;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_LCD_Init+0x84>)
 80020f0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80020f4:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_1;
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <MX_LCD_Init+0x84>)
 80020f8:	2210      	movs	r2, #16
 80020fa:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_ENABLE;
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_LCD_Init+0x84>)
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_LCD_Init+0x84>)
 8002104:	2200      	movs	r2, #0
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <MX_LCD_Init+0x84>)
 800210a:	2200      	movs	r2, #0
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_ENABLE;
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_LCD_Init+0x84>)
 8002110:	2201      	movs	r2, #1
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8002114:	480a      	ldr	r0, [pc, #40]	; (8002140 <MX_LCD_Init+0x84>)
 8002116:	f002 fad7 	bl	80046c8 <HAL_LCD_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_LCD_Init+0x68>
  {
    Error_Handler();
 8002120:	f000 f9d8 	bl	80024d4 <Error_Handler>
  }
  /** Enable the High Driver
  */
  __HAL_LCD_HIGHDRIVER_ENABLE(&hlcd);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_LCD_Init+0x84>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <MX_LCD_Init+0x84>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <MX_LCD_Init+0x84>)
 8002136:	f002 fc71 	bl	8004a1c <LCD_WaitForSynchro>
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000da4 	.word	0x20000da4
 8002144:	40002400 	.word	0x40002400

08002148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <MX_TIM2_Init+0x98>)
 8002168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800216c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_TIM2_Init+0x98>)
 8002170:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002174:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_TIM2_Init+0x98>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_TIM2_Init+0x98>)
 800217e:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <MX_TIM2_Init+0x9c>)
 8002180:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_TIM2_Init+0x98>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_TIM2_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800218e:	4814      	ldr	r0, [pc, #80]	; (80021e0 <MX_TIM2_Init+0x98>)
 8002190:	f003 fe28 	bl	8005de4 <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800219a:	f000 f99b 	bl	80024d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	480d      	ldr	r0, [pc, #52]	; (80021e0 <MX_TIM2_Init+0x98>)
 80021ac:	f003 febe 	bl	8005f2c <HAL_TIM_ConfigClockSource>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021b6:	f000 f98d 	bl	80024d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	; (80021e0 <MX_TIM2_Init+0x98>)
 80021c8:	f004 f878 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021d2:	f000 f97f 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000de0 	.word	0x20000de0
 80021e4:	000f4240 	.word	0x000f4240

080021e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_TIM6_Init+0x64>)
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <MX_TIM6_Init+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1-1;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_TIM6_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_TIM6_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 246-1;
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_TIM6_Init+0x64>)
 800220c:	22f5      	movs	r2, #245	; 0xf5
 800220e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_TIM6_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002216:	480d      	ldr	r0, [pc, #52]	; (800224c <MX_TIM6_Init+0x64>)
 8002218:	f003 fde4 	bl	8005de4 <HAL_TIM_Base_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002222:	f000 f957 	bl	80024d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002226:	2320      	movs	r3, #32
 8002228:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4806      	ldr	r0, [pc, #24]	; (800224c <MX_TIM6_Init+0x64>)
 8002234:	f004 f842 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800223e:	f000 f949 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000d58 	.word	0x20000d58
 8002250:	40001000 	.word	0x40001000

08002254 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <MX_USART1_UART_Init+0x58>)
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <MX_USART1_UART_Init+0x5c>)
 800225c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <MX_USART1_UART_Init+0x58>)
 8002260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_USART1_UART_Init+0x58>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_USART1_UART_Init+0x58>)
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_USART1_UART_Init+0x58>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_USART1_UART_Init+0x58>)
 800227a:	220c      	movs	r2, #12
 800227c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_USART1_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_USART1_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_USART1_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_USART1_UART_Init+0x58>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_USART1_UART_Init+0x58>)
 8002298:	f004 f876 	bl	8006388 <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022a2:	f000 f917 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000c34 	.word	0x20000c34
 80022b0:	40013800 	.word	0x40013800

080022b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <MX_DMA_Init+0x60>)
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <MX_DMA_Init+0x60>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6493      	str	r3, [r2, #72]	; 0x48
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <MX_DMA_Init+0x60>)
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <MX_DMA_Init+0x60>)
 80022d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d6:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <MX_DMA_Init+0x60>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6493      	str	r3, [r2, #72]	; 0x48
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <MX_DMA_Init+0x60>)
 80022e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	200b      	movs	r0, #11
 80022f0:	f001 fdab 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022f4:	200b      	movs	r0, #11
 80022f6:	f001 fdc4 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	203b      	movs	r0, #59	; 0x3b
 8002300:	f001 fda3 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002304:	203b      	movs	r0, #59	; 0x3b
 8002306:	f001 fdbc 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000

08002318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <MX_GPIO_Init+0x14c>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <MX_GPIO_Init+0x14c>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233a:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <MX_GPIO_Init+0x14c>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <MX_GPIO_Init+0x14c>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	4a46      	ldr	r2, [pc, #280]	; (8002464 <MX_GPIO_Init+0x14c>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002352:	4b44      	ldr	r3, [pc, #272]	; (8002464 <MX_GPIO_Init+0x14c>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	4b41      	ldr	r3, [pc, #260]	; (8002464 <MX_GPIO_Init+0x14c>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4a40      	ldr	r2, [pc, #256]	; (8002464 <MX_GPIO_Init+0x14c>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236a:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <MX_GPIO_Init+0x14c>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 8002376:	2200      	movs	r2, #0
 8002378:	f240 71df 	movw	r1, #2015	; 0x7df
 800237c:	483a      	ldr	r0, [pc, #232]	; (8002468 <MX_GPIO_Init+0x150>)
 800237e:	f002 f967 	bl	8004650 <HAL_GPIO_WritePin>
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |BIAS_Pin|ADC_TRIG_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	2103      	movs	r1, #3
 8002386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238a:	f002 f961 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 800238e:	2201      	movs	r2, #1
 8002390:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002394:	4835      	ldr	r0, [pc, #212]	; (800246c <MX_GPIO_Init+0x154>)
 8002396:	f002 f95b 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM0_Pin PWM45_Pin PWM90_Pin PWM135_Pin
                           PWM180_Pin PWM225_Pin PWM270_Pin PWM315_Pin
                           ADC_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 800239a:	f240 53df 	movw	r3, #1503	; 0x5df
 800239e:	60fb      	str	r3, [r7, #12]
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |ADC_TRIG_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4619      	mov	r1, r3
 80023b2:	482d      	ldr	r0, [pc, #180]	; (8002468 <MX_GPIO_Init+0x150>)
 80023b4:	f001 ffba 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023b8:	2303      	movs	r3, #3
 80023ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4619      	mov	r1, r3
 80023ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d2:	f001 ffab 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	4619      	mov	r1, r3
 80023ee:	481f      	ldr	r0, [pc, #124]	; (800246c <MX_GPIO_Init+0x154>)
 80023f0:	f001 ff9c 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pin : BIAS_Pin */
  GPIO_InitStruct.Pin = BIAS_Pin;
 80023f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023fa:	2311      	movs	r3, #17
 80023fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BIAS_GPIO_Port, &GPIO_InitStruct);
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4619      	mov	r1, r3
 800240c:	4816      	ldr	r0, [pc, #88]	; (8002468 <MX_GPIO_Init+0x150>)
 800240e:	f001 ff8d 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002418:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800241c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242c:	f001 ff7e 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f001 ff70 	bl	800432c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2028      	movs	r0, #40	; 0x28
 8002452:	f001 fcfa 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002456:	2028      	movs	r0, #40	; 0x28
 8002458:	f001 fd13 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	48000800 	.word	0x48000800
 800246c:	48000400 	.word	0x48000400

08002470 <HAL_ADC_ConvHalfCpltCallback>:
/*void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    zero = phaseDeg;
}*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	memcpy(processBuff, samples, 128);
 8002478:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	461a      	mov	r2, r3
 8002484:	f004 fbdc 	bl	8006c40 <memcpy>
	dataRdyFlag = 1;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200005fc 	.word	0x200005fc
 800249c:	200004fc 	.word	0x200004fc
 80024a0:	20000bb0 	.word	0x20000bb0

080024a4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	memcpy(processBuff, samples+64, 128);
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_ADC_ConvCpltCallback+0x24>)
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <HAL_ADC_ConvCpltCallback+0x28>)
 80024b4:	f004 fbc4 	bl	8006c40 <memcpy>
	dataRdyFlag = 1;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000057c 	.word	0x2000057c
 80024cc:	200005fc 	.word	0x200005fc
 80024d0:	20000bb0 	.word	0x20000bb0

080024d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d8:	b672      	cpsid	i
}
 80024da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024dc:	e7fe      	b.n	80024dc <Error_Handler+0x8>
	...

080024e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_MspInit+0x44>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <HAL_MspInit+0x44>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6613      	str	r3, [r2, #96]	; 0x60
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_MspInit+0x44>)
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_MspInit+0x44>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_MspInit+0x44>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_MspInit+0x44>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0a2      	sub	sp, #136	; 0x88
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2260      	movs	r2, #96	; 0x60
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f004 fb87 	bl	8006c5c <memset>
  if(hadc->Instance==ADC1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <HAL_ADC_MspInit+0xf8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d15f      	bne.n	8002618 <HAL_ADC_MspInit+0xf0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002558:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800255e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002562:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4618      	mov	r0, r3
 800256a:	f003 f903 	bl	8005774 <HAL_RCCEx_PeriphCLKConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002574:	f7ff ffae 	bl	80024d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_ADC_MspInit+0xfc>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <HAL_ADC_MspInit+0xfc>)
 800257e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_ADC_MspInit+0xfc>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_ADC_MspInit+0xfc>)
 8002592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_ADC_MspInit+0xfc>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_ADC_MspInit+0xfc>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025a8:	2308      	movs	r3, #8
 80025aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025ac:	230b      	movs	r3, #11
 80025ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025b8:	4619      	mov	r1, r3
 80025ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025be:	f001 feb5 	bl	800432c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_ADC_MspInit+0x104>)
 80025c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025f2:	2220      	movs	r2, #32
 80025f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025fc:	480a      	ldr	r0, [pc, #40]	; (8002628 <HAL_ADC_MspInit+0x100>)
 80025fe:	f001 fc5b 	bl	8003eb8 <HAL_DMA_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002608:	f7ff ff64 	bl	80024d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a06      	ldr	r2, [pc, #24]	; (8002628 <HAL_ADC_MspInit+0x100>)
 8002610:	64da      	str	r2, [r3, #76]	; 0x4c
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <HAL_ADC_MspInit+0x100>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3788      	adds	r7, #136	; 0x88
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	50040000 	.word	0x50040000
 8002624:	40021000 	.word	0x40021000
 8002628:	20000d00 	.word	0x20000d00
 800262c:	40020008 	.word	0x40020008

08002630 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0a2      	sub	sp, #136	; 0x88
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2260      	movs	r2, #96	; 0x60
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f004 fb03 	bl	8006c5c <memset>
  if(hlcd->Instance==LCD)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_LCD_MspInit+0xf0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d15a      	bne.n	8002716 <HAL_LCD_MspInit+0xe6>
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002664:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800266a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4618      	mov	r0, r3
 8002672:	f003 f87f 	bl	8005774 <HAL_RCCEx_PeriphCLKConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_LCD_MspInit+0x50>
    {
      Error_Handler();
 800267c:	f7ff ff2a 	bl	80024d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8002680:	4b28      	ldr	r3, [pc, #160]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 8002686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268a:	6593      	str	r3, [r2, #88]	; 0x58
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_LCD_MspInit+0xf4>)
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
    PA10     ------> LCD_COM2
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80026c8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80026cc:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80026dc:	230b      	movs	r3, #11
 80026de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ec:	f001 fe1e 	bl	800432c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80026f0:	f243 2337 	movw	r3, #12855	; 0x3237
 80026f4:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002704:	230b      	movs	r3, #11
 8002706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <HAL_LCD_MspInit+0xf8>)
 8002712:	f001 fe0b 	bl	800432c <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3788      	adds	r7, #136	; 0x88
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40002400 	.word	0x40002400
 8002724:	40021000 	.word	0x40021000
 8002728:	48000400 	.word	0x48000400

0800272c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d10c      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_TIM_Base_MspInit+0xb0>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	4a26      	ldr	r2, [pc, #152]	; (80027dc <HAL_TIM_Base_MspInit+0xb0>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6593      	str	r3, [r2, #88]	; 0x58
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_TIM_Base_MspInit+0xb0>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002756:	e03c      	b.n	80027d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a20      	ldr	r2, [pc, #128]	; (80027e0 <HAL_TIM_Base_MspInit+0xb4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d137      	bne.n	80027d2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_TIM_Base_MspInit+0xb0>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_TIM_Base_MspInit+0xb0>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	6593      	str	r3, [r2, #88]	; 0x58
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_TIM_Base_MspInit+0xb0>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA2_Channel4;
 800277a:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 800277c:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_TIM_Base_MspInit+0xbc>)
 800277e:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_3;
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002782:	2203      	movs	r2, #3
 8002784:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002788:	2210      	movs	r2, #16
 800278a:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800278c:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 800279a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800279e:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 80027a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a6:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 80027aa:	2220      	movs	r2, #32
 80027ac:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 80027b0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80027b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 80027b6:	480b      	ldr	r0, [pc, #44]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 80027b8:	f001 fb7e 	bl	8003eb8 <HAL_DMA_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 80027c2:	f7ff fe87 	bl	80024d4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 80027ca:	621a      	str	r2, [r3, #32]
 80027cc:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <HAL_TIM_Base_MspInit+0xb8>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40001000 	.word	0x40001000
 80027e4:	20000cb8 	.word	0x20000cb8
 80027e8:	40020444 	.word	0x40020444

080027ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b0a2      	sub	sp, #136	; 0x88
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2260      	movs	r2, #96	; 0x60
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f004 fa25 	bl	8006c5c <memset>
  if(huart->Instance==USART1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_UART_MspInit+0xa8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d137      	bne.n	800288c <HAL_UART_MspInit+0xa0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4618      	mov	r0, r3
 800282a:	f002 ffa3 	bl	8005774 <HAL_RCCEx_PeriphCLKConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002834:	f7ff fe4e 	bl	80024d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_UART_MspInit+0xac>)
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_UART_MspInit+0xac>)
 800283e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002842:	6613      	str	r3, [r2, #96]	; 0x60
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_UART_MspInit+0xac>)
 8002846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_UART_MspInit+0xac>)
 8002852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_UART_MspInit+0xac>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_UART_MspInit+0xac>)
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800287a:	2307      	movs	r3, #7
 800287c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002884:	4619      	mov	r1, r3
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <HAL_UART_MspInit+0xb0>)
 8002888:	f001 fd50 	bl	800432c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800288c:	bf00      	nop
 800288e:	3788      	adds	r7, #136	; 0x88
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40013800 	.word	0x40013800
 8002898:	40021000 	.word	0x40021000
 800289c:	48000400 	.word	0x48000400

080028a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <NMI_Handler+0x4>

080028a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <HardFault_Handler+0x4>

080028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <MemManage_Handler+0x4>

080028b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <BusFault_Handler+0x4>

080028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <UsageFault_Handler+0x4>

080028be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ec:	f000 f93e 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <DMA1_Channel1_IRQHandler+0x10>)
 80028fa:	f001 fc38 	bl	800416e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000d00 	.word	0x20000d00

08002908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800290c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002910:	f001 feb6 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <DMA2_Channel4_IRQHandler+0x10>)
 800291e:	f001 fc26 	bl	800416e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000cb8 	.word	0x20000cb8

0800292c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	e00a      	b.n	8002954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800293e:	f3af 8000 	nop.w
 8002942:	4601      	mov	r1, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	60ba      	str	r2, [r7, #8]
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	dbf0      	blt.n	800293e <_read+0x12>
	}

return len;
 800295c:	687b      	ldr	r3, [r7, #4]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
	return -1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298e:	605a      	str	r2, [r3, #4]
	return 0;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_isatty>:

int _isatty(int file)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
	return 1;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
	return 0;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <_sbrk+0x5c>)
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <_sbrk+0x60>)
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <_sbrk+0x64>)
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <_sbrk+0x68>)
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a00:	f004 f8f4 	bl	8006bec <__errno>
 8002a04:	4603      	mov	r3, r0
 8002a06:	220c      	movs	r2, #12
 8002a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	e009      	b.n	8002a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <_sbrk+0x64>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <_sbrk+0x64>)
 8002a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20010000 	.word	0x20010000
 8002a30:	00000400 	.word	0x00000400
 8002a34:	20000bb8 	.word	0x20000bb8
 8002a38:	20000e40 	.word	0x20000e40

08002a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <SystemInit+0x20>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <SystemInit+0x20>)
 8002a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a64:	f7ff ffea 	bl	8002a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a68:	480c      	ldr	r0, [pc, #48]	; (8002a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a6a:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <LoopForever+0xe>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <LoopForever+0x16>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f004 f8b3 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a92:	f7ff f8ad 	bl	8001bf0 <main>

08002a96 <LoopForever>:

LoopForever:
    b LoopForever
 8002a96:	e7fe      	b.n	8002a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa0:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002aa4:	0802db38 	.word	0x0802db38
  ldr r2, =_sbss
 8002aa8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002aac:	20000e40 	.word	0x20000e40

08002ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC1_IRQHandler>
	...

08002ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_Init+0x3c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_Init+0x3c>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aca:	2003      	movs	r0, #3
 8002acc:	f001 f9b2 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f000 f80f 	bl	8002af4 <HAL_InitTick>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	71fb      	strb	r3, [r7, #7]
 8002ae0:	e001      	b.n	8002ae6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ae2:	f7ff fcfd 	bl	80024e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40022000 	.word	0x40022000

08002af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_InitTick+0x6c>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d023      	beq.n	8002b50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_InitTick+0x70>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_InitTick+0x6c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4619      	mov	r1, r3
 8002b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f9bd 	bl	8003e9e <HAL_SYSTICK_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0f      	cmp	r3, #15
 8002b2e:	d809      	bhi.n	8002b44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b30:	2200      	movs	r2, #0
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f001 f987 	bl	8003e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_InitTick+0x74>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e007      	b.n	8002b54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	e004      	b.n	8002b54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	e001      	b.n	8002b54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2000006c 	.word	0x2000006c
 8002b64:	20000064 	.word	0x20000064
 8002b68:	20000068 	.word	0x20000068

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000006c 	.word	0x2000006c
 8002b90:	20000e2c 	.word	0x20000e2c

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000e2c 	.word	0x20000e2c

08002bac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <LL_ADC_SetOffset+0x44>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	03fff000 	.word	0x03fff000

08002c5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3360      	adds	r3, #96	; 0x60
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3360      	adds	r3, #96	; 0x60
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3330      	adds	r3, #48	; 0x30
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	4413      	add	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	211f      	movs	r1, #31
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 011f 	and.w	r1, r3, #31
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3314      	adds	r3, #20
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	0e5b      	lsrs	r3, r3, #25
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	4413      	add	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	0d1b      	lsrs	r3, r3, #20
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2107      	movs	r1, #7
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	401a      	ands	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	0d1b      	lsrs	r3, r3, #20
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	431a      	orrs	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0318 	and.w	r3, r3, #24
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002db8:	40d9      	lsrs	r1, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	0007ffff 	.word	0x0007ffff

08002ddc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002dec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6093      	str	r3, [r2, #8]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e64:	d101      	bne.n	8002e6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <LL_ADC_IsEnabled+0x18>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <LL_ADC_IsEnabled+0x1a>
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eda:	f043 0204 	orr.w	r2, r3, #4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e12c      	b.n	80031b0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d109      	bne.n	8002f78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff fadf 	bl	8002528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff3f 	bl	8002e00 <LL_ADC_IsDeepPowerDownEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff25 	bl	8002ddc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff5a 	bl	8002e50 <LL_ADC_IsInternalRegulatorEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d115      	bne.n	8002fce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff3e 	bl	8002e28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fac:	4b82      	ldr	r3, [pc, #520]	; (80031b8 <HAL_ADC_Init+0x27c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	4a82      	ldr	r2, [pc, #520]	; (80031bc <HAL_ADC_Init+0x280>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff3c 	bl	8002e50 <LL_ADC_IsInternalRegulatorEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff75 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 8003004:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 80c5 	bne.w	800319e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 80c1 	bne.w	800319e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff35 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800303c:	4860      	ldr	r0, [pc, #384]	; (80031c0 <HAL_ADC_Init+0x284>)
 800303e:	f7ff ff2f 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4619      	mov	r1, r3
 800304e:	485d      	ldr	r0, [pc, #372]	; (80031c4 <HAL_ADC_Init+0x288>)
 8003050:	f7ff fdac 	bl	8002bac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7e5b      	ldrb	r3, [r3, #25]
 8003058:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800305e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003064:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800306a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003072:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d106      	bne.n	8003090 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	3b01      	subs	r3, #1
 8003088:	045b      	lsls	r3, r3, #17
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d009      	beq.n	80030ac <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <HAL_ADC_Init+0x28c>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	430b      	orrs	r3, r1
 80030be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff12 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 80030ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff1f 	bl	8002f14 <LL_ADC_INJ_IsConversionOngoing>
 80030d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d13d      	bne.n	800315a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d13a      	bne.n	800315a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003100:	f023 0302 	bic.w	r3, r3, #2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	69b9      	ldr	r1, [r7, #24]
 800310a:	430b      	orrs	r3, r1
 800310c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003114:	2b01      	cmp	r3, #1
 8003116:	d118      	bne.n	800314a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003122:	f023 0304 	bic.w	r3, r3, #4
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800313a:	430a      	orrs	r2, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	611a      	str	r2, [r3, #16]
 8003148:	e007      	b.n	800315a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10c      	bne.n	800317c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f023 010f 	bic.w	r1, r3, #15
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
 800317a:	e007      	b.n	800318c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 020f 	bic.w	r2, r2, #15
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f023 0303 	bic.w	r3, r3, #3
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
 800319c:	e007      	b.n	80031ae <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000064 	.word	0x20000064
 80031bc:	053e2d63 	.word	0x053e2d63
 80031c0:	50040000 	.word	0x50040000
 80031c4:	50040300 	.word	0x50040300
 80031c8:	fff0c007 	.word	0xfff0c007

080031cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe86 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d167      	bne.n	80032b8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x2a>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e063      	b.n	80032be <HAL_ADC_Start_DMA+0xf2>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fc52 	bl	8003aa8 <ADC_Enable>
 8003204:	4603      	mov	r3, r0
 8003206:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d14f      	bne.n	80032ae <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d006      	beq.n	800323c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	f023 0206 	bic.w	r2, r3, #6
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	659a      	str	r2, [r3, #88]	; 0x58
 800323a:	e002      	b.n	8003242 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <HAL_ADC_Start_DMA+0xfc>)
 8003248:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <HAL_ADC_Start_DMA+0x100>)
 8003250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_ADC_Start_DMA+0x104>)
 8003258:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	221c      	movs	r2, #28
 8003260:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0210 	orr.w	r2, r2, #16
 8003278:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3340      	adds	r3, #64	; 0x40
 8003294:	4619      	mov	r1, r3
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f000 ff08 	bl	80040ae <HAL_DMA_Start_IT>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe0d 	bl	8002ec6 <LL_ADC_REG_StartConversion>
 80032ac:	e006      	b.n	80032bc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80032b6:	e001      	b.n	80032bc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
 80032ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08003b6d 	.word	0x08003b6d
 80032cc:	08003c45 	.word	0x08003c45
 80032d0:	08003c61 	.word	0x08003c61

080032d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b0b6      	sub	sp, #216	; 0xd8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x22>
 8003306:	2302      	movs	r3, #2
 8003308:	e3b9      	b.n	8003a7e <HAL_ADC_ConfigChannel+0x796>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fde9 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 839e 	bne.w	8003a60 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d824      	bhi.n	8003376 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	3b02      	subs	r3, #2
 8003332:	2b03      	cmp	r3, #3
 8003334:	d81b      	bhi.n	800336e <HAL_ADC_ConfigChannel+0x86>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <HAL_ADC_ConfigChannel+0x54>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	0800334d 	.word	0x0800334d
 8003340:	08003355 	.word	0x08003355
 8003344:	0800335d 	.word	0x0800335d
 8003348:	08003365 	.word	0x08003365
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	220c      	movs	r2, #12
 8003350:	605a      	str	r2, [r3, #4]
          break;
 8003352:	e011      	b.n	8003378 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2212      	movs	r2, #18
 8003358:	605a      	str	r2, [r3, #4]
          break;
 800335a:	e00d      	b.n	8003378 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2218      	movs	r2, #24
 8003360:	605a      	str	r2, [r3, #4]
          break;
 8003362:	e009      	b.n	8003378 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800336a:	605a      	str	r2, [r3, #4]
          break;
 800336c:	e004      	b.n	8003378 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2206      	movs	r2, #6
 8003372:	605a      	str	r2, [r3, #4]
          break;
 8003374:	e000      	b.n	8003378 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003376:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	f7ff fcad 	bl	8002ce4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fdad 	bl	8002eee <LL_ADC_REG_IsConversionOngoing>
 8003394:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fdb9 	bl	8002f14 <LL_ADC_INJ_IsConversionOngoing>
 80033a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 81a6 	bne.w	80036fc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 81a1 	bne.w	80036fc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7ff fcb8 	bl	8002d3c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d00a      	beq.n	8003404 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6919      	ldr	r1, [r3, #16]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033fe:	f7ff fc09 	bl	8002c14 <LL_ADC_SetOffset>
 8003402:	e17b      	b.n	80036fc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fc26 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x148>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fc1b 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	e01e      	b.n	800346e <HAL_ADC_ConfigChannel+0x186>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fc10 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800345e:	2320      	movs	r3, #32
 8003460:	e004      	b.n	800346c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x19e>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	0e9b      	lsrs	r3, r3, #26
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	e018      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x1d0>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800349a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800349e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80034a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80034aa:	2320      	movs	r3, #32
 80034ac:	e004      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80034ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d106      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fbdf 	bl	8002c88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2101      	movs	r1, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fbc3 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x20e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fbb8 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	e01e      	b.n	8003534 <HAL_ADC_ConfigChannel+0x24c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2101      	movs	r1, #1
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fbad 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003502:	4603      	mov	r3, r0
 8003504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800351c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e004      	b.n	8003532 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <HAL_ADC_ConfigChannel+0x264>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	e018      	b.n	800357e <HAL_ADC_ConfigChannel+0x296>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003560:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e004      	b.n	800357e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003578:	fab3 f383 	clz	r3, r3
 800357c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800357e:	429a      	cmp	r2, r3
 8003580:	d106      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fb7c 	bl	8002c88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fb60 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x2d4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fb55 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 80035b2:	4603      	mov	r3, r0
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	f003 021f 	and.w	r2, r3, #31
 80035ba:	e01e      	b.n	80035fa <HAL_ADC_ConfigChannel+0x312>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fb4a 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80035ea:	2320      	movs	r3, #32
 80035ec:	e004      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80035ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003602:	2b00      	cmp	r3, #0
 8003604:	d105      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x32a>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	0e9b      	lsrs	r3, r3, #26
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	e016      	b.n	8003640 <HAL_ADC_ConfigChannel+0x358>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800362a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003632:	2320      	movs	r3, #32
 8003634:	e004      	b.n	8003640 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003640:	429a      	cmp	r2, r3
 8003642:	d106      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2200      	movs	r2, #0
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fb1b 	bl	8002c88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2103      	movs	r1, #3
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff faff 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_ADC_ConfigChannel+0x396>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2103      	movs	r1, #3
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff faf4 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 8003674:	4603      	mov	r3, r0
 8003676:	0e9b      	lsrs	r3, r3, #26
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	e017      	b.n	80036ae <HAL_ADC_ConfigChannel+0x3c6>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2103      	movs	r1, #3
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fae9 	bl	8002c5c <LL_ADC_GetOffsetChannel>
 800368a:	4603      	mov	r3, r0
 800368c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003698:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800369a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e003      	b.n	80036ac <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80036a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d105      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x3de>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0e9b      	lsrs	r3, r3, #26
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	e011      	b.n	80036ea <HAL_ADC_ConfigChannel+0x402>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80036de:	2320      	movs	r3, #32
 80036e0:	e003      	b.n	80036ea <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2103      	movs	r1, #3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fac6 	bl	8002c88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fbcd 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 813f 	bne.w	800398c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	461a      	mov	r2, r3
 800371c:	f7ff fb3a 	bl	8002d94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a8e      	ldr	r2, [pc, #568]	; (8003960 <HAL_ADC_ConfigChannel+0x678>)
 8003726:	4293      	cmp	r3, r2
 8003728:	f040 8130 	bne.w	800398c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x46c>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0e9b      	lsrs	r3, r3, #26
 8003742:	3301      	adds	r3, #1
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2b09      	cmp	r3, #9
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e019      	b.n	8003788 <HAL_ADC_ConfigChannel+0x4a0>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003764:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e003      	b.n	8003778 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	2b09      	cmp	r3, #9
 8003780:	bf94      	ite	ls
 8003782:	2301      	movls	r3, #1
 8003784:	2300      	movhi	r3, #0
 8003786:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003788:	2b00      	cmp	r3, #0
 800378a:	d079      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x4c0>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0e9b      	lsrs	r3, r3, #26
 800379e:	3301      	adds	r3, #1
 80037a0:	069b      	lsls	r3, r3, #26
 80037a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037a6:	e015      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x4ec>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	e003      	b.n	80037cc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80037c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	069b      	lsls	r3, r3, #26
 80037d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x50c>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	3301      	adds	r3, #1
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	e017      	b.n	8003824 <HAL_ADC_ConfigChannel+0x53c>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003804:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e003      	b.n	8003818 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2101      	movs	r1, #1
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	ea42 0103 	orr.w	r1, r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <HAL_ADC_ConfigChannel+0x562>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	3301      	adds	r3, #1
 800383c:	f003 021f 	and.w	r2, r3, #31
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	051b      	lsls	r3, r3, #20
 8003848:	e018      	b.n	800387c <HAL_ADC_ConfigChannel+0x594>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003862:	2320      	movs	r3, #32
 8003864:	e003      	b.n	800386e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800387c:	430b      	orrs	r3, r1
 800387e:	e080      	b.n	8003982 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <HAL_ADC_ConfigChannel+0x5b4>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	0e9b      	lsrs	r3, r3, #26
 8003892:	3301      	adds	r3, #1
 8003894:	069b      	lsls	r3, r3, #26
 8003896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800389a:	e015      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x5e0>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80038b4:	2320      	movs	r3, #32
 80038b6:	e003      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	069b      	lsls	r3, r3, #26
 80038c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x600>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0e9b      	lsrs	r3, r3, #26
 80038da:	3301      	adds	r3, #1
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	e017      	b.n	8003918 <HAL_ADC_ConfigChannel+0x630>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	61fb      	str	r3, [r7, #28]
  return result;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003900:	2320      	movs	r3, #32
 8003902:	e003      	b.n	800390c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f303 	lsl.w	r3, r1, r3
 8003918:	ea42 0103 	orr.w	r1, r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10d      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x65c>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0e9b      	lsrs	r3, r3, #26
 800392e:	3301      	adds	r3, #1
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	3b1e      	subs	r3, #30
 800393c:	051b      	lsls	r3, r3, #20
 800393e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003942:	e01d      	b.n	8003980 <HAL_ADC_ConfigChannel+0x698>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	613b      	str	r3, [r7, #16]
  return result;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e005      	b.n	800396c <HAL_ADC_ConfigChannel+0x684>
 8003960:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f003 021f 	and.w	r2, r3, #31
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	3b1e      	subs	r3, #30
 800397a:	051b      	lsls	r3, r3, #20
 800397c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003980:	430b      	orrs	r3, r1
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	4619      	mov	r1, r3
 8003988:	f7ff f9d8 	bl	8002d3c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_ADC_ConfigChannel+0x7a0>)
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d06c      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003998:	483c      	ldr	r0, [pc, #240]	; (8003a8c <HAL_ADC_ConfigChannel+0x7a4>)
 800399a:	f7ff f92d 	bl	8002bf8 <LL_ADC_GetCommonPathInternalCh>
 800399e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3a      	ldr	r2, [pc, #232]	; (8003a90 <HAL_ADC_ConfigChannel+0x7a8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d127      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d121      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a35      	ldr	r2, [pc, #212]	; (8003a94 <HAL_ADC_ConfigChannel+0x7ac>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d157      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ca:	4619      	mov	r1, r3
 80039cc:	482f      	ldr	r0, [pc, #188]	; (8003a8c <HAL_ADC_ConfigChannel+0x7a4>)
 80039ce:	f7ff f900 	bl	8002bd2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039d2:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <HAL_ADC_ConfigChannel+0x7b0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	4a30      	ldr	r2, [pc, #192]	; (8003a9c <HAL_ADC_ConfigChannel+0x7b4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	099b      	lsrs	r3, r3, #6
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039ec:	e002      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f9      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039fa:	e03a      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d113      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x746>
 8003a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d12a      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a24:	4619      	mov	r1, r3
 8003a26:	4819      	ldr	r0, [pc, #100]	; (8003a8c <HAL_ADC_ConfigChannel+0x7a4>)
 8003a28:	f7ff f8d3 	bl	8002bd2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a2c:	e021      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d11c      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d116      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d111      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a56:	4619      	mov	r1, r3
 8003a58:	480c      	ldr	r0, [pc, #48]	; (8003a8c <HAL_ADC_ConfigChannel+0x7a4>)
 8003a5a:	f7ff f8ba 	bl	8002bd2 <LL_ADC_SetCommonPathInternalCh>
 8003a5e:	e008      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	37d8      	adds	r7, #216	; 0xd8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	80080000 	.word	0x80080000
 8003a8c:	50040300 	.word	0x50040300
 8003a90:	c7520000 	.word	0xc7520000
 8003a94:	50040000 	.word	0x50040000
 8003a98:	20000064 	.word	0x20000064
 8003a9c:	053e2d63 	.word	0x053e2d63
 8003aa0:	cb840000 	.word	0xcb840000
 8003aa4:	80000001 	.word	0x80000001

08003aa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f9f3 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d14d      	bne.n	8003b5c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <ADC_Enable+0xc0>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f043 0210 	orr.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e039      	b.n	8003b5e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f9c2 	bl	8002e78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003af4:	f7ff f84e 	bl	8002b94 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003afa:	e028      	b.n	8003b4e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f9cd 	bl	8002ea0 <LL_ADC_IsEnabled>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d104      	bne.n	8003b16 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f9b1 	bl	8002e78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b16:	f7ff f83d 	bl	8002b94 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d914      	bls.n	8003b4e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d00d      	beq.n	8003b4e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e007      	b.n	8003b5e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d1cf      	bne.n	8003afc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	8000003f 	.word	0x8000003f

08003b6c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d14b      	bne.n	8003c1e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d021      	beq.n	8003be4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff f88a 	bl	8002cbe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d032      	beq.n	8003c16 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d12b      	bne.n	8003c16 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11f      	bne.n	8003c16 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
 8003be2:	e018      	b.n	8003c16 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d111      	bne.n	8003c16 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7fe fc44 	bl	80024a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c1c:	e00e      	b.n	8003c3c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f7ff fb52 	bl	80032d4 <HAL_ADC_ErrorCallback>
}
 8003c30:	e004      	b.n	8003c3c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7fe fc0c 	bl	8002470 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f043 0204 	orr.w	r2, r3, #4
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff fb24 	bl	80032d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <__NVIC_SetPriorityGrouping>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	; (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <SysTick_Config>:
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e00:	d301      	bcc.n	8003e06 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00f      	b.n	8003e26 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <SysTick_Config+0x40>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0e:	210f      	movs	r1, #15
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	f7ff ff8e 	bl	8003d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <SysTick_Config+0x40>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1e:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <SysTick_Config+0x40>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000e010 	.word	0xe000e010

08003e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff29 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff3e 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff8e 	bl	8003d88 <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5d 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff31 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa2 	bl	8003df0 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e098      	b.n	8003ffc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b4d      	ldr	r3, [pc, #308]	; (8004008 <HAL_DMA_Init+0x150>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d80f      	bhi.n	8003ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b4b      	ldr	r3, [pc, #300]	; (800400c <HAL_DMA_Init+0x154>)
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a4b      	ldr	r2, [pc, #300]	; (8004010 <HAL_DMA_Init+0x158>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a48      	ldr	r2, [pc, #288]	; (8004014 <HAL_DMA_Init+0x15c>)
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b46      	ldr	r3, [pc, #280]	; (8004018 <HAL_DMA_Init+0x160>)
 8003efe:	4413      	add	r3, r2
 8003f00:	4a43      	ldr	r2, [pc, #268]	; (8004010 <HAL_DMA_Init+0x158>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a42      	ldr	r2, [pc, #264]	; (800401c <HAL_DMA_Init+0x164>)
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6e:	d039      	beq.n	8003fe4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	4a27      	ldr	r2, [pc, #156]	; (8004014 <HAL_DMA_Init+0x15c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d11a      	bne.n	8003fb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <HAL_DMA_Init+0x168>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f003 031c 	and.w	r3, r3, #28
 8003f86:	210f      	movs	r1, #15
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	4924      	ldr	r1, [pc, #144]	; (8004020 <HAL_DMA_Init+0x168>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f94:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_DMA_Init+0x168>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f003 031c 	and.w	r3, r3, #28
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	491d      	ldr	r1, [pc, #116]	; (8004020 <HAL_DMA_Init+0x168>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]
 8003fae:	e019      	b.n	8003fe4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <HAL_DMA_Init+0x16c>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	f003 031c 	and.w	r3, r3, #28
 8003fbc:	210f      	movs	r1, #15
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4917      	ldr	r1, [pc, #92]	; (8004024 <HAL_DMA_Init+0x16c>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <HAL_DMA_Init+0x16c>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f003 031c 	and.w	r3, r3, #28
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	4911      	ldr	r1, [pc, #68]	; (8004024 <HAL_DMA_Init+0x16c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40020407 	.word	0x40020407
 800400c:	bffdfff8 	.word	0xbffdfff8
 8004010:	cccccccd 	.word	0xcccccccd
 8004014:	40020000 	.word	0x40020000
 8004018:	bffdfbf8 	.word	0xbffdfbf8
 800401c:	40020400 	.word	0x40020400
 8004020:	400200a8 	.word	0x400200a8
 8004024:	400204a8 	.word	0x400204a8

08004028 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_DMA_Start+0x20>
 8004044:	2302      	movs	r3, #2
 8004046:	e02e      	b.n	80040a6 <HAL_DMA_Start+0x7e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d11d      	bne.n	8004098 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f923 	bl	80042cc <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e005      	b.n	80040a4 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
 80040a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_DMA_Start_IT+0x20>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e04b      	b.n	8004166 <HAL_DMA_Start_IT+0xb8>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d13a      	bne.n	8004158 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f8e0 	bl	80042cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 020e 	orr.w	r2, r2, #14
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e00f      	b.n	8004146 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0204 	bic.w	r2, r2, #4
 8004134:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 020a 	orr.w	r2, r2, #10
 8004144:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e005      	b.n	8004164 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004160:	2302      	movs	r3, #2
 8004162:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f003 031c 	and.w	r3, r3, #28
 800418e:	2204      	movs	r2, #4
 8004190:	409a      	lsls	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d026      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x7a>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d021      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0204 	bic.w	r2, r2, #4
 80041c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f003 021c 	and.w	r2, r3, #28
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2104      	movs	r1, #4
 80041d0:	fa01 f202 	lsl.w	r2, r1, r2
 80041d4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d071      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80041e6:	e06c      	b.n	80042c2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	f003 031c 	and.w	r3, r3, #28
 80041f0:	2202      	movs	r2, #2
 80041f2:	409a      	lsls	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d02e      	beq.n	800425a <HAL_DMA_IRQHandler+0xec>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d029      	beq.n	800425a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 020a 	bic.w	r2, r2, #10
 8004222:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	f003 021c 	and.w	r2, r3, #28
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2102      	movs	r1, #2
 800423a:	fa01 f202 	lsl.w	r2, r1, r2
 800423e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d038      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004258:	e033      	b.n	80042c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f003 031c 	and.w	r3, r3, #28
 8004262:	2208      	movs	r2, #8
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d02a      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x156>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d025      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 020e 	bic.w	r2, r2, #14
 8004286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f003 021c 	and.w	r2, r3, #28
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f202 	lsl.w	r2, r1, r2
 800429a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
}
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f003 021c 	and.w	r2, r3, #28
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	2101      	movs	r1, #1
 80042e8:	fa01 f202 	lsl.w	r2, r1, r2
 80042ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d108      	bne.n	8004310 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800430e:	e007      	b.n	8004320 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800433a:	e154      	b.n	80045e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2101      	movs	r1, #1
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	4013      	ands	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 8146 	beq.w	80045e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d005      	beq.n	800436c <HAL_GPIO_Init+0x40>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d130      	bne.n	80043ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2203      	movs	r2, #3
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4013      	ands	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043a2:	2201      	movs	r2, #1
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0201 	and.w	r2, r3, #1
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d017      	beq.n	800440a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	2203      	movs	r2, #3
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4013      	ands	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d123      	bne.n	800445e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	08da      	lsrs	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3208      	adds	r2, #8
 800441e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4013      	ands	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	08da      	lsrs	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3208      	adds	r2, #8
 8004458:	6939      	ldr	r1, [r7, #16]
 800445a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2203      	movs	r2, #3
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 0203 	and.w	r2, r3, #3
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80a0 	beq.w	80045e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a0:	4b58      	ldr	r3, [pc, #352]	; (8004604 <HAL_GPIO_Init+0x2d8>)
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	4a57      	ldr	r2, [pc, #348]	; (8004604 <HAL_GPIO_Init+0x2d8>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6613      	str	r3, [r2, #96]	; 0x60
 80044ac:	4b55      	ldr	r3, [pc, #340]	; (8004604 <HAL_GPIO_Init+0x2d8>)
 80044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044b8:	4a53      	ldr	r2, [pc, #332]	; (8004608 <HAL_GPIO_Init+0x2dc>)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	3302      	adds	r3, #2
 80044c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	220f      	movs	r2, #15
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044e2:	d019      	beq.n	8004518 <HAL_GPIO_Init+0x1ec>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a49      	ldr	r2, [pc, #292]	; (800460c <HAL_GPIO_Init+0x2e0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d013      	beq.n	8004514 <HAL_GPIO_Init+0x1e8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a48      	ldr	r2, [pc, #288]	; (8004610 <HAL_GPIO_Init+0x2e4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00d      	beq.n	8004510 <HAL_GPIO_Init+0x1e4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a47      	ldr	r2, [pc, #284]	; (8004614 <HAL_GPIO_Init+0x2e8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <HAL_GPIO_Init+0x1e0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a46      	ldr	r2, [pc, #280]	; (8004618 <HAL_GPIO_Init+0x2ec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <HAL_GPIO_Init+0x1dc>
 8004504:	2304      	movs	r3, #4
 8004506:	e008      	b.n	800451a <HAL_GPIO_Init+0x1ee>
 8004508:	2307      	movs	r3, #7
 800450a:	e006      	b.n	800451a <HAL_GPIO_Init+0x1ee>
 800450c:	2303      	movs	r3, #3
 800450e:	e004      	b.n	800451a <HAL_GPIO_Init+0x1ee>
 8004510:	2302      	movs	r3, #2
 8004512:	e002      	b.n	800451a <HAL_GPIO_Init+0x1ee>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_GPIO_Init+0x1ee>
 8004518:	2300      	movs	r3, #0
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	f002 0203 	and.w	r2, r2, #3
 8004520:	0092      	lsls	r2, r2, #2
 8004522:	4093      	lsls	r3, r2
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800452a:	4937      	ldr	r1, [pc, #220]	; (8004608 <HAL_GPIO_Init+0x2dc>)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	3302      	adds	r3, #2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004538:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_GPIO_Init+0x2f0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	43db      	mvns	r3, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800455c:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_GPIO_Init+0x2f0>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_GPIO_Init+0x2f0>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004586:	4a25      	ldr	r2, [pc, #148]	; (800461c <HAL_GPIO_Init+0x2f0>)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <HAL_GPIO_Init+0x2f0>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045b0:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_GPIO_Init+0x2f0>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045b6:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_GPIO_Init+0x2f0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	43db      	mvns	r3, r3
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <HAL_GPIO_Init+0x2f0>)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3301      	adds	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f47f aea3 	bne.w	800433c <HAL_GPIO_Init+0x10>
  }
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40021000 	.word	0x40021000
 8004608:	40010000 	.word	0x40010000
 800460c:	48000400 	.word	0x48000400
 8004610:	48000800 	.word	0x48000800
 8004614:	48000c00 	.word	0x48000c00
 8004618:	48001000 	.word	0x48001000
 800461c:	40010400 	.word	0x40010400

08004620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
 800463c:	e001      	b.n	8004642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	807b      	strh	r3, [r7, #2]
 800465c:	4613      	mov	r3, r2
 800465e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004660:	787b      	ldrb	r3, [r7, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800466c:	e002      	b.n	8004674 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004696:	4a05      	ldr	r2, [pc, #20]	; (80046ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f806 	bl	80046b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40010400 	.word	0x40010400

080046b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0af      	b.n	800483a <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd ff9e 	bl	8002630 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e00a      	b.n	8004728 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	3304      	adds	r3, #4
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	2200      	movs	r2, #0
 8004720:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3301      	adds	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	d9f1      	bls.n	8004712 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0204 	orr.w	r2, r2, #4
 800473c:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <HAL_LCD_Init+0x17c>)
 8004746:	4013      	ands	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6851      	ldr	r1, [r2, #4]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6892      	ldr	r2, [r2, #8]
 8004750:	4311      	orrs	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004756:	4311      	orrs	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	69d2      	ldr	r2, [r2, #28]
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6a12      	ldr	r2, [r2, #32]
 8004768:	4311      	orrs	r1, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6992      	ldr	r2, [r2, #24]
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004774:	4311      	orrs	r1, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	430b      	orrs	r3, r1
 800477c:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f94c 	bl	8004a1c <LCD_WaitForSynchro>
 8004784:	4603      	mov	r3, r0
 8004786:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_LCD_Init+0xca>
  {
    return status;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	e053      	b.n	800483a <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80047ca:	f7fe f9e3 	bl	8002b94 <HAL_GetTick>
 80047ce:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80047d0:	e00c      	b.n	80047ec <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80047d2:	f7fe f9df 	bl	8002b94 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047e0:	d904      	bls.n	80047ec <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2208      	movs	r2, #8
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e026      	b.n	800483a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d1eb      	bne.n	80047d2 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80047fa:	f7fe f9cb 	bl	8002b94 <HAL_GetTick>
 80047fe:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8004800:	e00c      	b.n	800481c <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004802:	f7fe f9c7 	bl	8002b94 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004810:	d904      	bls.n	800481c <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2210      	movs	r2, #16
 8004816:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e00e      	b.n	800483a <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b10      	cmp	r3, #16
 8004828:	d1eb      	bne.n	8004802 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8004838:	7cfb      	ldrb	r3, [r7, #19]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	fc00000e 	.word	0xfc00000e

08004848 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800485c:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d002      	beq.n	800486a <HAL_LCD_Write+0x22>
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d144      	bne.n	80048f4 <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d12a      	bne.n	80048cc <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_LCD_Write+0x3c>
 8004880:	2302      	movs	r3, #2
 8004882:	e038      	b.n	80048f6 <HAL_LCD_Write+0xae>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 8004894:	f7fe f97e 	bl	8002b94 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800489a:	e010      	b.n	80048be <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800489c:	f7fe f97a 	bl	8002b94 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048aa:	d908      	bls.n	80048be <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2202      	movs	r2, #2
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e01b      	b.n	80048f6 <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d0e7      	beq.n	800489c <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3304      	adds	r3, #4
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	401a      	ands	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3304      	adds	r3, #4
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004910:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8004912:	7cbb      	ldrb	r3, [r7, #18]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d002      	beq.n	800491e <HAL_LCD_Clear+0x20>
 8004918:	7cbb      	ldrb	r3, [r7, #18]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d140      	bne.n	80049a0 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_LCD_Clear+0x2e>
 8004928:	2302      	movs	r3, #2
 800492a:	e03a      	b.n	80049a2 <HAL_LCD_Clear+0xa4>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 800493c:	f7fe f92a 	bl	8002b94 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8004942:	e010      	b.n	8004966 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004944:	f7fe f926 	bl	8002b94 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004952:	d908      	bls.n	8004966 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e01d      	b.n	80049a2 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d0e7      	beq.n	8004944 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e00a      	b.n	8004990 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3304      	adds	r3, #4
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	2200      	movs	r2, #0
 8004988:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	3301      	adds	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	d9f1      	bls.n	800497a <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f807 	bl	80049aa <HAL_LCD_UpdateDisplayRequest>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2208      	movs	r2, #8
 80049b8:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0204 	orr.w	r2, r2, #4
 80049c8:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80049ca:	f7fe f8e3 	bl	8002b94 <HAL_GetTick>
 80049ce:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80049d0:	e010      	b.n	80049f4 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80049d2:	f7fe f8df 	bl	8002b94 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e0:	d908      	bls.n	80049f4 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2204      	movs	r2, #4
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e00f      	b.n	8004a14 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d1e7      	bne.n	80049d2 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004a24:	f7fe f8b6 	bl	8002b94 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004a2a:	e00c      	b.n	8004a46 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8004a2c:	f7fe f8b2 	bl	8002b94 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a3a:	d904      	bls.n	8004a46 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e007      	b.n	8004a56 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d1eb      	bne.n	8004a2c <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40007000 	.word	0x40007000

08004a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d130      	bne.n	8004aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a8c:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a98:	d038      	beq.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aa2:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aaa:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2232      	movs	r2, #50	; 0x32
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0c9b      	lsrs	r3, r3, #18
 8004abc:	3301      	adds	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac0:	e002      	b.n	8004ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac8:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad4:	d102      	bne.n	8004adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f2      	bne.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d110      	bne.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e00f      	b.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afa:	d007      	beq.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b04:	4a05      	ldr	r2, [pc, #20]	; (8004b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40007000 	.word	0x40007000
 8004b20:	20000064 	.word	0x20000064
 8004b24:	431bde83 	.word	0x431bde83

08004b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f000 bc11 	b.w	800535e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3c:	4ba0      	ldr	r3, [pc, #640]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b46:	4b9e      	ldr	r3, [pc, #632]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 80e4 	beq.w	8004d26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4c>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	f040 808b 	bne.w	8004c82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	f040 8087 	bne.w	8004c82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b74:	4b92      	ldr	r3, [pc, #584]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_OscConfig+0x64>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e3e8      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	4b8b      	ldr	r3, [pc, #556]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x7e>
 8004b9c:	4b88      	ldr	r3, [pc, #544]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba4:	e005      	b.n	8004bb2 <HAL_RCC_OscConfig+0x8a>
 8004ba6:	4b86      	ldr	r3, [pc, #536]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d223      	bcs.n	8004bfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fd7a 	bl	80056b4 <RCC_SetFlashLatencyFromMSIRange>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e3c9      	b.n	800535e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bca:	4b7d      	ldr	r3, [pc, #500]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a7c      	ldr	r2, [pc, #496]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004bd0:	f043 0308 	orr.w	r3, r3, #8
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	4b7a      	ldr	r3, [pc, #488]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4977      	ldr	r1, [pc, #476]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004be8:	4b75      	ldr	r3, [pc, #468]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	4972      	ldr	r1, [pc, #456]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	e025      	b.n	8004c4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bfe:	4b70      	ldr	r3, [pc, #448]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6f      	ldr	r2, [pc, #444]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4b6d      	ldr	r3, [pc, #436]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	496a      	ldr	r1, [pc, #424]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c1c:	4b68      	ldr	r3, [pc, #416]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	4965      	ldr	r1, [pc, #404]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fd3a 	bl	80056b4 <RCC_SetFlashLatencyFromMSIRange>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e389      	b.n	800535e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c4a:	f000 fc6f 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4b5b      	ldr	r3, [pc, #364]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	495a      	ldr	r1, [pc, #360]	; (8004dc4 <HAL_RCC_OscConfig+0x29c>)
 8004c5c:	5ccb      	ldrb	r3, [r1, r3]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_OscConfig+0x2a0>)
 8004c68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c6a:	4b58      	ldr	r3, [pc, #352]	; (8004dcc <HAL_RCC_OscConfig+0x2a4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fd ff40 	bl	8002af4 <HAL_InitTick>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d052      	beq.n	8004d24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	e36d      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d032      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c8a:	4b4d      	ldr	r3, [pc, #308]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a4c      	ldr	r2, [pc, #304]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c96:	f7fd ff7d 	bl	8002b94 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c9e:	f7fd ff79 	bl	8002b94 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e356      	b.n	800535e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cb0:	4b43      	ldr	r3, [pc, #268]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cbc:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cc2:	f043 0308 	orr.w	r3, r3, #8
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b3d      	ldr	r3, [pc, #244]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	493a      	ldr	r1, [pc, #232]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	4935      	ldr	r1, [pc, #212]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
 8004cee:	e01a      	b.n	8004d26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cf0:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a32      	ldr	r2, [pc, #200]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cfc:	f7fd ff4a 	bl	8002b94 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d04:	f7fd ff46 	bl	8002b94 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e323      	b.n	800535e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x1dc>
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d073      	beq.n	8004e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_OscConfig+0x21c>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d10e      	bne.n	8004d5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d063      	beq.n	8004e18 <HAL_RCC_OscConfig+0x2f0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d15f      	bne.n	8004e18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e300      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCC_OscConfig+0x24c>
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e01d      	b.n	8004db0 <HAL_RCC_OscConfig+0x288>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x270>
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a0f      	ldr	r2, [pc, #60]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0x288>
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <HAL_RCC_OscConfig+0x298>)
 8004daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01b      	beq.n	8004df0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd feec 	bl	8002b94 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dbe:	e010      	b.n	8004de2 <HAL_RCC_OscConfig+0x2ba>
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	0802d7b0 	.word	0x0802d7b0
 8004dc8:	20000064 	.word	0x20000064
 8004dcc:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fd fee0 	bl	8002b94 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e2bd      	b.n	800535e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de2:	4baf      	ldr	r3, [pc, #700]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x2a8>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fd fed0 	bl	8002b94 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fd fecc 	bl	8002b94 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e2a9      	b.n	800535e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0a:	4ba5      	ldr	r3, [pc, #660]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x2d0>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d060      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_OscConfig+0x310>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b0c      	cmp	r3, #12
 8004e30:	d119      	bne.n	8004e66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d116      	bne.n	8004e66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e38:	4b99      	ldr	r3, [pc, #612]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_OscConfig+0x328>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e286      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	4b93      	ldr	r3, [pc, #588]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	061b      	lsls	r3, r3, #24
 8004e5e:	4990      	ldr	r1, [pc, #576]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e64:	e040      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d023      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e6e:	4b8c      	ldr	r3, [pc, #560]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a8b      	ldr	r2, [pc, #556]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fd fe8b 	bl	8002b94 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e82:	f7fd fe87 	bl	8002b94 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e264      	b.n	800535e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e94:	4b82      	ldr	r3, [pc, #520]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea0:	4b7f      	ldr	r3, [pc, #508]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	061b      	lsls	r3, r3, #24
 8004eae:	497c      	ldr	r1, [pc, #496]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	604b      	str	r3, [r1, #4]
 8004eb4:	e018      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb6:	4b7a      	ldr	r3, [pc, #488]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a79      	ldr	r2, [pc, #484]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7fd fe67 	bl	8002b94 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eca:	f7fd fe63 	bl	8002b94 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e240      	b.n	800535e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004edc:	4b70      	ldr	r3, [pc, #448]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d03c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f02:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fd fe42 	bl	8002b94 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f14:	f7fd fe3e 	bl	8002b94 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e21b      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f26:	4b5e      	ldr	r3, [pc, #376]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ef      	beq.n	8004f14 <HAL_RCC_OscConfig+0x3ec>
 8004f34:	e01b      	b.n	8004f6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f36:	4b5a      	ldr	r3, [pc, #360]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3c:	4a58      	ldr	r2, [pc, #352]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fd fe25 	bl	8002b94 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fd fe21 	bl	8002b94 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1fe      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f60:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1ef      	bne.n	8004f4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80a6 	beq.w	80050c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f80:	4b47      	ldr	r3, [pc, #284]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10d      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b44      	ldr	r3, [pc, #272]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	4a43      	ldr	r2, [pc, #268]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6593      	str	r3, [r2, #88]	; 0x58
 8004f98:	4b41      	ldr	r3, [pc, #260]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa8:	4b3e      	ldr	r3, [pc, #248]	; (80050a4 <HAL_RCC_OscConfig+0x57c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d118      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_RCC_OscConfig+0x57c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a3a      	ldr	r2, [pc, #232]	; (80050a4 <HAL_RCC_OscConfig+0x57c>)
 8004fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc0:	f7fd fde8 	bl	8002b94 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc8:	f7fd fde4 	bl	8002b94 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e1c1      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fda:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <HAL_RCC_OscConfig+0x57c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d108      	bne.n	8005000 <HAL_RCC_OscConfig+0x4d8>
 8004fee:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	4a2a      	ldr	r2, [pc, #168]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ffe:	e024      	b.n	800504a <HAL_RCC_OscConfig+0x522>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b05      	cmp	r3, #5
 8005006:	d110      	bne.n	800502a <HAL_RCC_OscConfig+0x502>
 8005008:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8005010:	f043 0304 	orr.w	r3, r3, #4
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005028:	e00f      	b.n	800504a <HAL_RCC_OscConfig+0x522>
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8005042:	f023 0304 	bic.w	r3, r3, #4
 8005046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fd fd9f 	bl	8002b94 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005058:	e00a      	b.n	8005070 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fd fd9b 	bl	8002b94 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e176      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCC_OscConfig+0x578>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ed      	beq.n	800505a <HAL_RCC_OscConfig+0x532>
 800507e:	e01a      	b.n	80050b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fd fd88 	bl	8002b94 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005086:	e00f      	b.n	80050a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fd fd84 	bl	8002b94 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	; 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d906      	bls.n	80050a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e15f      	b.n	800535e <HAL_RCC_OscConfig+0x836>
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a8:	4baa      	ldr	r3, [pc, #680]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e8      	bne.n	8005088 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050b6:	7ffb      	ldrb	r3, [r7, #31]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050bc:	4ba5      	ldr	r3, [pc, #660]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	4aa4      	ldr	r2, [pc, #656]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80050c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d03c      	beq.n	800514e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01c      	beq.n	8005116 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050dc:	4b9d      	ldr	r3, [pc, #628]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80050de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e2:	4a9c      	ldr	r2, [pc, #624]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fd fd52 	bl	8002b94 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f4:	f7fd fd4e 	bl	8002b94 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e12b      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005106:	4b93      	ldr	r3, [pc, #588]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ef      	beq.n	80050f4 <HAL_RCC_OscConfig+0x5cc>
 8005114:	e01b      	b.n	800514e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005116:	4b8f      	ldr	r3, [pc, #572]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800511c:	4a8d      	ldr	r2, [pc, #564]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005126:	f7fd fd35 	bl	8002b94 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800512e:	f7fd fd31 	bl	8002b94 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e10e      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005140:	4b84      	ldr	r3, [pc, #528]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ef      	bne.n	800512e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8102 	beq.w	800535c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	2b02      	cmp	r3, #2
 800515e:	f040 80c5 	bne.w	80052ec <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005162:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0203 	and.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	429a      	cmp	r2, r3
 8005174:	d12c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	3b01      	subs	r3, #1
 8005182:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005184:	429a      	cmp	r2, r3
 8005186:	d123      	bne.n	80051d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005194:	429a      	cmp	r2, r3
 8005196:	d11b      	bne.n	80051d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d113      	bne.n	80051d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	3b01      	subs	r3, #1
 80051b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d109      	bne.n	80051d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	3b01      	subs	r3, #1
 80051ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d067      	beq.n	80052a0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d062      	beq.n	800529c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051d6:	4b5f      	ldr	r3, [pc, #380]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e0bb      	b.n	800535e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051e6:	4b5b      	ldr	r3, [pc, #364]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a5a      	ldr	r2, [pc, #360]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80051ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051f2:	f7fd fccf 	bl	8002b94 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fa:	f7fd fccb 	bl	8002b94 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0a8      	b.n	800535e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520c:	4b51      	ldr	r3, [pc, #324]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f0      	bne.n	80051fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005218:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	4b4e      	ldr	r3, [pc, #312]	; (8005358 <HAL_RCC_OscConfig+0x830>)
 800521e:	4013      	ands	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005228:	3a01      	subs	r2, #1
 800522a:	0112      	lsls	r2, r2, #4
 800522c:	4311      	orrs	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005232:	0212      	lsls	r2, r2, #8
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800523a:	0852      	lsrs	r2, r2, #1
 800523c:	3a01      	subs	r2, #1
 800523e:	0552      	lsls	r2, r2, #21
 8005240:	4311      	orrs	r1, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005246:	0852      	lsrs	r2, r2, #1
 8005248:	3a01      	subs	r2, #1
 800524a:	0652      	lsls	r2, r2, #25
 800524c:	4311      	orrs	r1, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005252:	06d2      	lsls	r2, r2, #27
 8005254:	430a      	orrs	r2, r1
 8005256:	493f      	ldr	r1, [pc, #252]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800525c:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005268:	4b3a      	ldr	r3, [pc, #232]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a39      	ldr	r2, [pc, #228]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800526e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005272:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005274:	f7fd fc8e 	bl	8002b94 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7fd fc8a 	bl	8002b94 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e067      	b.n	800535e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800528e:	4b31      	ldr	r3, [pc, #196]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800529a:	e05f      	b.n	800535c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e05e      	b.n	800535e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a0:	4b2c      	ldr	r3, [pc, #176]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d157      	bne.n	800535c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052ac:	4b29      	ldr	r3, [pc, #164]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b8:	4b26      	ldr	r3, [pc, #152]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c4:	f7fd fc66 	bl	8002b94 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fd fc62 	bl	8002b94 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e03f      	b.n	800535e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x7a4>
 80052ea:	e037      	b.n	800535c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d02d      	beq.n	800534e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 80052f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052fe:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	4a11      	ldr	r2, [pc, #68]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005310:	f023 0303 	bic.w	r3, r3, #3
 8005314:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005316:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 800531c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005324:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fd fc35 	bl	8002b94 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532e:	f7fd fc31 	bl	8002b94 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e00e      	b.n	800535e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_RCC_OscConfig+0x82c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCC_OscConfig+0x806>
 800534c:	e006      	b.n	800535c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e005      	b.n	800535e <HAL_RCC_OscConfig+0x836>
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
 8005358:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop

08005368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0c8      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800537c:	4b66      	ldr	r3, [pc, #408]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d910      	bls.n	80053ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b63      	ldr	r3, [pc, #396]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 0207 	bic.w	r2, r3, #7
 8005392:	4961      	ldr	r1, [pc, #388]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b5f      	ldr	r3, [pc, #380]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0b0      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d04c      	beq.n	8005452 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c0:	4b56      	ldr	r3, [pc, #344]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d121      	bne.n	8005410 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e09e      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d107      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d8:	4b50      	ldr	r3, [pc, #320]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d115      	bne.n	8005410 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e092      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053f0:	4b4a      	ldr	r3, [pc, #296]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e086      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005400:	4b46      	ldr	r3, [pc, #280]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e07e      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005410:	4b42      	ldr	r3, [pc, #264]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f023 0203 	bic.w	r2, r3, #3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	493f      	ldr	r1, [pc, #252]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005422:	f7fd fbb7 	bl	8002b94 <HAL_GetTick>
 8005426:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005428:	e00a      	b.n	8005440 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800542a:	f7fd fbb3 	bl	8002b94 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f241 3288 	movw	r2, #5000	; 0x1388
 8005438:	4293      	cmp	r3, r2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e066      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 020c 	and.w	r2, r3, #12
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	429a      	cmp	r2, r3
 8005450:	d1eb      	bne.n	800542a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	492c      	ldr	r1, [pc, #176]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005470:	4b29      	ldr	r3, [pc, #164]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d210      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b26      	ldr	r3, [pc, #152]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f023 0207 	bic.w	r2, r3, #7
 8005486:	4924      	ldr	r1, [pc, #144]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b22      	ldr	r3, [pc, #136]	; (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e036      	b.n	800550e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4918      	ldr	r1, [pc, #96]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ca:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4910      	ldr	r1, [pc, #64]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054de:	f000 f825 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b0d      	ldr	r3, [pc, #52]	; (800551c <HAL_RCC_ClockConfig+0x1b4>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	490c      	ldr	r1, [pc, #48]	; (8005520 <HAL_RCC_ClockConfig+0x1b8>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_RCC_ClockConfig+0x1c0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fd faf6 	bl	8002af4 <HAL_InitTick>
 8005508:	4603      	mov	r3, r0
 800550a:	72fb      	strb	r3, [r7, #11]

  return status;
 800550c:	7afb      	ldrb	r3, [r7, #11]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40022000 	.word	0x40022000
 800551c:	40021000 	.word	0x40021000
 8005520:	0802d7b0 	.word	0x0802d7b0
 8005524:	20000064 	.word	0x20000064
 8005528:	20000068 	.word	0x20000068

0800552c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553a:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005544:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x34>
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d121      	bne.n	800559e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d11e      	bne.n	800559e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005560:	4b34      	ldr	r3, [pc, #208]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800556c:	4b31      	ldr	r3, [pc, #196]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 030f 	and.w	r3, r3, #15
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e005      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005588:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <HAL_RCC_GetSysClockFreq+0x10c>)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005590:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10d      	bne.n	80055b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800559c:	e00a      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d102      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <HAL_RCC_GetSysClockFreq+0x110>)
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	e004      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055b0:	4b23      	ldr	r3, [pc, #140]	; (8005640 <HAL_RCC_GetSysClockFreq+0x114>)
 80055b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d134      	bne.n	8005624 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ba:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d003      	beq.n	80055d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d003      	beq.n	80055d8 <HAL_RCC_GetSysClockFreq+0xac>
 80055d0:	e005      	b.n	80055de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055d2:	4b1a      	ldr	r3, [pc, #104]	; (800563c <HAL_RCC_GetSysClockFreq+0x110>)
 80055d4:	617b      	str	r3, [r7, #20]
      break;
 80055d6:	e005      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <HAL_RCC_GetSysClockFreq+0x114>)
 80055da:	617b      	str	r3, [r7, #20]
      break;
 80055dc:	e002      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	617b      	str	r3, [r7, #20]
      break;
 80055e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055e4:	4b13      	ldr	r3, [pc, #76]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	3301      	adds	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	fb02 f203 	mul.w	r2, r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <HAL_RCC_GetSysClockFreq+0x108>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	0e5b      	lsrs	r3, r3, #25
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	3301      	adds	r3, #1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005624:	69bb      	ldr	r3, [r7, #24]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3724      	adds	r7, #36	; 0x24
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000
 8005638:	0802d7c8 	.word	0x0802d7c8
 800563c:	00f42400 	.word	0x00f42400
 8005640:	007a1200 	.word	0x007a1200

08005644 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <HAL_RCC_GetHCLKFreq+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000064 	.word	0x20000064

0800565c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005660:	f7ff fff0 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0a1b      	lsrs	r3, r3, #8
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4904      	ldr	r1, [pc, #16]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40021000 	.word	0x40021000
 8005684:	0802d7c0 	.word	0x0802d7c0

08005688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800568c:	f7ff ffda 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8005690:	4602      	mov	r2, r0
 8005692:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	0adb      	lsrs	r3, r3, #11
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	4904      	ldr	r1, [pc, #16]	; (80056b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800569e:	5ccb      	ldrb	r3, [r1, r3]
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	0802d7c0 	.word	0x0802d7c0

080056b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056c0:	4b2a      	ldr	r3, [pc, #168]	; (800576c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056cc:	f7ff f9c8 	bl	8004a60 <HAL_PWREx_GetVoltageRange>
 80056d0:	6178      	str	r0, [r7, #20]
 80056d2:	e014      	b.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	4a24      	ldr	r2, [pc, #144]	; (800576c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056de:	6593      	str	r3, [r2, #88]	; 0x58
 80056e0:	4b22      	ldr	r3, [pc, #136]	; (800576c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056ec:	f7ff f9b8 	bl	8004a60 <HAL_PWREx_GetVoltageRange>
 80056f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056f2:	4b1e      	ldr	r3, [pc, #120]	; (800576c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	4a1d      	ldr	r2, [pc, #116]	; (800576c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005704:	d10b      	bne.n	800571e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d919      	bls.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2ba0      	cmp	r3, #160	; 0xa0
 8005710:	d902      	bls.n	8005718 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005712:	2302      	movs	r3, #2
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e013      	b.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005718:	2301      	movs	r3, #1
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e010      	b.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d902      	bls.n	800572a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005724:	2303      	movs	r3, #3
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e00a      	b.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d102      	bne.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005730:	2302      	movs	r3, #2
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e004      	b.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b70      	cmp	r3, #112	; 0x70
 800573a:	d101      	bne.n	8005740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800573c:	2301      	movs	r3, #1
 800573e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f023 0207 	bic.w	r2, r3, #7
 8005748:	4909      	ldr	r1, [pc, #36]	; (8005770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	d001      	beq.n	8005762 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40021000 	.word	0x40021000
 8005770:	40022000 	.word	0x40022000

08005774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800577c:	2300      	movs	r3, #0
 800577e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005780:	2300      	movs	r3, #0
 8005782:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578c:	2b00      	cmp	r3, #0
 800578e:	d031      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005798:	d01a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800579a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800579e:	d814      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057a8:	d10f      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80057aa:	4b5d      	ldr	r3, [pc, #372]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	4a5c      	ldr	r2, [pc, #368]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057b6:	e00c      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fa1e 	bl	8005c00 <RCCEx_PLLSAI1_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	74fb      	strb	r3, [r7, #19]
      break;
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80057d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d2:	7cfb      	ldrb	r3, [r7, #19]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057d8:	4b51      	ldr	r3, [pc, #324]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	494e      	ldr	r1, [pc, #312]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057ee:	e001      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 809e 	beq.w	800593e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005806:	4b46      	ldr	r3, [pc, #280]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581c:	4b40      	ldr	r3, [pc, #256]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	4a3f      	ldr	r2, [pc, #252]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005826:	6593      	str	r3, [r2, #88]	; 0x58
 8005828:	4b3d      	ldr	r3, [pc, #244]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005834:	2301      	movs	r3, #1
 8005836:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005838:	4b3a      	ldr	r3, [pc, #232]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a39      	ldr	r2, [pc, #228]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800583e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005842:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005844:	f7fd f9a6 	bl	8002b94 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800584a:	e009      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584c:	f7fd f9a2 	bl	8002b94 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d902      	bls.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	74fb      	strb	r3, [r7, #19]
        break;
 800585e:	e005      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005860:	4b30      	ldr	r3, [pc, #192]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ef      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800586c:	7cfb      	ldrb	r3, [r7, #19]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d15a      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005872:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	429a      	cmp	r2, r3
 800588c:	d019      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800588e:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005898:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800589a:	4b21      	ldr	r3, [pc, #132]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	4a1b      	ldr	r2, [pc, #108]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058ba:	4a19      	ldr	r2, [pc, #100]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058cc:	f7fd f962 	bl	8002b94 <HAL_GetTick>
 80058d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d2:	e00b      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d4:	f7fd f95e 	bl	8002b94 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d902      	bls.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	74fb      	strb	r3, [r7, #19]
            break;
 80058ea:	e006      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0ec      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10b      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590e:	4904      	ldr	r1, [pc, #16]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005916:	e009      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	74bb      	strb	r3, [r7, #18]
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
 8005924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800592c:	7c7b      	ldrb	r3, [r7, #17]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d105      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005932:	4bb2      	ldr	r3, [pc, #712]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	4ab1      	ldr	r2, [pc, #708]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800594a:	4bac      	ldr	r3, [pc, #688]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f023 0203 	bic.w	r2, r3, #3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	49a8      	ldr	r1, [pc, #672]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800596c:	4ba3      	ldr	r3, [pc, #652]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f023 020c 	bic.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	49a0      	ldr	r1, [pc, #640]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800598e:	4b9b      	ldr	r3, [pc, #620]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	4997      	ldr	r1, [pc, #604]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059b0:	4b92      	ldr	r3, [pc, #584]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	498f      	ldr	r1, [pc, #572]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d2:	4b8a      	ldr	r3, [pc, #552]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	4986      	ldr	r1, [pc, #536]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059f4:	4b81      	ldr	r3, [pc, #516]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	497e      	ldr	r1, [pc, #504]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a16:	4b79      	ldr	r3, [pc, #484]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	4975      	ldr	r1, [pc, #468]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a38:	4b70      	ldr	r3, [pc, #448]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	496d      	ldr	r1, [pc, #436]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a5a:	4b68      	ldr	r3, [pc, #416]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	4964      	ldr	r1, [pc, #400]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d028      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a7c:	4b5f      	ldr	r3, [pc, #380]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8a:	495c      	ldr	r1, [pc, #368]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9a:	d106      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a9c:	4b57      	ldr	r3, [pc, #348]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a56      	ldr	r2, [pc, #344]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa6:	60d3      	str	r3, [r2, #12]
 8005aa8:	e011      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab2:	d10c      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	2101      	movs	r1, #1
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f8a0 	bl	8005c00 <RCCEx_PLLSAI1_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d028      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ada:	4b48      	ldr	r3, [pc, #288]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae8:	4944      	ldr	r1, [pc, #272]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af8:	d106      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005afa:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	4a3f      	ldr	r2, [pc, #252]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b04:	60d3      	str	r3, [r2, #12]
 8005b06:	e011      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b10:	d10c      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2101      	movs	r1, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f871 	bl	8005c00 <RCCEx_PLLSAI1_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005b28:	7cfb      	ldrb	r3, [r7, #19]
 8005b2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d028      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b38:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b46:	492d      	ldr	r1, [pc, #180]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b56:	d106      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b58:	4b28      	ldr	r3, [pc, #160]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4a27      	ldr	r2, [pc, #156]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b62:	60d3      	str	r3, [r2, #12]
 8005b64:	e011      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f842 	bl	8005c00 <RCCEx_PLLSAI1_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b80:	7cfb      	ldrb	r3, [r7, #19]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01c      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b96:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	4915      	ldr	r1, [pc, #84]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	2102      	movs	r1, #2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f81f 	bl	8005c00 <RCCEx_PLLSAI1_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bea:	4904      	ldr	r1, [pc, #16]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bf2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000

08005c00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c0e:	4b74      	ldr	r3, [pc, #464]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c1a:	4b71      	ldr	r3, [pc, #452]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0203 	and.w	r2, r3, #3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d10d      	bne.n	8005c46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c32:	4b6b      	ldr	r3, [pc, #428]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
       ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d047      	beq.n	8005cd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	73fb      	strb	r3, [r7, #15]
 8005c4a:	e044      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d018      	beq.n	8005c86 <RCCEx_PLLSAI1_Config+0x86>
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d825      	bhi.n	8005ca4 <RCCEx_PLLSAI1_Config+0xa4>
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d002      	beq.n	8005c62 <RCCEx_PLLSAI1_Config+0x62>
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d009      	beq.n	8005c74 <RCCEx_PLLSAI1_Config+0x74>
 8005c60:	e020      	b.n	8005ca4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c62:	4b5f      	ldr	r3, [pc, #380]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11d      	bne.n	8005caa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c72:	e01a      	b.n	8005caa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c74:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d116      	bne.n	8005cae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c84:	e013      	b.n	8005cae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c86:	4b56      	ldr	r3, [pc, #344]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10f      	bne.n	8005cb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c92:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ca2:	e006      	b.n	8005cb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca8:	e004      	b.n	8005cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cba:	4b49      	ldr	r3, [pc, #292]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6819      	ldr	r1, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	4943      	ldr	r1, [pc, #268]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d17c      	bne.n	8005dd6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cdc:	4b40      	ldr	r3, [pc, #256]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3f      	ldr	r2, [pc, #252]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce8:	f7fc ff54 	bl	8002b94 <HAL_GetTick>
 8005cec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cee:	e009      	b.n	8005d04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cf0:	f7fc ff50 	bl	8002b94 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d902      	bls.n	8005d04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	73fb      	strb	r3, [r7, #15]
        break;
 8005d02:	e005      	b.n	8005d10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d04:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1ef      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d15f      	bne.n	8005dd6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d110      	bne.n	8005d3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d1c:	4b30      	ldr	r3, [pc, #192]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6892      	ldr	r2, [r2, #8]
 8005d2c:	0211      	lsls	r1, r2, #8
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	68d2      	ldr	r2, [r2, #12]
 8005d32:	06d2      	lsls	r2, r2, #27
 8005d34:	430a      	orrs	r2, r1
 8005d36:	492a      	ldr	r1, [pc, #168]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	610b      	str	r3, [r1, #16]
 8005d3c:	e027      	b.n	8005d8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d112      	bne.n	8005d6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d44:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6892      	ldr	r2, [r2, #8]
 8005d54:	0211      	lsls	r1, r2, #8
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6912      	ldr	r2, [r2, #16]
 8005d5a:	0852      	lsrs	r2, r2, #1
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	0552      	lsls	r2, r2, #21
 8005d60:	430a      	orrs	r2, r1
 8005d62:	491f      	ldr	r1, [pc, #124]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	610b      	str	r3, [r1, #16]
 8005d68:	e011      	b.n	8005d8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6892      	ldr	r2, [r2, #8]
 8005d7a:	0211      	lsls	r1, r2, #8
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6952      	ldr	r2, [r2, #20]
 8005d80:	0852      	lsrs	r2, r2, #1
 8005d82:	3a01      	subs	r2, #1
 8005d84:	0652      	lsls	r2, r2, #25
 8005d86:	430a      	orrs	r2, r1
 8005d88:	4915      	ldr	r1, [pc, #84]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d8e:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d9a:	f7fc fefb 	bl	8002b94 <HAL_GetTick>
 8005d9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005da0:	e009      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005da2:	f7fc fef7 	bl	8002b94 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d902      	bls.n	8005db6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	73fb      	strb	r3, [r7, #15]
          break;
 8005db4:	e005      	b.n	8005dc2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0ef      	beq.n	8005da2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	4903      	ldr	r1, [pc, #12]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40021000 	.word	0x40021000

08005de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e049      	b.n	8005e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fc fc8e 	bl	800272c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f000 f94c 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d001      	beq.n	8005eac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e033      	b.n	8005f14 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a19      	ldr	r2, [pc, #100]	; (8005f20 <HAL_TIM_Base_Start+0x8c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_TIM_Base_Start+0x3e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIM_Base_Start+0x3e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <HAL_TIM_Base_Start+0x90>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d115      	bne.n	8005efe <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <HAL_TIM_Base_Start+0x94>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d015      	beq.n	8005f10 <HAL_TIM_Base_Start+0x7c>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eea:	d011      	beq.n	8005f10 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efc:	e008      	b.n	8005f10 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0201 	orr.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e000      	b.n	8005f12 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40014000 	.word	0x40014000
 8005f28:	00010007 	.word	0x00010007

08005f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIM_ConfigClockSource+0x1c>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e0b6      	b.n	80060b6 <HAL_TIM_ConfigClockSource+0x18a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	d03e      	beq.n	8006004 <HAL_TIM_ConfigClockSource+0xd8>
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8a:	f200 8087 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	f000 8086 	beq.w	80060a2 <HAL_TIM_ConfigClockSource+0x176>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9a:	d87f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d01a      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xaa>
 8005fa0:	2b70      	cmp	r3, #112	; 0x70
 8005fa2:	d87b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005fa4:	2b60      	cmp	r3, #96	; 0x60
 8005fa6:	d050      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x11e>
 8005fa8:	2b60      	cmp	r3, #96	; 0x60
 8005faa:	d877      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005fac:	2b50      	cmp	r3, #80	; 0x50
 8005fae:	d03c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0xfe>
 8005fb0:	2b50      	cmp	r3, #80	; 0x50
 8005fb2:	d873      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d058      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x13e>
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d86f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005fbc:	2b30      	cmp	r3, #48	; 0x30
 8005fbe:	d064      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15e>
 8005fc0:	2b30      	cmp	r3, #48	; 0x30
 8005fc2:	d86b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d060      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15e>
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d867      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x170>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05c      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15e>
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d05a      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x15e>
 8005fd4:	e062      	b.n	800609c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6899      	ldr	r1, [r3, #8]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f000 f949 	bl	800627c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	609a      	str	r2, [r3, #8]
      break;
 8006002:	e04f      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6899      	ldr	r1, [r3, #8]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f000 f932 	bl	800627c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006026:	609a      	str	r2, [r3, #8]
      break;
 8006028:	e03c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	461a      	mov	r2, r3
 8006038:	f000 f8a6 	bl	8006188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2150      	movs	r1, #80	; 0x50
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f8ff 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8006048:	e02c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	461a      	mov	r2, r3
 8006058:	f000 f8c5 	bl	80061e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2160      	movs	r1, #96	; 0x60
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f8ef 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8006068:	e01c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	461a      	mov	r2, r3
 8006078:	f000 f886 	bl	8006188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f8df 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8006088:	e00c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	4610      	mov	r0, r2
 8006096:	f000 f8d6 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 800609a:	e003      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e000      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a2a      	ldr	r2, [pc, #168]	; (800617c <TIM_Base_SetConfig+0xbc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x20>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a21      	ldr	r2, [pc, #132]	; (800617c <TIM_Base_SetConfig+0xbc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_Base_SetConfig+0x52>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d007      	beq.n	8006112 <TIM_Base_SetConfig+0x52>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <TIM_Base_SetConfig+0xc0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_Base_SetConfig+0x52>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <TIM_Base_SetConfig+0xc4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d108      	bne.n	8006124 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a0c      	ldr	r2, [pc, #48]	; (800617c <TIM_Base_SetConfig+0xbc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d007      	beq.n	8006160 <TIM_Base_SetConfig+0xa0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <TIM_Base_SetConfig+0xc0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_Base_SetConfig+0xa0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <TIM_Base_SetConfig+0xc4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d103      	bne.n	8006168 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	615a      	str	r2, [r3, #20]
}
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40014000 	.word	0x40014000
 8006184:	40014400 	.word	0x40014400

08006188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0210 	bic.w	r2, r3, #16
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	f043 0307 	orr.w	r3, r3, #7
 8006268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e04f      	b.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a21      	ldr	r2, [pc, #132]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006304:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a14      	ldr	r2, [pc, #80]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d009      	beq.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d004      	beq.n	8006348 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a10      	ldr	r2, [pc, #64]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d10c      	bne.n	8006362 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800634e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	4313      	orrs	r3, r2
 8006358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	40012c00 	.word	0x40012c00
 8006384:	40014000 	.word	0x40014000

08006388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e040      	b.n	800641c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fc fa1e 	bl	80027ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2224      	movs	r2, #36	; 0x24
 80063b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f82c 	bl	8006424 <UART_SetConfig>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e022      	b.n	800641c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa54 	bl	800688c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fadb 	bl	80069d0 <UART_CheckIdleState>
 800641a:	4603      	mov	r3, r0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006424:	b5b0      	push	{r4, r5, r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	4313      	orrs	r3, r2
 8006446:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4baa      	ldr	r3, [pc, #680]	; (80066f8 <UART_SetConfig+0x2d4>)
 8006450:	4013      	ands	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	69f9      	ldr	r1, [r7, #28]
 8006458:	430b      	orrs	r3, r1
 800645a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a9f      	ldr	r2, [pc, #636]	; (80066fc <UART_SetConfig+0x2d8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	4313      	orrs	r3, r2
 800648a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	430a      	orrs	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a96      	ldr	r2, [pc, #600]	; (8006700 <UART_SetConfig+0x2dc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d121      	bne.n	80064ee <UART_SetConfig+0xca>
 80064aa:	4b96      	ldr	r3, [pc, #600]	; (8006704 <UART_SetConfig+0x2e0>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d817      	bhi.n	80064e8 <UART_SetConfig+0xc4>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <UART_SetConfig+0x9c>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064dd 	.word	0x080064dd
 80064c8:	080064d7 	.word	0x080064d7
 80064cc:	080064e3 	.word	0x080064e3
 80064d0:	2301      	movs	r3, #1
 80064d2:	76fb      	strb	r3, [r7, #27]
 80064d4:	e096      	b.n	8006604 <UART_SetConfig+0x1e0>
 80064d6:	2302      	movs	r3, #2
 80064d8:	76fb      	strb	r3, [r7, #27]
 80064da:	e093      	b.n	8006604 <UART_SetConfig+0x1e0>
 80064dc:	2304      	movs	r3, #4
 80064de:	76fb      	strb	r3, [r7, #27]
 80064e0:	e090      	b.n	8006604 <UART_SetConfig+0x1e0>
 80064e2:	2308      	movs	r3, #8
 80064e4:	76fb      	strb	r3, [r7, #27]
 80064e6:	e08d      	b.n	8006604 <UART_SetConfig+0x1e0>
 80064e8:	2310      	movs	r3, #16
 80064ea:	76fb      	strb	r3, [r7, #27]
 80064ec:	e08a      	b.n	8006604 <UART_SetConfig+0x1e0>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a85      	ldr	r2, [pc, #532]	; (8006708 <UART_SetConfig+0x2e4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d132      	bne.n	800655e <UART_SetConfig+0x13a>
 80064f8:	4b82      	ldr	r3, [pc, #520]	; (8006704 <UART_SetConfig+0x2e0>)
 80064fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b0c      	cmp	r3, #12
 8006504:	d828      	bhi.n	8006558 <UART_SetConfig+0x134>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <UART_SetConfig+0xe8>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	08006541 	.word	0x08006541
 8006510:	08006559 	.word	0x08006559
 8006514:	08006559 	.word	0x08006559
 8006518:	08006559 	.word	0x08006559
 800651c:	0800654d 	.word	0x0800654d
 8006520:	08006559 	.word	0x08006559
 8006524:	08006559 	.word	0x08006559
 8006528:	08006559 	.word	0x08006559
 800652c:	08006547 	.word	0x08006547
 8006530:	08006559 	.word	0x08006559
 8006534:	08006559 	.word	0x08006559
 8006538:	08006559 	.word	0x08006559
 800653c:	08006553 	.word	0x08006553
 8006540:	2300      	movs	r3, #0
 8006542:	76fb      	strb	r3, [r7, #27]
 8006544:	e05e      	b.n	8006604 <UART_SetConfig+0x1e0>
 8006546:	2302      	movs	r3, #2
 8006548:	76fb      	strb	r3, [r7, #27]
 800654a:	e05b      	b.n	8006604 <UART_SetConfig+0x1e0>
 800654c:	2304      	movs	r3, #4
 800654e:	76fb      	strb	r3, [r7, #27]
 8006550:	e058      	b.n	8006604 <UART_SetConfig+0x1e0>
 8006552:	2308      	movs	r3, #8
 8006554:	76fb      	strb	r3, [r7, #27]
 8006556:	e055      	b.n	8006604 <UART_SetConfig+0x1e0>
 8006558:	2310      	movs	r3, #16
 800655a:	76fb      	strb	r3, [r7, #27]
 800655c:	e052      	b.n	8006604 <UART_SetConfig+0x1e0>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a6a      	ldr	r2, [pc, #424]	; (800670c <UART_SetConfig+0x2e8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d120      	bne.n	80065aa <UART_SetConfig+0x186>
 8006568:	4b66      	ldr	r3, [pc, #408]	; (8006704 <UART_SetConfig+0x2e0>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006572:	2b30      	cmp	r3, #48	; 0x30
 8006574:	d013      	beq.n	800659e <UART_SetConfig+0x17a>
 8006576:	2b30      	cmp	r3, #48	; 0x30
 8006578:	d814      	bhi.n	80065a4 <UART_SetConfig+0x180>
 800657a:	2b20      	cmp	r3, #32
 800657c:	d009      	beq.n	8006592 <UART_SetConfig+0x16e>
 800657e:	2b20      	cmp	r3, #32
 8006580:	d810      	bhi.n	80065a4 <UART_SetConfig+0x180>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <UART_SetConfig+0x168>
 8006586:	2b10      	cmp	r3, #16
 8006588:	d006      	beq.n	8006598 <UART_SetConfig+0x174>
 800658a:	e00b      	b.n	80065a4 <UART_SetConfig+0x180>
 800658c:	2300      	movs	r3, #0
 800658e:	76fb      	strb	r3, [r7, #27]
 8006590:	e038      	b.n	8006604 <UART_SetConfig+0x1e0>
 8006592:	2302      	movs	r3, #2
 8006594:	76fb      	strb	r3, [r7, #27]
 8006596:	e035      	b.n	8006604 <UART_SetConfig+0x1e0>
 8006598:	2304      	movs	r3, #4
 800659a:	76fb      	strb	r3, [r7, #27]
 800659c:	e032      	b.n	8006604 <UART_SetConfig+0x1e0>
 800659e:	2308      	movs	r3, #8
 80065a0:	76fb      	strb	r3, [r7, #27]
 80065a2:	e02f      	b.n	8006604 <UART_SetConfig+0x1e0>
 80065a4:	2310      	movs	r3, #16
 80065a6:	76fb      	strb	r3, [r7, #27]
 80065a8:	e02c      	b.n	8006604 <UART_SetConfig+0x1e0>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a53      	ldr	r2, [pc, #332]	; (80066fc <UART_SetConfig+0x2d8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d125      	bne.n	8006600 <UART_SetConfig+0x1dc>
 80065b4:	4b53      	ldr	r3, [pc, #332]	; (8006704 <UART_SetConfig+0x2e0>)
 80065b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065c2:	d017      	beq.n	80065f4 <UART_SetConfig+0x1d0>
 80065c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065c8:	d817      	bhi.n	80065fa <UART_SetConfig+0x1d6>
 80065ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ce:	d00b      	beq.n	80065e8 <UART_SetConfig+0x1c4>
 80065d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d4:	d811      	bhi.n	80065fa <UART_SetConfig+0x1d6>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <UART_SetConfig+0x1be>
 80065da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065de:	d006      	beq.n	80065ee <UART_SetConfig+0x1ca>
 80065e0:	e00b      	b.n	80065fa <UART_SetConfig+0x1d6>
 80065e2:	2300      	movs	r3, #0
 80065e4:	76fb      	strb	r3, [r7, #27]
 80065e6:	e00d      	b.n	8006604 <UART_SetConfig+0x1e0>
 80065e8:	2302      	movs	r3, #2
 80065ea:	76fb      	strb	r3, [r7, #27]
 80065ec:	e00a      	b.n	8006604 <UART_SetConfig+0x1e0>
 80065ee:	2304      	movs	r3, #4
 80065f0:	76fb      	strb	r3, [r7, #27]
 80065f2:	e007      	b.n	8006604 <UART_SetConfig+0x1e0>
 80065f4:	2308      	movs	r3, #8
 80065f6:	76fb      	strb	r3, [r7, #27]
 80065f8:	e004      	b.n	8006604 <UART_SetConfig+0x1e0>
 80065fa:	2310      	movs	r3, #16
 80065fc:	76fb      	strb	r3, [r7, #27]
 80065fe:	e001      	b.n	8006604 <UART_SetConfig+0x1e0>
 8006600:	2310      	movs	r3, #16
 8006602:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a3c      	ldr	r2, [pc, #240]	; (80066fc <UART_SetConfig+0x2d8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	f040 8082 	bne.w	8006714 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006610:	7efb      	ldrb	r3, [r7, #27]
 8006612:	2b08      	cmp	r3, #8
 8006614:	d823      	bhi.n	800665e <UART_SetConfig+0x23a>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x1f8>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006641 	.word	0x08006641
 8006620:	0800665f 	.word	0x0800665f
 8006624:	08006649 	.word	0x08006649
 8006628:	0800665f 	.word	0x0800665f
 800662c:	0800664f 	.word	0x0800664f
 8006630:	0800665f 	.word	0x0800665f
 8006634:	0800665f 	.word	0x0800665f
 8006638:	0800665f 	.word	0x0800665f
 800663c:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7ff f80c 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 8006644:	6178      	str	r0, [r7, #20]
        break;
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b31      	ldr	r3, [pc, #196]	; (8006710 <UART_SetConfig+0x2ec>)
 800664a:	617b      	str	r3, [r7, #20]
        break;
 800664c:	e00c      	b.n	8006668 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fe ff6d 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8006652:	6178      	str	r0, [r7, #20]
        break;
 8006654:	e008      	b.n	8006668 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665a:	617b      	str	r3, [r7, #20]
        break;
 800665c:	e004      	b.n	8006668 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	76bb      	strb	r3, [r7, #26]
        break;
 8006666:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8100 	beq.w	8006870 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	4613      	mov	r3, r2
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	4413      	add	r3, r2
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	429a      	cmp	r2, r3
 800667e:	d305      	bcc.n	800668c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	429a      	cmp	r2, r3
 800668a:	d902      	bls.n	8006692 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	76bb      	strb	r3, [r7, #26]
 8006690:	e0ee      	b.n	8006870 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4618      	mov	r0, r3
 8006696:	f04f 0100 	mov.w	r1, #0
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	020b      	lsls	r3, r1, #8
 80066a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066a8:	0202      	lsls	r2, r0, #8
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	6849      	ldr	r1, [r1, #4]
 80066ae:	0849      	lsrs	r1, r1, #1
 80066b0:	4608      	mov	r0, r1
 80066b2:	f04f 0100 	mov.w	r1, #0
 80066b6:	1814      	adds	r4, r2, r0
 80066b8:	eb43 0501 	adc.w	r5, r3, r1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	461a      	mov	r2, r3
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	4620      	mov	r0, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	f7fa fab5 	bl	8000c38 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4613      	mov	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066dc:	d308      	bcc.n	80066f0 <UART_SetConfig+0x2cc>
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e4:	d204      	bcs.n	80066f0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	e0bf      	b.n	8006870 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	76bb      	strb	r3, [r7, #26]
 80066f4:	e0bc      	b.n	8006870 <UART_SetConfig+0x44c>
 80066f6:	bf00      	nop
 80066f8:	efff69f3 	.word	0xefff69f3
 80066fc:	40008000 	.word	0x40008000
 8006700:	40013800 	.word	0x40013800
 8006704:	40021000 	.word	0x40021000
 8006708:	40004400 	.word	0x40004400
 800670c:	40004800 	.word	0x40004800
 8006710:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671c:	d15b      	bne.n	80067d6 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 800671e:	7efb      	ldrb	r3, [r7, #27]
 8006720:	2b08      	cmp	r3, #8
 8006722:	d828      	bhi.n	8006776 <UART_SetConfig+0x352>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0x308>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006751 	.word	0x08006751
 8006730:	08006759 	.word	0x08006759
 8006734:	08006761 	.word	0x08006761
 8006738:	08006777 	.word	0x08006777
 800673c:	08006767 	.word	0x08006767
 8006740:	08006777 	.word	0x08006777
 8006744:	08006777 	.word	0x08006777
 8006748:	08006777 	.word	0x08006777
 800674c:	0800676f 	.word	0x0800676f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006750:	f7fe ff84 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 8006754:	6178      	str	r0, [r7, #20]
        break;
 8006756:	e013      	b.n	8006780 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006758:	f7fe ff96 	bl	8005688 <HAL_RCC_GetPCLK2Freq>
 800675c:	6178      	str	r0, [r7, #20]
        break;
 800675e:	e00f      	b.n	8006780 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006760:	4b49      	ldr	r3, [pc, #292]	; (8006888 <UART_SetConfig+0x464>)
 8006762:	617b      	str	r3, [r7, #20]
        break;
 8006764:	e00c      	b.n	8006780 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006766:	f7fe fee1 	bl	800552c <HAL_RCC_GetSysClockFreq>
 800676a:	6178      	str	r0, [r7, #20]
        break;
 800676c:	e008      	b.n	8006780 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006772:	617b      	str	r3, [r7, #20]
        break;
 8006774:	e004      	b.n	8006780 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	76bb      	strb	r3, [r7, #26]
        break;
 800677e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d074      	beq.n	8006870 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	005a      	lsls	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	441a      	add	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d916      	bls.n	80067d0 <UART_SetConfig+0x3ac>
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a8:	d212      	bcs.n	80067d0 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f023 030f 	bic.w	r3, r3, #15
 80067b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	b29a      	uxth	r2, r3
 80067c0:	89fb      	ldrh	r3, [r7, #14]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	89fa      	ldrh	r2, [r7, #14]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	e04f      	b.n	8006870 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	76bb      	strb	r3, [r7, #26]
 80067d4:	e04c      	b.n	8006870 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d6:	7efb      	ldrb	r3, [r7, #27]
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d828      	bhi.n	800682e <UART_SetConfig+0x40a>
 80067dc:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <UART_SetConfig+0x3c0>)
 80067de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e2:	bf00      	nop
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006819 	.word	0x08006819
 80067f0:	0800682f 	.word	0x0800682f
 80067f4:	0800681f 	.word	0x0800681f
 80067f8:	0800682f 	.word	0x0800682f
 80067fc:	0800682f 	.word	0x0800682f
 8006800:	0800682f 	.word	0x0800682f
 8006804:	08006827 	.word	0x08006827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006808:	f7fe ff28 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 800680c:	6178      	str	r0, [r7, #20]
        break;
 800680e:	e013      	b.n	8006838 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006810:	f7fe ff3a 	bl	8005688 <HAL_RCC_GetPCLK2Freq>
 8006814:	6178      	str	r0, [r7, #20]
        break;
 8006816:	e00f      	b.n	8006838 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <UART_SetConfig+0x464>)
 800681a:	617b      	str	r3, [r7, #20]
        break;
 800681c:	e00c      	b.n	8006838 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7fe fe85 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8006822:	6178      	str	r0, [r7, #20]
        break;
 8006824:	e008      	b.n	8006838 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682a:	617b      	str	r3, [r7, #20]
        break;
 800682c:	e004      	b.n	8006838 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	76bb      	strb	r3, [r7, #26]
        break;
 8006836:	bf00      	nop
    }

    if (pclk != 0U)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d018      	beq.n	8006870 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	085a      	lsrs	r2, r3, #1
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	441a      	add	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b0f      	cmp	r3, #15
 8006856:	d909      	bls.n	800686c <UART_SetConfig+0x448>
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685e:	d205      	bcs.n	800686c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	e001      	b.n	8006870 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800687c:	7ebb      	ldrb	r3, [r7, #26]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bdb0      	pop	{r4, r5, r7, pc}
 8006886:	bf00      	nop
 8006888:	00f42400 	.word	0x00f42400

0800688c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698a:	d10a      	bne.n	80069a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069e0:	f7fc f8d8 	bl	8002b94 <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d10e      	bne.n	8006a12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f82d 	bl	8006a62 <UART_WaitOnFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e023      	b.n	8006a5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d10e      	bne.n	8006a3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f817 	bl	8006a62 <UART_WaitOnFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e00d      	b.n	8006a5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b09c      	sub	sp, #112	; 0x70
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	603b      	str	r3, [r7, #0]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a72:	e0a5      	b.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	f000 80a1 	beq.w	8006bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7e:	f7fc f889 	bl	8002b94 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d302      	bcc.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d13e      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ab4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ae6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ae8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e5      	bne.n	8006ac6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e067      	b.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d04f      	beq.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b2e:	d147      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e6      	bne.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b8c:	623a      	str	r2, [r7, #32]
 8006b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e010      	b.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	bf0c      	ite	eq
 8006bd0:	2301      	moveq	r3, #1
 8006bd2:	2300      	movne	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	79fb      	ldrb	r3, [r7, #7]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	f43f af4a 	beq.w	8006a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3770      	adds	r7, #112	; 0x70
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <__errno>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <__errno+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000070 	.word	0x20000070

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4d0d      	ldr	r5, [pc, #52]	; (8006c30 <__libc_init_array+0x38>)
 8006bfc:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006bfe:	1b64      	subs	r4, r4, r5
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	2600      	movs	r6, #0
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	4d0b      	ldr	r5, [pc, #44]	; (8006c38 <__libc_init_array+0x40>)
 8006c0a:	4c0c      	ldr	r4, [pc, #48]	; (8006c3c <__libc_init_array+0x44>)
 8006c0c:	f003 fb66 	bl	800a2dc <_init>
 8006c10:	1b64      	subs	r4, r4, r5
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	2600      	movs	r6, #0
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	0802db30 	.word	0x0802db30
 8006c34:	0802db30 	.word	0x0802db30
 8006c38:	0802db30 	.word	0x0802db30
 8006c3c:	0802db34 	.word	0x0802db34

08006c40 <memcpy>:
 8006c40:	440a      	add	r2, r1
 8006c42:	4291      	cmp	r1, r2
 8006c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c48:	d100      	bne.n	8006c4c <memcpy+0xc>
 8006c4a:	4770      	bx	lr
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c56:	4291      	cmp	r1, r2
 8006c58:	d1f9      	bne.n	8006c4e <memcpy+0xe>
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <memset>:
 8006c5c:	4402      	add	r2, r0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d100      	bne.n	8006c66 <memset+0xa>
 8006c64:	4770      	bx	lr
 8006c66:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6a:	e7f9      	b.n	8006c60 <memset+0x4>

08006c6c <iprintf>:
 8006c6c:	b40f      	push	{r0, r1, r2, r3}
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <iprintf+0x2c>)
 8006c70:	b513      	push	{r0, r1, r4, lr}
 8006c72:	681c      	ldr	r4, [r3, #0]
 8006c74:	b124      	cbz	r4, 8006c80 <iprintf+0x14>
 8006c76:	69a3      	ldr	r3, [r4, #24]
 8006c78:	b913      	cbnz	r3, 8006c80 <iprintf+0x14>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f866 	bl	8006d4c <__sinit>
 8006c80:	ab05      	add	r3, sp, #20
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	68a1      	ldr	r1, [r4, #8]
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 f983 	bl	8006f94 <_vfiprintf_r>
 8006c8e:	b002      	add	sp, #8
 8006c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c94:	b004      	add	sp, #16
 8006c96:	4770      	bx	lr
 8006c98:	20000070 	.word	0x20000070

08006c9c <std>:
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006caa:	6083      	str	r3, [r0, #8]
 8006cac:	8181      	strh	r1, [r0, #12]
 8006cae:	6643      	str	r3, [r0, #100]	; 0x64
 8006cb0:	81c2      	strh	r2, [r0, #14]
 8006cb2:	6183      	str	r3, [r0, #24]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	305c      	adds	r0, #92	; 0x5c
 8006cba:	f7ff ffcf 	bl	8006c5c <memset>
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <std+0x38>)
 8006cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <std+0x3c>)
 8006cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <std+0x40>)
 8006cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <std+0x44>)
 8006ccc:	6224      	str	r4, [r4, #32]
 8006cce:	6323      	str	r3, [r4, #48]	; 0x30
 8006cd0:	bd10      	pop	{r4, pc}
 8006cd2:	bf00      	nop
 8006cd4:	0800753d 	.word	0x0800753d
 8006cd8:	0800755f 	.word	0x0800755f
 8006cdc:	08007597 	.word	0x08007597
 8006ce0:	080075bb 	.word	0x080075bb

08006ce4 <_cleanup_r>:
 8006ce4:	4901      	ldr	r1, [pc, #4]	; (8006cec <_cleanup_r+0x8>)
 8006ce6:	f000 b8af 	b.w	8006e48 <_fwalk_reent>
 8006cea:	bf00      	nop
 8006cec:	08007895 	.word	0x08007895

08006cf0 <__sfmoreglue>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	1e4a      	subs	r2, r1, #1
 8006cf4:	2568      	movs	r5, #104	; 0x68
 8006cf6:	4355      	muls	r5, r2
 8006cf8:	460e      	mov	r6, r1
 8006cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cfe:	f000 f8c5 	bl	8006e8c <_malloc_r>
 8006d02:	4604      	mov	r4, r0
 8006d04:	b140      	cbz	r0, 8006d18 <__sfmoreglue+0x28>
 8006d06:	2100      	movs	r1, #0
 8006d08:	e9c0 1600 	strd	r1, r6, [r0]
 8006d0c:	300c      	adds	r0, #12
 8006d0e:	60a0      	str	r0, [r4, #8]
 8006d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d14:	f7ff ffa2 	bl	8006c5c <memset>
 8006d18:	4620      	mov	r0, r4
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}

08006d1c <__sfp_lock_acquire>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__sfp_lock_acquire+0x8>)
 8006d1e:	f000 b8b3 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 8006d22:	bf00      	nop
 8006d24:	20000e38 	.word	0x20000e38

08006d28 <__sfp_lock_release>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__sfp_lock_release+0x8>)
 8006d2a:	f000 b8ae 	b.w	8006e8a <__retarget_lock_release_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20000e38 	.word	0x20000e38

08006d34 <__sinit_lock_acquire>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__sinit_lock_acquire+0x8>)
 8006d36:	f000 b8a7 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000e33 	.word	0x20000e33

08006d40 <__sinit_lock_release>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__sinit_lock_release+0x8>)
 8006d42:	f000 b8a2 	b.w	8006e8a <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	20000e33 	.word	0x20000e33

08006d4c <__sinit>:
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	4604      	mov	r4, r0
 8006d50:	f7ff fff0 	bl	8006d34 <__sinit_lock_acquire>
 8006d54:	69a3      	ldr	r3, [r4, #24]
 8006d56:	b11b      	cbz	r3, 8006d60 <__sinit+0x14>
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f7ff bff0 	b.w	8006d40 <__sinit_lock_release>
 8006d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d64:	6523      	str	r3, [r4, #80]	; 0x50
 8006d66:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <__sinit+0x68>)
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <__sinit+0x6c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	bf04      	itt	eq
 8006d72:	2301      	moveq	r3, #1
 8006d74:	61a3      	streq	r3, [r4, #24]
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f820 	bl	8006dbc <__sfp>
 8006d7c:	6060      	str	r0, [r4, #4]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 f81c 	bl	8006dbc <__sfp>
 8006d84:	60a0      	str	r0, [r4, #8]
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f818 	bl	8006dbc <__sfp>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	60e0      	str	r0, [r4, #12]
 8006d90:	2104      	movs	r1, #4
 8006d92:	6860      	ldr	r0, [r4, #4]
 8006d94:	f7ff ff82 	bl	8006c9c <std>
 8006d98:	68a0      	ldr	r0, [r4, #8]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	2109      	movs	r1, #9
 8006d9e:	f7ff ff7d 	bl	8006c9c <std>
 8006da2:	68e0      	ldr	r0, [r4, #12]
 8006da4:	2202      	movs	r2, #2
 8006da6:	2112      	movs	r1, #18
 8006da8:	f7ff ff78 	bl	8006c9c <std>
 8006dac:	2301      	movs	r3, #1
 8006dae:	61a3      	str	r3, [r4, #24]
 8006db0:	e7d2      	b.n	8006d58 <__sinit+0xc>
 8006db2:	bf00      	nop
 8006db4:	0802d7f8 	.word	0x0802d7f8
 8006db8:	08006ce5 	.word	0x08006ce5

08006dbc <__sfp>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	f7ff ffac 	bl	8006d1c <__sfp_lock_acquire>
 8006dc4:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <__sfp+0x84>)
 8006dc6:	681e      	ldr	r6, [r3, #0]
 8006dc8:	69b3      	ldr	r3, [r6, #24]
 8006dca:	b913      	cbnz	r3, 8006dd2 <__sfp+0x16>
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f7ff ffbd 	bl	8006d4c <__sinit>
 8006dd2:	3648      	adds	r6, #72	; 0x48
 8006dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	d503      	bpl.n	8006de4 <__sfp+0x28>
 8006ddc:	6833      	ldr	r3, [r6, #0]
 8006dde:	b30b      	cbz	r3, 8006e24 <__sfp+0x68>
 8006de0:	6836      	ldr	r6, [r6, #0]
 8006de2:	e7f7      	b.n	8006dd4 <__sfp+0x18>
 8006de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006de8:	b9d5      	cbnz	r5, 8006e20 <__sfp+0x64>
 8006dea:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <__sfp+0x88>)
 8006dec:	60e3      	str	r3, [r4, #12]
 8006dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006df2:	6665      	str	r5, [r4, #100]	; 0x64
 8006df4:	f000 f847 	bl	8006e86 <__retarget_lock_init_recursive>
 8006df8:	f7ff ff96 	bl	8006d28 <__sfp_lock_release>
 8006dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e04:	6025      	str	r5, [r4, #0]
 8006e06:	61a5      	str	r5, [r4, #24]
 8006e08:	2208      	movs	r2, #8
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e10:	f7ff ff24 	bl	8006c5c <memset>
 8006e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e20:	3468      	adds	r4, #104	; 0x68
 8006e22:	e7d9      	b.n	8006dd8 <__sfp+0x1c>
 8006e24:	2104      	movs	r1, #4
 8006e26:	4638      	mov	r0, r7
 8006e28:	f7ff ff62 	bl	8006cf0 <__sfmoreglue>
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	6030      	str	r0, [r6, #0]
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d1d5      	bne.n	8006de0 <__sfp+0x24>
 8006e34:	f7ff ff78 	bl	8006d28 <__sfp_lock_release>
 8006e38:	230c      	movs	r3, #12
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	e7ee      	b.n	8006e1c <__sfp+0x60>
 8006e3e:	bf00      	nop
 8006e40:	0802d7f8 	.word	0x0802d7f8
 8006e44:	ffff0001 	.word	0xffff0001

08006e48 <_fwalk_reent>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	4688      	mov	r8, r1
 8006e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e54:	2700      	movs	r7, #0
 8006e56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e5e:	d505      	bpl.n	8006e6c <_fwalk_reent+0x24>
 8006e60:	6824      	ldr	r4, [r4, #0]
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	d1f7      	bne.n	8006e56 <_fwalk_reent+0xe>
 8006e66:	4638      	mov	r0, r7
 8006e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6c:	89ab      	ldrh	r3, [r5, #12]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d907      	bls.n	8006e82 <_fwalk_reent+0x3a>
 8006e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e76:	3301      	adds	r3, #1
 8006e78:	d003      	beq.n	8006e82 <_fwalk_reent+0x3a>
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	47c0      	blx	r8
 8006e80:	4307      	orrs	r7, r0
 8006e82:	3568      	adds	r5, #104	; 0x68
 8006e84:	e7e9      	b.n	8006e5a <_fwalk_reent+0x12>

08006e86 <__retarget_lock_init_recursive>:
 8006e86:	4770      	bx	lr

08006e88 <__retarget_lock_acquire_recursive>:
 8006e88:	4770      	bx	lr

08006e8a <__retarget_lock_release_recursive>:
 8006e8a:	4770      	bx	lr

08006e8c <_malloc_r>:
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	1ccd      	adds	r5, r1, #3
 8006e90:	f025 0503 	bic.w	r5, r5, #3
 8006e94:	3508      	adds	r5, #8
 8006e96:	2d0c      	cmp	r5, #12
 8006e98:	bf38      	it	cc
 8006e9a:	250c      	movcc	r5, #12
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	db01      	blt.n	8006ea6 <_malloc_r+0x1a>
 8006ea2:	42a9      	cmp	r1, r5
 8006ea4:	d903      	bls.n	8006eae <_malloc_r+0x22>
 8006ea6:	230c      	movs	r3, #12
 8006ea8:	6033      	str	r3, [r6, #0]
 8006eaa:	2000      	movs	r0, #0
 8006eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eae:	f000 fda3 	bl	80079f8 <__malloc_lock>
 8006eb2:	4921      	ldr	r1, [pc, #132]	; (8006f38 <_malloc_r+0xac>)
 8006eb4:	680a      	ldr	r2, [r1, #0]
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	b99c      	cbnz	r4, 8006ee2 <_malloc_r+0x56>
 8006eba:	4f20      	ldr	r7, [pc, #128]	; (8006f3c <_malloc_r+0xb0>)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	b923      	cbnz	r3, 8006eca <_malloc_r+0x3e>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 fb2a 	bl	800751c <_sbrk_r>
 8006ec8:	6038      	str	r0, [r7, #0]
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f000 fb25 	bl	800751c <_sbrk_r>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d123      	bne.n	8006f1e <_malloc_r+0x92>
 8006ed6:	230c      	movs	r3, #12
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 fd92 	bl	8007a04 <__malloc_unlock>
 8006ee0:	e7e3      	b.n	8006eaa <_malloc_r+0x1e>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	1b5b      	subs	r3, r3, r5
 8006ee6:	d417      	bmi.n	8006f18 <_malloc_r+0x8c>
 8006ee8:	2b0b      	cmp	r3, #11
 8006eea:	d903      	bls.n	8006ef4 <_malloc_r+0x68>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	441c      	add	r4, r3
 8006ef0:	6025      	str	r5, [r4, #0]
 8006ef2:	e004      	b.n	8006efe <_malloc_r+0x72>
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	42a2      	cmp	r2, r4
 8006ef8:	bf0c      	ite	eq
 8006efa:	600b      	streq	r3, [r1, #0]
 8006efc:	6053      	strne	r3, [r2, #4]
 8006efe:	4630      	mov	r0, r6
 8006f00:	f000 fd80 	bl	8007a04 <__malloc_unlock>
 8006f04:	f104 000b 	add.w	r0, r4, #11
 8006f08:	1d23      	adds	r3, r4, #4
 8006f0a:	f020 0007 	bic.w	r0, r0, #7
 8006f0e:	1ac2      	subs	r2, r0, r3
 8006f10:	d0cc      	beq.n	8006eac <_malloc_r+0x20>
 8006f12:	1a1b      	subs	r3, r3, r0
 8006f14:	50a3      	str	r3, [r4, r2]
 8006f16:	e7c9      	b.n	8006eac <_malloc_r+0x20>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	6864      	ldr	r4, [r4, #4]
 8006f1c:	e7cc      	b.n	8006eb8 <_malloc_r+0x2c>
 8006f1e:	1cc4      	adds	r4, r0, #3
 8006f20:	f024 0403 	bic.w	r4, r4, #3
 8006f24:	42a0      	cmp	r0, r4
 8006f26:	d0e3      	beq.n	8006ef0 <_malloc_r+0x64>
 8006f28:	1a21      	subs	r1, r4, r0
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f000 faf6 	bl	800751c <_sbrk_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d1dd      	bne.n	8006ef0 <_malloc_r+0x64>
 8006f34:	e7cf      	b.n	8006ed6 <_malloc_r+0x4a>
 8006f36:	bf00      	nop
 8006f38:	20000bbc 	.word	0x20000bbc
 8006f3c:	20000bc0 	.word	0x20000bc0

08006f40 <__sfputc_r>:
 8006f40:	6893      	ldr	r3, [r2, #8]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	b410      	push	{r4}
 8006f48:	6093      	str	r3, [r2, #8]
 8006f4a:	da08      	bge.n	8006f5e <__sfputc_r+0x1e>
 8006f4c:	6994      	ldr	r4, [r2, #24]
 8006f4e:	42a3      	cmp	r3, r4
 8006f50:	db01      	blt.n	8006f56 <__sfputc_r+0x16>
 8006f52:	290a      	cmp	r1, #10
 8006f54:	d103      	bne.n	8006f5e <__sfputc_r+0x1e>
 8006f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f5a:	f000 bb33 	b.w	80075c4 <__swbuf_r>
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	1c58      	adds	r0, r3, #1
 8006f62:	6010      	str	r0, [r2, #0]
 8006f64:	7019      	strb	r1, [r3, #0]
 8006f66:	4608      	mov	r0, r1
 8006f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <__sfputs_r>:
 8006f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f70:	4606      	mov	r6, r0
 8006f72:	460f      	mov	r7, r1
 8006f74:	4614      	mov	r4, r2
 8006f76:	18d5      	adds	r5, r2, r3
 8006f78:	42ac      	cmp	r4, r5
 8006f7a:	d101      	bne.n	8006f80 <__sfputs_r+0x12>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e007      	b.n	8006f90 <__sfputs_r+0x22>
 8006f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f84:	463a      	mov	r2, r7
 8006f86:	4630      	mov	r0, r6
 8006f88:	f7ff ffda 	bl	8006f40 <__sfputc_r>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d1f3      	bne.n	8006f78 <__sfputs_r+0xa>
 8006f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f94 <_vfiprintf_r>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	460d      	mov	r5, r1
 8006f9a:	b09d      	sub	sp, #116	; 0x74
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	4698      	mov	r8, r3
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	b118      	cbz	r0, 8006fac <_vfiprintf_r+0x18>
 8006fa4:	6983      	ldr	r3, [r0, #24]
 8006fa6:	b90b      	cbnz	r3, 8006fac <_vfiprintf_r+0x18>
 8006fa8:	f7ff fed0 	bl	8006d4c <__sinit>
 8006fac:	4b89      	ldr	r3, [pc, #548]	; (80071d4 <_vfiprintf_r+0x240>)
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	d11b      	bne.n	8006fea <_vfiprintf_r+0x56>
 8006fb2:	6875      	ldr	r5, [r6, #4]
 8006fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb6:	07d9      	lsls	r1, r3, #31
 8006fb8:	d405      	bmi.n	8006fc6 <_vfiprintf_r+0x32>
 8006fba:	89ab      	ldrh	r3, [r5, #12]
 8006fbc:	059a      	lsls	r2, r3, #22
 8006fbe:	d402      	bmi.n	8006fc6 <_vfiprintf_r+0x32>
 8006fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc2:	f7ff ff61 	bl	8006e88 <__retarget_lock_acquire_recursive>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	071b      	lsls	r3, r3, #28
 8006fca:	d501      	bpl.n	8006fd0 <_vfiprintf_r+0x3c>
 8006fcc:	692b      	ldr	r3, [r5, #16]
 8006fce:	b9eb      	cbnz	r3, 800700c <_vfiprintf_r+0x78>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f000 fb5a 	bl	800768c <__swsetup_r>
 8006fd8:	b1c0      	cbz	r0, 800700c <_vfiprintf_r+0x78>
 8006fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fdc:	07dc      	lsls	r4, r3, #31
 8006fde:	d50e      	bpl.n	8006ffe <_vfiprintf_r+0x6a>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	b01d      	add	sp, #116	; 0x74
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	4b7b      	ldr	r3, [pc, #492]	; (80071d8 <_vfiprintf_r+0x244>)
 8006fec:	429d      	cmp	r5, r3
 8006fee:	d101      	bne.n	8006ff4 <_vfiprintf_r+0x60>
 8006ff0:	68b5      	ldr	r5, [r6, #8]
 8006ff2:	e7df      	b.n	8006fb4 <_vfiprintf_r+0x20>
 8006ff4:	4b79      	ldr	r3, [pc, #484]	; (80071dc <_vfiprintf_r+0x248>)
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	bf08      	it	eq
 8006ffa:	68f5      	ldreq	r5, [r6, #12]
 8006ffc:	e7da      	b.n	8006fb4 <_vfiprintf_r+0x20>
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	0598      	lsls	r0, r3, #22
 8007002:	d4ed      	bmi.n	8006fe0 <_vfiprintf_r+0x4c>
 8007004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007006:	f7ff ff40 	bl	8006e8a <__retarget_lock_release_recursive>
 800700a:	e7e9      	b.n	8006fe0 <_vfiprintf_r+0x4c>
 800700c:	2300      	movs	r3, #0
 800700e:	9309      	str	r3, [sp, #36]	; 0x24
 8007010:	2320      	movs	r3, #32
 8007012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007016:	f8cd 800c 	str.w	r8, [sp, #12]
 800701a:	2330      	movs	r3, #48	; 0x30
 800701c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071e0 <_vfiprintf_r+0x24c>
 8007020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007024:	f04f 0901 	mov.w	r9, #1
 8007028:	4623      	mov	r3, r4
 800702a:	469a      	mov	sl, r3
 800702c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007030:	b10a      	cbz	r2, 8007036 <_vfiprintf_r+0xa2>
 8007032:	2a25      	cmp	r2, #37	; 0x25
 8007034:	d1f9      	bne.n	800702a <_vfiprintf_r+0x96>
 8007036:	ebba 0b04 	subs.w	fp, sl, r4
 800703a:	d00b      	beq.n	8007054 <_vfiprintf_r+0xc0>
 800703c:	465b      	mov	r3, fp
 800703e:	4622      	mov	r2, r4
 8007040:	4629      	mov	r1, r5
 8007042:	4630      	mov	r0, r6
 8007044:	f7ff ff93 	bl	8006f6e <__sfputs_r>
 8007048:	3001      	adds	r0, #1
 800704a:	f000 80aa 	beq.w	80071a2 <_vfiprintf_r+0x20e>
 800704e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007050:	445a      	add	r2, fp
 8007052:	9209      	str	r2, [sp, #36]	; 0x24
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80a2 	beq.w	80071a2 <_vfiprintf_r+0x20e>
 800705e:	2300      	movs	r3, #0
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007068:	f10a 0a01 	add.w	sl, sl, #1
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007074:	931a      	str	r3, [sp, #104]	; 0x68
 8007076:	4654      	mov	r4, sl
 8007078:	2205      	movs	r2, #5
 800707a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707e:	4858      	ldr	r0, [pc, #352]	; (80071e0 <_vfiprintf_r+0x24c>)
 8007080:	f7f9 f8a6 	bl	80001d0 <memchr>
 8007084:	9a04      	ldr	r2, [sp, #16]
 8007086:	b9d8      	cbnz	r0, 80070c0 <_vfiprintf_r+0x12c>
 8007088:	06d1      	lsls	r1, r2, #27
 800708a:	bf44      	itt	mi
 800708c:	2320      	movmi	r3, #32
 800708e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007092:	0713      	lsls	r3, r2, #28
 8007094:	bf44      	itt	mi
 8007096:	232b      	movmi	r3, #43	; 0x2b
 8007098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800709c:	f89a 3000 	ldrb.w	r3, [sl]
 80070a0:	2b2a      	cmp	r3, #42	; 0x2a
 80070a2:	d015      	beq.n	80070d0 <_vfiprintf_r+0x13c>
 80070a4:	9a07      	ldr	r2, [sp, #28]
 80070a6:	4654      	mov	r4, sl
 80070a8:	2000      	movs	r0, #0
 80070aa:	f04f 0c0a 	mov.w	ip, #10
 80070ae:	4621      	mov	r1, r4
 80070b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b4:	3b30      	subs	r3, #48	; 0x30
 80070b6:	2b09      	cmp	r3, #9
 80070b8:	d94e      	bls.n	8007158 <_vfiprintf_r+0x1c4>
 80070ba:	b1b0      	cbz	r0, 80070ea <_vfiprintf_r+0x156>
 80070bc:	9207      	str	r2, [sp, #28]
 80070be:	e014      	b.n	80070ea <_vfiprintf_r+0x156>
 80070c0:	eba0 0308 	sub.w	r3, r0, r8
 80070c4:	fa09 f303 	lsl.w	r3, r9, r3
 80070c8:	4313      	orrs	r3, r2
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	46a2      	mov	sl, r4
 80070ce:	e7d2      	b.n	8007076 <_vfiprintf_r+0xe2>
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	1d19      	adds	r1, r3, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	9103      	str	r1, [sp, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bfbb      	ittet	lt
 80070dc:	425b      	neglt	r3, r3
 80070de:	f042 0202 	orrlt.w	r2, r2, #2
 80070e2:	9307      	strge	r3, [sp, #28]
 80070e4:	9307      	strlt	r3, [sp, #28]
 80070e6:	bfb8      	it	lt
 80070e8:	9204      	strlt	r2, [sp, #16]
 80070ea:	7823      	ldrb	r3, [r4, #0]
 80070ec:	2b2e      	cmp	r3, #46	; 0x2e
 80070ee:	d10c      	bne.n	800710a <_vfiprintf_r+0x176>
 80070f0:	7863      	ldrb	r3, [r4, #1]
 80070f2:	2b2a      	cmp	r3, #42	; 0x2a
 80070f4:	d135      	bne.n	8007162 <_vfiprintf_r+0x1ce>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	1d1a      	adds	r2, r3, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	9203      	str	r2, [sp, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	f04f 33ff 	movlt.w	r3, #4294967295
 8007106:	3402      	adds	r4, #2
 8007108:	9305      	str	r3, [sp, #20]
 800710a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071f0 <_vfiprintf_r+0x25c>
 800710e:	7821      	ldrb	r1, [r4, #0]
 8007110:	2203      	movs	r2, #3
 8007112:	4650      	mov	r0, sl
 8007114:	f7f9 f85c 	bl	80001d0 <memchr>
 8007118:	b140      	cbz	r0, 800712c <_vfiprintf_r+0x198>
 800711a:	2340      	movs	r3, #64	; 0x40
 800711c:	eba0 000a 	sub.w	r0, r0, sl
 8007120:	fa03 f000 	lsl.w	r0, r3, r0
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	4303      	orrs	r3, r0
 8007128:	3401      	adds	r4, #1
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007130:	482c      	ldr	r0, [pc, #176]	; (80071e4 <_vfiprintf_r+0x250>)
 8007132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007136:	2206      	movs	r2, #6
 8007138:	f7f9 f84a 	bl	80001d0 <memchr>
 800713c:	2800      	cmp	r0, #0
 800713e:	d03f      	beq.n	80071c0 <_vfiprintf_r+0x22c>
 8007140:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <_vfiprintf_r+0x254>)
 8007142:	bb1b      	cbnz	r3, 800718c <_vfiprintf_r+0x1f8>
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	3307      	adds	r3, #7
 8007148:	f023 0307 	bic.w	r3, r3, #7
 800714c:	3308      	adds	r3, #8
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007152:	443b      	add	r3, r7
 8007154:	9309      	str	r3, [sp, #36]	; 0x24
 8007156:	e767      	b.n	8007028 <_vfiprintf_r+0x94>
 8007158:	fb0c 3202 	mla	r2, ip, r2, r3
 800715c:	460c      	mov	r4, r1
 800715e:	2001      	movs	r0, #1
 8007160:	e7a5      	b.n	80070ae <_vfiprintf_r+0x11a>
 8007162:	2300      	movs	r3, #0
 8007164:	3401      	adds	r4, #1
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	4619      	mov	r1, r3
 800716a:	f04f 0c0a 	mov.w	ip, #10
 800716e:	4620      	mov	r0, r4
 8007170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007174:	3a30      	subs	r2, #48	; 0x30
 8007176:	2a09      	cmp	r2, #9
 8007178:	d903      	bls.n	8007182 <_vfiprintf_r+0x1ee>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0c5      	beq.n	800710a <_vfiprintf_r+0x176>
 800717e:	9105      	str	r1, [sp, #20]
 8007180:	e7c3      	b.n	800710a <_vfiprintf_r+0x176>
 8007182:	fb0c 2101 	mla	r1, ip, r1, r2
 8007186:	4604      	mov	r4, r0
 8007188:	2301      	movs	r3, #1
 800718a:	e7f0      	b.n	800716e <_vfiprintf_r+0x1da>
 800718c:	ab03      	add	r3, sp, #12
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	462a      	mov	r2, r5
 8007192:	4b16      	ldr	r3, [pc, #88]	; (80071ec <_vfiprintf_r+0x258>)
 8007194:	a904      	add	r1, sp, #16
 8007196:	4630      	mov	r0, r6
 8007198:	f3af 8000 	nop.w
 800719c:	4607      	mov	r7, r0
 800719e:	1c78      	adds	r0, r7, #1
 80071a0:	d1d6      	bne.n	8007150 <_vfiprintf_r+0x1bc>
 80071a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071a4:	07d9      	lsls	r1, r3, #31
 80071a6:	d405      	bmi.n	80071b4 <_vfiprintf_r+0x220>
 80071a8:	89ab      	ldrh	r3, [r5, #12]
 80071aa:	059a      	lsls	r2, r3, #22
 80071ac:	d402      	bmi.n	80071b4 <_vfiprintf_r+0x220>
 80071ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071b0:	f7ff fe6b 	bl	8006e8a <__retarget_lock_release_recursive>
 80071b4:	89ab      	ldrh	r3, [r5, #12]
 80071b6:	065b      	lsls	r3, r3, #25
 80071b8:	f53f af12 	bmi.w	8006fe0 <_vfiprintf_r+0x4c>
 80071bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071be:	e711      	b.n	8006fe4 <_vfiprintf_r+0x50>
 80071c0:	ab03      	add	r3, sp, #12
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	462a      	mov	r2, r5
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <_vfiprintf_r+0x258>)
 80071c8:	a904      	add	r1, sp, #16
 80071ca:	4630      	mov	r0, r6
 80071cc:	f000 f880 	bl	80072d0 <_printf_i>
 80071d0:	e7e4      	b.n	800719c <_vfiprintf_r+0x208>
 80071d2:	bf00      	nop
 80071d4:	0802d81c 	.word	0x0802d81c
 80071d8:	0802d83c 	.word	0x0802d83c
 80071dc:	0802d7fc 	.word	0x0802d7fc
 80071e0:	0802d85c 	.word	0x0802d85c
 80071e4:	0802d866 	.word	0x0802d866
 80071e8:	00000000 	.word	0x00000000
 80071ec:	08006f6f 	.word	0x08006f6f
 80071f0:	0802d862 	.word	0x0802d862

080071f4 <_printf_common>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	4616      	mov	r6, r2
 80071fa:	4699      	mov	r9, r3
 80071fc:	688a      	ldr	r2, [r1, #8]
 80071fe:	690b      	ldr	r3, [r1, #16]
 8007200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007204:	4293      	cmp	r3, r2
 8007206:	bfb8      	it	lt
 8007208:	4613      	movlt	r3, r2
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007210:	4607      	mov	r7, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b10a      	cbz	r2, 800721a <_printf_common+0x26>
 8007216:	3301      	adds	r3, #1
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	0699      	lsls	r1, r3, #26
 800721e:	bf42      	ittt	mi
 8007220:	6833      	ldrmi	r3, [r6, #0]
 8007222:	3302      	addmi	r3, #2
 8007224:	6033      	strmi	r3, [r6, #0]
 8007226:	6825      	ldr	r5, [r4, #0]
 8007228:	f015 0506 	ands.w	r5, r5, #6
 800722c:	d106      	bne.n	800723c <_printf_common+0x48>
 800722e:	f104 0a19 	add.w	sl, r4, #25
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	6832      	ldr	r2, [r6, #0]
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	42ab      	cmp	r3, r5
 800723a:	dc26      	bgt.n	800728a <_printf_common+0x96>
 800723c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007240:	1e13      	subs	r3, r2, #0
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	bf18      	it	ne
 8007246:	2301      	movne	r3, #1
 8007248:	0692      	lsls	r2, r2, #26
 800724a:	d42b      	bmi.n	80072a4 <_printf_common+0xb0>
 800724c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007250:	4649      	mov	r1, r9
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d01e      	beq.n	8007298 <_printf_common+0xa4>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	68e5      	ldr	r5, [r4, #12]
 800725e:	6832      	ldr	r2, [r6, #0]
 8007260:	f003 0306 	and.w	r3, r3, #6
 8007264:	2b04      	cmp	r3, #4
 8007266:	bf08      	it	eq
 8007268:	1aad      	subeq	r5, r5, r2
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	bf0c      	ite	eq
 8007270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007274:	2500      	movne	r5, #0
 8007276:	4293      	cmp	r3, r2
 8007278:	bfc4      	itt	gt
 800727a:	1a9b      	subgt	r3, r3, r2
 800727c:	18ed      	addgt	r5, r5, r3
 800727e:	2600      	movs	r6, #0
 8007280:	341a      	adds	r4, #26
 8007282:	42b5      	cmp	r5, r6
 8007284:	d11a      	bne.n	80072bc <_printf_common+0xc8>
 8007286:	2000      	movs	r0, #0
 8007288:	e008      	b.n	800729c <_printf_common+0xa8>
 800728a:	2301      	movs	r3, #1
 800728c:	4652      	mov	r2, sl
 800728e:	4649      	mov	r1, r9
 8007290:	4638      	mov	r0, r7
 8007292:	47c0      	blx	r8
 8007294:	3001      	adds	r0, #1
 8007296:	d103      	bne.n	80072a0 <_printf_common+0xac>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	3501      	adds	r5, #1
 80072a2:	e7c6      	b.n	8007232 <_printf_common+0x3e>
 80072a4:	18e1      	adds	r1, r4, r3
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	2030      	movs	r0, #48	; 0x30
 80072aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ae:	4422      	add	r2, r4
 80072b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b8:	3302      	adds	r3, #2
 80072ba:	e7c7      	b.n	800724c <_printf_common+0x58>
 80072bc:	2301      	movs	r3, #1
 80072be:	4622      	mov	r2, r4
 80072c0:	4649      	mov	r1, r9
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c0      	blx	r8
 80072c6:	3001      	adds	r0, #1
 80072c8:	d0e6      	beq.n	8007298 <_printf_common+0xa4>
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7d9      	b.n	8007282 <_printf_common+0x8e>
	...

080072d0 <_printf_i>:
 80072d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d4:	460c      	mov	r4, r1
 80072d6:	4691      	mov	r9, r2
 80072d8:	7e27      	ldrb	r7, [r4, #24]
 80072da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072dc:	2f78      	cmp	r7, #120	; 0x78
 80072de:	4680      	mov	r8, r0
 80072e0:	469a      	mov	sl, r3
 80072e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072e6:	d807      	bhi.n	80072f8 <_printf_i+0x28>
 80072e8:	2f62      	cmp	r7, #98	; 0x62
 80072ea:	d80a      	bhi.n	8007302 <_printf_i+0x32>
 80072ec:	2f00      	cmp	r7, #0
 80072ee:	f000 80d8 	beq.w	80074a2 <_printf_i+0x1d2>
 80072f2:	2f58      	cmp	r7, #88	; 0x58
 80072f4:	f000 80a3 	beq.w	800743e <_printf_i+0x16e>
 80072f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007300:	e03a      	b.n	8007378 <_printf_i+0xa8>
 8007302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007306:	2b15      	cmp	r3, #21
 8007308:	d8f6      	bhi.n	80072f8 <_printf_i+0x28>
 800730a:	a001      	add	r0, pc, #4	; (adr r0, 8007310 <_printf_i+0x40>)
 800730c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007310:	08007369 	.word	0x08007369
 8007314:	0800737d 	.word	0x0800737d
 8007318:	080072f9 	.word	0x080072f9
 800731c:	080072f9 	.word	0x080072f9
 8007320:	080072f9 	.word	0x080072f9
 8007324:	080072f9 	.word	0x080072f9
 8007328:	0800737d 	.word	0x0800737d
 800732c:	080072f9 	.word	0x080072f9
 8007330:	080072f9 	.word	0x080072f9
 8007334:	080072f9 	.word	0x080072f9
 8007338:	080072f9 	.word	0x080072f9
 800733c:	08007489 	.word	0x08007489
 8007340:	080073ad 	.word	0x080073ad
 8007344:	0800746b 	.word	0x0800746b
 8007348:	080072f9 	.word	0x080072f9
 800734c:	080072f9 	.word	0x080072f9
 8007350:	080074ab 	.word	0x080074ab
 8007354:	080072f9 	.word	0x080072f9
 8007358:	080073ad 	.word	0x080073ad
 800735c:	080072f9 	.word	0x080072f9
 8007360:	080072f9 	.word	0x080072f9
 8007364:	08007473 	.word	0x08007473
 8007368:	680b      	ldr	r3, [r1, #0]
 800736a:	1d1a      	adds	r2, r3, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	600a      	str	r2, [r1, #0]
 8007370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007378:	2301      	movs	r3, #1
 800737a:	e0a3      	b.n	80074c4 <_printf_i+0x1f4>
 800737c:	6825      	ldr	r5, [r4, #0]
 800737e:	6808      	ldr	r0, [r1, #0]
 8007380:	062e      	lsls	r6, r5, #24
 8007382:	f100 0304 	add.w	r3, r0, #4
 8007386:	d50a      	bpl.n	800739e <_printf_i+0xce>
 8007388:	6805      	ldr	r5, [r0, #0]
 800738a:	600b      	str	r3, [r1, #0]
 800738c:	2d00      	cmp	r5, #0
 800738e:	da03      	bge.n	8007398 <_printf_i+0xc8>
 8007390:	232d      	movs	r3, #45	; 0x2d
 8007392:	426d      	negs	r5, r5
 8007394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007398:	485e      	ldr	r0, [pc, #376]	; (8007514 <_printf_i+0x244>)
 800739a:	230a      	movs	r3, #10
 800739c:	e019      	b.n	80073d2 <_printf_i+0x102>
 800739e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073a2:	6805      	ldr	r5, [r0, #0]
 80073a4:	600b      	str	r3, [r1, #0]
 80073a6:	bf18      	it	ne
 80073a8:	b22d      	sxthne	r5, r5
 80073aa:	e7ef      	b.n	800738c <_printf_i+0xbc>
 80073ac:	680b      	ldr	r3, [r1, #0]
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	1d18      	adds	r0, r3, #4
 80073b2:	6008      	str	r0, [r1, #0]
 80073b4:	0628      	lsls	r0, r5, #24
 80073b6:	d501      	bpl.n	80073bc <_printf_i+0xec>
 80073b8:	681d      	ldr	r5, [r3, #0]
 80073ba:	e002      	b.n	80073c2 <_printf_i+0xf2>
 80073bc:	0669      	lsls	r1, r5, #25
 80073be:	d5fb      	bpl.n	80073b8 <_printf_i+0xe8>
 80073c0:	881d      	ldrh	r5, [r3, #0]
 80073c2:	4854      	ldr	r0, [pc, #336]	; (8007514 <_printf_i+0x244>)
 80073c4:	2f6f      	cmp	r7, #111	; 0x6f
 80073c6:	bf0c      	ite	eq
 80073c8:	2308      	moveq	r3, #8
 80073ca:	230a      	movne	r3, #10
 80073cc:	2100      	movs	r1, #0
 80073ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073d2:	6866      	ldr	r6, [r4, #4]
 80073d4:	60a6      	str	r6, [r4, #8]
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	bfa2      	ittt	ge
 80073da:	6821      	ldrge	r1, [r4, #0]
 80073dc:	f021 0104 	bicge.w	r1, r1, #4
 80073e0:	6021      	strge	r1, [r4, #0]
 80073e2:	b90d      	cbnz	r5, 80073e8 <_printf_i+0x118>
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	d04d      	beq.n	8007484 <_printf_i+0x1b4>
 80073e8:	4616      	mov	r6, r2
 80073ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ee:	fb03 5711 	mls	r7, r3, r1, r5
 80073f2:	5dc7      	ldrb	r7, [r0, r7]
 80073f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073f8:	462f      	mov	r7, r5
 80073fa:	42bb      	cmp	r3, r7
 80073fc:	460d      	mov	r5, r1
 80073fe:	d9f4      	bls.n	80073ea <_printf_i+0x11a>
 8007400:	2b08      	cmp	r3, #8
 8007402:	d10b      	bne.n	800741c <_printf_i+0x14c>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07df      	lsls	r7, r3, #31
 8007408:	d508      	bpl.n	800741c <_printf_i+0x14c>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	6861      	ldr	r1, [r4, #4]
 800740e:	4299      	cmp	r1, r3
 8007410:	bfde      	ittt	le
 8007412:	2330      	movle	r3, #48	; 0x30
 8007414:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007418:	f106 36ff 	addle.w	r6, r6, #4294967295
 800741c:	1b92      	subs	r2, r2, r6
 800741e:	6122      	str	r2, [r4, #16]
 8007420:	f8cd a000 	str.w	sl, [sp]
 8007424:	464b      	mov	r3, r9
 8007426:	aa03      	add	r2, sp, #12
 8007428:	4621      	mov	r1, r4
 800742a:	4640      	mov	r0, r8
 800742c:	f7ff fee2 	bl	80071f4 <_printf_common>
 8007430:	3001      	adds	r0, #1
 8007432:	d14c      	bne.n	80074ce <_printf_i+0x1fe>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	b004      	add	sp, #16
 800743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743e:	4835      	ldr	r0, [pc, #212]	; (8007514 <_printf_i+0x244>)
 8007440:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	680e      	ldr	r6, [r1, #0]
 8007448:	061f      	lsls	r7, r3, #24
 800744a:	f856 5b04 	ldr.w	r5, [r6], #4
 800744e:	600e      	str	r6, [r1, #0]
 8007450:	d514      	bpl.n	800747c <_printf_i+0x1ac>
 8007452:	07d9      	lsls	r1, r3, #31
 8007454:	bf44      	itt	mi
 8007456:	f043 0320 	orrmi.w	r3, r3, #32
 800745a:	6023      	strmi	r3, [r4, #0]
 800745c:	b91d      	cbnz	r5, 8007466 <_printf_i+0x196>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	f023 0320 	bic.w	r3, r3, #32
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	2310      	movs	r3, #16
 8007468:	e7b0      	b.n	80073cc <_printf_i+0xfc>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	f043 0320 	orr.w	r3, r3, #32
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	2378      	movs	r3, #120	; 0x78
 8007474:	4828      	ldr	r0, [pc, #160]	; (8007518 <_printf_i+0x248>)
 8007476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800747a:	e7e3      	b.n	8007444 <_printf_i+0x174>
 800747c:	065e      	lsls	r6, r3, #25
 800747e:	bf48      	it	mi
 8007480:	b2ad      	uxthmi	r5, r5
 8007482:	e7e6      	b.n	8007452 <_printf_i+0x182>
 8007484:	4616      	mov	r6, r2
 8007486:	e7bb      	b.n	8007400 <_printf_i+0x130>
 8007488:	680b      	ldr	r3, [r1, #0]
 800748a:	6826      	ldr	r6, [r4, #0]
 800748c:	6960      	ldr	r0, [r4, #20]
 800748e:	1d1d      	adds	r5, r3, #4
 8007490:	600d      	str	r5, [r1, #0]
 8007492:	0635      	lsls	r5, r6, #24
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	d501      	bpl.n	800749c <_printf_i+0x1cc>
 8007498:	6018      	str	r0, [r3, #0]
 800749a:	e002      	b.n	80074a2 <_printf_i+0x1d2>
 800749c:	0671      	lsls	r1, r6, #25
 800749e:	d5fb      	bpl.n	8007498 <_printf_i+0x1c8>
 80074a0:	8018      	strh	r0, [r3, #0]
 80074a2:	2300      	movs	r3, #0
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	4616      	mov	r6, r2
 80074a8:	e7ba      	b.n	8007420 <_printf_i+0x150>
 80074aa:	680b      	ldr	r3, [r1, #0]
 80074ac:	1d1a      	adds	r2, r3, #4
 80074ae:	600a      	str	r2, [r1, #0]
 80074b0:	681e      	ldr	r6, [r3, #0]
 80074b2:	6862      	ldr	r2, [r4, #4]
 80074b4:	2100      	movs	r1, #0
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7f8 fe8a 	bl	80001d0 <memchr>
 80074bc:	b108      	cbz	r0, 80074c2 <_printf_i+0x1f2>
 80074be:	1b80      	subs	r0, r0, r6
 80074c0:	6060      	str	r0, [r4, #4]
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	2300      	movs	r3, #0
 80074c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074cc:	e7a8      	b.n	8007420 <_printf_i+0x150>
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	4632      	mov	r2, r6
 80074d2:	4649      	mov	r1, r9
 80074d4:	4640      	mov	r0, r8
 80074d6:	47d0      	blx	sl
 80074d8:	3001      	adds	r0, #1
 80074da:	d0ab      	beq.n	8007434 <_printf_i+0x164>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	079b      	lsls	r3, r3, #30
 80074e0:	d413      	bmi.n	800750a <_printf_i+0x23a>
 80074e2:	68e0      	ldr	r0, [r4, #12]
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	4298      	cmp	r0, r3
 80074e8:	bfb8      	it	lt
 80074ea:	4618      	movlt	r0, r3
 80074ec:	e7a4      	b.n	8007438 <_printf_i+0x168>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4632      	mov	r2, r6
 80074f2:	4649      	mov	r1, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	47d0      	blx	sl
 80074f8:	3001      	adds	r0, #1
 80074fa:	d09b      	beq.n	8007434 <_printf_i+0x164>
 80074fc:	3501      	adds	r5, #1
 80074fe:	68e3      	ldr	r3, [r4, #12]
 8007500:	9903      	ldr	r1, [sp, #12]
 8007502:	1a5b      	subs	r3, r3, r1
 8007504:	42ab      	cmp	r3, r5
 8007506:	dcf2      	bgt.n	80074ee <_printf_i+0x21e>
 8007508:	e7eb      	b.n	80074e2 <_printf_i+0x212>
 800750a:	2500      	movs	r5, #0
 800750c:	f104 0619 	add.w	r6, r4, #25
 8007510:	e7f5      	b.n	80074fe <_printf_i+0x22e>
 8007512:	bf00      	nop
 8007514:	0802d86d 	.word	0x0802d86d
 8007518:	0802d87e 	.word	0x0802d87e

0800751c <_sbrk_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d06      	ldr	r5, [pc, #24]	; (8007538 <_sbrk_r+0x1c>)
 8007520:	2300      	movs	r3, #0
 8007522:	4604      	mov	r4, r0
 8007524:	4608      	mov	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7fb fa52 	bl	80029d0 <_sbrk>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_sbrk_r+0x1a>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_sbrk_r+0x1a>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20000e3c 	.word	0x20000e3c

0800753c <__sread>:
 800753c:	b510      	push	{r4, lr}
 800753e:	460c      	mov	r4, r1
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	f000 fab4 	bl	8007ab0 <_read_r>
 8007548:	2800      	cmp	r0, #0
 800754a:	bfab      	itete	ge
 800754c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800754e:	89a3      	ldrhlt	r3, [r4, #12]
 8007550:	181b      	addge	r3, r3, r0
 8007552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007556:	bfac      	ite	ge
 8007558:	6563      	strge	r3, [r4, #84]	; 0x54
 800755a:	81a3      	strhlt	r3, [r4, #12]
 800755c:	bd10      	pop	{r4, pc}

0800755e <__swrite>:
 800755e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007562:	461f      	mov	r7, r3
 8007564:	898b      	ldrh	r3, [r1, #12]
 8007566:	05db      	lsls	r3, r3, #23
 8007568:	4605      	mov	r5, r0
 800756a:	460c      	mov	r4, r1
 800756c:	4616      	mov	r6, r2
 800756e:	d505      	bpl.n	800757c <__swrite+0x1e>
 8007570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007574:	2302      	movs	r3, #2
 8007576:	2200      	movs	r2, #0
 8007578:	f000 f9c8 	bl	800790c <_lseek_r>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007586:	81a3      	strh	r3, [r4, #12]
 8007588:	4632      	mov	r2, r6
 800758a:	463b      	mov	r3, r7
 800758c:	4628      	mov	r0, r5
 800758e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007592:	f000 b869 	b.w	8007668 <_write_r>

08007596 <__sseek>:
 8007596:	b510      	push	{r4, lr}
 8007598:	460c      	mov	r4, r1
 800759a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759e:	f000 f9b5 	bl	800790c <_lseek_r>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	bf15      	itete	ne
 80075a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80075aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075b2:	81a3      	strheq	r3, [r4, #12]
 80075b4:	bf18      	it	ne
 80075b6:	81a3      	strhne	r3, [r4, #12]
 80075b8:	bd10      	pop	{r4, pc}

080075ba <__sclose>:
 80075ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075be:	f000 b8d3 	b.w	8007768 <_close_r>
	...

080075c4 <__swbuf_r>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	460e      	mov	r6, r1
 80075c8:	4614      	mov	r4, r2
 80075ca:	4605      	mov	r5, r0
 80075cc:	b118      	cbz	r0, 80075d6 <__swbuf_r+0x12>
 80075ce:	6983      	ldr	r3, [r0, #24]
 80075d0:	b90b      	cbnz	r3, 80075d6 <__swbuf_r+0x12>
 80075d2:	f7ff fbbb 	bl	8006d4c <__sinit>
 80075d6:	4b21      	ldr	r3, [pc, #132]	; (800765c <__swbuf_r+0x98>)
 80075d8:	429c      	cmp	r4, r3
 80075da:	d12b      	bne.n	8007634 <__swbuf_r+0x70>
 80075dc:	686c      	ldr	r4, [r5, #4]
 80075de:	69a3      	ldr	r3, [r4, #24]
 80075e0:	60a3      	str	r3, [r4, #8]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	071a      	lsls	r2, r3, #28
 80075e6:	d52f      	bpl.n	8007648 <__swbuf_r+0x84>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	b36b      	cbz	r3, 8007648 <__swbuf_r+0x84>
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	1ac0      	subs	r0, r0, r3
 80075f2:	6963      	ldr	r3, [r4, #20]
 80075f4:	b2f6      	uxtb	r6, r6
 80075f6:	4283      	cmp	r3, r0
 80075f8:	4637      	mov	r7, r6
 80075fa:	dc04      	bgt.n	8007606 <__swbuf_r+0x42>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 f948 	bl	8007894 <_fflush_r>
 8007604:	bb30      	cbnz	r0, 8007654 <__swbuf_r+0x90>
 8007606:	68a3      	ldr	r3, [r4, #8]
 8007608:	3b01      	subs	r3, #1
 800760a:	60a3      	str	r3, [r4, #8]
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	6022      	str	r2, [r4, #0]
 8007612:	701e      	strb	r6, [r3, #0]
 8007614:	6963      	ldr	r3, [r4, #20]
 8007616:	3001      	adds	r0, #1
 8007618:	4283      	cmp	r3, r0
 800761a:	d004      	beq.n	8007626 <__swbuf_r+0x62>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	07db      	lsls	r3, r3, #31
 8007620:	d506      	bpl.n	8007630 <__swbuf_r+0x6c>
 8007622:	2e0a      	cmp	r6, #10
 8007624:	d104      	bne.n	8007630 <__swbuf_r+0x6c>
 8007626:	4621      	mov	r1, r4
 8007628:	4628      	mov	r0, r5
 800762a:	f000 f933 	bl	8007894 <_fflush_r>
 800762e:	b988      	cbnz	r0, 8007654 <__swbuf_r+0x90>
 8007630:	4638      	mov	r0, r7
 8007632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007634:	4b0a      	ldr	r3, [pc, #40]	; (8007660 <__swbuf_r+0x9c>)
 8007636:	429c      	cmp	r4, r3
 8007638:	d101      	bne.n	800763e <__swbuf_r+0x7a>
 800763a:	68ac      	ldr	r4, [r5, #8]
 800763c:	e7cf      	b.n	80075de <__swbuf_r+0x1a>
 800763e:	4b09      	ldr	r3, [pc, #36]	; (8007664 <__swbuf_r+0xa0>)
 8007640:	429c      	cmp	r4, r3
 8007642:	bf08      	it	eq
 8007644:	68ec      	ldreq	r4, [r5, #12]
 8007646:	e7ca      	b.n	80075de <__swbuf_r+0x1a>
 8007648:	4621      	mov	r1, r4
 800764a:	4628      	mov	r0, r5
 800764c:	f000 f81e 	bl	800768c <__swsetup_r>
 8007650:	2800      	cmp	r0, #0
 8007652:	d0cb      	beq.n	80075ec <__swbuf_r+0x28>
 8007654:	f04f 37ff 	mov.w	r7, #4294967295
 8007658:	e7ea      	b.n	8007630 <__swbuf_r+0x6c>
 800765a:	bf00      	nop
 800765c:	0802d81c 	.word	0x0802d81c
 8007660:	0802d83c 	.word	0x0802d83c
 8007664:	0802d7fc 	.word	0x0802d7fc

08007668 <_write_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d07      	ldr	r5, [pc, #28]	; (8007688 <_write_r+0x20>)
 800766c:	4604      	mov	r4, r0
 800766e:	4608      	mov	r0, r1
 8007670:	4611      	mov	r1, r2
 8007672:	2200      	movs	r2, #0
 8007674:	602a      	str	r2, [r5, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	f7f9 fe98 	bl	80013ac <_write>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_write_r+0x1e>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_write_r+0x1e>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	20000e3c 	.word	0x20000e3c

0800768c <__swsetup_r>:
 800768c:	4b32      	ldr	r3, [pc, #200]	; (8007758 <__swsetup_r+0xcc>)
 800768e:	b570      	push	{r4, r5, r6, lr}
 8007690:	681d      	ldr	r5, [r3, #0]
 8007692:	4606      	mov	r6, r0
 8007694:	460c      	mov	r4, r1
 8007696:	b125      	cbz	r5, 80076a2 <__swsetup_r+0x16>
 8007698:	69ab      	ldr	r3, [r5, #24]
 800769a:	b913      	cbnz	r3, 80076a2 <__swsetup_r+0x16>
 800769c:	4628      	mov	r0, r5
 800769e:	f7ff fb55 	bl	8006d4c <__sinit>
 80076a2:	4b2e      	ldr	r3, [pc, #184]	; (800775c <__swsetup_r+0xd0>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	d10f      	bne.n	80076c8 <__swsetup_r+0x3c>
 80076a8:	686c      	ldr	r4, [r5, #4]
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076b0:	0719      	lsls	r1, r3, #28
 80076b2:	d42c      	bmi.n	800770e <__swsetup_r+0x82>
 80076b4:	06dd      	lsls	r5, r3, #27
 80076b6:	d411      	bmi.n	80076dc <__swsetup_r+0x50>
 80076b8:	2309      	movs	r3, #9
 80076ba:	6033      	str	r3, [r6, #0]
 80076bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295
 80076c6:	e03e      	b.n	8007746 <__swsetup_r+0xba>
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <__swsetup_r+0xd4>)
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d101      	bne.n	80076d2 <__swsetup_r+0x46>
 80076ce:	68ac      	ldr	r4, [r5, #8]
 80076d0:	e7eb      	b.n	80076aa <__swsetup_r+0x1e>
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <__swsetup_r+0xd8>)
 80076d4:	429c      	cmp	r4, r3
 80076d6:	bf08      	it	eq
 80076d8:	68ec      	ldreq	r4, [r5, #12]
 80076da:	e7e6      	b.n	80076aa <__swsetup_r+0x1e>
 80076dc:	0758      	lsls	r0, r3, #29
 80076de:	d512      	bpl.n	8007706 <__swsetup_r+0x7a>
 80076e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076e2:	b141      	cbz	r1, 80076f6 <__swsetup_r+0x6a>
 80076e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076e8:	4299      	cmp	r1, r3
 80076ea:	d002      	beq.n	80076f2 <__swsetup_r+0x66>
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 f98f 	bl	8007a10 <_free_r>
 80076f2:	2300      	movs	r3, #0
 80076f4:	6363      	str	r3, [r4, #52]	; 0x34
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	6063      	str	r3, [r4, #4]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f043 0308 	orr.w	r3, r3, #8
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	b94b      	cbnz	r3, 8007726 <__swsetup_r+0x9a>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771c:	d003      	beq.n	8007726 <__swsetup_r+0x9a>
 800771e:	4621      	mov	r1, r4
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f929 	bl	8007978 <__smakebuf_r>
 8007726:	89a0      	ldrh	r0, [r4, #12]
 8007728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800772c:	f010 0301 	ands.w	r3, r0, #1
 8007730:	d00a      	beq.n	8007748 <__swsetup_r+0xbc>
 8007732:	2300      	movs	r3, #0
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6963      	ldr	r3, [r4, #20]
 8007738:	425b      	negs	r3, r3
 800773a:	61a3      	str	r3, [r4, #24]
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	b943      	cbnz	r3, 8007752 <__swsetup_r+0xc6>
 8007740:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007744:	d1ba      	bne.n	80076bc <__swsetup_r+0x30>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	0781      	lsls	r1, r0, #30
 800774a:	bf58      	it	pl
 800774c:	6963      	ldrpl	r3, [r4, #20]
 800774e:	60a3      	str	r3, [r4, #8]
 8007750:	e7f4      	b.n	800773c <__swsetup_r+0xb0>
 8007752:	2000      	movs	r0, #0
 8007754:	e7f7      	b.n	8007746 <__swsetup_r+0xba>
 8007756:	bf00      	nop
 8007758:	20000070 	.word	0x20000070
 800775c:	0802d81c 	.word	0x0802d81c
 8007760:	0802d83c 	.word	0x0802d83c
 8007764:	0802d7fc 	.word	0x0802d7fc

08007768 <_close_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d06      	ldr	r5, [pc, #24]	; (8007784 <_close_r+0x1c>)
 800776c:	2300      	movs	r3, #0
 800776e:	4604      	mov	r4, r0
 8007770:	4608      	mov	r0, r1
 8007772:	602b      	str	r3, [r5, #0]
 8007774:	f7fb f8f7 	bl	8002966 <_close>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_close_r+0x1a>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	b103      	cbz	r3, 8007782 <_close_r+0x1a>
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20000e3c 	.word	0x20000e3c

08007788 <__sflush_r>:
 8007788:	898a      	ldrh	r2, [r1, #12]
 800778a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	4605      	mov	r5, r0
 8007790:	0710      	lsls	r0, r2, #28
 8007792:	460c      	mov	r4, r1
 8007794:	d458      	bmi.n	8007848 <__sflush_r+0xc0>
 8007796:	684b      	ldr	r3, [r1, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	dc05      	bgt.n	80077a8 <__sflush_r+0x20>
 800779c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc02      	bgt.n	80077a8 <__sflush_r+0x20>
 80077a2:	2000      	movs	r0, #0
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	d0f9      	beq.n	80077a2 <__sflush_r+0x1a>
 80077ae:	2300      	movs	r3, #0
 80077b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077b4:	682f      	ldr	r7, [r5, #0]
 80077b6:	602b      	str	r3, [r5, #0]
 80077b8:	d032      	beq.n	8007820 <__sflush_r+0x98>
 80077ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	075a      	lsls	r2, r3, #29
 80077c0:	d505      	bpl.n	80077ce <__sflush_r+0x46>
 80077c2:	6863      	ldr	r3, [r4, #4]
 80077c4:	1ac0      	subs	r0, r0, r3
 80077c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077c8:	b10b      	cbz	r3, 80077ce <__sflush_r+0x46>
 80077ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077cc:	1ac0      	subs	r0, r0, r3
 80077ce:	2300      	movs	r3, #0
 80077d0:	4602      	mov	r2, r0
 80077d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077d4:	6a21      	ldr	r1, [r4, #32]
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b0      	blx	r6
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	d106      	bne.n	80077ee <__sflush_r+0x66>
 80077e0:	6829      	ldr	r1, [r5, #0]
 80077e2:	291d      	cmp	r1, #29
 80077e4:	d82c      	bhi.n	8007840 <__sflush_r+0xb8>
 80077e6:	4a2a      	ldr	r2, [pc, #168]	; (8007890 <__sflush_r+0x108>)
 80077e8:	40ca      	lsrs	r2, r1
 80077ea:	07d6      	lsls	r6, r2, #31
 80077ec:	d528      	bpl.n	8007840 <__sflush_r+0xb8>
 80077ee:	2200      	movs	r2, #0
 80077f0:	6062      	str	r2, [r4, #4]
 80077f2:	04d9      	lsls	r1, r3, #19
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	6022      	str	r2, [r4, #0]
 80077f8:	d504      	bpl.n	8007804 <__sflush_r+0x7c>
 80077fa:	1c42      	adds	r2, r0, #1
 80077fc:	d101      	bne.n	8007802 <__sflush_r+0x7a>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	b903      	cbnz	r3, 8007804 <__sflush_r+0x7c>
 8007802:	6560      	str	r0, [r4, #84]	; 0x54
 8007804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007806:	602f      	str	r7, [r5, #0]
 8007808:	2900      	cmp	r1, #0
 800780a:	d0ca      	beq.n	80077a2 <__sflush_r+0x1a>
 800780c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007810:	4299      	cmp	r1, r3
 8007812:	d002      	beq.n	800781a <__sflush_r+0x92>
 8007814:	4628      	mov	r0, r5
 8007816:	f000 f8fb 	bl	8007a10 <_free_r>
 800781a:	2000      	movs	r0, #0
 800781c:	6360      	str	r0, [r4, #52]	; 0x34
 800781e:	e7c1      	b.n	80077a4 <__sflush_r+0x1c>
 8007820:	6a21      	ldr	r1, [r4, #32]
 8007822:	2301      	movs	r3, #1
 8007824:	4628      	mov	r0, r5
 8007826:	47b0      	blx	r6
 8007828:	1c41      	adds	r1, r0, #1
 800782a:	d1c7      	bne.n	80077bc <__sflush_r+0x34>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0c4      	beq.n	80077bc <__sflush_r+0x34>
 8007832:	2b1d      	cmp	r3, #29
 8007834:	d001      	beq.n	800783a <__sflush_r+0xb2>
 8007836:	2b16      	cmp	r3, #22
 8007838:	d101      	bne.n	800783e <__sflush_r+0xb6>
 800783a:	602f      	str	r7, [r5, #0]
 800783c:	e7b1      	b.n	80077a2 <__sflush_r+0x1a>
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007844:	81a3      	strh	r3, [r4, #12]
 8007846:	e7ad      	b.n	80077a4 <__sflush_r+0x1c>
 8007848:	690f      	ldr	r7, [r1, #16]
 800784a:	2f00      	cmp	r7, #0
 800784c:	d0a9      	beq.n	80077a2 <__sflush_r+0x1a>
 800784e:	0793      	lsls	r3, r2, #30
 8007850:	680e      	ldr	r6, [r1, #0]
 8007852:	bf08      	it	eq
 8007854:	694b      	ldreq	r3, [r1, #20]
 8007856:	600f      	str	r7, [r1, #0]
 8007858:	bf18      	it	ne
 800785a:	2300      	movne	r3, #0
 800785c:	eba6 0807 	sub.w	r8, r6, r7
 8007860:	608b      	str	r3, [r1, #8]
 8007862:	f1b8 0f00 	cmp.w	r8, #0
 8007866:	dd9c      	ble.n	80077a2 <__sflush_r+0x1a>
 8007868:	6a21      	ldr	r1, [r4, #32]
 800786a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800786c:	4643      	mov	r3, r8
 800786e:	463a      	mov	r2, r7
 8007870:	4628      	mov	r0, r5
 8007872:	47b0      	blx	r6
 8007874:	2800      	cmp	r0, #0
 8007876:	dc06      	bgt.n	8007886 <__sflush_r+0xfe>
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	e78e      	b.n	80077a4 <__sflush_r+0x1c>
 8007886:	4407      	add	r7, r0
 8007888:	eba8 0800 	sub.w	r8, r8, r0
 800788c:	e7e9      	b.n	8007862 <__sflush_r+0xda>
 800788e:	bf00      	nop
 8007890:	20400001 	.word	0x20400001

08007894 <_fflush_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	690b      	ldr	r3, [r1, #16]
 8007898:	4605      	mov	r5, r0
 800789a:	460c      	mov	r4, r1
 800789c:	b913      	cbnz	r3, 80078a4 <_fflush_r+0x10>
 800789e:	2500      	movs	r5, #0
 80078a0:	4628      	mov	r0, r5
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	b118      	cbz	r0, 80078ae <_fflush_r+0x1a>
 80078a6:	6983      	ldr	r3, [r0, #24]
 80078a8:	b90b      	cbnz	r3, 80078ae <_fflush_r+0x1a>
 80078aa:	f7ff fa4f 	bl	8006d4c <__sinit>
 80078ae:	4b14      	ldr	r3, [pc, #80]	; (8007900 <_fflush_r+0x6c>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	d11b      	bne.n	80078ec <_fflush_r+0x58>
 80078b4:	686c      	ldr	r4, [r5, #4]
 80078b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0ef      	beq.n	800789e <_fflush_r+0xa>
 80078be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078c0:	07d0      	lsls	r0, r2, #31
 80078c2:	d404      	bmi.n	80078ce <_fflush_r+0x3a>
 80078c4:	0599      	lsls	r1, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_fflush_r+0x3a>
 80078c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ca:	f7ff fadd 	bl	8006e88 <__retarget_lock_acquire_recursive>
 80078ce:	4628      	mov	r0, r5
 80078d0:	4621      	mov	r1, r4
 80078d2:	f7ff ff59 	bl	8007788 <__sflush_r>
 80078d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078d8:	07da      	lsls	r2, r3, #31
 80078da:	4605      	mov	r5, r0
 80078dc:	d4e0      	bmi.n	80078a0 <_fflush_r+0xc>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	059b      	lsls	r3, r3, #22
 80078e2:	d4dd      	bmi.n	80078a0 <_fflush_r+0xc>
 80078e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078e6:	f7ff fad0 	bl	8006e8a <__retarget_lock_release_recursive>
 80078ea:	e7d9      	b.n	80078a0 <_fflush_r+0xc>
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <_fflush_r+0x70>)
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d101      	bne.n	80078f6 <_fflush_r+0x62>
 80078f2:	68ac      	ldr	r4, [r5, #8]
 80078f4:	e7df      	b.n	80078b6 <_fflush_r+0x22>
 80078f6:	4b04      	ldr	r3, [pc, #16]	; (8007908 <_fflush_r+0x74>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	bf08      	it	eq
 80078fc:	68ec      	ldreq	r4, [r5, #12]
 80078fe:	e7da      	b.n	80078b6 <_fflush_r+0x22>
 8007900:	0802d81c 	.word	0x0802d81c
 8007904:	0802d83c 	.word	0x0802d83c
 8007908:	0802d7fc 	.word	0x0802d7fc

0800790c <_lseek_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d07      	ldr	r5, [pc, #28]	; (800792c <_lseek_r+0x20>)
 8007910:	4604      	mov	r4, r0
 8007912:	4608      	mov	r0, r1
 8007914:	4611      	mov	r1, r2
 8007916:	2200      	movs	r2, #0
 8007918:	602a      	str	r2, [r5, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7fb f84a 	bl	80029b4 <_lseek>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_lseek_r+0x1e>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_lseek_r+0x1e>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20000e3c 	.word	0x20000e3c

08007930 <__swhatbuf_r>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	460e      	mov	r6, r1
 8007934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007938:	2900      	cmp	r1, #0
 800793a:	b096      	sub	sp, #88	; 0x58
 800793c:	4614      	mov	r4, r2
 800793e:	461d      	mov	r5, r3
 8007940:	da07      	bge.n	8007952 <__swhatbuf_r+0x22>
 8007942:	2300      	movs	r3, #0
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	89b3      	ldrh	r3, [r6, #12]
 8007948:	061a      	lsls	r2, r3, #24
 800794a:	d410      	bmi.n	800796e <__swhatbuf_r+0x3e>
 800794c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007950:	e00e      	b.n	8007970 <__swhatbuf_r+0x40>
 8007952:	466a      	mov	r2, sp
 8007954:	f000 f8be 	bl	8007ad4 <_fstat_r>
 8007958:	2800      	cmp	r0, #0
 800795a:	dbf2      	blt.n	8007942 <__swhatbuf_r+0x12>
 800795c:	9a01      	ldr	r2, [sp, #4]
 800795e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007962:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007966:	425a      	negs	r2, r3
 8007968:	415a      	adcs	r2, r3
 800796a:	602a      	str	r2, [r5, #0]
 800796c:	e7ee      	b.n	800794c <__swhatbuf_r+0x1c>
 800796e:	2340      	movs	r3, #64	; 0x40
 8007970:	2000      	movs	r0, #0
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	b016      	add	sp, #88	; 0x58
 8007976:	bd70      	pop	{r4, r5, r6, pc}

08007978 <__smakebuf_r>:
 8007978:	898b      	ldrh	r3, [r1, #12]
 800797a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800797c:	079d      	lsls	r5, r3, #30
 800797e:	4606      	mov	r6, r0
 8007980:	460c      	mov	r4, r1
 8007982:	d507      	bpl.n	8007994 <__smakebuf_r+0x1c>
 8007984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	6123      	str	r3, [r4, #16]
 800798c:	2301      	movs	r3, #1
 800798e:	6163      	str	r3, [r4, #20]
 8007990:	b002      	add	sp, #8
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	ab01      	add	r3, sp, #4
 8007996:	466a      	mov	r2, sp
 8007998:	f7ff ffca 	bl	8007930 <__swhatbuf_r>
 800799c:	9900      	ldr	r1, [sp, #0]
 800799e:	4605      	mov	r5, r0
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff fa73 	bl	8006e8c <_malloc_r>
 80079a6:	b948      	cbnz	r0, 80079bc <__smakebuf_r+0x44>
 80079a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ac:	059a      	lsls	r2, r3, #22
 80079ae:	d4ef      	bmi.n	8007990 <__smakebuf_r+0x18>
 80079b0:	f023 0303 	bic.w	r3, r3, #3
 80079b4:	f043 0302 	orr.w	r3, r3, #2
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	e7e3      	b.n	8007984 <__smakebuf_r+0xc>
 80079bc:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <__smakebuf_r+0x7c>)
 80079be:	62b3      	str	r3, [r6, #40]	; 0x28
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	6020      	str	r0, [r4, #0]
 80079c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	9b00      	ldr	r3, [sp, #0]
 80079cc:	6163      	str	r3, [r4, #20]
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	6120      	str	r0, [r4, #16]
 80079d2:	b15b      	cbz	r3, 80079ec <__smakebuf_r+0x74>
 80079d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079d8:	4630      	mov	r0, r6
 80079da:	f000 f88d 	bl	8007af8 <_isatty_r>
 80079de:	b128      	cbz	r0, 80079ec <__smakebuf_r+0x74>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	f023 0303 	bic.w	r3, r3, #3
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	89a0      	ldrh	r0, [r4, #12]
 80079ee:	4305      	orrs	r5, r0
 80079f0:	81a5      	strh	r5, [r4, #12]
 80079f2:	e7cd      	b.n	8007990 <__smakebuf_r+0x18>
 80079f4:	08006ce5 	.word	0x08006ce5

080079f8 <__malloc_lock>:
 80079f8:	4801      	ldr	r0, [pc, #4]	; (8007a00 <__malloc_lock+0x8>)
 80079fa:	f7ff ba45 	b.w	8006e88 <__retarget_lock_acquire_recursive>
 80079fe:	bf00      	nop
 8007a00:	20000e34 	.word	0x20000e34

08007a04 <__malloc_unlock>:
 8007a04:	4801      	ldr	r0, [pc, #4]	; (8007a0c <__malloc_unlock+0x8>)
 8007a06:	f7ff ba40 	b.w	8006e8a <__retarget_lock_release_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	20000e34 	.word	0x20000e34

08007a10 <_free_r>:
 8007a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a12:	2900      	cmp	r1, #0
 8007a14:	d048      	beq.n	8007aa8 <_free_r+0x98>
 8007a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1a:	9001      	str	r0, [sp, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a22:	bfb8      	it	lt
 8007a24:	18e4      	addlt	r4, r4, r3
 8007a26:	f7ff ffe7 	bl	80079f8 <__malloc_lock>
 8007a2a:	4a20      	ldr	r2, [pc, #128]	; (8007aac <_free_r+0x9c>)
 8007a2c:	9801      	ldr	r0, [sp, #4]
 8007a2e:	6813      	ldr	r3, [r2, #0]
 8007a30:	4615      	mov	r5, r2
 8007a32:	b933      	cbnz	r3, 8007a42 <_free_r+0x32>
 8007a34:	6063      	str	r3, [r4, #4]
 8007a36:	6014      	str	r4, [r2, #0]
 8007a38:	b003      	add	sp, #12
 8007a3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a3e:	f7ff bfe1 	b.w	8007a04 <__malloc_unlock>
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	d90b      	bls.n	8007a5e <_free_r+0x4e>
 8007a46:	6821      	ldr	r1, [r4, #0]
 8007a48:	1862      	adds	r2, r4, r1
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bf04      	itt	eq
 8007a4e:	681a      	ldreq	r2, [r3, #0]
 8007a50:	685b      	ldreq	r3, [r3, #4]
 8007a52:	6063      	str	r3, [r4, #4]
 8007a54:	bf04      	itt	eq
 8007a56:	1852      	addeq	r2, r2, r1
 8007a58:	6022      	streq	r2, [r4, #0]
 8007a5a:	602c      	str	r4, [r5, #0]
 8007a5c:	e7ec      	b.n	8007a38 <_free_r+0x28>
 8007a5e:	461a      	mov	r2, r3
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	b10b      	cbz	r3, 8007a68 <_free_r+0x58>
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	d9fa      	bls.n	8007a5e <_free_r+0x4e>
 8007a68:	6811      	ldr	r1, [r2, #0]
 8007a6a:	1855      	adds	r5, r2, r1
 8007a6c:	42a5      	cmp	r5, r4
 8007a6e:	d10b      	bne.n	8007a88 <_free_r+0x78>
 8007a70:	6824      	ldr	r4, [r4, #0]
 8007a72:	4421      	add	r1, r4
 8007a74:	1854      	adds	r4, r2, r1
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	6011      	str	r1, [r2, #0]
 8007a7a:	d1dd      	bne.n	8007a38 <_free_r+0x28>
 8007a7c:	681c      	ldr	r4, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	6053      	str	r3, [r2, #4]
 8007a82:	4421      	add	r1, r4
 8007a84:	6011      	str	r1, [r2, #0]
 8007a86:	e7d7      	b.n	8007a38 <_free_r+0x28>
 8007a88:	d902      	bls.n	8007a90 <_free_r+0x80>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	6003      	str	r3, [r0, #0]
 8007a8e:	e7d3      	b.n	8007a38 <_free_r+0x28>
 8007a90:	6825      	ldr	r5, [r4, #0]
 8007a92:	1961      	adds	r1, r4, r5
 8007a94:	428b      	cmp	r3, r1
 8007a96:	bf04      	itt	eq
 8007a98:	6819      	ldreq	r1, [r3, #0]
 8007a9a:	685b      	ldreq	r3, [r3, #4]
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	bf04      	itt	eq
 8007aa0:	1949      	addeq	r1, r1, r5
 8007aa2:	6021      	streq	r1, [r4, #0]
 8007aa4:	6054      	str	r4, [r2, #4]
 8007aa6:	e7c7      	b.n	8007a38 <_free_r+0x28>
 8007aa8:	b003      	add	sp, #12
 8007aaa:	bd30      	pop	{r4, r5, pc}
 8007aac:	20000bbc 	.word	0x20000bbc

08007ab0 <_read_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	; (8007ad0 <_read_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fa ff34 	bl	800292c <_read>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_read_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_read_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000e3c 	.word	0x20000e3c

08007ad4 <_fstat_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	4d07      	ldr	r5, [pc, #28]	; (8007af4 <_fstat_r+0x20>)
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	f7fa ff4c 	bl	800297e <_fstat>
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	d102      	bne.n	8007af0 <_fstat_r+0x1c>
 8007aea:	682b      	ldr	r3, [r5, #0]
 8007aec:	b103      	cbz	r3, 8007af0 <_fstat_r+0x1c>
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	bd38      	pop	{r3, r4, r5, pc}
 8007af2:	bf00      	nop
 8007af4:	20000e3c 	.word	0x20000e3c

08007af8 <_isatty_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	; (8007b14 <_isatty_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7fa ff4b 	bl	800299e <_isatty>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_isatty_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_isatty_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	20000e3c 	.word	0x20000e3c

08007b18 <cos>:
 8007b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b1a:	ec53 2b10 	vmov	r2, r3, d0
 8007b1e:	4824      	ldr	r0, [pc, #144]	; (8007bb0 <cos+0x98>)
 8007b20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b24:	4281      	cmp	r1, r0
 8007b26:	dc06      	bgt.n	8007b36 <cos+0x1e>
 8007b28:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007ba8 <cos+0x90>
 8007b2c:	f001 fbc0 	bl	80092b0 <__kernel_cos>
 8007b30:	ec51 0b10 	vmov	r0, r1, d0
 8007b34:	e007      	b.n	8007b46 <cos+0x2e>
 8007b36:	481f      	ldr	r0, [pc, #124]	; (8007bb4 <cos+0x9c>)
 8007b38:	4281      	cmp	r1, r0
 8007b3a:	dd09      	ble.n	8007b50 <cos+0x38>
 8007b3c:	ee10 0a10 	vmov	r0, s0
 8007b40:	4619      	mov	r1, r3
 8007b42:	f7f8 fb99 	bl	8000278 <__aeabi_dsub>
 8007b46:	ec41 0b10 	vmov	d0, r0, r1
 8007b4a:	b005      	add	sp, #20
 8007b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b50:	4668      	mov	r0, sp
 8007b52:	f001 f8ed 	bl	8008d30 <__ieee754_rem_pio2>
 8007b56:	f000 0003 	and.w	r0, r0, #3
 8007b5a:	2801      	cmp	r0, #1
 8007b5c:	d007      	beq.n	8007b6e <cos+0x56>
 8007b5e:	2802      	cmp	r0, #2
 8007b60:	d012      	beq.n	8007b88 <cos+0x70>
 8007b62:	b9c0      	cbnz	r0, 8007b96 <cos+0x7e>
 8007b64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b68:	ed9d 0b00 	vldr	d0, [sp]
 8007b6c:	e7de      	b.n	8007b2c <cos+0x14>
 8007b6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b72:	ed9d 0b00 	vldr	d0, [sp]
 8007b76:	f001 ffa3 	bl	8009ac0 <__kernel_sin>
 8007b7a:	ec53 2b10 	vmov	r2, r3, d0
 8007b7e:	ee10 0a10 	vmov	r0, s0
 8007b82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007b86:	e7de      	b.n	8007b46 <cos+0x2e>
 8007b88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b8c:	ed9d 0b00 	vldr	d0, [sp]
 8007b90:	f001 fb8e 	bl	80092b0 <__kernel_cos>
 8007b94:	e7f1      	b.n	8007b7a <cos+0x62>
 8007b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b9a:	ed9d 0b00 	vldr	d0, [sp]
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f001 ff8e 	bl	8009ac0 <__kernel_sin>
 8007ba4:	e7c4      	b.n	8007b30 <cos+0x18>
 8007ba6:	bf00      	nop
	...
 8007bb0:	3fe921fb 	.word	0x3fe921fb
 8007bb4:	7fefffff 	.word	0x7fefffff

08007bb8 <round>:
 8007bb8:	ec51 0b10 	vmov	r0, r1, d0
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007bc2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007bc6:	2c13      	cmp	r4, #19
 8007bc8:	ee10 2a10 	vmov	r2, s0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	dc19      	bgt.n	8007c04 <round+0x4c>
 8007bd0:	2c00      	cmp	r4, #0
 8007bd2:	da09      	bge.n	8007be8 <round+0x30>
 8007bd4:	3401      	adds	r4, #1
 8007bd6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007bda:	d103      	bne.n	8007be4 <round+0x2c>
 8007bdc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007be0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007be4:	2100      	movs	r1, #0
 8007be6:	e028      	b.n	8007c3a <round+0x82>
 8007be8:	4d15      	ldr	r5, [pc, #84]	; (8007c40 <round+0x88>)
 8007bea:	4125      	asrs	r5, r4
 8007bec:	ea01 0605 	and.w	r6, r1, r5
 8007bf0:	4332      	orrs	r2, r6
 8007bf2:	d00e      	beq.n	8007c12 <round+0x5a>
 8007bf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007bf8:	fa42 f404 	asr.w	r4, r2, r4
 8007bfc:	4423      	add	r3, r4
 8007bfe:	ea23 0305 	bic.w	r3, r3, r5
 8007c02:	e7ef      	b.n	8007be4 <round+0x2c>
 8007c04:	2c33      	cmp	r4, #51	; 0x33
 8007c06:	dd07      	ble.n	8007c18 <round+0x60>
 8007c08:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007c0c:	d101      	bne.n	8007c12 <round+0x5a>
 8007c0e:	f7f8 fb35 	bl	800027c <__adddf3>
 8007c12:	ec41 0b10 	vmov	d0, r0, r1
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8007c20:	40f5      	lsrs	r5, r6
 8007c22:	4228      	tst	r0, r5
 8007c24:	d0f5      	beq.n	8007c12 <round+0x5a>
 8007c26:	2101      	movs	r1, #1
 8007c28:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007c2c:	fa01 f404 	lsl.w	r4, r1, r4
 8007c30:	1912      	adds	r2, r2, r4
 8007c32:	bf28      	it	cs
 8007c34:	185b      	addcs	r3, r3, r1
 8007c36:	ea22 0105 	bic.w	r1, r2, r5
 8007c3a:	4608      	mov	r0, r1
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	e7e8      	b.n	8007c12 <round+0x5a>
 8007c40:	000fffff 	.word	0x000fffff
 8007c44:	00000000 	.word	0x00000000

08007c48 <sin>:
 8007c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c4a:	ec53 2b10 	vmov	r2, r3, d0
 8007c4e:	4826      	ldr	r0, [pc, #152]	; (8007ce8 <sin+0xa0>)
 8007c50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c54:	4281      	cmp	r1, r0
 8007c56:	dc07      	bgt.n	8007c68 <sin+0x20>
 8007c58:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007ce0 <sin+0x98>
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f001 ff2f 	bl	8009ac0 <__kernel_sin>
 8007c62:	ec51 0b10 	vmov	r0, r1, d0
 8007c66:	e007      	b.n	8007c78 <sin+0x30>
 8007c68:	4820      	ldr	r0, [pc, #128]	; (8007cec <sin+0xa4>)
 8007c6a:	4281      	cmp	r1, r0
 8007c6c:	dd09      	ble.n	8007c82 <sin+0x3a>
 8007c6e:	ee10 0a10 	vmov	r0, s0
 8007c72:	4619      	mov	r1, r3
 8007c74:	f7f8 fb00 	bl	8000278 <__aeabi_dsub>
 8007c78:	ec41 0b10 	vmov	d0, r0, r1
 8007c7c:	b005      	add	sp, #20
 8007c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c82:	4668      	mov	r0, sp
 8007c84:	f001 f854 	bl	8008d30 <__ieee754_rem_pio2>
 8007c88:	f000 0003 	and.w	r0, r0, #3
 8007c8c:	2801      	cmp	r0, #1
 8007c8e:	d008      	beq.n	8007ca2 <sin+0x5a>
 8007c90:	2802      	cmp	r0, #2
 8007c92:	d00d      	beq.n	8007cb0 <sin+0x68>
 8007c94:	b9d0      	cbnz	r0, 8007ccc <sin+0x84>
 8007c96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c9a:	ed9d 0b00 	vldr	d0, [sp]
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	e7dd      	b.n	8007c5e <sin+0x16>
 8007ca2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ca6:	ed9d 0b00 	vldr	d0, [sp]
 8007caa:	f001 fb01 	bl	80092b0 <__kernel_cos>
 8007cae:	e7d8      	b.n	8007c62 <sin+0x1a>
 8007cb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cb4:	ed9d 0b00 	vldr	d0, [sp]
 8007cb8:	2001      	movs	r0, #1
 8007cba:	f001 ff01 	bl	8009ac0 <__kernel_sin>
 8007cbe:	ec53 2b10 	vmov	r2, r3, d0
 8007cc2:	ee10 0a10 	vmov	r0, s0
 8007cc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007cca:	e7d5      	b.n	8007c78 <sin+0x30>
 8007ccc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cd0:	ed9d 0b00 	vldr	d0, [sp]
 8007cd4:	f001 faec 	bl	80092b0 <__kernel_cos>
 8007cd8:	e7f1      	b.n	8007cbe <sin+0x76>
 8007cda:	bf00      	nop
 8007cdc:	f3af 8000 	nop.w
	...
 8007ce8:	3fe921fb 	.word	0x3fe921fb
 8007cec:	7fefffff 	.word	0x7fefffff

08007cf0 <atan2>:
 8007cf0:	f000 b91e 	b.w	8007f30 <__ieee754_atan2>

08007cf4 <fmod>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	ed2d 8b02 	vpush	{d8}
 8007cfa:	ec57 6b10 	vmov	r6, r7, d0
 8007cfe:	ec55 4b11 	vmov	r4, r5, d1
 8007d02:	f000 f9df 	bl	80080c4 <__ieee754_fmod>
 8007d06:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <fmod+0x74>)
 8007d08:	eeb0 8a40 	vmov.f32	s16, s0
 8007d0c:	eef0 8a60 	vmov.f32	s17, s1
 8007d10:	f993 3000 	ldrsb.w	r3, [r3]
 8007d14:	3301      	adds	r3, #1
 8007d16:	d020      	beq.n	8007d5a <fmod+0x66>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7f8 fefc 	bl	8000b1c <__aeabi_dcmpun>
 8007d24:	b9c8      	cbnz	r0, 8007d5a <fmod+0x66>
 8007d26:	4632      	mov	r2, r6
 8007d28:	463b      	mov	r3, r7
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 fef5 	bl	8000b1c <__aeabi_dcmpun>
 8007d32:	b990      	cbnz	r0, 8007d5a <fmod+0x66>
 8007d34:	2200      	movs	r2, #0
 8007d36:	2300      	movs	r3, #0
 8007d38:	4620      	mov	r0, r4
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	f7f8 febc 	bl	8000ab8 <__aeabi_dcmpeq>
 8007d40:	b158      	cbz	r0, 8007d5a <fmod+0x66>
 8007d42:	f7fe ff53 	bl	8006bec <__errno>
 8007d46:	2321      	movs	r3, #33	; 0x21
 8007d48:	6003      	str	r3, [r0, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	f7f8 fd73 	bl	800083c <__aeabi_ddiv>
 8007d56:	ec41 0b18 	vmov	d8, r0, r1
 8007d5a:	eeb0 0a48 	vmov.f32	s0, s16
 8007d5e:	eef0 0a68 	vmov.f32	s1, s17
 8007d62:	ecbd 8b02 	vpop	{d8}
 8007d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d68:	200000d4 	.word	0x200000d4

08007d6c <pow>:
 8007d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d70:	ec59 8b10 	vmov	r8, r9, d0
 8007d74:	ec57 6b11 	vmov	r6, r7, d1
 8007d78:	f000 fab6 	bl	80082e8 <__ieee754_pow>
 8007d7c:	4b4e      	ldr	r3, [pc, #312]	; (8007eb8 <pow+0x14c>)
 8007d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8007d82:	3301      	adds	r3, #1
 8007d84:	ec55 4b10 	vmov	r4, r5, d0
 8007d88:	d015      	beq.n	8007db6 <pow+0x4a>
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	4630      	mov	r0, r6
 8007d90:	4639      	mov	r1, r7
 8007d92:	f7f8 fec3 	bl	8000b1c <__aeabi_dcmpun>
 8007d96:	b970      	cbnz	r0, 8007db6 <pow+0x4a>
 8007d98:	4642      	mov	r2, r8
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	4649      	mov	r1, r9
 8007da0:	f7f8 febc 	bl	8000b1c <__aeabi_dcmpun>
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	b148      	cbz	r0, 8007dbe <pow+0x52>
 8007daa:	4630      	mov	r0, r6
 8007dac:	4639      	mov	r1, r7
 8007dae:	f7f8 fe83 	bl	8000ab8 <__aeabi_dcmpeq>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d17d      	bne.n	8007eb2 <pow+0x146>
 8007db6:	ec45 4b10 	vmov	d0, r4, r5
 8007dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fe79 	bl	8000ab8 <__aeabi_dcmpeq>
 8007dc6:	b1e0      	cbz	r0, 8007e02 <pow+0x96>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4630      	mov	r0, r6
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f7f8 fe72 	bl	8000ab8 <__aeabi_dcmpeq>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d16c      	bne.n	8007eb2 <pow+0x146>
 8007dd8:	ec47 6b10 	vmov	d0, r6, r7
 8007ddc:	f002 f8d9 	bl	8009f92 <finite>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d0e8      	beq.n	8007db6 <pow+0x4a>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fe6e 	bl	8000acc <__aeabi_dcmplt>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d0e0      	beq.n	8007db6 <pow+0x4a>
 8007df4:	f7fe fefa 	bl	8006bec <__errno>
 8007df8:	2321      	movs	r3, #33	; 0x21
 8007dfa:	6003      	str	r3, [r0, #0]
 8007dfc:	2400      	movs	r4, #0
 8007dfe:	4d2f      	ldr	r5, [pc, #188]	; (8007ebc <pow+0x150>)
 8007e00:	e7d9      	b.n	8007db6 <pow+0x4a>
 8007e02:	ec45 4b10 	vmov	d0, r4, r5
 8007e06:	f002 f8c4 	bl	8009f92 <finite>
 8007e0a:	bbb8      	cbnz	r0, 8007e7c <pow+0x110>
 8007e0c:	ec49 8b10 	vmov	d0, r8, r9
 8007e10:	f002 f8bf 	bl	8009f92 <finite>
 8007e14:	b390      	cbz	r0, 8007e7c <pow+0x110>
 8007e16:	ec47 6b10 	vmov	d0, r6, r7
 8007e1a:	f002 f8ba 	bl	8009f92 <finite>
 8007e1e:	b368      	cbz	r0, 8007e7c <pow+0x110>
 8007e20:	4622      	mov	r2, r4
 8007e22:	462b      	mov	r3, r5
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 fe78 	bl	8000b1c <__aeabi_dcmpun>
 8007e2c:	b160      	cbz	r0, 8007e48 <pow+0xdc>
 8007e2e:	f7fe fedd 	bl	8006bec <__errno>
 8007e32:	2321      	movs	r3, #33	; 0x21
 8007e34:	6003      	str	r3, [r0, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	f7f8 fcfd 	bl	800083c <__aeabi_ddiv>
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
 8007e46:	e7b6      	b.n	8007db6 <pow+0x4a>
 8007e48:	f7fe fed0 	bl	8006bec <__errno>
 8007e4c:	2322      	movs	r3, #34	; 0x22
 8007e4e:	6003      	str	r3, [r0, #0]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2300      	movs	r3, #0
 8007e54:	4640      	mov	r0, r8
 8007e56:	4649      	mov	r1, r9
 8007e58:	f7f8 fe38 	bl	8000acc <__aeabi_dcmplt>
 8007e5c:	2400      	movs	r4, #0
 8007e5e:	b158      	cbz	r0, 8007e78 <pow+0x10c>
 8007e60:	ec47 6b10 	vmov	d0, r6, r7
 8007e64:	f002 f928 	bl	800a0b8 <rint>
 8007e68:	4632      	mov	r2, r6
 8007e6a:	ec51 0b10 	vmov	r0, r1, d0
 8007e6e:	463b      	mov	r3, r7
 8007e70:	f7f8 fe22 	bl	8000ab8 <__aeabi_dcmpeq>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d0c2      	beq.n	8007dfe <pow+0x92>
 8007e78:	4d11      	ldr	r5, [pc, #68]	; (8007ec0 <pow+0x154>)
 8007e7a:	e79c      	b.n	8007db6 <pow+0x4a>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4620      	mov	r0, r4
 8007e82:	4629      	mov	r1, r5
 8007e84:	f7f8 fe18 	bl	8000ab8 <__aeabi_dcmpeq>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d094      	beq.n	8007db6 <pow+0x4a>
 8007e8c:	ec49 8b10 	vmov	d0, r8, r9
 8007e90:	f002 f87f 	bl	8009f92 <finite>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d08e      	beq.n	8007db6 <pow+0x4a>
 8007e98:	ec47 6b10 	vmov	d0, r6, r7
 8007e9c:	f002 f879 	bl	8009f92 <finite>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d088      	beq.n	8007db6 <pow+0x4a>
 8007ea4:	f7fe fea2 	bl	8006bec <__errno>
 8007ea8:	2322      	movs	r3, #34	; 0x22
 8007eaa:	6003      	str	r3, [r0, #0]
 8007eac:	2400      	movs	r4, #0
 8007eae:	2500      	movs	r5, #0
 8007eb0:	e781      	b.n	8007db6 <pow+0x4a>
 8007eb2:	4d04      	ldr	r5, [pc, #16]	; (8007ec4 <pow+0x158>)
 8007eb4:	2400      	movs	r4, #0
 8007eb6:	e77e      	b.n	8007db6 <pow+0x4a>
 8007eb8:	200000d4 	.word	0x200000d4
 8007ebc:	fff00000 	.word	0xfff00000
 8007ec0:	7ff00000 	.word	0x7ff00000
 8007ec4:	3ff00000 	.word	0x3ff00000

08007ec8 <sqrt>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	ed2d 8b02 	vpush	{d8}
 8007ece:	ec55 4b10 	vmov	r4, r5, d0
 8007ed2:	f001 f937 	bl	8009144 <__ieee754_sqrt>
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <sqrt+0x64>)
 8007ed8:	eeb0 8a40 	vmov.f32	s16, s0
 8007edc:	eef0 8a60 	vmov.f32	s17, s1
 8007ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	d019      	beq.n	8007f1c <sqrt+0x54>
 8007ee8:	4622      	mov	r2, r4
 8007eea:	462b      	mov	r3, r5
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 fe14 	bl	8000b1c <__aeabi_dcmpun>
 8007ef4:	b990      	cbnz	r0, 8007f1c <sqrt+0x54>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 fde5 	bl	8000acc <__aeabi_dcmplt>
 8007f02:	b158      	cbz	r0, 8007f1c <sqrt+0x54>
 8007f04:	f7fe fe72 	bl	8006bec <__errno>
 8007f08:	2321      	movs	r3, #33	; 0x21
 8007f0a:	6003      	str	r3, [r0, #0]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4610      	mov	r0, r2
 8007f12:	4619      	mov	r1, r3
 8007f14:	f7f8 fc92 	bl	800083c <__aeabi_ddiv>
 8007f18:	ec41 0b18 	vmov	d8, r0, r1
 8007f1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f20:	eef0 0a68 	vmov.f32	s1, s17
 8007f24:	ecbd 8b02 	vpop	{d8}
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200000d4 	.word	0x200000d4

08007f30 <__ieee754_atan2>:
 8007f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f34:	ec57 6b11 	vmov	r6, r7, d1
 8007f38:	4273      	negs	r3, r6
 8007f3a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80080c0 <__ieee754_atan2+0x190>
 8007f3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007f42:	4333      	orrs	r3, r6
 8007f44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007f48:	4573      	cmp	r3, lr
 8007f4a:	ec51 0b10 	vmov	r0, r1, d0
 8007f4e:	ee11 8a10 	vmov	r8, s2
 8007f52:	d80a      	bhi.n	8007f6a <__ieee754_atan2+0x3a>
 8007f54:	4244      	negs	r4, r0
 8007f56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f5a:	4304      	orrs	r4, r0
 8007f5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007f60:	4574      	cmp	r4, lr
 8007f62:	ee10 9a10 	vmov	r9, s0
 8007f66:	468c      	mov	ip, r1
 8007f68:	d907      	bls.n	8007f7a <__ieee754_atan2+0x4a>
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	f7f8 f985 	bl	800027c <__adddf3>
 8007f72:	ec41 0b10 	vmov	d0, r0, r1
 8007f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007f7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f82:	4334      	orrs	r4, r6
 8007f84:	d103      	bne.n	8007f8e <__ieee754_atan2+0x5e>
 8007f86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8a:	f001 be59 	b.w	8009c40 <atan>
 8007f8e:	17bc      	asrs	r4, r7, #30
 8007f90:	f004 0402 	and.w	r4, r4, #2
 8007f94:	ea53 0909 	orrs.w	r9, r3, r9
 8007f98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007f9c:	d107      	bne.n	8007fae <__ieee754_atan2+0x7e>
 8007f9e:	2c02      	cmp	r4, #2
 8007fa0:	d060      	beq.n	8008064 <__ieee754_atan2+0x134>
 8007fa2:	2c03      	cmp	r4, #3
 8007fa4:	d1e5      	bne.n	8007f72 <__ieee754_atan2+0x42>
 8007fa6:	a142      	add	r1, pc, #264	; (adr r1, 80080b0 <__ieee754_atan2+0x180>)
 8007fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fac:	e7e1      	b.n	8007f72 <__ieee754_atan2+0x42>
 8007fae:	ea52 0808 	orrs.w	r8, r2, r8
 8007fb2:	d106      	bne.n	8007fc2 <__ieee754_atan2+0x92>
 8007fb4:	f1bc 0f00 	cmp.w	ip, #0
 8007fb8:	da5f      	bge.n	800807a <__ieee754_atan2+0x14a>
 8007fba:	a13f      	add	r1, pc, #252	; (adr r1, 80080b8 <__ieee754_atan2+0x188>)
 8007fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fc0:	e7d7      	b.n	8007f72 <__ieee754_atan2+0x42>
 8007fc2:	4572      	cmp	r2, lr
 8007fc4:	d10f      	bne.n	8007fe6 <__ieee754_atan2+0xb6>
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fcc:	d107      	bne.n	8007fde <__ieee754_atan2+0xae>
 8007fce:	2c02      	cmp	r4, #2
 8007fd0:	d84c      	bhi.n	800806c <__ieee754_atan2+0x13c>
 8007fd2:	4b35      	ldr	r3, [pc, #212]	; (80080a8 <__ieee754_atan2+0x178>)
 8007fd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007fd8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007fdc:	e7c9      	b.n	8007f72 <__ieee754_atan2+0x42>
 8007fde:	2c02      	cmp	r4, #2
 8007fe0:	d848      	bhi.n	8008074 <__ieee754_atan2+0x144>
 8007fe2:	4b32      	ldr	r3, [pc, #200]	; (80080ac <__ieee754_atan2+0x17c>)
 8007fe4:	e7f6      	b.n	8007fd4 <__ieee754_atan2+0xa4>
 8007fe6:	4573      	cmp	r3, lr
 8007fe8:	d0e4      	beq.n	8007fb4 <__ieee754_atan2+0x84>
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007ff0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ff4:	da1e      	bge.n	8008034 <__ieee754_atan2+0x104>
 8007ff6:	2f00      	cmp	r7, #0
 8007ff8:	da01      	bge.n	8007ffe <__ieee754_atan2+0xce>
 8007ffa:	323c      	adds	r2, #60	; 0x3c
 8007ffc:	db1e      	blt.n	800803c <__ieee754_atan2+0x10c>
 8007ffe:	4632      	mov	r2, r6
 8008000:	463b      	mov	r3, r7
 8008002:	f7f8 fc1b 	bl	800083c <__aeabi_ddiv>
 8008006:	ec41 0b10 	vmov	d0, r0, r1
 800800a:	f001 ffb9 	bl	8009f80 <fabs>
 800800e:	f001 fe17 	bl	8009c40 <atan>
 8008012:	ec51 0b10 	vmov	r0, r1, d0
 8008016:	2c01      	cmp	r4, #1
 8008018:	d013      	beq.n	8008042 <__ieee754_atan2+0x112>
 800801a:	2c02      	cmp	r4, #2
 800801c:	d015      	beq.n	800804a <__ieee754_atan2+0x11a>
 800801e:	2c00      	cmp	r4, #0
 8008020:	d0a7      	beq.n	8007f72 <__ieee754_atan2+0x42>
 8008022:	a319      	add	r3, pc, #100	; (adr r3, 8008088 <__ieee754_atan2+0x158>)
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	f7f8 f926 	bl	8000278 <__aeabi_dsub>
 800802c:	a318      	add	r3, pc, #96	; (adr r3, 8008090 <__ieee754_atan2+0x160>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	e014      	b.n	800805e <__ieee754_atan2+0x12e>
 8008034:	a118      	add	r1, pc, #96	; (adr r1, 8008098 <__ieee754_atan2+0x168>)
 8008036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800803a:	e7ec      	b.n	8008016 <__ieee754_atan2+0xe6>
 800803c:	2000      	movs	r0, #0
 800803e:	2100      	movs	r1, #0
 8008040:	e7e9      	b.n	8008016 <__ieee754_atan2+0xe6>
 8008042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008046:	4619      	mov	r1, r3
 8008048:	e793      	b.n	8007f72 <__ieee754_atan2+0x42>
 800804a:	a30f      	add	r3, pc, #60	; (adr r3, 8008088 <__ieee754_atan2+0x158>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f912 	bl	8000278 <__aeabi_dsub>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	a10d      	add	r1, pc, #52	; (adr r1, 8008090 <__ieee754_atan2+0x160>)
 800805a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800805e:	f7f8 f90b 	bl	8000278 <__aeabi_dsub>
 8008062:	e786      	b.n	8007f72 <__ieee754_atan2+0x42>
 8008064:	a10a      	add	r1, pc, #40	; (adr r1, 8008090 <__ieee754_atan2+0x160>)
 8008066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800806a:	e782      	b.n	8007f72 <__ieee754_atan2+0x42>
 800806c:	a10c      	add	r1, pc, #48	; (adr r1, 80080a0 <__ieee754_atan2+0x170>)
 800806e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008072:	e77e      	b.n	8007f72 <__ieee754_atan2+0x42>
 8008074:	2000      	movs	r0, #0
 8008076:	2100      	movs	r1, #0
 8008078:	e77b      	b.n	8007f72 <__ieee754_atan2+0x42>
 800807a:	a107      	add	r1, pc, #28	; (adr r1, 8008098 <__ieee754_atan2+0x168>)
 800807c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008080:	e777      	b.n	8007f72 <__ieee754_atan2+0x42>
 8008082:	bf00      	nop
 8008084:	f3af 8000 	nop.w
 8008088:	33145c07 	.word	0x33145c07
 800808c:	3ca1a626 	.word	0x3ca1a626
 8008090:	54442d18 	.word	0x54442d18
 8008094:	400921fb 	.word	0x400921fb
 8008098:	54442d18 	.word	0x54442d18
 800809c:	3ff921fb 	.word	0x3ff921fb
 80080a0:	54442d18 	.word	0x54442d18
 80080a4:	3fe921fb 	.word	0x3fe921fb
 80080a8:	0802d890 	.word	0x0802d890
 80080ac:	0802d8a8 	.word	0x0802d8a8
 80080b0:	54442d18 	.word	0x54442d18
 80080b4:	c00921fb 	.word	0xc00921fb
 80080b8:	54442d18 	.word	0x54442d18
 80080bc:	bff921fb 	.word	0xbff921fb
 80080c0:	7ff00000 	.word	0x7ff00000

080080c4 <__ieee754_fmod>:
 80080c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	ec53 2b11 	vmov	r2, r3, d1
 80080cc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80080d0:	ea5e 0402 	orrs.w	r4, lr, r2
 80080d4:	ec51 0b10 	vmov	r0, r1, d0
 80080d8:	ee11 7a10 	vmov	r7, s2
 80080dc:	ee11 ca10 	vmov	ip, s2
 80080e0:	461e      	mov	r6, r3
 80080e2:	d00d      	beq.n	8008100 <__ieee754_fmod+0x3c>
 80080e4:	4c7a      	ldr	r4, [pc, #488]	; (80082d0 <__ieee754_fmod+0x20c>)
 80080e6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80080ea:	45a0      	cmp	r8, r4
 80080ec:	4689      	mov	r9, r1
 80080ee:	dc07      	bgt.n	8008100 <__ieee754_fmod+0x3c>
 80080f0:	4254      	negs	r4, r2
 80080f2:	4d78      	ldr	r5, [pc, #480]	; (80082d4 <__ieee754_fmod+0x210>)
 80080f4:	4314      	orrs	r4, r2
 80080f6:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80080fa:	42ac      	cmp	r4, r5
 80080fc:	46ab      	mov	fp, r5
 80080fe:	d909      	bls.n	8008114 <__ieee754_fmod+0x50>
 8008100:	f7f8 fa72 	bl	80005e8 <__aeabi_dmul>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	f7f8 fb98 	bl	800083c <__aeabi_ddiv>
 800810c:	ec41 0b10 	vmov	d0, r0, r1
 8008110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	45f0      	cmp	r8, lr
 8008116:	ee10 aa10 	vmov	sl, s0
 800811a:	ee10 4a10 	vmov	r4, s0
 800811e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008122:	dc0a      	bgt.n	800813a <__ieee754_fmod+0x76>
 8008124:	dbf2      	blt.n	800810c <__ieee754_fmod+0x48>
 8008126:	4290      	cmp	r0, r2
 8008128:	d3f0      	bcc.n	800810c <__ieee754_fmod+0x48>
 800812a:	d106      	bne.n	800813a <__ieee754_fmod+0x76>
 800812c:	4a6a      	ldr	r2, [pc, #424]	; (80082d8 <__ieee754_fmod+0x214>)
 800812e:	0fed      	lsrs	r5, r5, #31
 8008130:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008134:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008138:	e7e8      	b.n	800810c <__ieee754_fmod+0x48>
 800813a:	ea19 0f0b 	tst.w	r9, fp
 800813e:	d14a      	bne.n	80081d6 <__ieee754_fmod+0x112>
 8008140:	f1b8 0f00 	cmp.w	r8, #0
 8008144:	d13f      	bne.n	80081c6 <__ieee754_fmod+0x102>
 8008146:	4965      	ldr	r1, [pc, #404]	; (80082dc <__ieee754_fmod+0x218>)
 8008148:	4653      	mov	r3, sl
 800814a:	2b00      	cmp	r3, #0
 800814c:	dc38      	bgt.n	80081c0 <__ieee754_fmod+0xfc>
 800814e:	4b61      	ldr	r3, [pc, #388]	; (80082d4 <__ieee754_fmod+0x210>)
 8008150:	4033      	ands	r3, r6
 8008152:	2b00      	cmp	r3, #0
 8008154:	d14f      	bne.n	80081f6 <__ieee754_fmod+0x132>
 8008156:	f1be 0f00 	cmp.w	lr, #0
 800815a:	d144      	bne.n	80081e6 <__ieee754_fmod+0x122>
 800815c:	4a5f      	ldr	r2, [pc, #380]	; (80082dc <__ieee754_fmod+0x218>)
 800815e:	463b      	mov	r3, r7
 8008160:	2b00      	cmp	r3, #0
 8008162:	dc3d      	bgt.n	80081e0 <__ieee754_fmod+0x11c>
 8008164:	4b5e      	ldr	r3, [pc, #376]	; (80082e0 <__ieee754_fmod+0x21c>)
 8008166:	4299      	cmp	r1, r3
 8008168:	db4a      	blt.n	8008200 <__ieee754_fmod+0x13c>
 800816a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800816e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008172:	485b      	ldr	r0, [pc, #364]	; (80082e0 <__ieee754_fmod+0x21c>)
 8008174:	4282      	cmp	r2, r0
 8008176:	db57      	blt.n	8008228 <__ieee754_fmod+0x164>
 8008178:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800817c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008180:	1a89      	subs	r1, r1, r2
 8008182:	1b98      	subs	r0, r3, r6
 8008184:	eba4 070c 	sub.w	r7, r4, ip
 8008188:	2900      	cmp	r1, #0
 800818a:	d164      	bne.n	8008256 <__ieee754_fmod+0x192>
 800818c:	4564      	cmp	r4, ip
 800818e:	bf38      	it	cc
 8008190:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8008194:	2800      	cmp	r0, #0
 8008196:	bfa4      	itt	ge
 8008198:	463c      	movge	r4, r7
 800819a:	4603      	movge	r3, r0
 800819c:	ea53 0104 	orrs.w	r1, r3, r4
 80081a0:	d0c4      	beq.n	800812c <__ieee754_fmod+0x68>
 80081a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081a6:	db6b      	blt.n	8008280 <__ieee754_fmod+0x1bc>
 80081a8:	494d      	ldr	r1, [pc, #308]	; (80082e0 <__ieee754_fmod+0x21c>)
 80081aa:	428a      	cmp	r2, r1
 80081ac:	db6e      	blt.n	800828c <__ieee754_fmod+0x1c8>
 80081ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80081b2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80081b6:	431d      	orrs	r5, r3
 80081b8:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 80081bc:	4620      	mov	r0, r4
 80081be:	e7a5      	b.n	800810c <__ieee754_fmod+0x48>
 80081c0:	3901      	subs	r1, #1
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	e7c1      	b.n	800814a <__ieee754_fmod+0x86>
 80081c6:	4946      	ldr	r1, [pc, #280]	; (80082e0 <__ieee754_fmod+0x21c>)
 80081c8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	ddbe      	ble.n	800814e <__ieee754_fmod+0x8a>
 80081d0:	3901      	subs	r1, #1
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	e7fa      	b.n	80081cc <__ieee754_fmod+0x108>
 80081d6:	ea4f 5128 	mov.w	r1, r8, asr #20
 80081da:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80081de:	e7b6      	b.n	800814e <__ieee754_fmod+0x8a>
 80081e0:	3a01      	subs	r2, #1
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	e7bc      	b.n	8008160 <__ieee754_fmod+0x9c>
 80081e6:	4a3e      	ldr	r2, [pc, #248]	; (80082e0 <__ieee754_fmod+0x21c>)
 80081e8:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	ddb9      	ble.n	8008164 <__ieee754_fmod+0xa0>
 80081f0:	3a01      	subs	r2, #1
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	e7fa      	b.n	80081ec <__ieee754_fmod+0x128>
 80081f6:	ea4f 522e 	mov.w	r2, lr, asr #20
 80081fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80081fe:	e7b1      	b.n	8008164 <__ieee754_fmod+0xa0>
 8008200:	1a5c      	subs	r4, r3, r1
 8008202:	2c1f      	cmp	r4, #31
 8008204:	dc0a      	bgt.n	800821c <__ieee754_fmod+0x158>
 8008206:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800820a:	fa08 f804 	lsl.w	r8, r8, r4
 800820e:	fa2a f303 	lsr.w	r3, sl, r3
 8008212:	ea43 0308 	orr.w	r3, r3, r8
 8008216:	fa0a f404 	lsl.w	r4, sl, r4
 800821a:	e7aa      	b.n	8008172 <__ieee754_fmod+0xae>
 800821c:	4b31      	ldr	r3, [pc, #196]	; (80082e4 <__ieee754_fmod+0x220>)
 800821e:	1a5b      	subs	r3, r3, r1
 8008220:	fa0a f303 	lsl.w	r3, sl, r3
 8008224:	2400      	movs	r4, #0
 8008226:	e7a4      	b.n	8008172 <__ieee754_fmod+0xae>
 8008228:	eba0 0c02 	sub.w	ip, r0, r2
 800822c:	f1bc 0f1f 	cmp.w	ip, #31
 8008230:	dc0a      	bgt.n	8008248 <__ieee754_fmod+0x184>
 8008232:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8008236:	fa0e fe0c 	lsl.w	lr, lr, ip
 800823a:	fa27 f606 	lsr.w	r6, r7, r6
 800823e:	ea46 060e 	orr.w	r6, r6, lr
 8008242:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008246:	e79b      	b.n	8008180 <__ieee754_fmod+0xbc>
 8008248:	4e26      	ldr	r6, [pc, #152]	; (80082e4 <__ieee754_fmod+0x220>)
 800824a:	1ab6      	subs	r6, r6, r2
 800824c:	fa07 f606 	lsl.w	r6, r7, r6
 8008250:	f04f 0c00 	mov.w	ip, #0
 8008254:	e794      	b.n	8008180 <__ieee754_fmod+0xbc>
 8008256:	4564      	cmp	r4, ip
 8008258:	bf38      	it	cc
 800825a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800825e:	2800      	cmp	r0, #0
 8008260:	da05      	bge.n	800826e <__ieee754_fmod+0x1aa>
 8008262:	0fe0      	lsrs	r0, r4, #31
 8008264:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008268:	0064      	lsls	r4, r4, #1
 800826a:	3901      	subs	r1, #1
 800826c:	e789      	b.n	8008182 <__ieee754_fmod+0xbe>
 800826e:	ea50 0307 	orrs.w	r3, r0, r7
 8008272:	f43f af5b 	beq.w	800812c <__ieee754_fmod+0x68>
 8008276:	0ffb      	lsrs	r3, r7, #31
 8008278:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800827c:	007c      	lsls	r4, r7, #1
 800827e:	e7f4      	b.n	800826a <__ieee754_fmod+0x1a6>
 8008280:	0fe1      	lsrs	r1, r4, #31
 8008282:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008286:	0064      	lsls	r4, r4, #1
 8008288:	3a01      	subs	r2, #1
 800828a:	e78a      	b.n	80081a2 <__ieee754_fmod+0xde>
 800828c:	1a89      	subs	r1, r1, r2
 800828e:	2914      	cmp	r1, #20
 8008290:	dc0a      	bgt.n	80082a8 <__ieee754_fmod+0x1e4>
 8008292:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008296:	fa03 f202 	lsl.w	r2, r3, r2
 800829a:	40cc      	lsrs	r4, r1
 800829c:	4322      	orrs	r2, r4
 800829e:	410b      	asrs	r3, r1
 80082a0:	ea43 0105 	orr.w	r1, r3, r5
 80082a4:	4610      	mov	r0, r2
 80082a6:	e731      	b.n	800810c <__ieee754_fmod+0x48>
 80082a8:	291f      	cmp	r1, #31
 80082aa:	dc07      	bgt.n	80082bc <__ieee754_fmod+0x1f8>
 80082ac:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80082b0:	40cc      	lsrs	r4, r1
 80082b2:	fa03 f202 	lsl.w	r2, r3, r2
 80082b6:	4322      	orrs	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	e7f1      	b.n	80082a0 <__ieee754_fmod+0x1dc>
 80082bc:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80082c0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80082c4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80082c8:	32e2      	adds	r2, #226	; 0xe2
 80082ca:	fa43 f202 	asr.w	r2, r3, r2
 80082ce:	e7f3      	b.n	80082b8 <__ieee754_fmod+0x1f4>
 80082d0:	7fefffff 	.word	0x7fefffff
 80082d4:	7ff00000 	.word	0x7ff00000
 80082d8:	0802d8c0 	.word	0x0802d8c0
 80082dc:	fffffbed 	.word	0xfffffbed
 80082e0:	fffffc02 	.word	0xfffffc02
 80082e4:	fffffbe2 	.word	0xfffffbe2

080082e8 <__ieee754_pow>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	ed2d 8b06 	vpush	{d8-d10}
 80082f0:	b08d      	sub	sp, #52	; 0x34
 80082f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80082f6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80082fa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80082fe:	ea56 0100 	orrs.w	r1, r6, r0
 8008302:	ec53 2b10 	vmov	r2, r3, d0
 8008306:	f000 84d1 	beq.w	8008cac <__ieee754_pow+0x9c4>
 800830a:	497f      	ldr	r1, [pc, #508]	; (8008508 <__ieee754_pow+0x220>)
 800830c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008310:	428c      	cmp	r4, r1
 8008312:	ee10 8a10 	vmov	r8, s0
 8008316:	4699      	mov	r9, r3
 8008318:	dc09      	bgt.n	800832e <__ieee754_pow+0x46>
 800831a:	d103      	bne.n	8008324 <__ieee754_pow+0x3c>
 800831c:	b97a      	cbnz	r2, 800833e <__ieee754_pow+0x56>
 800831e:	42a6      	cmp	r6, r4
 8008320:	dd02      	ble.n	8008328 <__ieee754_pow+0x40>
 8008322:	e00c      	b.n	800833e <__ieee754_pow+0x56>
 8008324:	428e      	cmp	r6, r1
 8008326:	dc02      	bgt.n	800832e <__ieee754_pow+0x46>
 8008328:	428e      	cmp	r6, r1
 800832a:	d110      	bne.n	800834e <__ieee754_pow+0x66>
 800832c:	b178      	cbz	r0, 800834e <__ieee754_pow+0x66>
 800832e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008332:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008336:	ea54 0308 	orrs.w	r3, r4, r8
 800833a:	f000 84b7 	beq.w	8008cac <__ieee754_pow+0x9c4>
 800833e:	4873      	ldr	r0, [pc, #460]	; (800850c <__ieee754_pow+0x224>)
 8008340:	b00d      	add	sp, #52	; 0x34
 8008342:	ecbd 8b06 	vpop	{d8-d10}
 8008346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	f001 bead 	b.w	800a0a8 <nan>
 800834e:	f1b9 0f00 	cmp.w	r9, #0
 8008352:	da36      	bge.n	80083c2 <__ieee754_pow+0xda>
 8008354:	496e      	ldr	r1, [pc, #440]	; (8008510 <__ieee754_pow+0x228>)
 8008356:	428e      	cmp	r6, r1
 8008358:	dc51      	bgt.n	80083fe <__ieee754_pow+0x116>
 800835a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800835e:	428e      	cmp	r6, r1
 8008360:	f340 84af 	ble.w	8008cc2 <__ieee754_pow+0x9da>
 8008364:	1531      	asrs	r1, r6, #20
 8008366:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800836a:	2914      	cmp	r1, #20
 800836c:	dd0f      	ble.n	800838e <__ieee754_pow+0xa6>
 800836e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008372:	fa20 fc01 	lsr.w	ip, r0, r1
 8008376:	fa0c f101 	lsl.w	r1, ip, r1
 800837a:	4281      	cmp	r1, r0
 800837c:	f040 84a1 	bne.w	8008cc2 <__ieee754_pow+0x9da>
 8008380:	f00c 0c01 	and.w	ip, ip, #1
 8008384:	f1cc 0102 	rsb	r1, ip, #2
 8008388:	9100      	str	r1, [sp, #0]
 800838a:	b180      	cbz	r0, 80083ae <__ieee754_pow+0xc6>
 800838c:	e059      	b.n	8008442 <__ieee754_pow+0x15a>
 800838e:	2800      	cmp	r0, #0
 8008390:	d155      	bne.n	800843e <__ieee754_pow+0x156>
 8008392:	f1c1 0114 	rsb	r1, r1, #20
 8008396:	fa46 fc01 	asr.w	ip, r6, r1
 800839a:	fa0c f101 	lsl.w	r1, ip, r1
 800839e:	42b1      	cmp	r1, r6
 80083a0:	f040 848c 	bne.w	8008cbc <__ieee754_pow+0x9d4>
 80083a4:	f00c 0c01 	and.w	ip, ip, #1
 80083a8:	f1cc 0102 	rsb	r1, ip, #2
 80083ac:	9100      	str	r1, [sp, #0]
 80083ae:	4959      	ldr	r1, [pc, #356]	; (8008514 <__ieee754_pow+0x22c>)
 80083b0:	428e      	cmp	r6, r1
 80083b2:	d12d      	bne.n	8008410 <__ieee754_pow+0x128>
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	da79      	bge.n	80084ac <__ieee754_pow+0x1c4>
 80083b8:	4956      	ldr	r1, [pc, #344]	; (8008514 <__ieee754_pow+0x22c>)
 80083ba:	2000      	movs	r0, #0
 80083bc:	f7f8 fa3e 	bl	800083c <__aeabi_ddiv>
 80083c0:	e016      	b.n	80083f0 <__ieee754_pow+0x108>
 80083c2:	2100      	movs	r1, #0
 80083c4:	9100      	str	r1, [sp, #0]
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d13b      	bne.n	8008442 <__ieee754_pow+0x15a>
 80083ca:	494f      	ldr	r1, [pc, #316]	; (8008508 <__ieee754_pow+0x220>)
 80083cc:	428e      	cmp	r6, r1
 80083ce:	d1ee      	bne.n	80083ae <__ieee754_pow+0xc6>
 80083d0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80083d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80083d8:	ea53 0308 	orrs.w	r3, r3, r8
 80083dc:	f000 8466 	beq.w	8008cac <__ieee754_pow+0x9c4>
 80083e0:	4b4d      	ldr	r3, [pc, #308]	; (8008518 <__ieee754_pow+0x230>)
 80083e2:	429c      	cmp	r4, r3
 80083e4:	dd0d      	ble.n	8008402 <__ieee754_pow+0x11a>
 80083e6:	2f00      	cmp	r7, #0
 80083e8:	f280 8464 	bge.w	8008cb4 <__ieee754_pow+0x9cc>
 80083ec:	2000      	movs	r0, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	ec41 0b10 	vmov	d0, r0, r1
 80083f4:	b00d      	add	sp, #52	; 0x34
 80083f6:	ecbd 8b06 	vpop	{d8-d10}
 80083fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083fe:	2102      	movs	r1, #2
 8008400:	e7e0      	b.n	80083c4 <__ieee754_pow+0xdc>
 8008402:	2f00      	cmp	r7, #0
 8008404:	daf2      	bge.n	80083ec <__ieee754_pow+0x104>
 8008406:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800840a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800840e:	e7ef      	b.n	80083f0 <__ieee754_pow+0x108>
 8008410:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008414:	d104      	bne.n	8008420 <__ieee754_pow+0x138>
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	f7f8 f8e5 	bl	80005e8 <__aeabi_dmul>
 800841e:	e7e7      	b.n	80083f0 <__ieee754_pow+0x108>
 8008420:	493e      	ldr	r1, [pc, #248]	; (800851c <__ieee754_pow+0x234>)
 8008422:	428f      	cmp	r7, r1
 8008424:	d10d      	bne.n	8008442 <__ieee754_pow+0x15a>
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	db0a      	blt.n	8008442 <__ieee754_pow+0x15a>
 800842c:	ec43 2b10 	vmov	d0, r2, r3
 8008430:	b00d      	add	sp, #52	; 0x34
 8008432:	ecbd 8b06 	vpop	{d8-d10}
 8008436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	f000 be83 	b.w	8009144 <__ieee754_sqrt>
 800843e:	2100      	movs	r1, #0
 8008440:	9100      	str	r1, [sp, #0]
 8008442:	ec43 2b10 	vmov	d0, r2, r3
 8008446:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800844a:	f001 fd99 	bl	8009f80 <fabs>
 800844e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008452:	ec51 0b10 	vmov	r0, r1, d0
 8008456:	f1b8 0f00 	cmp.w	r8, #0
 800845a:	d12a      	bne.n	80084b2 <__ieee754_pow+0x1ca>
 800845c:	b12c      	cbz	r4, 800846a <__ieee754_pow+0x182>
 800845e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008514 <__ieee754_pow+0x22c>
 8008462:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008466:	45e6      	cmp	lr, ip
 8008468:	d123      	bne.n	80084b2 <__ieee754_pow+0x1ca>
 800846a:	2f00      	cmp	r7, #0
 800846c:	da05      	bge.n	800847a <__ieee754_pow+0x192>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	2000      	movs	r0, #0
 8008474:	4927      	ldr	r1, [pc, #156]	; (8008514 <__ieee754_pow+0x22c>)
 8008476:	f7f8 f9e1 	bl	800083c <__aeabi_ddiv>
 800847a:	f1b9 0f00 	cmp.w	r9, #0
 800847e:	dab7      	bge.n	80083f0 <__ieee754_pow+0x108>
 8008480:	9b00      	ldr	r3, [sp, #0]
 8008482:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008486:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800848a:	4323      	orrs	r3, r4
 800848c:	d108      	bne.n	80084a0 <__ieee754_pow+0x1b8>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4610      	mov	r0, r2
 8008494:	4619      	mov	r1, r3
 8008496:	f7f7 feef 	bl	8000278 <__aeabi_dsub>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	e78d      	b.n	80083bc <__ieee754_pow+0xd4>
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d1a4      	bne.n	80083f0 <__ieee754_pow+0x108>
 80084a6:	4602      	mov	r2, r0
 80084a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	e79e      	b.n	80083f0 <__ieee754_pow+0x108>
 80084b2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80084b6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80084ba:	950a      	str	r5, [sp, #40]	; 0x28
 80084bc:	9d00      	ldr	r5, [sp, #0]
 80084be:	46ac      	mov	ip, r5
 80084c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084c2:	ea5c 0505 	orrs.w	r5, ip, r5
 80084c6:	d0e4      	beq.n	8008492 <__ieee754_pow+0x1aa>
 80084c8:	4b15      	ldr	r3, [pc, #84]	; (8008520 <__ieee754_pow+0x238>)
 80084ca:	429e      	cmp	r6, r3
 80084cc:	f340 80fc 	ble.w	80086c8 <__ieee754_pow+0x3e0>
 80084d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80084d4:	429e      	cmp	r6, r3
 80084d6:	4b10      	ldr	r3, [pc, #64]	; (8008518 <__ieee754_pow+0x230>)
 80084d8:	dd07      	ble.n	80084ea <__ieee754_pow+0x202>
 80084da:	429c      	cmp	r4, r3
 80084dc:	dc0a      	bgt.n	80084f4 <__ieee754_pow+0x20c>
 80084de:	2f00      	cmp	r7, #0
 80084e0:	da84      	bge.n	80083ec <__ieee754_pow+0x104>
 80084e2:	a307      	add	r3, pc, #28	; (adr r3, 8008500 <__ieee754_pow+0x218>)
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	e795      	b.n	8008416 <__ieee754_pow+0x12e>
 80084ea:	429c      	cmp	r4, r3
 80084ec:	dbf7      	blt.n	80084de <__ieee754_pow+0x1f6>
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <__ieee754_pow+0x22c>)
 80084f0:	429c      	cmp	r4, r3
 80084f2:	dd17      	ble.n	8008524 <__ieee754_pow+0x23c>
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	dcf4      	bgt.n	80084e2 <__ieee754_pow+0x1fa>
 80084f8:	e778      	b.n	80083ec <__ieee754_pow+0x104>
 80084fa:	bf00      	nop
 80084fc:	f3af 8000 	nop.w
 8008500:	8800759c 	.word	0x8800759c
 8008504:	7e37e43c 	.word	0x7e37e43c
 8008508:	7ff00000 	.word	0x7ff00000
 800850c:	0802d861 	.word	0x0802d861
 8008510:	433fffff 	.word	0x433fffff
 8008514:	3ff00000 	.word	0x3ff00000
 8008518:	3fefffff 	.word	0x3fefffff
 800851c:	3fe00000 	.word	0x3fe00000
 8008520:	41e00000 	.word	0x41e00000
 8008524:	4b64      	ldr	r3, [pc, #400]	; (80086b8 <__ieee754_pow+0x3d0>)
 8008526:	2200      	movs	r2, #0
 8008528:	f7f7 fea6 	bl	8000278 <__aeabi_dsub>
 800852c:	a356      	add	r3, pc, #344	; (adr r3, 8008688 <__ieee754_pow+0x3a0>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	4604      	mov	r4, r0
 8008534:	460d      	mov	r5, r1
 8008536:	f7f8 f857 	bl	80005e8 <__aeabi_dmul>
 800853a:	a355      	add	r3, pc, #340	; (adr r3, 8008690 <__ieee754_pow+0x3a8>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	4606      	mov	r6, r0
 8008542:	460f      	mov	r7, r1
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f7f8 f84e 	bl	80005e8 <__aeabi_dmul>
 800854c:	4b5b      	ldr	r3, [pc, #364]	; (80086bc <__ieee754_pow+0x3d4>)
 800854e:	4682      	mov	sl, r0
 8008550:	468b      	mov	fp, r1
 8008552:	2200      	movs	r2, #0
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f8 f846 	bl	80005e8 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	a14d      	add	r1, pc, #308	; (adr r1, 8008698 <__ieee754_pow+0x3b0>)
 8008562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008566:	f7f7 fe87 	bl	8000278 <__aeabi_dsub>
 800856a:	4622      	mov	r2, r4
 800856c:	462b      	mov	r3, r5
 800856e:	f7f8 f83b 	bl	80005e8 <__aeabi_dmul>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	2000      	movs	r0, #0
 8008578:	4951      	ldr	r1, [pc, #324]	; (80086c0 <__ieee754_pow+0x3d8>)
 800857a:	f7f7 fe7d 	bl	8000278 <__aeabi_dsub>
 800857e:	4622      	mov	r2, r4
 8008580:	4680      	mov	r8, r0
 8008582:	4689      	mov	r9, r1
 8008584:	462b      	mov	r3, r5
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 f82d 	bl	80005e8 <__aeabi_dmul>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f8 f827 	bl	80005e8 <__aeabi_dmul>
 800859a:	a341      	add	r3, pc, #260	; (adr r3, 80086a0 <__ieee754_pow+0x3b8>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	f7f8 f822 	bl	80005e8 <__aeabi_dmul>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4650      	mov	r0, sl
 80085aa:	4659      	mov	r1, fp
 80085ac:	f7f7 fe64 	bl	8000278 <__aeabi_dsub>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4680      	mov	r8, r0
 80085b6:	4689      	mov	r9, r1
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f7 fe5e 	bl	800027c <__adddf3>
 80085c0:	2400      	movs	r4, #0
 80085c2:	4632      	mov	r2, r6
 80085c4:	463b      	mov	r3, r7
 80085c6:	4620      	mov	r0, r4
 80085c8:	460d      	mov	r5, r1
 80085ca:	f7f7 fe55 	bl	8000278 <__aeabi_dsub>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f7 fe4f 	bl	8000278 <__aeabi_dsub>
 80085da:	9b00      	ldr	r3, [sp, #0]
 80085dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085de:	3b01      	subs	r3, #1
 80085e0:	4313      	orrs	r3, r2
 80085e2:	4682      	mov	sl, r0
 80085e4:	468b      	mov	fp, r1
 80085e6:	f040 81f1 	bne.w	80089cc <__ieee754_pow+0x6e4>
 80085ea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80086a8 <__ieee754_pow+0x3c0>
 80085ee:	eeb0 8a47 	vmov.f32	s16, s14
 80085f2:	eef0 8a67 	vmov.f32	s17, s15
 80085f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085fa:	2600      	movs	r6, #0
 80085fc:	4632      	mov	r2, r6
 80085fe:	463b      	mov	r3, r7
 8008600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008604:	f7f7 fe38 	bl	8000278 <__aeabi_dsub>
 8008608:	4622      	mov	r2, r4
 800860a:	462b      	mov	r3, r5
 800860c:	f7f7 ffec 	bl	80005e8 <__aeabi_dmul>
 8008610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008614:	4680      	mov	r8, r0
 8008616:	4689      	mov	r9, r1
 8008618:	4650      	mov	r0, sl
 800861a:	4659      	mov	r1, fp
 800861c:	f7f7 ffe4 	bl	80005e8 <__aeabi_dmul>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f7 fe28 	bl	800027c <__adddf3>
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	4680      	mov	r8, r0
 8008632:	4689      	mov	r9, r1
 8008634:	4620      	mov	r0, r4
 8008636:	4629      	mov	r1, r5
 8008638:	f7f7 ffd6 	bl	80005e8 <__aeabi_dmul>
 800863c:	460b      	mov	r3, r1
 800863e:	4604      	mov	r4, r0
 8008640:	460d      	mov	r5, r1
 8008642:	4602      	mov	r2, r0
 8008644:	4649      	mov	r1, r9
 8008646:	4640      	mov	r0, r8
 8008648:	f7f7 fe18 	bl	800027c <__adddf3>
 800864c:	4b1d      	ldr	r3, [pc, #116]	; (80086c4 <__ieee754_pow+0x3dc>)
 800864e:	4299      	cmp	r1, r3
 8008650:	ec45 4b19 	vmov	d9, r4, r5
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	468b      	mov	fp, r1
 800865a:	f340 82fe 	ble.w	8008c5a <__ieee754_pow+0x972>
 800865e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008662:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008666:	4303      	orrs	r3, r0
 8008668:	f000 81f0 	beq.w	8008a4c <__ieee754_pow+0x764>
 800866c:	a310      	add	r3, pc, #64	; (adr r3, 80086b0 <__ieee754_pow+0x3c8>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	ec51 0b18 	vmov	r0, r1, d8
 8008676:	f7f7 ffb7 	bl	80005e8 <__aeabi_dmul>
 800867a:	a30d      	add	r3, pc, #52	; (adr r3, 80086b0 <__ieee754_pow+0x3c8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	e6cb      	b.n	800841a <__ieee754_pow+0x132>
 8008682:	bf00      	nop
 8008684:	f3af 8000 	nop.w
 8008688:	60000000 	.word	0x60000000
 800868c:	3ff71547 	.word	0x3ff71547
 8008690:	f85ddf44 	.word	0xf85ddf44
 8008694:	3e54ae0b 	.word	0x3e54ae0b
 8008698:	55555555 	.word	0x55555555
 800869c:	3fd55555 	.word	0x3fd55555
 80086a0:	652b82fe 	.word	0x652b82fe
 80086a4:	3ff71547 	.word	0x3ff71547
 80086a8:	00000000 	.word	0x00000000
 80086ac:	bff00000 	.word	0xbff00000
 80086b0:	8800759c 	.word	0x8800759c
 80086b4:	7e37e43c 	.word	0x7e37e43c
 80086b8:	3ff00000 	.word	0x3ff00000
 80086bc:	3fd00000 	.word	0x3fd00000
 80086c0:	3fe00000 	.word	0x3fe00000
 80086c4:	408fffff 	.word	0x408fffff
 80086c8:	4bd7      	ldr	r3, [pc, #860]	; (8008a28 <__ieee754_pow+0x740>)
 80086ca:	ea03 0309 	and.w	r3, r3, r9
 80086ce:	2200      	movs	r2, #0
 80086d0:	b92b      	cbnz	r3, 80086de <__ieee754_pow+0x3f6>
 80086d2:	4bd6      	ldr	r3, [pc, #856]	; (8008a2c <__ieee754_pow+0x744>)
 80086d4:	f7f7 ff88 	bl	80005e8 <__aeabi_dmul>
 80086d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80086dc:	460c      	mov	r4, r1
 80086de:	1523      	asrs	r3, r4, #20
 80086e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086e4:	4413      	add	r3, r2
 80086e6:	9309      	str	r3, [sp, #36]	; 0x24
 80086e8:	4bd1      	ldr	r3, [pc, #836]	; (8008a30 <__ieee754_pow+0x748>)
 80086ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80086ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80086f2:	429c      	cmp	r4, r3
 80086f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086f8:	dd08      	ble.n	800870c <__ieee754_pow+0x424>
 80086fa:	4bce      	ldr	r3, [pc, #824]	; (8008a34 <__ieee754_pow+0x74c>)
 80086fc:	429c      	cmp	r4, r3
 80086fe:	f340 8163 	ble.w	80089c8 <__ieee754_pow+0x6e0>
 8008702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008704:	3301      	adds	r3, #1
 8008706:	9309      	str	r3, [sp, #36]	; 0x24
 8008708:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800870c:	2400      	movs	r4, #0
 800870e:	00e3      	lsls	r3, r4, #3
 8008710:	930b      	str	r3, [sp, #44]	; 0x2c
 8008712:	4bc9      	ldr	r3, [pc, #804]	; (8008a38 <__ieee754_pow+0x750>)
 8008714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008718:	ed93 7b00 	vldr	d7, [r3]
 800871c:	4629      	mov	r1, r5
 800871e:	ec53 2b17 	vmov	r2, r3, d7
 8008722:	eeb0 8a47 	vmov.f32	s16, s14
 8008726:	eef0 8a67 	vmov.f32	s17, s15
 800872a:	4682      	mov	sl, r0
 800872c:	f7f7 fda4 	bl	8000278 <__aeabi_dsub>
 8008730:	4652      	mov	r2, sl
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	462b      	mov	r3, r5
 8008738:	ec51 0b18 	vmov	r0, r1, d8
 800873c:	f7f7 fd9e 	bl	800027c <__adddf3>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	2000      	movs	r0, #0
 8008746:	49bd      	ldr	r1, [pc, #756]	; (8008a3c <__ieee754_pow+0x754>)
 8008748:	f7f8 f878 	bl	800083c <__aeabi_ddiv>
 800874c:	ec41 0b19 	vmov	d9, r0, r1
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f7f7 ff46 	bl	80005e8 <__aeabi_dmul>
 800875c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008760:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008764:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008768:	2300      	movs	r3, #0
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008770:	46ab      	mov	fp, r5
 8008772:	106d      	asrs	r5, r5, #1
 8008774:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008778:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800877c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008780:	2200      	movs	r2, #0
 8008782:	4640      	mov	r0, r8
 8008784:	4649      	mov	r1, r9
 8008786:	4614      	mov	r4, r2
 8008788:	461d      	mov	r5, r3
 800878a:	f7f7 ff2d 	bl	80005e8 <__aeabi_dmul>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4630      	mov	r0, r6
 8008794:	4639      	mov	r1, r7
 8008796:	f7f7 fd6f 	bl	8000278 <__aeabi_dsub>
 800879a:	ec53 2b18 	vmov	r2, r3, d8
 800879e:	4606      	mov	r6, r0
 80087a0:	460f      	mov	r7, r1
 80087a2:	4620      	mov	r0, r4
 80087a4:	4629      	mov	r1, r5
 80087a6:	f7f7 fd67 	bl	8000278 <__aeabi_dsub>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4650      	mov	r0, sl
 80087b0:	4659      	mov	r1, fp
 80087b2:	f7f7 fd61 	bl	8000278 <__aeabi_dsub>
 80087b6:	4642      	mov	r2, r8
 80087b8:	464b      	mov	r3, r9
 80087ba:	f7f7 ff15 	bl	80005e8 <__aeabi_dmul>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f7 fd57 	bl	8000278 <__aeabi_dsub>
 80087ca:	ec53 2b19 	vmov	r2, r3, d9
 80087ce:	f7f7 ff0b 	bl	80005e8 <__aeabi_dmul>
 80087d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087d6:	ec41 0b18 	vmov	d8, r0, r1
 80087da:	4610      	mov	r0, r2
 80087dc:	4619      	mov	r1, r3
 80087de:	f7f7 ff03 	bl	80005e8 <__aeabi_dmul>
 80087e2:	a37d      	add	r3, pc, #500	; (adr r3, 80089d8 <__ieee754_pow+0x6f0>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	f7f7 fefc 	bl	80005e8 <__aeabi_dmul>
 80087f0:	a37b      	add	r3, pc, #492	; (adr r3, 80089e0 <__ieee754_pow+0x6f8>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f7f7 fd41 	bl	800027c <__adddf3>
 80087fa:	4622      	mov	r2, r4
 80087fc:	462b      	mov	r3, r5
 80087fe:	f7f7 fef3 	bl	80005e8 <__aeabi_dmul>
 8008802:	a379      	add	r3, pc, #484	; (adr r3, 80089e8 <__ieee754_pow+0x700>)
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f7f7 fd38 	bl	800027c <__adddf3>
 800880c:	4622      	mov	r2, r4
 800880e:	462b      	mov	r3, r5
 8008810:	f7f7 feea 	bl	80005e8 <__aeabi_dmul>
 8008814:	a376      	add	r3, pc, #472	; (adr r3, 80089f0 <__ieee754_pow+0x708>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 fd2f 	bl	800027c <__adddf3>
 800881e:	4622      	mov	r2, r4
 8008820:	462b      	mov	r3, r5
 8008822:	f7f7 fee1 	bl	80005e8 <__aeabi_dmul>
 8008826:	a374      	add	r3, pc, #464	; (adr r3, 80089f8 <__ieee754_pow+0x710>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f7f7 fd26 	bl	800027c <__adddf3>
 8008830:	4622      	mov	r2, r4
 8008832:	462b      	mov	r3, r5
 8008834:	f7f7 fed8 	bl	80005e8 <__aeabi_dmul>
 8008838:	a371      	add	r3, pc, #452	; (adr r3, 8008a00 <__ieee754_pow+0x718>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f7f7 fd1d 	bl	800027c <__adddf3>
 8008842:	4622      	mov	r2, r4
 8008844:	4606      	mov	r6, r0
 8008846:	460f      	mov	r7, r1
 8008848:	462b      	mov	r3, r5
 800884a:	4620      	mov	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	f7f7 fecb 	bl	80005e8 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 fec5 	bl	80005e8 <__aeabi_dmul>
 800885e:	4642      	mov	r2, r8
 8008860:	4604      	mov	r4, r0
 8008862:	460d      	mov	r5, r1
 8008864:	464b      	mov	r3, r9
 8008866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800886a:	f7f7 fd07 	bl	800027c <__adddf3>
 800886e:	ec53 2b18 	vmov	r2, r3, d8
 8008872:	f7f7 feb9 	bl	80005e8 <__aeabi_dmul>
 8008876:	4622      	mov	r2, r4
 8008878:	462b      	mov	r3, r5
 800887a:	f7f7 fcff 	bl	800027c <__adddf3>
 800887e:	4642      	mov	r2, r8
 8008880:	4682      	mov	sl, r0
 8008882:	468b      	mov	fp, r1
 8008884:	464b      	mov	r3, r9
 8008886:	4640      	mov	r0, r8
 8008888:	4649      	mov	r1, r9
 800888a:	f7f7 fead 	bl	80005e8 <__aeabi_dmul>
 800888e:	4b6c      	ldr	r3, [pc, #432]	; (8008a40 <__ieee754_pow+0x758>)
 8008890:	2200      	movs	r2, #0
 8008892:	4606      	mov	r6, r0
 8008894:	460f      	mov	r7, r1
 8008896:	f7f7 fcf1 	bl	800027c <__adddf3>
 800889a:	4652      	mov	r2, sl
 800889c:	465b      	mov	r3, fp
 800889e:	f7f7 fced 	bl	800027c <__adddf3>
 80088a2:	9c04      	ldr	r4, [sp, #16]
 80088a4:	460d      	mov	r5, r1
 80088a6:	4622      	mov	r2, r4
 80088a8:	460b      	mov	r3, r1
 80088aa:	4640      	mov	r0, r8
 80088ac:	4649      	mov	r1, r9
 80088ae:	f7f7 fe9b 	bl	80005e8 <__aeabi_dmul>
 80088b2:	4b63      	ldr	r3, [pc, #396]	; (8008a40 <__ieee754_pow+0x758>)
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	2200      	movs	r2, #0
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f7 fcdb 	bl	8000278 <__aeabi_dsub>
 80088c2:	4632      	mov	r2, r6
 80088c4:	463b      	mov	r3, r7
 80088c6:	f7f7 fcd7 	bl	8000278 <__aeabi_dsub>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4650      	mov	r0, sl
 80088d0:	4659      	mov	r1, fp
 80088d2:	f7f7 fcd1 	bl	8000278 <__aeabi_dsub>
 80088d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088da:	f7f7 fe85 	bl	80005e8 <__aeabi_dmul>
 80088de:	4622      	mov	r2, r4
 80088e0:	4606      	mov	r6, r0
 80088e2:	460f      	mov	r7, r1
 80088e4:	462b      	mov	r3, r5
 80088e6:	ec51 0b18 	vmov	r0, r1, d8
 80088ea:	f7f7 fe7d 	bl	80005e8 <__aeabi_dmul>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4630      	mov	r0, r6
 80088f4:	4639      	mov	r1, r7
 80088f6:	f7f7 fcc1 	bl	800027c <__adddf3>
 80088fa:	4606      	mov	r6, r0
 80088fc:	460f      	mov	r7, r1
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f7 fcb9 	bl	800027c <__adddf3>
 800890a:	9c04      	ldr	r4, [sp, #16]
 800890c:	a33e      	add	r3, pc, #248	; (adr r3, 8008a08 <__ieee754_pow+0x720>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	4620      	mov	r0, r4
 8008914:	460d      	mov	r5, r1
 8008916:	f7f7 fe67 	bl	80005e8 <__aeabi_dmul>
 800891a:	4642      	mov	r2, r8
 800891c:	ec41 0b18 	vmov	d8, r0, r1
 8008920:	464b      	mov	r3, r9
 8008922:	4620      	mov	r0, r4
 8008924:	4629      	mov	r1, r5
 8008926:	f7f7 fca7 	bl	8000278 <__aeabi_dsub>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	f7f7 fca1 	bl	8000278 <__aeabi_dsub>
 8008936:	a336      	add	r3, pc, #216	; (adr r3, 8008a10 <__ieee754_pow+0x728>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f7 fe54 	bl	80005e8 <__aeabi_dmul>
 8008940:	a335      	add	r3, pc, #212	; (adr r3, 8008a18 <__ieee754_pow+0x730>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	4606      	mov	r6, r0
 8008948:	460f      	mov	r7, r1
 800894a:	4620      	mov	r0, r4
 800894c:	4629      	mov	r1, r5
 800894e:	f7f7 fe4b 	bl	80005e8 <__aeabi_dmul>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f7 fc8f 	bl	800027c <__adddf3>
 800895e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008960:	4b38      	ldr	r3, [pc, #224]	; (8008a44 <__ieee754_pow+0x75c>)
 8008962:	4413      	add	r3, r2
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fc88 	bl	800027c <__adddf3>
 800896c:	4682      	mov	sl, r0
 800896e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008970:	468b      	mov	fp, r1
 8008972:	f7f7 fdcf 	bl	8000514 <__aeabi_i2d>
 8008976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008978:	4b33      	ldr	r3, [pc, #204]	; (8008a48 <__ieee754_pow+0x760>)
 800897a:	4413      	add	r3, r2
 800897c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008980:	4606      	mov	r6, r0
 8008982:	460f      	mov	r7, r1
 8008984:	4652      	mov	r2, sl
 8008986:	465b      	mov	r3, fp
 8008988:	ec51 0b18 	vmov	r0, r1, d8
 800898c:	f7f7 fc76 	bl	800027c <__adddf3>
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	f7f7 fc72 	bl	800027c <__adddf3>
 8008998:	4632      	mov	r2, r6
 800899a:	463b      	mov	r3, r7
 800899c:	f7f7 fc6e 	bl	800027c <__adddf3>
 80089a0:	9c04      	ldr	r4, [sp, #16]
 80089a2:	4632      	mov	r2, r6
 80089a4:	463b      	mov	r3, r7
 80089a6:	4620      	mov	r0, r4
 80089a8:	460d      	mov	r5, r1
 80089aa:	f7f7 fc65 	bl	8000278 <__aeabi_dsub>
 80089ae:	4642      	mov	r2, r8
 80089b0:	464b      	mov	r3, r9
 80089b2:	f7f7 fc61 	bl	8000278 <__aeabi_dsub>
 80089b6:	ec53 2b18 	vmov	r2, r3, d8
 80089ba:	f7f7 fc5d 	bl	8000278 <__aeabi_dsub>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4650      	mov	r0, sl
 80089c4:	4659      	mov	r1, fp
 80089c6:	e606      	b.n	80085d6 <__ieee754_pow+0x2ee>
 80089c8:	2401      	movs	r4, #1
 80089ca:	e6a0      	b.n	800870e <__ieee754_pow+0x426>
 80089cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008a20 <__ieee754_pow+0x738>
 80089d0:	e60d      	b.n	80085ee <__ieee754_pow+0x306>
 80089d2:	bf00      	nop
 80089d4:	f3af 8000 	nop.w
 80089d8:	4a454eef 	.word	0x4a454eef
 80089dc:	3fca7e28 	.word	0x3fca7e28
 80089e0:	93c9db65 	.word	0x93c9db65
 80089e4:	3fcd864a 	.word	0x3fcd864a
 80089e8:	a91d4101 	.word	0xa91d4101
 80089ec:	3fd17460 	.word	0x3fd17460
 80089f0:	518f264d 	.word	0x518f264d
 80089f4:	3fd55555 	.word	0x3fd55555
 80089f8:	db6fabff 	.word	0xdb6fabff
 80089fc:	3fdb6db6 	.word	0x3fdb6db6
 8008a00:	33333303 	.word	0x33333303
 8008a04:	3fe33333 	.word	0x3fe33333
 8008a08:	e0000000 	.word	0xe0000000
 8008a0c:	3feec709 	.word	0x3feec709
 8008a10:	dc3a03fd 	.word	0xdc3a03fd
 8008a14:	3feec709 	.word	0x3feec709
 8008a18:	145b01f5 	.word	0x145b01f5
 8008a1c:	be3e2fe0 	.word	0xbe3e2fe0
 8008a20:	00000000 	.word	0x00000000
 8008a24:	3ff00000 	.word	0x3ff00000
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	43400000 	.word	0x43400000
 8008a30:	0003988e 	.word	0x0003988e
 8008a34:	000bb679 	.word	0x000bb679
 8008a38:	0802d8d0 	.word	0x0802d8d0
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	40080000 	.word	0x40080000
 8008a44:	0802d8f0 	.word	0x0802d8f0
 8008a48:	0802d8e0 	.word	0x0802d8e0
 8008a4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008d24 <__ieee754_pow+0xa3c>)
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fc11 	bl	800027c <__adddf3>
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	ec41 0b1a 	vmov	d10, r0, r1
 8008a60:	462b      	mov	r3, r5
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 fc07 	bl	8000278 <__aeabi_dsub>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	ec51 0b1a 	vmov	r0, r1, d10
 8008a72:	f7f8 f849 	bl	8000b08 <__aeabi_dcmpgt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f47f adf8 	bne.w	800866c <__ieee754_pow+0x384>
 8008a7c:	4aa4      	ldr	r2, [pc, #656]	; (8008d10 <__ieee754_pow+0xa28>)
 8008a7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a82:	4293      	cmp	r3, r2
 8008a84:	f340 810b 	ble.w	8008c9e <__ieee754_pow+0x9b6>
 8008a88:	151b      	asrs	r3, r3, #20
 8008a8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008a8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008a92:	fa4a f303 	asr.w	r3, sl, r3
 8008a96:	445b      	add	r3, fp
 8008a98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008a9c:	4e9d      	ldr	r6, [pc, #628]	; (8008d14 <__ieee754_pow+0xa2c>)
 8008a9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008aa2:	4116      	asrs	r6, r2
 8008aa4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	ea23 0106 	bic.w	r1, r3, r6
 8008aae:	f1c2 0214 	rsb	r2, r2, #20
 8008ab2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008ab6:	fa4a fa02 	asr.w	sl, sl, r2
 8008aba:	f1bb 0f00 	cmp.w	fp, #0
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	bfb8      	it	lt
 8008ac8:	f1ca 0a00 	rsblt	sl, sl, #0
 8008acc:	f7f7 fbd4 	bl	8000278 <__aeabi_dsub>
 8008ad0:	ec41 0b19 	vmov	d9, r0, r1
 8008ad4:	4642      	mov	r2, r8
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	ec51 0b19 	vmov	r0, r1, d9
 8008adc:	f7f7 fbce 	bl	800027c <__adddf3>
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	a379      	add	r3, pc, #484	; (adr r3, 8008cc8 <__ieee754_pow+0x9e0>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	4620      	mov	r0, r4
 8008aea:	460d      	mov	r5, r1
 8008aec:	f7f7 fd7c 	bl	80005e8 <__aeabi_dmul>
 8008af0:	ec53 2b19 	vmov	r2, r3, d9
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	4620      	mov	r0, r4
 8008afa:	4629      	mov	r1, r5
 8008afc:	f7f7 fbbc 	bl	8000278 <__aeabi_dsub>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4640      	mov	r0, r8
 8008b06:	4649      	mov	r1, r9
 8008b08:	f7f7 fbb6 	bl	8000278 <__aeabi_dsub>
 8008b0c:	a370      	add	r3, pc, #448	; (adr r3, 8008cd0 <__ieee754_pow+0x9e8>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fd69 	bl	80005e8 <__aeabi_dmul>
 8008b16:	a370      	add	r3, pc, #448	; (adr r3, 8008cd8 <__ieee754_pow+0x9f0>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	4689      	mov	r9, r1
 8008b20:	4620      	mov	r0, r4
 8008b22:	4629      	mov	r1, r5
 8008b24:	f7f7 fd60 	bl	80005e8 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fba4 	bl	800027c <__adddf3>
 8008b34:	4604      	mov	r4, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fb9c 	bl	800027c <__adddf3>
 8008b44:	4632      	mov	r2, r6
 8008b46:	463b      	mov	r3, r7
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	f7f7 fb94 	bl	8000278 <__aeabi_dsub>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4620      	mov	r0, r4
 8008b56:	4629      	mov	r1, r5
 8008b58:	f7f7 fb8e 	bl	8000278 <__aeabi_dsub>
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	464b      	mov	r3, r9
 8008b64:	4640      	mov	r0, r8
 8008b66:	4649      	mov	r1, r9
 8008b68:	f7f7 fd3e 	bl	80005e8 <__aeabi_dmul>
 8008b6c:	a35c      	add	r3, pc, #368	; (adr r3, 8008ce0 <__ieee754_pow+0x9f8>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	4604      	mov	r4, r0
 8008b74:	460d      	mov	r5, r1
 8008b76:	f7f7 fd37 	bl	80005e8 <__aeabi_dmul>
 8008b7a:	a35b      	add	r3, pc, #364	; (adr r3, 8008ce8 <__ieee754_pow+0xa00>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fb7a 	bl	8000278 <__aeabi_dsub>
 8008b84:	4622      	mov	r2, r4
 8008b86:	462b      	mov	r3, r5
 8008b88:	f7f7 fd2e 	bl	80005e8 <__aeabi_dmul>
 8008b8c:	a358      	add	r3, pc, #352	; (adr r3, 8008cf0 <__ieee754_pow+0xa08>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb73 	bl	800027c <__adddf3>
 8008b96:	4622      	mov	r2, r4
 8008b98:	462b      	mov	r3, r5
 8008b9a:	f7f7 fd25 	bl	80005e8 <__aeabi_dmul>
 8008b9e:	a356      	add	r3, pc, #344	; (adr r3, 8008cf8 <__ieee754_pow+0xa10>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fb68 	bl	8000278 <__aeabi_dsub>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	f7f7 fd1c 	bl	80005e8 <__aeabi_dmul>
 8008bb0:	a353      	add	r3, pc, #332	; (adr r3, 8008d00 <__ieee754_pow+0xa18>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fb61 	bl	800027c <__adddf3>
 8008bba:	4622      	mov	r2, r4
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	f7f7 fd13 	bl	80005e8 <__aeabi_dmul>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	4649      	mov	r1, r9
 8008bca:	f7f7 fb55 	bl	8000278 <__aeabi_dsub>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 fd05 	bl	80005e8 <__aeabi_dmul>
 8008bde:	2200      	movs	r2, #0
 8008be0:	ec41 0b19 	vmov	d9, r0, r1
 8008be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 fb44 	bl	8000278 <__aeabi_dsub>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	ec51 0b19 	vmov	r0, r1, d9
 8008bf8:	f7f7 fe20 	bl	800083c <__aeabi_ddiv>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	4604      	mov	r4, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	463b      	mov	r3, r7
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 fcee 	bl	80005e8 <__aeabi_dmul>
 8008c0c:	4632      	mov	r2, r6
 8008c0e:	463b      	mov	r3, r7
 8008c10:	f7f7 fb34 	bl	800027c <__adddf3>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4620      	mov	r0, r4
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f7 fb2c 	bl	8000278 <__aeabi_dsub>
 8008c20:	4642      	mov	r2, r8
 8008c22:	464b      	mov	r3, r9
 8008c24:	f7f7 fb28 	bl	8000278 <__aeabi_dsub>
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	493a      	ldr	r1, [pc, #232]	; (8008d18 <__ieee754_pow+0xa30>)
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f7f7 fb22 	bl	8000278 <__aeabi_dsub>
 8008c34:	e9cd 0100 	strd	r0, r1, [sp]
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c42:	da2f      	bge.n	8008ca4 <__ieee754_pow+0x9bc>
 8008c44:	4650      	mov	r0, sl
 8008c46:	ed9d 0b00 	vldr	d0, [sp]
 8008c4a:	f001 fac1 	bl	800a1d0 <scalbn>
 8008c4e:	ec51 0b10 	vmov	r0, r1, d0
 8008c52:	ec53 2b18 	vmov	r2, r3, d8
 8008c56:	f7ff bbe0 	b.w	800841a <__ieee754_pow+0x132>
 8008c5a:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <__ieee754_pow+0xa34>)
 8008c5c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c60:	429e      	cmp	r6, r3
 8008c62:	f77f af0b 	ble.w	8008a7c <__ieee754_pow+0x794>
 8008c66:	4b2e      	ldr	r3, [pc, #184]	; (8008d20 <__ieee754_pow+0xa38>)
 8008c68:	440b      	add	r3, r1
 8008c6a:	4303      	orrs	r3, r0
 8008c6c:	d00b      	beq.n	8008c86 <__ieee754_pow+0x99e>
 8008c6e:	a326      	add	r3, pc, #152	; (adr r3, 8008d08 <__ieee754_pow+0xa20>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	ec51 0b18 	vmov	r0, r1, d8
 8008c78:	f7f7 fcb6 	bl	80005e8 <__aeabi_dmul>
 8008c7c:	a322      	add	r3, pc, #136	; (adr r3, 8008d08 <__ieee754_pow+0xa20>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7ff bbca 	b.w	800841a <__ieee754_pow+0x132>
 8008c86:	4622      	mov	r2, r4
 8008c88:	462b      	mov	r3, r5
 8008c8a:	f7f7 faf5 	bl	8000278 <__aeabi_dsub>
 8008c8e:	4642      	mov	r2, r8
 8008c90:	464b      	mov	r3, r9
 8008c92:	f7f7 ff2f 	bl	8000af4 <__aeabi_dcmpge>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f43f aef0 	beq.w	8008a7c <__ieee754_pow+0x794>
 8008c9c:	e7e7      	b.n	8008c6e <__ieee754_pow+0x986>
 8008c9e:	f04f 0a00 	mov.w	sl, #0
 8008ca2:	e717      	b.n	8008ad4 <__ieee754_pow+0x7ec>
 8008ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	e7d2      	b.n	8008c52 <__ieee754_pow+0x96a>
 8008cac:	491a      	ldr	r1, [pc, #104]	; (8008d18 <__ieee754_pow+0xa30>)
 8008cae:	2000      	movs	r0, #0
 8008cb0:	f7ff bb9e 	b.w	80083f0 <__ieee754_pow+0x108>
 8008cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb8:	f7ff bb9a 	b.w	80083f0 <__ieee754_pow+0x108>
 8008cbc:	9000      	str	r0, [sp, #0]
 8008cbe:	f7ff bb76 	b.w	80083ae <__ieee754_pow+0xc6>
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	f7ff bb60 	b.w	8008388 <__ieee754_pow+0xa0>
 8008cc8:	00000000 	.word	0x00000000
 8008ccc:	3fe62e43 	.word	0x3fe62e43
 8008cd0:	fefa39ef 	.word	0xfefa39ef
 8008cd4:	3fe62e42 	.word	0x3fe62e42
 8008cd8:	0ca86c39 	.word	0x0ca86c39
 8008cdc:	be205c61 	.word	0xbe205c61
 8008ce0:	72bea4d0 	.word	0x72bea4d0
 8008ce4:	3e663769 	.word	0x3e663769
 8008ce8:	c5d26bf1 	.word	0xc5d26bf1
 8008cec:	3ebbbd41 	.word	0x3ebbbd41
 8008cf0:	af25de2c 	.word	0xaf25de2c
 8008cf4:	3f11566a 	.word	0x3f11566a
 8008cf8:	16bebd93 	.word	0x16bebd93
 8008cfc:	3f66c16c 	.word	0x3f66c16c
 8008d00:	5555553e 	.word	0x5555553e
 8008d04:	3fc55555 	.word	0x3fc55555
 8008d08:	c2f8f359 	.word	0xc2f8f359
 8008d0c:	01a56e1f 	.word	0x01a56e1f
 8008d10:	3fe00000 	.word	0x3fe00000
 8008d14:	000fffff 	.word	0x000fffff
 8008d18:	3ff00000 	.word	0x3ff00000
 8008d1c:	4090cbff 	.word	0x4090cbff
 8008d20:	3f6f3400 	.word	0x3f6f3400
 8008d24:	652b82fe 	.word	0x652b82fe
 8008d28:	3c971547 	.word	0x3c971547
 8008d2c:	00000000 	.word	0x00000000

08008d30 <__ieee754_rem_pio2>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	ed2d 8b02 	vpush	{d8}
 8008d38:	ec55 4b10 	vmov	r4, r5, d0
 8008d3c:	4bca      	ldr	r3, [pc, #808]	; (8009068 <__ieee754_rem_pio2+0x338>)
 8008d3e:	b08b      	sub	sp, #44	; 0x2c
 8008d40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008d44:	4598      	cmp	r8, r3
 8008d46:	4682      	mov	sl, r0
 8008d48:	9502      	str	r5, [sp, #8]
 8008d4a:	dc08      	bgt.n	8008d5e <__ieee754_rem_pio2+0x2e>
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	ed80 0b00 	vstr	d0, [r0]
 8008d54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008d58:	f04f 0b00 	mov.w	fp, #0
 8008d5c:	e028      	b.n	8008db0 <__ieee754_rem_pio2+0x80>
 8008d5e:	4bc3      	ldr	r3, [pc, #780]	; (800906c <__ieee754_rem_pio2+0x33c>)
 8008d60:	4598      	cmp	r8, r3
 8008d62:	dc78      	bgt.n	8008e56 <__ieee754_rem_pio2+0x126>
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	4ec2      	ldr	r6, [pc, #776]	; (8009070 <__ieee754_rem_pio2+0x340>)
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	ee10 0a10 	vmov	r0, s0
 8008d6e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009030 <__ieee754_rem_pio2+0x300>)
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	4629      	mov	r1, r5
 8008d76:	dd39      	ble.n	8008dec <__ieee754_rem_pio2+0xbc>
 8008d78:	f7f7 fa7e 	bl	8000278 <__aeabi_dsub>
 8008d7c:	45b0      	cmp	r8, r6
 8008d7e:	4604      	mov	r4, r0
 8008d80:	460d      	mov	r5, r1
 8008d82:	d01b      	beq.n	8008dbc <__ieee754_rem_pio2+0x8c>
 8008d84:	a3ac      	add	r3, pc, #688	; (adr r3, 8009038 <__ieee754_rem_pio2+0x308>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	f7f7 fa75 	bl	8000278 <__aeabi_dsub>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	e9ca 2300 	strd	r2, r3, [sl]
 8008d96:	4620      	mov	r0, r4
 8008d98:	4629      	mov	r1, r5
 8008d9a:	f7f7 fa6d 	bl	8000278 <__aeabi_dsub>
 8008d9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009038 <__ieee754_rem_pio2+0x308>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fa68 	bl	8000278 <__aeabi_dsub>
 8008da8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008dac:	f04f 0b01 	mov.w	fp, #1
 8008db0:	4658      	mov	r0, fp
 8008db2:	b00b      	add	sp, #44	; 0x2c
 8008db4:	ecbd 8b02 	vpop	{d8}
 8008db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbc:	a3a0      	add	r3, pc, #640	; (adr r3, 8009040 <__ieee754_rem_pio2+0x310>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fa59 	bl	8000278 <__aeabi_dsub>
 8008dc6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009048 <__ieee754_rem_pio2+0x318>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	4604      	mov	r4, r0
 8008dce:	460d      	mov	r5, r1
 8008dd0:	f7f7 fa52 	bl	8000278 <__aeabi_dsub>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	e9ca 2300 	strd	r2, r3, [sl]
 8008ddc:	4620      	mov	r0, r4
 8008dde:	4629      	mov	r1, r5
 8008de0:	f7f7 fa4a 	bl	8000278 <__aeabi_dsub>
 8008de4:	a398      	add	r3, pc, #608	; (adr r3, 8009048 <__ieee754_rem_pio2+0x318>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	e7db      	b.n	8008da4 <__ieee754_rem_pio2+0x74>
 8008dec:	f7f7 fa46 	bl	800027c <__adddf3>
 8008df0:	45b0      	cmp	r8, r6
 8008df2:	4604      	mov	r4, r0
 8008df4:	460d      	mov	r5, r1
 8008df6:	d016      	beq.n	8008e26 <__ieee754_rem_pio2+0xf6>
 8008df8:	a38f      	add	r3, pc, #572	; (adr r3, 8009038 <__ieee754_rem_pio2+0x308>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fa3d 	bl	800027c <__adddf3>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	e9ca 2300 	strd	r2, r3, [sl]
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fa33 	bl	8000278 <__aeabi_dsub>
 8008e12:	a389      	add	r3, pc, #548	; (adr r3, 8009038 <__ieee754_rem_pio2+0x308>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 fa30 	bl	800027c <__adddf3>
 8008e1c:	f04f 3bff 	mov.w	fp, #4294967295
 8008e20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e24:	e7c4      	b.n	8008db0 <__ieee754_rem_pio2+0x80>
 8008e26:	a386      	add	r3, pc, #536	; (adr r3, 8009040 <__ieee754_rem_pio2+0x310>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	f7f7 fa26 	bl	800027c <__adddf3>
 8008e30:	a385      	add	r3, pc, #532	; (adr r3, 8009048 <__ieee754_rem_pio2+0x318>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	f7f7 fa1f 	bl	800027c <__adddf3>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	e9ca 2300 	strd	r2, r3, [sl]
 8008e46:	4620      	mov	r0, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7f7 fa15 	bl	8000278 <__aeabi_dsub>
 8008e4e:	a37e      	add	r3, pc, #504	; (adr r3, 8009048 <__ieee754_rem_pio2+0x318>)
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	e7e0      	b.n	8008e18 <__ieee754_rem_pio2+0xe8>
 8008e56:	4b87      	ldr	r3, [pc, #540]	; (8009074 <__ieee754_rem_pio2+0x344>)
 8008e58:	4598      	cmp	r8, r3
 8008e5a:	f300 80d9 	bgt.w	8009010 <__ieee754_rem_pio2+0x2e0>
 8008e5e:	f001 f88f 	bl	8009f80 <fabs>
 8008e62:	ec55 4b10 	vmov	r4, r5, d0
 8008e66:	ee10 0a10 	vmov	r0, s0
 8008e6a:	a379      	add	r3, pc, #484	; (adr r3, 8009050 <__ieee754_rem_pio2+0x320>)
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	4629      	mov	r1, r5
 8008e72:	f7f7 fbb9 	bl	80005e8 <__aeabi_dmul>
 8008e76:	4b80      	ldr	r3, [pc, #512]	; (8009078 <__ieee754_rem_pio2+0x348>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f7f7 f9ff 	bl	800027c <__adddf3>
 8008e7e:	f7f7 fe63 	bl	8000b48 <__aeabi_d2iz>
 8008e82:	4683      	mov	fp, r0
 8008e84:	f7f7 fb46 	bl	8000514 <__aeabi_i2d>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	ec43 2b18 	vmov	d8, r2, r3
 8008e90:	a367      	add	r3, pc, #412	; (adr r3, 8009030 <__ieee754_rem_pio2+0x300>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fba7 	bl	80005e8 <__aeabi_dmul>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 f9e9 	bl	8000278 <__aeabi_dsub>
 8008ea6:	a364      	add	r3, pc, #400	; (adr r3, 8009038 <__ieee754_rem_pio2+0x308>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	ec51 0b18 	vmov	r0, r1, d8
 8008eb4:	f7f7 fb98 	bl	80005e8 <__aeabi_dmul>
 8008eb8:	f1bb 0f1f 	cmp.w	fp, #31
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	460d      	mov	r5, r1
 8008ec0:	dc0d      	bgt.n	8008ede <__ieee754_rem_pio2+0x1ae>
 8008ec2:	4b6e      	ldr	r3, [pc, #440]	; (800907c <__ieee754_rem_pio2+0x34c>)
 8008ec4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ecc:	4543      	cmp	r3, r8
 8008ece:	d006      	beq.n	8008ede <__ieee754_rem_pio2+0x1ae>
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	f7f7 f9ce 	bl	8000278 <__aeabi_dsub>
 8008edc:	e00f      	b.n	8008efe <__ieee754_rem_pio2+0x1ce>
 8008ede:	462b      	mov	r3, r5
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f9c7 	bl	8000278 <__aeabi_dsub>
 8008eea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008eee:	9303      	str	r3, [sp, #12]
 8008ef0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ef4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008ef8:	f1b8 0f10 	cmp.w	r8, #16
 8008efc:	dc02      	bgt.n	8008f04 <__ieee754_rem_pio2+0x1d4>
 8008efe:	e9ca 0100 	strd	r0, r1, [sl]
 8008f02:	e039      	b.n	8008f78 <__ieee754_rem_pio2+0x248>
 8008f04:	a34e      	add	r3, pc, #312	; (adr r3, 8009040 <__ieee754_rem_pio2+0x310>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	ec51 0b18 	vmov	r0, r1, d8
 8008f0e:	f7f7 fb6b 	bl	80005e8 <__aeabi_dmul>
 8008f12:	4604      	mov	r4, r0
 8008f14:	460d      	mov	r5, r1
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	f7f7 f9ab 	bl	8000278 <__aeabi_dsub>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4680      	mov	r8, r0
 8008f28:	4689      	mov	r9, r1
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 f9a3 	bl	8000278 <__aeabi_dsub>
 8008f32:	4622      	mov	r2, r4
 8008f34:	462b      	mov	r3, r5
 8008f36:	f7f7 f99f 	bl	8000278 <__aeabi_dsub>
 8008f3a:	a343      	add	r3, pc, #268	; (adr r3, 8009048 <__ieee754_rem_pio2+0x318>)
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	ec51 0b18 	vmov	r0, r1, d8
 8008f48:	f7f7 fb4e 	bl	80005e8 <__aeabi_dmul>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	462b      	mov	r3, r5
 8008f50:	f7f7 f992 	bl	8000278 <__aeabi_dsub>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4604      	mov	r4, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	4649      	mov	r1, r9
 8008f60:	f7f7 f98a 	bl	8000278 <__aeabi_dsub>
 8008f64:	9a03      	ldr	r2, [sp, #12]
 8008f66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	2b31      	cmp	r3, #49	; 0x31
 8008f6e:	dc24      	bgt.n	8008fba <__ieee754_rem_pio2+0x28a>
 8008f70:	e9ca 0100 	strd	r0, r1, [sl]
 8008f74:	4646      	mov	r6, r8
 8008f76:	464f      	mov	r7, r9
 8008f78:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4642      	mov	r2, r8
 8008f80:	464b      	mov	r3, r9
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 f978 	bl	8000278 <__aeabi_dsub>
 8008f88:	462b      	mov	r3, r5
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	f7f7 f974 	bl	8000278 <__aeabi_dsub>
 8008f90:	9b02      	ldr	r3, [sp, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f98:	f6bf af0a 	bge.w	8008db0 <__ieee754_rem_pio2+0x80>
 8008f9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008fa0:	f8ca 3004 	str.w	r3, [sl, #4]
 8008fa4:	f8ca 8000 	str.w	r8, [sl]
 8008fa8:	f8ca 0008 	str.w	r0, [sl, #8]
 8008fac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fb0:	f8ca 300c 	str.w	r3, [sl, #12]
 8008fb4:	f1cb 0b00 	rsb	fp, fp, #0
 8008fb8:	e6fa      	b.n	8008db0 <__ieee754_rem_pio2+0x80>
 8008fba:	a327      	add	r3, pc, #156	; (adr r3, 8009058 <__ieee754_rem_pio2+0x328>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	ec51 0b18 	vmov	r0, r1, d8
 8008fc4:	f7f7 fb10 	bl	80005e8 <__aeabi_dmul>
 8008fc8:	4604      	mov	r4, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	f7f7 f950 	bl	8000278 <__aeabi_dsub>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4606      	mov	r6, r0
 8008fde:	460f      	mov	r7, r1
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	f7f7 f948 	bl	8000278 <__aeabi_dsub>
 8008fe8:	4622      	mov	r2, r4
 8008fea:	462b      	mov	r3, r5
 8008fec:	f7f7 f944 	bl	8000278 <__aeabi_dsub>
 8008ff0:	a31b      	add	r3, pc, #108	; (adr r3, 8009060 <__ieee754_rem_pio2+0x330>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	ec51 0b18 	vmov	r0, r1, d8
 8008ffe:	f7f7 faf3 	bl	80005e8 <__aeabi_dmul>
 8009002:	4622      	mov	r2, r4
 8009004:	462b      	mov	r3, r5
 8009006:	f7f7 f937 	bl	8000278 <__aeabi_dsub>
 800900a:	4604      	mov	r4, r0
 800900c:	460d      	mov	r5, r1
 800900e:	e75f      	b.n	8008ed0 <__ieee754_rem_pio2+0x1a0>
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <__ieee754_rem_pio2+0x350>)
 8009012:	4598      	cmp	r8, r3
 8009014:	dd36      	ble.n	8009084 <__ieee754_rem_pio2+0x354>
 8009016:	ee10 2a10 	vmov	r2, s0
 800901a:	462b      	mov	r3, r5
 800901c:	4620      	mov	r0, r4
 800901e:	4629      	mov	r1, r5
 8009020:	f7f7 f92a 	bl	8000278 <__aeabi_dsub>
 8009024:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009028:	e9ca 0100 	strd	r0, r1, [sl]
 800902c:	e694      	b.n	8008d58 <__ieee754_rem_pio2+0x28>
 800902e:	bf00      	nop
 8009030:	54400000 	.word	0x54400000
 8009034:	3ff921fb 	.word	0x3ff921fb
 8009038:	1a626331 	.word	0x1a626331
 800903c:	3dd0b461 	.word	0x3dd0b461
 8009040:	1a600000 	.word	0x1a600000
 8009044:	3dd0b461 	.word	0x3dd0b461
 8009048:	2e037073 	.word	0x2e037073
 800904c:	3ba3198a 	.word	0x3ba3198a
 8009050:	6dc9c883 	.word	0x6dc9c883
 8009054:	3fe45f30 	.word	0x3fe45f30
 8009058:	2e000000 	.word	0x2e000000
 800905c:	3ba3198a 	.word	0x3ba3198a
 8009060:	252049c1 	.word	0x252049c1
 8009064:	397b839a 	.word	0x397b839a
 8009068:	3fe921fb 	.word	0x3fe921fb
 800906c:	4002d97b 	.word	0x4002d97b
 8009070:	3ff921fb 	.word	0x3ff921fb
 8009074:	413921fb 	.word	0x413921fb
 8009078:	3fe00000 	.word	0x3fe00000
 800907c:	0802d900 	.word	0x0802d900
 8009080:	7fefffff 	.word	0x7fefffff
 8009084:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009088:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800908c:	ee10 0a10 	vmov	r0, s0
 8009090:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009094:	ee10 6a10 	vmov	r6, s0
 8009098:	460f      	mov	r7, r1
 800909a:	f7f7 fd55 	bl	8000b48 <__aeabi_d2iz>
 800909e:	f7f7 fa39 	bl	8000514 <__aeabi_i2d>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090ae:	f7f7 f8e3 	bl	8000278 <__aeabi_dsub>
 80090b2:	4b22      	ldr	r3, [pc, #136]	; (800913c <__ieee754_rem_pio2+0x40c>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	f7f7 fa97 	bl	80005e8 <__aeabi_dmul>
 80090ba:	460f      	mov	r7, r1
 80090bc:	4606      	mov	r6, r0
 80090be:	f7f7 fd43 	bl	8000b48 <__aeabi_d2iz>
 80090c2:	f7f7 fa27 	bl	8000514 <__aeabi_i2d>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80090d2:	f7f7 f8d1 	bl	8000278 <__aeabi_dsub>
 80090d6:	4b19      	ldr	r3, [pc, #100]	; (800913c <__ieee754_rem_pio2+0x40c>)
 80090d8:	2200      	movs	r2, #0
 80090da:	f7f7 fa85 	bl	80005e8 <__aeabi_dmul>
 80090de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80090e2:	ad04      	add	r5, sp, #16
 80090e4:	f04f 0803 	mov.w	r8, #3
 80090e8:	46a9      	mov	r9, r5
 80090ea:	2600      	movs	r6, #0
 80090ec:	2700      	movs	r7, #0
 80090ee:	4632      	mov	r2, r6
 80090f0:	463b      	mov	r3, r7
 80090f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80090f6:	46c3      	mov	fp, r8
 80090f8:	3d08      	subs	r5, #8
 80090fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80090fe:	f7f7 fcdb 	bl	8000ab8 <__aeabi_dcmpeq>
 8009102:	2800      	cmp	r0, #0
 8009104:	d1f3      	bne.n	80090ee <__ieee754_rem_pio2+0x3be>
 8009106:	4b0e      	ldr	r3, [pc, #56]	; (8009140 <__ieee754_rem_pio2+0x410>)
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	2302      	movs	r3, #2
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4622      	mov	r2, r4
 8009110:	465b      	mov	r3, fp
 8009112:	4651      	mov	r1, sl
 8009114:	4648      	mov	r0, r9
 8009116:	f000 f993 	bl	8009440 <__kernel_rem_pio2>
 800911a:	9b02      	ldr	r3, [sp, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	4683      	mov	fp, r0
 8009120:	f6bf ae46 	bge.w	8008db0 <__ieee754_rem_pio2+0x80>
 8009124:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800912c:	f8ca 3004 	str.w	r3, [sl, #4]
 8009130:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009134:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009138:	e73a      	b.n	8008fb0 <__ieee754_rem_pio2+0x280>
 800913a:	bf00      	nop
 800913c:	41700000 	.word	0x41700000
 8009140:	0802d980 	.word	0x0802d980

08009144 <__ieee754_sqrt>:
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	ec55 4b10 	vmov	r4, r5, d0
 800914c:	4e56      	ldr	r6, [pc, #344]	; (80092a8 <__ieee754_sqrt+0x164>)
 800914e:	43ae      	bics	r6, r5
 8009150:	ee10 0a10 	vmov	r0, s0
 8009154:	ee10 3a10 	vmov	r3, s0
 8009158:	4629      	mov	r1, r5
 800915a:	462a      	mov	r2, r5
 800915c:	d110      	bne.n	8009180 <__ieee754_sqrt+0x3c>
 800915e:	ee10 2a10 	vmov	r2, s0
 8009162:	462b      	mov	r3, r5
 8009164:	f7f7 fa40 	bl	80005e8 <__aeabi_dmul>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4620      	mov	r0, r4
 800916e:	4629      	mov	r1, r5
 8009170:	f7f7 f884 	bl	800027c <__adddf3>
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	ec45 4b10 	vmov	d0, r4, r5
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	2d00      	cmp	r5, #0
 8009182:	dc10      	bgt.n	80091a6 <__ieee754_sqrt+0x62>
 8009184:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009188:	4330      	orrs	r0, r6
 800918a:	d0f5      	beq.n	8009178 <__ieee754_sqrt+0x34>
 800918c:	b15d      	cbz	r5, 80091a6 <__ieee754_sqrt+0x62>
 800918e:	ee10 2a10 	vmov	r2, s0
 8009192:	462b      	mov	r3, r5
 8009194:	ee10 0a10 	vmov	r0, s0
 8009198:	f7f7 f86e 	bl	8000278 <__aeabi_dsub>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	f7f7 fb4c 	bl	800083c <__aeabi_ddiv>
 80091a4:	e7e6      	b.n	8009174 <__ieee754_sqrt+0x30>
 80091a6:	1509      	asrs	r1, r1, #20
 80091a8:	d076      	beq.n	8009298 <__ieee754_sqrt+0x154>
 80091aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80091ae:	07ce      	lsls	r6, r1, #31
 80091b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80091b4:	bf5e      	ittt	pl
 80091b6:	0fda      	lsrpl	r2, r3, #31
 80091b8:	005b      	lslpl	r3, r3, #1
 80091ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80091be:	0fda      	lsrs	r2, r3, #31
 80091c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80091c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80091c8:	2000      	movs	r0, #0
 80091ca:	106d      	asrs	r5, r5, #1
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	f04f 0e16 	mov.w	lr, #22
 80091d2:	4684      	mov	ip, r0
 80091d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091d8:	eb0c 0401 	add.w	r4, ip, r1
 80091dc:	4294      	cmp	r4, r2
 80091de:	bfde      	ittt	le
 80091e0:	1b12      	suble	r2, r2, r4
 80091e2:	eb04 0c01 	addle.w	ip, r4, r1
 80091e6:	1840      	addle	r0, r0, r1
 80091e8:	0052      	lsls	r2, r2, #1
 80091ea:	f1be 0e01 	subs.w	lr, lr, #1
 80091ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80091f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80091f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091fa:	d1ed      	bne.n	80091d8 <__ieee754_sqrt+0x94>
 80091fc:	4671      	mov	r1, lr
 80091fe:	2720      	movs	r7, #32
 8009200:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009204:	4562      	cmp	r2, ip
 8009206:	eb04 060e 	add.w	r6, r4, lr
 800920a:	dc02      	bgt.n	8009212 <__ieee754_sqrt+0xce>
 800920c:	d113      	bne.n	8009236 <__ieee754_sqrt+0xf2>
 800920e:	429e      	cmp	r6, r3
 8009210:	d811      	bhi.n	8009236 <__ieee754_sqrt+0xf2>
 8009212:	2e00      	cmp	r6, #0
 8009214:	eb06 0e04 	add.w	lr, r6, r4
 8009218:	da43      	bge.n	80092a2 <__ieee754_sqrt+0x15e>
 800921a:	f1be 0f00 	cmp.w	lr, #0
 800921e:	db40      	blt.n	80092a2 <__ieee754_sqrt+0x15e>
 8009220:	f10c 0801 	add.w	r8, ip, #1
 8009224:	eba2 020c 	sub.w	r2, r2, ip
 8009228:	429e      	cmp	r6, r3
 800922a:	bf88      	it	hi
 800922c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009230:	1b9b      	subs	r3, r3, r6
 8009232:	4421      	add	r1, r4
 8009234:	46c4      	mov	ip, r8
 8009236:	0052      	lsls	r2, r2, #1
 8009238:	3f01      	subs	r7, #1
 800923a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800923e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009242:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009246:	d1dd      	bne.n	8009204 <__ieee754_sqrt+0xc0>
 8009248:	4313      	orrs	r3, r2
 800924a:	d006      	beq.n	800925a <__ieee754_sqrt+0x116>
 800924c:	1c4c      	adds	r4, r1, #1
 800924e:	bf13      	iteet	ne
 8009250:	3101      	addne	r1, #1
 8009252:	3001      	addeq	r0, #1
 8009254:	4639      	moveq	r1, r7
 8009256:	f021 0101 	bicne.w	r1, r1, #1
 800925a:	1043      	asrs	r3, r0, #1
 800925c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009260:	0849      	lsrs	r1, r1, #1
 8009262:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009266:	07c2      	lsls	r2, r0, #31
 8009268:	bf48      	it	mi
 800926a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800926e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009272:	460c      	mov	r4, r1
 8009274:	463d      	mov	r5, r7
 8009276:	e77f      	b.n	8009178 <__ieee754_sqrt+0x34>
 8009278:	0ada      	lsrs	r2, r3, #11
 800927a:	3815      	subs	r0, #21
 800927c:	055b      	lsls	r3, r3, #21
 800927e:	2a00      	cmp	r2, #0
 8009280:	d0fa      	beq.n	8009278 <__ieee754_sqrt+0x134>
 8009282:	02d7      	lsls	r7, r2, #11
 8009284:	d50a      	bpl.n	800929c <__ieee754_sqrt+0x158>
 8009286:	f1c1 0420 	rsb	r4, r1, #32
 800928a:	fa23 f404 	lsr.w	r4, r3, r4
 800928e:	1e4d      	subs	r5, r1, #1
 8009290:	408b      	lsls	r3, r1
 8009292:	4322      	orrs	r2, r4
 8009294:	1b41      	subs	r1, r0, r5
 8009296:	e788      	b.n	80091aa <__ieee754_sqrt+0x66>
 8009298:	4608      	mov	r0, r1
 800929a:	e7f0      	b.n	800927e <__ieee754_sqrt+0x13a>
 800929c:	0052      	lsls	r2, r2, #1
 800929e:	3101      	adds	r1, #1
 80092a0:	e7ef      	b.n	8009282 <__ieee754_sqrt+0x13e>
 80092a2:	46e0      	mov	r8, ip
 80092a4:	e7be      	b.n	8009224 <__ieee754_sqrt+0xe0>
 80092a6:	bf00      	nop
 80092a8:	7ff00000 	.word	0x7ff00000
 80092ac:	00000000 	.word	0x00000000

080092b0 <__kernel_cos>:
 80092b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	ec57 6b10 	vmov	r6, r7, d0
 80092b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80092bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80092c0:	ed8d 1b00 	vstr	d1, [sp]
 80092c4:	da07      	bge.n	80092d6 <__kernel_cos+0x26>
 80092c6:	ee10 0a10 	vmov	r0, s0
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 fc3c 	bl	8000b48 <__aeabi_d2iz>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f000 8088 	beq.w	80093e6 <__kernel_cos+0x136>
 80092d6:	4632      	mov	r2, r6
 80092d8:	463b      	mov	r3, r7
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 f983 	bl	80005e8 <__aeabi_dmul>
 80092e2:	4b51      	ldr	r3, [pc, #324]	; (8009428 <__kernel_cos+0x178>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	460d      	mov	r5, r1
 80092ea:	f7f7 f97d 	bl	80005e8 <__aeabi_dmul>
 80092ee:	a340      	add	r3, pc, #256	; (adr r3, 80093f0 <__kernel_cos+0x140>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	4682      	mov	sl, r0
 80092f6:	468b      	mov	fp, r1
 80092f8:	4620      	mov	r0, r4
 80092fa:	4629      	mov	r1, r5
 80092fc:	f7f7 f974 	bl	80005e8 <__aeabi_dmul>
 8009300:	a33d      	add	r3, pc, #244	; (adr r3, 80093f8 <__kernel_cos+0x148>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f7f6 ffb9 	bl	800027c <__adddf3>
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	f7f7 f96b 	bl	80005e8 <__aeabi_dmul>
 8009312:	a33b      	add	r3, pc, #236	; (adr r3, 8009400 <__kernel_cos+0x150>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f6 ffae 	bl	8000278 <__aeabi_dsub>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	f7f7 f962 	bl	80005e8 <__aeabi_dmul>
 8009324:	a338      	add	r3, pc, #224	; (adr r3, 8009408 <__kernel_cos+0x158>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffa7 	bl	800027c <__adddf3>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f7 f959 	bl	80005e8 <__aeabi_dmul>
 8009336:	a336      	add	r3, pc, #216	; (adr r3, 8009410 <__kernel_cos+0x160>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f6 ff9c 	bl	8000278 <__aeabi_dsub>
 8009340:	4622      	mov	r2, r4
 8009342:	462b      	mov	r3, r5
 8009344:	f7f7 f950 	bl	80005e8 <__aeabi_dmul>
 8009348:	a333      	add	r3, pc, #204	; (adr r3, 8009418 <__kernel_cos+0x168>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f6 ff95 	bl	800027c <__adddf3>
 8009352:	4622      	mov	r2, r4
 8009354:	462b      	mov	r3, r5
 8009356:	f7f7 f947 	bl	80005e8 <__aeabi_dmul>
 800935a:	4622      	mov	r2, r4
 800935c:	462b      	mov	r3, r5
 800935e:	f7f7 f943 	bl	80005e8 <__aeabi_dmul>
 8009362:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009366:	4604      	mov	r4, r0
 8009368:	460d      	mov	r5, r1
 800936a:	4630      	mov	r0, r6
 800936c:	4639      	mov	r1, r7
 800936e:	f7f7 f93b 	bl	80005e8 <__aeabi_dmul>
 8009372:	460b      	mov	r3, r1
 8009374:	4602      	mov	r2, r0
 8009376:	4629      	mov	r1, r5
 8009378:	4620      	mov	r0, r4
 800937a:	f7f6 ff7d 	bl	8000278 <__aeabi_dsub>
 800937e:	4b2b      	ldr	r3, [pc, #172]	; (800942c <__kernel_cos+0x17c>)
 8009380:	4598      	cmp	r8, r3
 8009382:	4606      	mov	r6, r0
 8009384:	460f      	mov	r7, r1
 8009386:	dc10      	bgt.n	80093aa <__kernel_cos+0xfa>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4650      	mov	r0, sl
 800938e:	4659      	mov	r1, fp
 8009390:	f7f6 ff72 	bl	8000278 <__aeabi_dsub>
 8009394:	460b      	mov	r3, r1
 8009396:	4926      	ldr	r1, [pc, #152]	; (8009430 <__kernel_cos+0x180>)
 8009398:	4602      	mov	r2, r0
 800939a:	2000      	movs	r0, #0
 800939c:	f7f6 ff6c 	bl	8000278 <__aeabi_dsub>
 80093a0:	ec41 0b10 	vmov	d0, r0, r1
 80093a4:	b003      	add	sp, #12
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	4b22      	ldr	r3, [pc, #136]	; (8009434 <__kernel_cos+0x184>)
 80093ac:	4920      	ldr	r1, [pc, #128]	; (8009430 <__kernel_cos+0x180>)
 80093ae:	4598      	cmp	r8, r3
 80093b0:	bfcc      	ite	gt
 80093b2:	4d21      	ldrgt	r5, [pc, #132]	; (8009438 <__kernel_cos+0x188>)
 80093b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80093b8:	2400      	movs	r4, #0
 80093ba:	4622      	mov	r2, r4
 80093bc:	462b      	mov	r3, r5
 80093be:	2000      	movs	r0, #0
 80093c0:	f7f6 ff5a 	bl	8000278 <__aeabi_dsub>
 80093c4:	4622      	mov	r2, r4
 80093c6:	4680      	mov	r8, r0
 80093c8:	4689      	mov	r9, r1
 80093ca:	462b      	mov	r3, r5
 80093cc:	4650      	mov	r0, sl
 80093ce:	4659      	mov	r1, fp
 80093d0:	f7f6 ff52 	bl	8000278 <__aeabi_dsub>
 80093d4:	4632      	mov	r2, r6
 80093d6:	463b      	mov	r3, r7
 80093d8:	f7f6 ff4e 	bl	8000278 <__aeabi_dsub>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	e7da      	b.n	800939c <__kernel_cos+0xec>
 80093e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009420 <__kernel_cos+0x170>
 80093ea:	e7db      	b.n	80093a4 <__kernel_cos+0xf4>
 80093ec:	f3af 8000 	nop.w
 80093f0:	be8838d4 	.word	0xbe8838d4
 80093f4:	bda8fae9 	.word	0xbda8fae9
 80093f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80093fc:	3e21ee9e 	.word	0x3e21ee9e
 8009400:	809c52ad 	.word	0x809c52ad
 8009404:	3e927e4f 	.word	0x3e927e4f
 8009408:	19cb1590 	.word	0x19cb1590
 800940c:	3efa01a0 	.word	0x3efa01a0
 8009410:	16c15177 	.word	0x16c15177
 8009414:	3f56c16c 	.word	0x3f56c16c
 8009418:	5555554c 	.word	0x5555554c
 800941c:	3fa55555 	.word	0x3fa55555
 8009420:	00000000 	.word	0x00000000
 8009424:	3ff00000 	.word	0x3ff00000
 8009428:	3fe00000 	.word	0x3fe00000
 800942c:	3fd33332 	.word	0x3fd33332
 8009430:	3ff00000 	.word	0x3ff00000
 8009434:	3fe90000 	.word	0x3fe90000
 8009438:	3fd20000 	.word	0x3fd20000
 800943c:	00000000 	.word	0x00000000

08009440 <__kernel_rem_pio2>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	ed2d 8b02 	vpush	{d8}
 8009448:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800944c:	f112 0f14 	cmn.w	r2, #20
 8009450:	9308      	str	r3, [sp, #32]
 8009452:	9101      	str	r1, [sp, #4]
 8009454:	4bc6      	ldr	r3, [pc, #792]	; (8009770 <__kernel_rem_pio2+0x330>)
 8009456:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009458:	9009      	str	r0, [sp, #36]	; 0x24
 800945a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800945e:	9304      	str	r3, [sp, #16]
 8009460:	9b08      	ldr	r3, [sp, #32]
 8009462:	f103 33ff 	add.w	r3, r3, #4294967295
 8009466:	bfa8      	it	ge
 8009468:	1ed4      	subge	r4, r2, #3
 800946a:	9306      	str	r3, [sp, #24]
 800946c:	bfb2      	itee	lt
 800946e:	2400      	movlt	r4, #0
 8009470:	2318      	movge	r3, #24
 8009472:	fb94 f4f3 	sdivge	r4, r4, r3
 8009476:	f06f 0317 	mvn.w	r3, #23
 800947a:	fb04 3303 	mla	r3, r4, r3, r3
 800947e:	eb03 0a02 	add.w	sl, r3, r2
 8009482:	9b04      	ldr	r3, [sp, #16]
 8009484:	9a06      	ldr	r2, [sp, #24]
 8009486:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009760 <__kernel_rem_pio2+0x320>
 800948a:	eb03 0802 	add.w	r8, r3, r2
 800948e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009490:	1aa7      	subs	r7, r4, r2
 8009492:	ae20      	add	r6, sp, #128	; 0x80
 8009494:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009498:	2500      	movs	r5, #0
 800949a:	4545      	cmp	r5, r8
 800949c:	dd18      	ble.n	80094d0 <__kernel_rem_pio2+0x90>
 800949e:	9b08      	ldr	r3, [sp, #32]
 80094a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80094a4:	aa20      	add	r2, sp, #128	; 0x80
 80094a6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009760 <__kernel_rem_pio2+0x320>
 80094aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80094ae:	f1c3 0301 	rsb	r3, r3, #1
 80094b2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80094b6:	9307      	str	r3, [sp, #28]
 80094b8:	9b07      	ldr	r3, [sp, #28]
 80094ba:	9a04      	ldr	r2, [sp, #16]
 80094bc:	4443      	add	r3, r8
 80094be:	429a      	cmp	r2, r3
 80094c0:	db2f      	blt.n	8009522 <__kernel_rem_pio2+0xe2>
 80094c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80094c6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80094ca:	462f      	mov	r7, r5
 80094cc:	2600      	movs	r6, #0
 80094ce:	e01b      	b.n	8009508 <__kernel_rem_pio2+0xc8>
 80094d0:	42ef      	cmn	r7, r5
 80094d2:	d407      	bmi.n	80094e4 <__kernel_rem_pio2+0xa4>
 80094d4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80094d8:	f7f7 f81c 	bl	8000514 <__aeabi_i2d>
 80094dc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80094e0:	3501      	adds	r5, #1
 80094e2:	e7da      	b.n	800949a <__kernel_rem_pio2+0x5a>
 80094e4:	ec51 0b18 	vmov	r0, r1, d8
 80094e8:	e7f8      	b.n	80094dc <__kernel_rem_pio2+0x9c>
 80094ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ee:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80094f2:	f7f7 f879 	bl	80005e8 <__aeabi_dmul>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094fe:	f7f6 febd 	bl	800027c <__adddf3>
 8009502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009506:	3601      	adds	r6, #1
 8009508:	9b06      	ldr	r3, [sp, #24]
 800950a:	429e      	cmp	r6, r3
 800950c:	f1a7 0708 	sub.w	r7, r7, #8
 8009510:	ddeb      	ble.n	80094ea <__kernel_rem_pio2+0xaa>
 8009512:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009516:	3508      	adds	r5, #8
 8009518:	ecab 7b02 	vstmia	fp!, {d7}
 800951c:	f108 0801 	add.w	r8, r8, #1
 8009520:	e7ca      	b.n	80094b8 <__kernel_rem_pio2+0x78>
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	aa0c      	add	r2, sp, #48	; 0x30
 8009526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800952a:	930b      	str	r3, [sp, #44]	; 0x2c
 800952c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800952e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009532:	9c04      	ldr	r4, [sp, #16]
 8009534:	930a      	str	r3, [sp, #40]	; 0x28
 8009536:	ab98      	add	r3, sp, #608	; 0x260
 8009538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800953c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009540:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009544:	f8cd b008 	str.w	fp, [sp, #8]
 8009548:	4625      	mov	r5, r4
 800954a:	2d00      	cmp	r5, #0
 800954c:	dc78      	bgt.n	8009640 <__kernel_rem_pio2+0x200>
 800954e:	ec47 6b10 	vmov	d0, r6, r7
 8009552:	4650      	mov	r0, sl
 8009554:	f000 fe3c 	bl	800a1d0 <scalbn>
 8009558:	ec57 6b10 	vmov	r6, r7, d0
 800955c:	2200      	movs	r2, #0
 800955e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009562:	ee10 0a10 	vmov	r0, s0
 8009566:	4639      	mov	r1, r7
 8009568:	f7f7 f83e 	bl	80005e8 <__aeabi_dmul>
 800956c:	ec41 0b10 	vmov	d0, r0, r1
 8009570:	f000 fd1a 	bl	8009fa8 <floor>
 8009574:	4b7f      	ldr	r3, [pc, #508]	; (8009774 <__kernel_rem_pio2+0x334>)
 8009576:	ec51 0b10 	vmov	r0, r1, d0
 800957a:	2200      	movs	r2, #0
 800957c:	f7f7 f834 	bl	80005e8 <__aeabi_dmul>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	f7f6 fe76 	bl	8000278 <__aeabi_dsub>
 800958c:	460f      	mov	r7, r1
 800958e:	4606      	mov	r6, r0
 8009590:	f7f7 fada 	bl	8000b48 <__aeabi_d2iz>
 8009594:	9007      	str	r0, [sp, #28]
 8009596:	f7f6 ffbd 	bl	8000514 <__aeabi_i2d>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4630      	mov	r0, r6
 80095a0:	4639      	mov	r1, r7
 80095a2:	f7f6 fe69 	bl	8000278 <__aeabi_dsub>
 80095a6:	f1ba 0f00 	cmp.w	sl, #0
 80095aa:	4606      	mov	r6, r0
 80095ac:	460f      	mov	r7, r1
 80095ae:	dd70      	ble.n	8009692 <__kernel_rem_pio2+0x252>
 80095b0:	1e62      	subs	r2, r4, #1
 80095b2:	ab0c      	add	r3, sp, #48	; 0x30
 80095b4:	9d07      	ldr	r5, [sp, #28]
 80095b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80095ba:	f1ca 0118 	rsb	r1, sl, #24
 80095be:	fa40 f301 	asr.w	r3, r0, r1
 80095c2:	441d      	add	r5, r3
 80095c4:	408b      	lsls	r3, r1
 80095c6:	1ac0      	subs	r0, r0, r3
 80095c8:	ab0c      	add	r3, sp, #48	; 0x30
 80095ca:	9507      	str	r5, [sp, #28]
 80095cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80095d0:	f1ca 0317 	rsb	r3, sl, #23
 80095d4:	fa40 f303 	asr.w	r3, r0, r3
 80095d8:	9302      	str	r3, [sp, #8]
 80095da:	9b02      	ldr	r3, [sp, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dd66      	ble.n	80096ae <__kernel_rem_pio2+0x26e>
 80095e0:	9b07      	ldr	r3, [sp, #28]
 80095e2:	2200      	movs	r2, #0
 80095e4:	3301      	adds	r3, #1
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	4615      	mov	r5, r2
 80095ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80095ee:	4294      	cmp	r4, r2
 80095f0:	f300 8099 	bgt.w	8009726 <__kernel_rem_pio2+0x2e6>
 80095f4:	f1ba 0f00 	cmp.w	sl, #0
 80095f8:	dd07      	ble.n	800960a <__kernel_rem_pio2+0x1ca>
 80095fa:	f1ba 0f01 	cmp.w	sl, #1
 80095fe:	f000 80a5 	beq.w	800974c <__kernel_rem_pio2+0x30c>
 8009602:	f1ba 0f02 	cmp.w	sl, #2
 8009606:	f000 80c1 	beq.w	800978c <__kernel_rem_pio2+0x34c>
 800960a:	9b02      	ldr	r3, [sp, #8]
 800960c:	2b02      	cmp	r3, #2
 800960e:	d14e      	bne.n	80096ae <__kernel_rem_pio2+0x26e>
 8009610:	4632      	mov	r2, r6
 8009612:	463b      	mov	r3, r7
 8009614:	4958      	ldr	r1, [pc, #352]	; (8009778 <__kernel_rem_pio2+0x338>)
 8009616:	2000      	movs	r0, #0
 8009618:	f7f6 fe2e 	bl	8000278 <__aeabi_dsub>
 800961c:	4606      	mov	r6, r0
 800961e:	460f      	mov	r7, r1
 8009620:	2d00      	cmp	r5, #0
 8009622:	d044      	beq.n	80096ae <__kernel_rem_pio2+0x26e>
 8009624:	4650      	mov	r0, sl
 8009626:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009768 <__kernel_rem_pio2+0x328>
 800962a:	f000 fdd1 	bl	800a1d0 <scalbn>
 800962e:	4630      	mov	r0, r6
 8009630:	4639      	mov	r1, r7
 8009632:	ec53 2b10 	vmov	r2, r3, d0
 8009636:	f7f6 fe1f 	bl	8000278 <__aeabi_dsub>
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	e036      	b.n	80096ae <__kernel_rem_pio2+0x26e>
 8009640:	4b4e      	ldr	r3, [pc, #312]	; (800977c <__kernel_rem_pio2+0x33c>)
 8009642:	2200      	movs	r2, #0
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f6 ffce 	bl	80005e8 <__aeabi_dmul>
 800964c:	f7f7 fa7c 	bl	8000b48 <__aeabi_d2iz>
 8009650:	f7f6 ff60 	bl	8000514 <__aeabi_i2d>
 8009654:	4b4a      	ldr	r3, [pc, #296]	; (8009780 <__kernel_rem_pio2+0x340>)
 8009656:	2200      	movs	r2, #0
 8009658:	4680      	mov	r8, r0
 800965a:	4689      	mov	r9, r1
 800965c:	f7f6 ffc4 	bl	80005e8 <__aeabi_dmul>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f6 fe06 	bl	8000278 <__aeabi_dsub>
 800966c:	f7f7 fa6c 	bl	8000b48 <__aeabi_d2iz>
 8009670:	9b02      	ldr	r3, [sp, #8]
 8009672:	f843 0b04 	str.w	r0, [r3], #4
 8009676:	3d01      	subs	r5, #1
 8009678:	9302      	str	r3, [sp, #8]
 800967a:	ab70      	add	r3, sp, #448	; 0x1c0
 800967c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	4640      	mov	r0, r8
 8009686:	4649      	mov	r1, r9
 8009688:	f7f6 fdf8 	bl	800027c <__adddf3>
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	e75b      	b.n	800954a <__kernel_rem_pio2+0x10a>
 8009692:	d105      	bne.n	80096a0 <__kernel_rem_pio2+0x260>
 8009694:	1e63      	subs	r3, r4, #1
 8009696:	aa0c      	add	r2, sp, #48	; 0x30
 8009698:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800969c:	15c3      	asrs	r3, r0, #23
 800969e:	e79b      	b.n	80095d8 <__kernel_rem_pio2+0x198>
 80096a0:	4b38      	ldr	r3, [pc, #224]	; (8009784 <__kernel_rem_pio2+0x344>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	f7f7 fa26 	bl	8000af4 <__aeabi_dcmpge>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d139      	bne.n	8009720 <__kernel_rem_pio2+0x2e0>
 80096ac:	9002      	str	r0, [sp, #8]
 80096ae:	2200      	movs	r2, #0
 80096b0:	2300      	movs	r3, #0
 80096b2:	4630      	mov	r0, r6
 80096b4:	4639      	mov	r1, r7
 80096b6:	f7f7 f9ff 	bl	8000ab8 <__aeabi_dcmpeq>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	f000 80b4 	beq.w	8009828 <__kernel_rem_pio2+0x3e8>
 80096c0:	f104 3bff 	add.w	fp, r4, #4294967295
 80096c4:	465b      	mov	r3, fp
 80096c6:	2200      	movs	r2, #0
 80096c8:	9904      	ldr	r1, [sp, #16]
 80096ca:	428b      	cmp	r3, r1
 80096cc:	da65      	bge.n	800979a <__kernel_rem_pio2+0x35a>
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	d07b      	beq.n	80097ca <__kernel_rem_pio2+0x38a>
 80096d2:	ab0c      	add	r3, sp, #48	; 0x30
 80096d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80096d8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80a0 	beq.w	8009822 <__kernel_rem_pio2+0x3e2>
 80096e2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009768 <__kernel_rem_pio2+0x328>
 80096e6:	4650      	mov	r0, sl
 80096e8:	f000 fd72 	bl	800a1d0 <scalbn>
 80096ec:	4f23      	ldr	r7, [pc, #140]	; (800977c <__kernel_rem_pio2+0x33c>)
 80096ee:	ec55 4b10 	vmov	r4, r5, d0
 80096f2:	46d8      	mov	r8, fp
 80096f4:	2600      	movs	r6, #0
 80096f6:	f1b8 0f00 	cmp.w	r8, #0
 80096fa:	f280 80cf 	bge.w	800989c <__kernel_rem_pio2+0x45c>
 80096fe:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009760 <__kernel_rem_pio2+0x320>
 8009702:	465f      	mov	r7, fp
 8009704:	f04f 0800 	mov.w	r8, #0
 8009708:	2f00      	cmp	r7, #0
 800970a:	f2c0 80fd 	blt.w	8009908 <__kernel_rem_pio2+0x4c8>
 800970e:	ab70      	add	r3, sp, #448	; 0x1c0
 8009710:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009788 <__kernel_rem_pio2+0x348>
 8009714:	ec55 4b18 	vmov	r4, r5, d8
 8009718:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800971c:	2600      	movs	r6, #0
 800971e:	e0e5      	b.n	80098ec <__kernel_rem_pio2+0x4ac>
 8009720:	2302      	movs	r3, #2
 8009722:	9302      	str	r3, [sp, #8]
 8009724:	e75c      	b.n	80095e0 <__kernel_rem_pio2+0x1a0>
 8009726:	f8db 3000 	ldr.w	r3, [fp]
 800972a:	b955      	cbnz	r5, 8009742 <__kernel_rem_pio2+0x302>
 800972c:	b123      	cbz	r3, 8009738 <__kernel_rem_pio2+0x2f8>
 800972e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009732:	f8cb 3000 	str.w	r3, [fp]
 8009736:	2301      	movs	r3, #1
 8009738:	3201      	adds	r2, #1
 800973a:	f10b 0b04 	add.w	fp, fp, #4
 800973e:	461d      	mov	r5, r3
 8009740:	e755      	b.n	80095ee <__kernel_rem_pio2+0x1ae>
 8009742:	1acb      	subs	r3, r1, r3
 8009744:	f8cb 3000 	str.w	r3, [fp]
 8009748:	462b      	mov	r3, r5
 800974a:	e7f5      	b.n	8009738 <__kernel_rem_pio2+0x2f8>
 800974c:	1e62      	subs	r2, r4, #1
 800974e:	ab0c      	add	r3, sp, #48	; 0x30
 8009750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009754:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009758:	a90c      	add	r1, sp, #48	; 0x30
 800975a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800975e:	e754      	b.n	800960a <__kernel_rem_pio2+0x1ca>
	...
 800976c:	3ff00000 	.word	0x3ff00000
 8009770:	0802dac8 	.word	0x0802dac8
 8009774:	40200000 	.word	0x40200000
 8009778:	3ff00000 	.word	0x3ff00000
 800977c:	3e700000 	.word	0x3e700000
 8009780:	41700000 	.word	0x41700000
 8009784:	3fe00000 	.word	0x3fe00000
 8009788:	0802da88 	.word	0x0802da88
 800978c:	1e62      	subs	r2, r4, #1
 800978e:	ab0c      	add	r3, sp, #48	; 0x30
 8009790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009794:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009798:	e7de      	b.n	8009758 <__kernel_rem_pio2+0x318>
 800979a:	a90c      	add	r1, sp, #48	; 0x30
 800979c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	430a      	orrs	r2, r1
 80097a4:	e790      	b.n	80096c8 <__kernel_rem_pio2+0x288>
 80097a6:	3301      	adds	r3, #1
 80097a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d0fa      	beq.n	80097a6 <__kernel_rem_pio2+0x366>
 80097b0:	9a08      	ldr	r2, [sp, #32]
 80097b2:	18e3      	adds	r3, r4, r3
 80097b4:	18a6      	adds	r6, r4, r2
 80097b6:	aa20      	add	r2, sp, #128	; 0x80
 80097b8:	1c65      	adds	r5, r4, #1
 80097ba:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	9b02      	ldr	r3, [sp, #8]
 80097c2:	42ab      	cmp	r3, r5
 80097c4:	da04      	bge.n	80097d0 <__kernel_rem_pio2+0x390>
 80097c6:	461c      	mov	r4, r3
 80097c8:	e6b5      	b.n	8009536 <__kernel_rem_pio2+0xf6>
 80097ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097cc:	2301      	movs	r3, #1
 80097ce:	e7eb      	b.n	80097a8 <__kernel_rem_pio2+0x368>
 80097d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097d6:	f7f6 fe9d 	bl	8000514 <__aeabi_i2d>
 80097da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e0:	46b3      	mov	fp, r6
 80097e2:	461c      	mov	r4, r3
 80097e4:	2700      	movs	r7, #0
 80097e6:	f04f 0800 	mov.w	r8, #0
 80097ea:	f04f 0900 	mov.w	r9, #0
 80097ee:	9b06      	ldr	r3, [sp, #24]
 80097f0:	429f      	cmp	r7, r3
 80097f2:	dd06      	ble.n	8009802 <__kernel_rem_pio2+0x3c2>
 80097f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80097f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80097fa:	e9c3 8900 	strd	r8, r9, [r3]
 80097fe:	3501      	adds	r5, #1
 8009800:	e7de      	b.n	80097c0 <__kernel_rem_pio2+0x380>
 8009802:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009806:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800980a:	f7f6 feed 	bl	80005e8 <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4640      	mov	r0, r8
 8009814:	4649      	mov	r1, r9
 8009816:	f7f6 fd31 	bl	800027c <__adddf3>
 800981a:	3701      	adds	r7, #1
 800981c:	4680      	mov	r8, r0
 800981e:	4689      	mov	r9, r1
 8009820:	e7e5      	b.n	80097ee <__kernel_rem_pio2+0x3ae>
 8009822:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009826:	e754      	b.n	80096d2 <__kernel_rem_pio2+0x292>
 8009828:	ec47 6b10 	vmov	d0, r6, r7
 800982c:	f1ca 0000 	rsb	r0, sl, #0
 8009830:	f000 fcce 	bl	800a1d0 <scalbn>
 8009834:	ec57 6b10 	vmov	r6, r7, d0
 8009838:	4b9f      	ldr	r3, [pc, #636]	; (8009ab8 <__kernel_rem_pio2+0x678>)
 800983a:	ee10 0a10 	vmov	r0, s0
 800983e:	2200      	movs	r2, #0
 8009840:	4639      	mov	r1, r7
 8009842:	f7f7 f957 	bl	8000af4 <__aeabi_dcmpge>
 8009846:	b300      	cbz	r0, 800988a <__kernel_rem_pio2+0x44a>
 8009848:	4b9c      	ldr	r3, [pc, #624]	; (8009abc <__kernel_rem_pio2+0x67c>)
 800984a:	2200      	movs	r2, #0
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f6 feca 	bl	80005e8 <__aeabi_dmul>
 8009854:	f7f7 f978 	bl	8000b48 <__aeabi_d2iz>
 8009858:	4605      	mov	r5, r0
 800985a:	f7f6 fe5b 	bl	8000514 <__aeabi_i2d>
 800985e:	4b96      	ldr	r3, [pc, #600]	; (8009ab8 <__kernel_rem_pio2+0x678>)
 8009860:	2200      	movs	r2, #0
 8009862:	f7f6 fec1 	bl	80005e8 <__aeabi_dmul>
 8009866:	460b      	mov	r3, r1
 8009868:	4602      	mov	r2, r0
 800986a:	4639      	mov	r1, r7
 800986c:	4630      	mov	r0, r6
 800986e:	f7f6 fd03 	bl	8000278 <__aeabi_dsub>
 8009872:	f7f7 f969 	bl	8000b48 <__aeabi_d2iz>
 8009876:	f104 0b01 	add.w	fp, r4, #1
 800987a:	ab0c      	add	r3, sp, #48	; 0x30
 800987c:	f10a 0a18 	add.w	sl, sl, #24
 8009880:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009884:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009888:	e72b      	b.n	80096e2 <__kernel_rem_pio2+0x2a2>
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	f7f7 f95b 	bl	8000b48 <__aeabi_d2iz>
 8009892:	ab0c      	add	r3, sp, #48	; 0x30
 8009894:	46a3      	mov	fp, r4
 8009896:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800989a:	e722      	b.n	80096e2 <__kernel_rem_pio2+0x2a2>
 800989c:	ab70      	add	r3, sp, #448	; 0x1c0
 800989e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80098a2:	ab0c      	add	r3, sp, #48	; 0x30
 80098a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80098a8:	f7f6 fe34 	bl	8000514 <__aeabi_i2d>
 80098ac:	4622      	mov	r2, r4
 80098ae:	462b      	mov	r3, r5
 80098b0:	f7f6 fe9a 	bl	80005e8 <__aeabi_dmul>
 80098b4:	4632      	mov	r2, r6
 80098b6:	e9c9 0100 	strd	r0, r1, [r9]
 80098ba:	463b      	mov	r3, r7
 80098bc:	4620      	mov	r0, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	f7f6 fe92 	bl	80005e8 <__aeabi_dmul>
 80098c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	e713      	b.n	80096f6 <__kernel_rem_pio2+0x2b6>
 80098ce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80098d2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80098d6:	f7f6 fe87 	bl	80005e8 <__aeabi_dmul>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f6 fccb 	bl	800027c <__adddf3>
 80098e6:	3601      	adds	r6, #1
 80098e8:	4604      	mov	r4, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	429e      	cmp	r6, r3
 80098f0:	dc01      	bgt.n	80098f6 <__kernel_rem_pio2+0x4b6>
 80098f2:	45b0      	cmp	r8, r6
 80098f4:	daeb      	bge.n	80098ce <__kernel_rem_pio2+0x48e>
 80098f6:	ab48      	add	r3, sp, #288	; 0x120
 80098f8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80098fc:	e9c3 4500 	strd	r4, r5, [r3]
 8009900:	3f01      	subs	r7, #1
 8009902:	f108 0801 	add.w	r8, r8, #1
 8009906:	e6ff      	b.n	8009708 <__kernel_rem_pio2+0x2c8>
 8009908:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800990a:	2b02      	cmp	r3, #2
 800990c:	dc0b      	bgt.n	8009926 <__kernel_rem_pio2+0x4e6>
 800990e:	2b00      	cmp	r3, #0
 8009910:	dc6e      	bgt.n	80099f0 <__kernel_rem_pio2+0x5b0>
 8009912:	d045      	beq.n	80099a0 <__kernel_rem_pio2+0x560>
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	f003 0007 	and.w	r0, r3, #7
 800991a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800991e:	ecbd 8b02 	vpop	{d8}
 8009922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009926:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009928:	2b03      	cmp	r3, #3
 800992a:	d1f3      	bne.n	8009914 <__kernel_rem_pio2+0x4d4>
 800992c:	ab48      	add	r3, sp, #288	; 0x120
 800992e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009932:	46d0      	mov	r8, sl
 8009934:	46d9      	mov	r9, fp
 8009936:	f1b9 0f00 	cmp.w	r9, #0
 800993a:	f1a8 0808 	sub.w	r8, r8, #8
 800993e:	dc64      	bgt.n	8009a0a <__kernel_rem_pio2+0x5ca>
 8009940:	465c      	mov	r4, fp
 8009942:	2c01      	cmp	r4, #1
 8009944:	f1aa 0a08 	sub.w	sl, sl, #8
 8009948:	dc7e      	bgt.n	8009a48 <__kernel_rem_pio2+0x608>
 800994a:	2000      	movs	r0, #0
 800994c:	2100      	movs	r1, #0
 800994e:	f1bb 0f01 	cmp.w	fp, #1
 8009952:	f300 8097 	bgt.w	8009a84 <__kernel_rem_pio2+0x644>
 8009956:	9b02      	ldr	r3, [sp, #8]
 8009958:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800995c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 8099 	bne.w	8009a98 <__kernel_rem_pio2+0x658>
 8009966:	9b01      	ldr	r3, [sp, #4]
 8009968:	e9c3 5600 	strd	r5, r6, [r3]
 800996c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009970:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009974:	e7ce      	b.n	8009914 <__kernel_rem_pio2+0x4d4>
 8009976:	ab48      	add	r3, sp, #288	; 0x120
 8009978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fc7c 	bl	800027c <__adddf3>
 8009984:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009988:	f1bb 0f00 	cmp.w	fp, #0
 800998c:	daf3      	bge.n	8009976 <__kernel_rem_pio2+0x536>
 800998e:	9b02      	ldr	r3, [sp, #8]
 8009990:	b113      	cbz	r3, 8009998 <__kernel_rem_pio2+0x558>
 8009992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009996:	4619      	mov	r1, r3
 8009998:	9b01      	ldr	r3, [sp, #4]
 800999a:	e9c3 0100 	strd	r0, r1, [r3]
 800999e:	e7b9      	b.n	8009914 <__kernel_rem_pio2+0x4d4>
 80099a0:	2000      	movs	r0, #0
 80099a2:	2100      	movs	r1, #0
 80099a4:	e7f0      	b.n	8009988 <__kernel_rem_pio2+0x548>
 80099a6:	ab48      	add	r3, sp, #288	; 0x120
 80099a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f7f6 fc64 	bl	800027c <__adddf3>
 80099b4:	3c01      	subs	r4, #1
 80099b6:	2c00      	cmp	r4, #0
 80099b8:	daf5      	bge.n	80099a6 <__kernel_rem_pio2+0x566>
 80099ba:	9b02      	ldr	r3, [sp, #8]
 80099bc:	b1e3      	cbz	r3, 80099f8 <__kernel_rem_pio2+0x5b8>
 80099be:	4602      	mov	r2, r0
 80099c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099c4:	9c01      	ldr	r4, [sp, #4]
 80099c6:	e9c4 2300 	strd	r2, r3, [r4]
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80099d2:	f7f6 fc51 	bl	8000278 <__aeabi_dsub>
 80099d6:	ad4a      	add	r5, sp, #296	; 0x128
 80099d8:	2401      	movs	r4, #1
 80099da:	45a3      	cmp	fp, r4
 80099dc:	da0f      	bge.n	80099fe <__kernel_rem_pio2+0x5be>
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	b113      	cbz	r3, 80099e8 <__kernel_rem_pio2+0x5a8>
 80099e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099e6:	4619      	mov	r1, r3
 80099e8:	9b01      	ldr	r3, [sp, #4]
 80099ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80099ee:	e791      	b.n	8009914 <__kernel_rem_pio2+0x4d4>
 80099f0:	465c      	mov	r4, fp
 80099f2:	2000      	movs	r0, #0
 80099f4:	2100      	movs	r1, #0
 80099f6:	e7de      	b.n	80099b6 <__kernel_rem_pio2+0x576>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	e7e2      	b.n	80099c4 <__kernel_rem_pio2+0x584>
 80099fe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009a02:	f7f6 fc3b 	bl	800027c <__adddf3>
 8009a06:	3401      	adds	r4, #1
 8009a08:	e7e7      	b.n	80099da <__kernel_rem_pio2+0x59a>
 8009a0a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009a0e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009a12:	4620      	mov	r0, r4
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7f6 fc2f 	bl	800027c <__adddf3>
 8009a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	4620      	mov	r0, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	f7f6 fc25 	bl	8000278 <__aeabi_dsub>
 8009a2e:	4632      	mov	r2, r6
 8009a30:	463b      	mov	r3, r7
 8009a32:	f7f6 fc23 	bl	800027c <__adddf3>
 8009a36:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a3a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009a3e:	ed88 7b00 	vstr	d7, [r8]
 8009a42:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a46:	e776      	b.n	8009936 <__kernel_rem_pio2+0x4f6>
 8009a48:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a4c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009a50:	4640      	mov	r0, r8
 8009a52:	4632      	mov	r2, r6
 8009a54:	463b      	mov	r3, r7
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f6 fc10 	bl	800027c <__adddf3>
 8009a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4640      	mov	r0, r8
 8009a66:	4649      	mov	r1, r9
 8009a68:	f7f6 fc06 	bl	8000278 <__aeabi_dsub>
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	463b      	mov	r3, r7
 8009a70:	f7f6 fc04 	bl	800027c <__adddf3>
 8009a74:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a7c:	ed8a 7b00 	vstr	d7, [sl]
 8009a80:	3c01      	subs	r4, #1
 8009a82:	e75e      	b.n	8009942 <__kernel_rem_pio2+0x502>
 8009a84:	ab48      	add	r3, sp, #288	; 0x120
 8009a86:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f7f6 fbf5 	bl	800027c <__adddf3>
 8009a92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a96:	e75a      	b.n	800994e <__kernel_rem_pio2+0x50e>
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	9a01      	ldr	r2, [sp, #4]
 8009a9c:	601d      	str	r5, [r3, #0]
 8009a9e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009aa2:	605c      	str	r4, [r3, #4]
 8009aa4:	609f      	str	r7, [r3, #8]
 8009aa6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009aaa:	60d3      	str	r3, [r2, #12]
 8009aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ab0:	6110      	str	r0, [r2, #16]
 8009ab2:	6153      	str	r3, [r2, #20]
 8009ab4:	e72e      	b.n	8009914 <__kernel_rem_pio2+0x4d4>
 8009ab6:	bf00      	nop
 8009ab8:	41700000 	.word	0x41700000
 8009abc:	3e700000 	.word	0x3e700000

08009ac0 <__kernel_sin>:
 8009ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	ed2d 8b04 	vpush	{d8-d9}
 8009ac8:	eeb0 8a41 	vmov.f32	s16, s2
 8009acc:	eef0 8a61 	vmov.f32	s17, s3
 8009ad0:	ec55 4b10 	vmov	r4, r5, d0
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009ada:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009ade:	9001      	str	r0, [sp, #4]
 8009ae0:	da06      	bge.n	8009af0 <__kernel_sin+0x30>
 8009ae2:	ee10 0a10 	vmov	r0, s0
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f7 f82e 	bl	8000b48 <__aeabi_d2iz>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d051      	beq.n	8009b94 <__kernel_sin+0xd4>
 8009af0:	4622      	mov	r2, r4
 8009af2:	462b      	mov	r3, r5
 8009af4:	4620      	mov	r0, r4
 8009af6:	4629      	mov	r1, r5
 8009af8:	f7f6 fd76 	bl	80005e8 <__aeabi_dmul>
 8009afc:	4682      	mov	sl, r0
 8009afe:	468b      	mov	fp, r1
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 fd6e 	bl	80005e8 <__aeabi_dmul>
 8009b0c:	a341      	add	r3, pc, #260	; (adr r3, 8009c14 <__kernel_sin+0x154>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	4680      	mov	r8, r0
 8009b14:	4689      	mov	r9, r1
 8009b16:	4650      	mov	r0, sl
 8009b18:	4659      	mov	r1, fp
 8009b1a:	f7f6 fd65 	bl	80005e8 <__aeabi_dmul>
 8009b1e:	a33f      	add	r3, pc, #252	; (adr r3, 8009c1c <__kernel_sin+0x15c>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fba8 	bl	8000278 <__aeabi_dsub>
 8009b28:	4652      	mov	r2, sl
 8009b2a:	465b      	mov	r3, fp
 8009b2c:	f7f6 fd5c 	bl	80005e8 <__aeabi_dmul>
 8009b30:	a33c      	add	r3, pc, #240	; (adr r3, 8009c24 <__kernel_sin+0x164>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	f7f6 fba1 	bl	800027c <__adddf3>
 8009b3a:	4652      	mov	r2, sl
 8009b3c:	465b      	mov	r3, fp
 8009b3e:	f7f6 fd53 	bl	80005e8 <__aeabi_dmul>
 8009b42:	a33a      	add	r3, pc, #232	; (adr r3, 8009c2c <__kernel_sin+0x16c>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f7f6 fb96 	bl	8000278 <__aeabi_dsub>
 8009b4c:	4652      	mov	r2, sl
 8009b4e:	465b      	mov	r3, fp
 8009b50:	f7f6 fd4a 	bl	80005e8 <__aeabi_dmul>
 8009b54:	a337      	add	r3, pc, #220	; (adr r3, 8009c34 <__kernel_sin+0x174>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	f7f6 fb8f 	bl	800027c <__adddf3>
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	4606      	mov	r6, r0
 8009b62:	460f      	mov	r7, r1
 8009b64:	b9eb      	cbnz	r3, 8009ba2 <__kernel_sin+0xe2>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	f7f6 fd3b 	bl	80005e8 <__aeabi_dmul>
 8009b72:	a325      	add	r3, pc, #148	; (adr r3, 8009c08 <__kernel_sin+0x148>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f7f6 fb7e 	bl	8000278 <__aeabi_dsub>
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	464b      	mov	r3, r9
 8009b80:	f7f6 fd32 	bl	80005e8 <__aeabi_dmul>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4620      	mov	r0, r4
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	f7f6 fb76 	bl	800027c <__adddf3>
 8009b90:	4604      	mov	r4, r0
 8009b92:	460d      	mov	r5, r1
 8009b94:	ec45 4b10 	vmov	d0, r4, r5
 8009b98:	b003      	add	sp, #12
 8009b9a:	ecbd 8b04 	vpop	{d8-d9}
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	4b1b      	ldr	r3, [pc, #108]	; (8009c10 <__kernel_sin+0x150>)
 8009ba4:	ec51 0b18 	vmov	r0, r1, d8
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f7f6 fd1d 	bl	80005e8 <__aeabi_dmul>
 8009bae:	4632      	mov	r2, r6
 8009bb0:	ec41 0b19 	vmov	d9, r0, r1
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	4649      	mov	r1, r9
 8009bba:	f7f6 fd15 	bl	80005e8 <__aeabi_dmul>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	ec51 0b19 	vmov	r0, r1, d9
 8009bc6:	f7f6 fb57 	bl	8000278 <__aeabi_dsub>
 8009bca:	4652      	mov	r2, sl
 8009bcc:	465b      	mov	r3, fp
 8009bce:	f7f6 fd0b 	bl	80005e8 <__aeabi_dmul>
 8009bd2:	ec53 2b18 	vmov	r2, r3, d8
 8009bd6:	f7f6 fb4f 	bl	8000278 <__aeabi_dsub>
 8009bda:	a30b      	add	r3, pc, #44	; (adr r3, 8009c08 <__kernel_sin+0x148>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	4606      	mov	r6, r0
 8009be2:	460f      	mov	r7, r1
 8009be4:	4640      	mov	r0, r8
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 fcfe 	bl	80005e8 <__aeabi_dmul>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	f7f6 fb42 	bl	800027c <__adddf3>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fb3a 	bl	8000278 <__aeabi_dsub>
 8009c04:	e7c4      	b.n	8009b90 <__kernel_sin+0xd0>
 8009c06:	bf00      	nop
 8009c08:	55555549 	.word	0x55555549
 8009c0c:	3fc55555 	.word	0x3fc55555
 8009c10:	3fe00000 	.word	0x3fe00000
 8009c14:	5acfd57c 	.word	0x5acfd57c
 8009c18:	3de5d93a 	.word	0x3de5d93a
 8009c1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c20:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c24:	57b1fe7d 	.word	0x57b1fe7d
 8009c28:	3ec71de3 	.word	0x3ec71de3
 8009c2c:	19c161d5 	.word	0x19c161d5
 8009c30:	3f2a01a0 	.word	0x3f2a01a0
 8009c34:	1110f8a6 	.word	0x1110f8a6
 8009c38:	3f811111 	.word	0x3f811111
 8009c3c:	00000000 	.word	0x00000000

08009c40 <atan>:
 8009c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	ec55 4b10 	vmov	r4, r5, d0
 8009c48:	4bc3      	ldr	r3, [pc, #780]	; (8009f58 <atan+0x318>)
 8009c4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c4e:	429e      	cmp	r6, r3
 8009c50:	46ab      	mov	fp, r5
 8009c52:	dd18      	ble.n	8009c86 <atan+0x46>
 8009c54:	4bc1      	ldr	r3, [pc, #772]	; (8009f5c <atan+0x31c>)
 8009c56:	429e      	cmp	r6, r3
 8009c58:	dc01      	bgt.n	8009c5e <atan+0x1e>
 8009c5a:	d109      	bne.n	8009c70 <atan+0x30>
 8009c5c:	b144      	cbz	r4, 8009c70 <atan+0x30>
 8009c5e:	4622      	mov	r2, r4
 8009c60:	462b      	mov	r3, r5
 8009c62:	4620      	mov	r0, r4
 8009c64:	4629      	mov	r1, r5
 8009c66:	f7f6 fb09 	bl	800027c <__adddf3>
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	e006      	b.n	8009c7e <atan+0x3e>
 8009c70:	f1bb 0f00 	cmp.w	fp, #0
 8009c74:	f300 8131 	bgt.w	8009eda <atan+0x29a>
 8009c78:	a59b      	add	r5, pc, #620	; (adr r5, 8009ee8 <atan+0x2a8>)
 8009c7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c7e:	ec45 4b10 	vmov	d0, r4, r5
 8009c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	4bb6      	ldr	r3, [pc, #728]	; (8009f60 <atan+0x320>)
 8009c88:	429e      	cmp	r6, r3
 8009c8a:	dc14      	bgt.n	8009cb6 <atan+0x76>
 8009c8c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009c90:	429e      	cmp	r6, r3
 8009c92:	dc0d      	bgt.n	8009cb0 <atan+0x70>
 8009c94:	a396      	add	r3, pc, #600	; (adr r3, 8009ef0 <atan+0x2b0>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	ee10 0a10 	vmov	r0, s0
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	f7f6 faec 	bl	800027c <__adddf3>
 8009ca4:	4baf      	ldr	r3, [pc, #700]	; (8009f64 <atan+0x324>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f7f6 ff2e 	bl	8000b08 <__aeabi_dcmpgt>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d1e6      	bne.n	8009c7e <atan+0x3e>
 8009cb0:	f04f 3aff 	mov.w	sl, #4294967295
 8009cb4:	e02b      	b.n	8009d0e <atan+0xce>
 8009cb6:	f000 f963 	bl	8009f80 <fabs>
 8009cba:	4bab      	ldr	r3, [pc, #684]	; (8009f68 <atan+0x328>)
 8009cbc:	429e      	cmp	r6, r3
 8009cbe:	ec55 4b10 	vmov	r4, r5, d0
 8009cc2:	f300 80bf 	bgt.w	8009e44 <atan+0x204>
 8009cc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009cca:	429e      	cmp	r6, r3
 8009ccc:	f300 80a0 	bgt.w	8009e10 <atan+0x1d0>
 8009cd0:	ee10 2a10 	vmov	r2, s0
 8009cd4:	ee10 0a10 	vmov	r0, s0
 8009cd8:	462b      	mov	r3, r5
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f7f6 face 	bl	800027c <__adddf3>
 8009ce0:	4ba0      	ldr	r3, [pc, #640]	; (8009f64 <atan+0x324>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f7f6 fac8 	bl	8000278 <__aeabi_dsub>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	f7f6 fac1 	bl	800027c <__adddf3>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	f7f6 fd9b 	bl	800083c <__aeabi_ddiv>
 8009d06:	f04f 0a00 	mov.w	sl, #0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	4622      	mov	r2, r4
 8009d10:	462b      	mov	r3, r5
 8009d12:	4620      	mov	r0, r4
 8009d14:	4629      	mov	r1, r5
 8009d16:	f7f6 fc67 	bl	80005e8 <__aeabi_dmul>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4680      	mov	r8, r0
 8009d20:	4689      	mov	r9, r1
 8009d22:	f7f6 fc61 	bl	80005e8 <__aeabi_dmul>
 8009d26:	a374      	add	r3, pc, #464	; (adr r3, 8009ef8 <atan+0x2b8>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	460f      	mov	r7, r1
 8009d30:	f7f6 fc5a 	bl	80005e8 <__aeabi_dmul>
 8009d34:	a372      	add	r3, pc, #456	; (adr r3, 8009f00 <atan+0x2c0>)
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f7f6 fa9f 	bl	800027c <__adddf3>
 8009d3e:	4632      	mov	r2, r6
 8009d40:	463b      	mov	r3, r7
 8009d42:	f7f6 fc51 	bl	80005e8 <__aeabi_dmul>
 8009d46:	a370      	add	r3, pc, #448	; (adr r3, 8009f08 <atan+0x2c8>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fa96 	bl	800027c <__adddf3>
 8009d50:	4632      	mov	r2, r6
 8009d52:	463b      	mov	r3, r7
 8009d54:	f7f6 fc48 	bl	80005e8 <__aeabi_dmul>
 8009d58:	a36d      	add	r3, pc, #436	; (adr r3, 8009f10 <atan+0x2d0>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fa8d 	bl	800027c <__adddf3>
 8009d62:	4632      	mov	r2, r6
 8009d64:	463b      	mov	r3, r7
 8009d66:	f7f6 fc3f 	bl	80005e8 <__aeabi_dmul>
 8009d6a:	a36b      	add	r3, pc, #428	; (adr r3, 8009f18 <atan+0x2d8>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fa84 	bl	800027c <__adddf3>
 8009d74:	4632      	mov	r2, r6
 8009d76:	463b      	mov	r3, r7
 8009d78:	f7f6 fc36 	bl	80005e8 <__aeabi_dmul>
 8009d7c:	a368      	add	r3, pc, #416	; (adr r3, 8009f20 <atan+0x2e0>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	f7f6 fa7b 	bl	800027c <__adddf3>
 8009d86:	4642      	mov	r2, r8
 8009d88:	464b      	mov	r3, r9
 8009d8a:	f7f6 fc2d 	bl	80005e8 <__aeabi_dmul>
 8009d8e:	a366      	add	r3, pc, #408	; (adr r3, 8009f28 <atan+0x2e8>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	4680      	mov	r8, r0
 8009d96:	4689      	mov	r9, r1
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 fc24 	bl	80005e8 <__aeabi_dmul>
 8009da0:	a363      	add	r3, pc, #396	; (adr r3, 8009f30 <atan+0x2f0>)
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f7f6 fa67 	bl	8000278 <__aeabi_dsub>
 8009daa:	4632      	mov	r2, r6
 8009dac:	463b      	mov	r3, r7
 8009dae:	f7f6 fc1b 	bl	80005e8 <__aeabi_dmul>
 8009db2:	a361      	add	r3, pc, #388	; (adr r3, 8009f38 <atan+0x2f8>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f7f6 fa5e 	bl	8000278 <__aeabi_dsub>
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	f7f6 fc12 	bl	80005e8 <__aeabi_dmul>
 8009dc4:	a35e      	add	r3, pc, #376	; (adr r3, 8009f40 <atan+0x300>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f7f6 fa55 	bl	8000278 <__aeabi_dsub>
 8009dce:	4632      	mov	r2, r6
 8009dd0:	463b      	mov	r3, r7
 8009dd2:	f7f6 fc09 	bl	80005e8 <__aeabi_dmul>
 8009dd6:	a35c      	add	r3, pc, #368	; (adr r3, 8009f48 <atan+0x308>)
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	f7f6 fa4c 	bl	8000278 <__aeabi_dsub>
 8009de0:	4632      	mov	r2, r6
 8009de2:	463b      	mov	r3, r7
 8009de4:	f7f6 fc00 	bl	80005e8 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4640      	mov	r0, r8
 8009dee:	4649      	mov	r1, r9
 8009df0:	f7f6 fa44 	bl	800027c <__adddf3>
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	f7f6 fbf6 	bl	80005e8 <__aeabi_dmul>
 8009dfc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	d14b      	bne.n	8009e9e <atan+0x25e>
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7f6 fa35 	bl	8000278 <__aeabi_dsub>
 8009e0e:	e72c      	b.n	8009c6a <atan+0x2a>
 8009e10:	ee10 0a10 	vmov	r0, s0
 8009e14:	4b53      	ldr	r3, [pc, #332]	; (8009f64 <atan+0x324>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fa2d 	bl	8000278 <__aeabi_dsub>
 8009e1e:	4b51      	ldr	r3, [pc, #324]	; (8009f64 <atan+0x324>)
 8009e20:	4606      	mov	r6, r0
 8009e22:	460f      	mov	r7, r1
 8009e24:	2200      	movs	r2, #0
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fa27 	bl	800027c <__adddf3>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4630      	mov	r0, r6
 8009e34:	4639      	mov	r1, r7
 8009e36:	f7f6 fd01 	bl	800083c <__aeabi_ddiv>
 8009e3a:	f04f 0a01 	mov.w	sl, #1
 8009e3e:	4604      	mov	r4, r0
 8009e40:	460d      	mov	r5, r1
 8009e42:	e764      	b.n	8009d0e <atan+0xce>
 8009e44:	4b49      	ldr	r3, [pc, #292]	; (8009f6c <atan+0x32c>)
 8009e46:	429e      	cmp	r6, r3
 8009e48:	da1d      	bge.n	8009e86 <atan+0x246>
 8009e4a:	ee10 0a10 	vmov	r0, s0
 8009e4e:	4b48      	ldr	r3, [pc, #288]	; (8009f70 <atan+0x330>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	4629      	mov	r1, r5
 8009e54:	f7f6 fa10 	bl	8000278 <__aeabi_dsub>
 8009e58:	4b45      	ldr	r3, [pc, #276]	; (8009f70 <atan+0x330>)
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	2200      	movs	r2, #0
 8009e60:	4620      	mov	r0, r4
 8009e62:	4629      	mov	r1, r5
 8009e64:	f7f6 fbc0 	bl	80005e8 <__aeabi_dmul>
 8009e68:	4b3e      	ldr	r3, [pc, #248]	; (8009f64 <atan+0x324>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f7f6 fa06 	bl	800027c <__adddf3>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4630      	mov	r0, r6
 8009e76:	4639      	mov	r1, r7
 8009e78:	f7f6 fce0 	bl	800083c <__aeabi_ddiv>
 8009e7c:	f04f 0a02 	mov.w	sl, #2
 8009e80:	4604      	mov	r4, r0
 8009e82:	460d      	mov	r5, r1
 8009e84:	e743      	b.n	8009d0e <atan+0xce>
 8009e86:	462b      	mov	r3, r5
 8009e88:	ee10 2a10 	vmov	r2, s0
 8009e8c:	4939      	ldr	r1, [pc, #228]	; (8009f74 <atan+0x334>)
 8009e8e:	2000      	movs	r0, #0
 8009e90:	f7f6 fcd4 	bl	800083c <__aeabi_ddiv>
 8009e94:	f04f 0a03 	mov.w	sl, #3
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	e737      	b.n	8009d0e <atan+0xce>
 8009e9e:	4b36      	ldr	r3, [pc, #216]	; (8009f78 <atan+0x338>)
 8009ea0:	4e36      	ldr	r6, [pc, #216]	; (8009f7c <atan+0x33c>)
 8009ea2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009ea6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009eaa:	e9da 2300 	ldrd	r2, r3, [sl]
 8009eae:	f7f6 f9e3 	bl	8000278 <__aeabi_dsub>
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	f7f6 f9df 	bl	8000278 <__aeabi_dsub>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009ec2:	f7f6 f9d9 	bl	8000278 <__aeabi_dsub>
 8009ec6:	f1bb 0f00 	cmp.w	fp, #0
 8009eca:	4604      	mov	r4, r0
 8009ecc:	460d      	mov	r5, r1
 8009ece:	f6bf aed6 	bge.w	8009c7e <atan+0x3e>
 8009ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ed6:	461d      	mov	r5, r3
 8009ed8:	e6d1      	b.n	8009c7e <atan+0x3e>
 8009eda:	a51d      	add	r5, pc, #116	; (adr r5, 8009f50 <atan+0x310>)
 8009edc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ee0:	e6cd      	b.n	8009c7e <atan+0x3e>
 8009ee2:	bf00      	nop
 8009ee4:	f3af 8000 	nop.w
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	bff921fb 	.word	0xbff921fb
 8009ef0:	8800759c 	.word	0x8800759c
 8009ef4:	7e37e43c 	.word	0x7e37e43c
 8009ef8:	e322da11 	.word	0xe322da11
 8009efc:	3f90ad3a 	.word	0x3f90ad3a
 8009f00:	24760deb 	.word	0x24760deb
 8009f04:	3fa97b4b 	.word	0x3fa97b4b
 8009f08:	a0d03d51 	.word	0xa0d03d51
 8009f0c:	3fb10d66 	.word	0x3fb10d66
 8009f10:	c54c206e 	.word	0xc54c206e
 8009f14:	3fb745cd 	.word	0x3fb745cd
 8009f18:	920083ff 	.word	0x920083ff
 8009f1c:	3fc24924 	.word	0x3fc24924
 8009f20:	5555550d 	.word	0x5555550d
 8009f24:	3fd55555 	.word	0x3fd55555
 8009f28:	2c6a6c2f 	.word	0x2c6a6c2f
 8009f2c:	bfa2b444 	.word	0xbfa2b444
 8009f30:	52defd9a 	.word	0x52defd9a
 8009f34:	3fadde2d 	.word	0x3fadde2d
 8009f38:	af749a6d 	.word	0xaf749a6d
 8009f3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009f40:	fe231671 	.word	0xfe231671
 8009f44:	3fbc71c6 	.word	0x3fbc71c6
 8009f48:	9998ebc4 	.word	0x9998ebc4
 8009f4c:	3fc99999 	.word	0x3fc99999
 8009f50:	54442d18 	.word	0x54442d18
 8009f54:	3ff921fb 	.word	0x3ff921fb
 8009f58:	440fffff 	.word	0x440fffff
 8009f5c:	7ff00000 	.word	0x7ff00000
 8009f60:	3fdbffff 	.word	0x3fdbffff
 8009f64:	3ff00000 	.word	0x3ff00000
 8009f68:	3ff2ffff 	.word	0x3ff2ffff
 8009f6c:	40038000 	.word	0x40038000
 8009f70:	3ff80000 	.word	0x3ff80000
 8009f74:	bff00000 	.word	0xbff00000
 8009f78:	0802daf8 	.word	0x0802daf8
 8009f7c:	0802dad8 	.word	0x0802dad8

08009f80 <fabs>:
 8009f80:	ec51 0b10 	vmov	r0, r1, d0
 8009f84:	ee10 2a10 	vmov	r2, s0
 8009f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f8c:	ec43 2b10 	vmov	d0, r2, r3
 8009f90:	4770      	bx	lr

08009f92 <finite>:
 8009f92:	b082      	sub	sp, #8
 8009f94:	ed8d 0b00 	vstr	d0, [sp]
 8009f98:	9801      	ldr	r0, [sp, #4]
 8009f9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009f9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009fa2:	0fc0      	lsrs	r0, r0, #31
 8009fa4:	b002      	add	sp, #8
 8009fa6:	4770      	bx	lr

08009fa8 <floor>:
 8009fa8:	ec51 0b10 	vmov	r0, r1, d0
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009fb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009fb8:	2e13      	cmp	r6, #19
 8009fba:	ee10 5a10 	vmov	r5, s0
 8009fbe:	ee10 8a10 	vmov	r8, s0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	dc32      	bgt.n	800a02c <floor+0x84>
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	da14      	bge.n	8009ff4 <floor+0x4c>
 8009fca:	a333      	add	r3, pc, #204	; (adr r3, 800a098 <floor+0xf0>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f7f6 f954 	bl	800027c <__adddf3>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f7f6 fd96 	bl	8000b08 <__aeabi_dcmpgt>
 8009fdc:	b138      	cbz	r0, 8009fee <floor+0x46>
 8009fde:	2c00      	cmp	r4, #0
 8009fe0:	da57      	bge.n	800a092 <floor+0xea>
 8009fe2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009fe6:	431d      	orrs	r5, r3
 8009fe8:	d001      	beq.n	8009fee <floor+0x46>
 8009fea:	4c2d      	ldr	r4, [pc, #180]	; (800a0a0 <floor+0xf8>)
 8009fec:	2500      	movs	r5, #0
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	e025      	b.n	800a040 <floor+0x98>
 8009ff4:	4f2b      	ldr	r7, [pc, #172]	; (800a0a4 <floor+0xfc>)
 8009ff6:	4137      	asrs	r7, r6
 8009ff8:	ea01 0307 	and.w	r3, r1, r7
 8009ffc:	4303      	orrs	r3, r0
 8009ffe:	d01f      	beq.n	800a040 <floor+0x98>
 800a000:	a325      	add	r3, pc, #148	; (adr r3, 800a098 <floor+0xf0>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f7f6 f939 	bl	800027c <__adddf3>
 800a00a:	2200      	movs	r2, #0
 800a00c:	2300      	movs	r3, #0
 800a00e:	f7f6 fd7b 	bl	8000b08 <__aeabi_dcmpgt>
 800a012:	2800      	cmp	r0, #0
 800a014:	d0eb      	beq.n	8009fee <floor+0x46>
 800a016:	2c00      	cmp	r4, #0
 800a018:	bfbe      	ittt	lt
 800a01a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a01e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a022:	19a4      	addlt	r4, r4, r6
 800a024:	ea24 0407 	bic.w	r4, r4, r7
 800a028:	2500      	movs	r5, #0
 800a02a:	e7e0      	b.n	8009fee <floor+0x46>
 800a02c:	2e33      	cmp	r6, #51	; 0x33
 800a02e:	dd0b      	ble.n	800a048 <floor+0xa0>
 800a030:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a034:	d104      	bne.n	800a040 <floor+0x98>
 800a036:	ee10 2a10 	vmov	r2, s0
 800a03a:	460b      	mov	r3, r1
 800a03c:	f7f6 f91e 	bl	800027c <__adddf3>
 800a040:	ec41 0b10 	vmov	d0, r0, r1
 800a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a048:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a04c:	f04f 33ff 	mov.w	r3, #4294967295
 800a050:	fa23 f707 	lsr.w	r7, r3, r7
 800a054:	4207      	tst	r7, r0
 800a056:	d0f3      	beq.n	800a040 <floor+0x98>
 800a058:	a30f      	add	r3, pc, #60	; (adr r3, 800a098 <floor+0xf0>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	f7f6 f90d 	bl	800027c <__adddf3>
 800a062:	2200      	movs	r2, #0
 800a064:	2300      	movs	r3, #0
 800a066:	f7f6 fd4f 	bl	8000b08 <__aeabi_dcmpgt>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d0bf      	beq.n	8009fee <floor+0x46>
 800a06e:	2c00      	cmp	r4, #0
 800a070:	da02      	bge.n	800a078 <floor+0xd0>
 800a072:	2e14      	cmp	r6, #20
 800a074:	d103      	bne.n	800a07e <floor+0xd6>
 800a076:	3401      	adds	r4, #1
 800a078:	ea25 0507 	bic.w	r5, r5, r7
 800a07c:	e7b7      	b.n	8009fee <floor+0x46>
 800a07e:	2301      	movs	r3, #1
 800a080:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a084:	fa03 f606 	lsl.w	r6, r3, r6
 800a088:	4435      	add	r5, r6
 800a08a:	4545      	cmp	r5, r8
 800a08c:	bf38      	it	cc
 800a08e:	18e4      	addcc	r4, r4, r3
 800a090:	e7f2      	b.n	800a078 <floor+0xd0>
 800a092:	2500      	movs	r5, #0
 800a094:	462c      	mov	r4, r5
 800a096:	e7aa      	b.n	8009fee <floor+0x46>
 800a098:	8800759c 	.word	0x8800759c
 800a09c:	7e37e43c 	.word	0x7e37e43c
 800a0a0:	bff00000 	.word	0xbff00000
 800a0a4:	000fffff 	.word	0x000fffff

0800a0a8 <nan>:
 800a0a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0b0 <nan+0x8>
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	00000000 	.word	0x00000000
 800a0b4:	7ff80000 	.word	0x7ff80000

0800a0b8 <rint>:
 800a0b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0ba:	ec51 0b10 	vmov	r0, r1, d0
 800a0be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a0c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a0c6:	2e13      	cmp	r6, #19
 800a0c8:	ee10 4a10 	vmov	r4, s0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a0d2:	dc58      	bgt.n	800a186 <rint+0xce>
 800a0d4:	2e00      	cmp	r6, #0
 800a0d6:	da2b      	bge.n	800a130 <rint+0x78>
 800a0d8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a0dc:	4302      	orrs	r2, r0
 800a0de:	d023      	beq.n	800a128 <rint+0x70>
 800a0e0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a0e4:	4302      	orrs	r2, r0
 800a0e6:	4254      	negs	r4, r2
 800a0e8:	4314      	orrs	r4, r2
 800a0ea:	0c4b      	lsrs	r3, r1, #17
 800a0ec:	0b24      	lsrs	r4, r4, #12
 800a0ee:	045b      	lsls	r3, r3, #17
 800a0f0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a0f4:	ea44 0103 	orr.w	r1, r4, r3
 800a0f8:	4b32      	ldr	r3, [pc, #200]	; (800a1c4 <rint+0x10c>)
 800a0fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a0fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4630      	mov	r0, r6
 800a108:	4639      	mov	r1, r7
 800a10a:	f7f6 f8b7 	bl	800027c <__adddf3>
 800a10e:	e9cd 0100 	strd	r0, r1, [sp]
 800a112:	463b      	mov	r3, r7
 800a114:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a118:	4632      	mov	r2, r6
 800a11a:	f7f6 f8ad 	bl	8000278 <__aeabi_dsub>
 800a11e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a122:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a126:	4639      	mov	r1, r7
 800a128:	ec41 0b10 	vmov	d0, r0, r1
 800a12c:	b003      	add	sp, #12
 800a12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a130:	4a25      	ldr	r2, [pc, #148]	; (800a1c8 <rint+0x110>)
 800a132:	4132      	asrs	r2, r6
 800a134:	ea01 0702 	and.w	r7, r1, r2
 800a138:	4307      	orrs	r7, r0
 800a13a:	d0f5      	beq.n	800a128 <rint+0x70>
 800a13c:	0851      	lsrs	r1, r2, #1
 800a13e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a142:	4314      	orrs	r4, r2
 800a144:	d00c      	beq.n	800a160 <rint+0xa8>
 800a146:	ea23 0201 	bic.w	r2, r3, r1
 800a14a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a14e:	2e13      	cmp	r6, #19
 800a150:	fa43 f606 	asr.w	r6, r3, r6
 800a154:	bf0c      	ite	eq
 800a156:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a15a:	2400      	movne	r4, #0
 800a15c:	ea42 0306 	orr.w	r3, r2, r6
 800a160:	4918      	ldr	r1, [pc, #96]	; (800a1c4 <rint+0x10c>)
 800a162:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a166:	4622      	mov	r2, r4
 800a168:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a16c:	4620      	mov	r0, r4
 800a16e:	4629      	mov	r1, r5
 800a170:	f7f6 f884 	bl	800027c <__adddf3>
 800a174:	e9cd 0100 	strd	r0, r1, [sp]
 800a178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a17c:	4622      	mov	r2, r4
 800a17e:	462b      	mov	r3, r5
 800a180:	f7f6 f87a 	bl	8000278 <__aeabi_dsub>
 800a184:	e7d0      	b.n	800a128 <rint+0x70>
 800a186:	2e33      	cmp	r6, #51	; 0x33
 800a188:	dd07      	ble.n	800a19a <rint+0xe2>
 800a18a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a18e:	d1cb      	bne.n	800a128 <rint+0x70>
 800a190:	ee10 2a10 	vmov	r2, s0
 800a194:	f7f6 f872 	bl	800027c <__adddf3>
 800a198:	e7c6      	b.n	800a128 <rint+0x70>
 800a19a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a19e:	f04f 36ff 	mov.w	r6, #4294967295
 800a1a2:	40d6      	lsrs	r6, r2
 800a1a4:	4230      	tst	r0, r6
 800a1a6:	d0bf      	beq.n	800a128 <rint+0x70>
 800a1a8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a1ac:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a1b0:	bf1f      	itttt	ne
 800a1b2:	ea24 0101 	bicne.w	r1, r4, r1
 800a1b6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a1ba:	fa44 f202 	asrne.w	r2, r4, r2
 800a1be:	ea41 0402 	orrne.w	r4, r1, r2
 800a1c2:	e7cd      	b.n	800a160 <rint+0xa8>
 800a1c4:	0802db18 	.word	0x0802db18
 800a1c8:	000fffff 	.word	0x000fffff
 800a1cc:	00000000 	.word	0x00000000

0800a1d0 <scalbn>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	ec55 4b10 	vmov	r4, r5, d0
 800a1d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a1da:	4606      	mov	r6, r0
 800a1dc:	462b      	mov	r3, r5
 800a1de:	b99a      	cbnz	r2, 800a208 <scalbn+0x38>
 800a1e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a1e4:	4323      	orrs	r3, r4
 800a1e6:	d036      	beq.n	800a256 <scalbn+0x86>
 800a1e8:	4b39      	ldr	r3, [pc, #228]	; (800a2d0 <scalbn+0x100>)
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	ee10 0a10 	vmov	r0, s0
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f7f6 f9f9 	bl	80005e8 <__aeabi_dmul>
 800a1f6:	4b37      	ldr	r3, [pc, #220]	; (800a2d4 <scalbn+0x104>)
 800a1f8:	429e      	cmp	r6, r3
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	da10      	bge.n	800a222 <scalbn+0x52>
 800a200:	a32b      	add	r3, pc, #172	; (adr r3, 800a2b0 <scalbn+0xe0>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	e03a      	b.n	800a27e <scalbn+0xae>
 800a208:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a20c:	428a      	cmp	r2, r1
 800a20e:	d10c      	bne.n	800a22a <scalbn+0x5a>
 800a210:	ee10 2a10 	vmov	r2, s0
 800a214:	4620      	mov	r0, r4
 800a216:	4629      	mov	r1, r5
 800a218:	f7f6 f830 	bl	800027c <__adddf3>
 800a21c:	4604      	mov	r4, r0
 800a21e:	460d      	mov	r5, r1
 800a220:	e019      	b.n	800a256 <scalbn+0x86>
 800a222:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a226:	460b      	mov	r3, r1
 800a228:	3a36      	subs	r2, #54	; 0x36
 800a22a:	4432      	add	r2, r6
 800a22c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a230:	428a      	cmp	r2, r1
 800a232:	dd08      	ble.n	800a246 <scalbn+0x76>
 800a234:	2d00      	cmp	r5, #0
 800a236:	a120      	add	r1, pc, #128	; (adr r1, 800a2b8 <scalbn+0xe8>)
 800a238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a23c:	da1c      	bge.n	800a278 <scalbn+0xa8>
 800a23e:	a120      	add	r1, pc, #128	; (adr r1, 800a2c0 <scalbn+0xf0>)
 800a240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a244:	e018      	b.n	800a278 <scalbn+0xa8>
 800a246:	2a00      	cmp	r2, #0
 800a248:	dd08      	ble.n	800a25c <scalbn+0x8c>
 800a24a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a24e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a252:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a256:	ec45 4b10 	vmov	d0, r4, r5
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a260:	da19      	bge.n	800a296 <scalbn+0xc6>
 800a262:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a266:	429e      	cmp	r6, r3
 800a268:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a26c:	dd0a      	ble.n	800a284 <scalbn+0xb4>
 800a26e:	a112      	add	r1, pc, #72	; (adr r1, 800a2b8 <scalbn+0xe8>)
 800a270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e2      	bne.n	800a23e <scalbn+0x6e>
 800a278:	a30f      	add	r3, pc, #60	; (adr r3, 800a2b8 <scalbn+0xe8>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f9b3 	bl	80005e8 <__aeabi_dmul>
 800a282:	e7cb      	b.n	800a21c <scalbn+0x4c>
 800a284:	a10a      	add	r1, pc, #40	; (adr r1, 800a2b0 <scalbn+0xe0>)
 800a286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0b8      	beq.n	800a200 <scalbn+0x30>
 800a28e:	a10e      	add	r1, pc, #56	; (adr r1, 800a2c8 <scalbn+0xf8>)
 800a290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a294:	e7b4      	b.n	800a200 <scalbn+0x30>
 800a296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a29a:	3236      	adds	r2, #54	; 0x36
 800a29c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <scalbn+0x108>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	e7e8      	b.n	800a27e <scalbn+0xae>
 800a2ac:	f3af 8000 	nop.w
 800a2b0:	c2f8f359 	.word	0xc2f8f359
 800a2b4:	01a56e1f 	.word	0x01a56e1f
 800a2b8:	8800759c 	.word	0x8800759c
 800a2bc:	7e37e43c 	.word	0x7e37e43c
 800a2c0:	8800759c 	.word	0x8800759c
 800a2c4:	fe37e43c 	.word	0xfe37e43c
 800a2c8:	c2f8f359 	.word	0xc2f8f359
 800a2cc:	81a56e1f 	.word	0x81a56e1f
 800a2d0:	43500000 	.word	0x43500000
 800a2d4:	ffff3cb0 	.word	0xffff3cb0
 800a2d8:	3c900000 	.word	0x3c900000

0800a2dc <_init>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	bf00      	nop
 800a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e2:	bc08      	pop	{r3}
 800a2e4:	469e      	mov	lr, r3
 800a2e6:	4770      	bx	lr

0800a2e8 <_fini>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	bf00      	nop
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr
