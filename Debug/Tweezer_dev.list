
Tweezer_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005790  08005790  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005798  08005798  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  2000000c  080057ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  080057ac  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d13  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b3  00000000  00000000  00034d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00037108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00038288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024026  00000000  00000000  00039330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013553  00000000  00000000  0005d356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e664d  00000000  00000000  000708a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156ef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  00156f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005528 	.word	0x08005528

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005528 	.word	0x08005528

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <calcBuffLoc>:
static void MX_USART1_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
uint32_t calcBuffLoc(uint32_t startPos, uint32_t offSet, uint32_t buffSize)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
    uint32_t newLoc = startPos + offSet;
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4413      	add	r3, r2
 80004d6:	617b      	str	r3, [r7, #20]

    if (newLoc < buffSize)
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d201      	bcs.n	80004e4 <calcBuffLoc+0x20>
    {
        return newLoc;
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	e002      	b.n	80004ea <calcBuffLoc+0x26>
    }
    else
    {
        return newLoc - buffSize; // Loop Around
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	1ad3      	subs	r3, r2, r3
    }
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	371c      	adds	r7, #28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <generate_ODR_Buff>:
void generate_ODR_Buff()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80004fe:	af00      	add	r7, sp, #0
	const uint8_t singlePhaseBuff[TX_BUFF_SIZE] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0};
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	4aa6      	ldr	r2, [pc, #664]	; (80007a0 <generate_ODR_Buff+0x2a8>)
 8000506:	4618      	mov	r0, r3
 8000508:	4611      	mov	r1, r2
 800050a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050e:	461a      	mov	r2, r3
 8000510:	f004 fff4 	bl	80054fc <memcpy>
	const uint8_t biasBuff[BIAS_BUFF_SIZE] = {0, 0, 0, 1, 1, 1, 1, 1};
 8000514:	463b      	mov	r3, r7
 8000516:	4aa3      	ldr	r2, [pc, #652]	; (80007a4 <generate_ODR_Buff+0x2ac>)
 8000518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051c:	e883 0003 	stmia.w	r3, {r0, r1}

	uint32_t tx0Loc, tx1Loc, tx2Loc, tx3Loc, tx4Loc, tx5Loc, tx6Loc, tx7Loc = 0; // 0 ... 512-1: TX buffer locations
 8000520:	2300      	movs	r3, #0
 8000522:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	uint32_t biasLoc = 0;                                                        // 0 ... 8-1: Bias buffer location
 8000526:	2300      	movs	r3, #0
 8000528:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	uint32_t period = 0;                                                         // Period signal current output pin state
 800052c:	2300      	movs	r3, #0
 800052e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	uint32_t timeBase = 0;                                                       // Timebase signal current output pin state
 8000532:	2300      	movs	r3, #0
 8000534:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	uint32_t adcTrig = 0;                                                        // ADC external trigger signal current output pin state
 8000538:	2300      	movs	r3, #0
 800053a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint32_t ODRVal = 0;                                                        // Output data register state for all signals combined
 800053e:	2300      	movs	r3, #0
 8000540:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800054a:	e11d      	b.n	8000788 <generate_ODR_Buff+0x290>
	{
		tx0Loc = i;
 800054c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000550:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		/* Calculate other TX signals LUT location 45 degrees phase shifted */
		tx1Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 1, TX_BUFF_SIZE);
 8000554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000558:	2140      	movs	r1, #64	; 0x40
 800055a:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800055e:	f7ff ffb1 	bl	80004c4 <calcBuffLoc>
 8000562:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		tx2Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 2, TX_BUFF_SIZE);
 8000566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8000570:	f7ff ffa8 	bl	80004c4 <calcBuffLoc>
 8000574:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
		tx3Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 3, TX_BUFF_SIZE);
 8000578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800057c:	21c0      	movs	r1, #192	; 0xc0
 800057e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8000582:	f7ff ff9f 	bl	80004c4 <calcBuffLoc>
 8000586:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		tx4Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 4, TX_BUFF_SIZE);
 800058a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800058e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000592:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8000596:	f7ff ff95 	bl	80004c4 <calcBuffLoc>
 800059a:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		tx5Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 5, TX_BUFF_SIZE);
 800059e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80005a6:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80005aa:	f7ff ff8b 	bl	80004c4 <calcBuffLoc>
 80005ae:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		tx6Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 6, TX_BUFF_SIZE);
 80005b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80005ba:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80005be:	f7ff ff81 	bl	80004c4 <calcBuffLoc>
 80005c2:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
		tx7Loc = calcBuffLoc(tx0Loc, TX_BUFF_SIZE / 8 * 7, TX_BUFF_SIZE);
 80005c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ca:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80005ce:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80005d2:	f7ff ff77 	bl	80004c4 <calcBuffLoc>
 80005d6:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230

		/* calculate debug signals */
		period = (tx0Loc < TX_BUFF_SIZE / 2) ? 0 : 1;
 80005da:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80005de:	2bff      	cmp	r3, #255	; 0xff
 80005e0:	bf8c      	ite	hi
 80005e2:	2301      	movhi	r3, #1
 80005e4:	2300      	movls	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		timeBase = (tx0Loc % 2) ? 0 : 1; //flips every sample, timebase for debugging
 80005ec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

		/* Calculate ADC external trigger signal */
		adcTrig = ((tx0Loc + 7) % 8) ? 0 : 1; //ADC trigger signal every 8T, Offset by 6 to align ADC trigger (rising edge) on second period when the bias is low.
 8000602:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000606:	3307      	adds	r3, #7
 8000608:	f003 0307 	and.w	r3, r3, #7
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

		/* building the OCTL value */
		ODRVal = 0; //Set all pins low default
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

		if (singlePhaseBuff[tx0Loc])
 8000620:	f107 0208 	add.w	r2, r7, #8
 8000624:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <generate_ODR_Buff+0x144>
			ODRVal |= PWM0_Pin;
 8000630:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx1Loc])
 800063c:	f107 0208 	add.w	r2, r7, #8
 8000640:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <generate_ODR_Buff+0x160>
			ODRVal |= PWM45_Pin;
 800064c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx2Loc])
 8000658:	f107 0208 	add.w	r2, r7, #8
 800065c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d005      	beq.n	8000674 <generate_ODR_Buff+0x17c>
			ODRVal |= PWM90_Pin;
 8000668:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx3Loc])
 8000674:	f107 0208 	add.w	r2, r7, #8
 8000678:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <generate_ODR_Buff+0x198>
			ODRVal |= PWM135_Pin;
 8000684:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx4Loc])
 8000690:	f107 0208 	add.w	r2, r7, #8
 8000694:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d005      	beq.n	80006ac <generate_ODR_Buff+0x1b4>
			ODRVal |= PWM180_Pin;
 80006a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx5Loc])
 80006ac:	f107 0208 	add.w	r2, r7, #8
 80006b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d005      	beq.n	80006c8 <generate_ODR_Buff+0x1d0>
			ODRVal |= PWM225_Pin; //STM32l433RCTxP does not have Port C Pin 5
 80006bc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx6Loc])
 80006c8:	f107 0208 	add.w	r2, r7, #8
 80006cc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <generate_ODR_Buff+0x1ec>
			ODRVal |= PWM270_Pin;
 80006d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (singlePhaseBuff[tx7Loc])
 80006e4:	f107 0208 	add.w	r2, r7, #8
 80006e8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80006ec:	4413      	add	r3, r2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d005      	beq.n	8000700 <generate_ODR_Buff+0x208>
			ODRVal |= PWM315_Pin;
 80006f4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80006f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006fc:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (biasBuff[biasLoc])
 8000700:	463a      	mov	r2, r7
 8000702:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d005      	beq.n	800071a <generate_ODR_Buff+0x222>
			ODRVal |= BIAS_Pin; // Bias signal: 8T Period 3T LOW 5T HIGH
 800070e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000716:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (adcTrig)
 800071a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <generate_ODR_Buff+0x236>
			ODRVal |= ADC_TRIG_OUT_Pin; // ADC external trigger signal: 8T Period
 8000722:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800072a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (timeBase)
 800072e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <generate_ODR_Buff+0x24a>
			ODRVal |= TIMEBASE_Pin;     // DBG signal: TimeBase smallest period 1T
 8000736:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800073a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800073e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
		if (period)
 8000742:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000746:	2b00      	cmp	r3, #0
 8000748:	d005      	beq.n	8000756 <generate_ODR_Buff+0x25e>
			ODRVal |= PERIOD_Pin; // DBG signal: Period is the modulated Sine period. 512/2=256, 256T HIGH followed by 256T LOW
 800074a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800074e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000752:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

		/* Store OCTL value in buffer */
		ODR_Buff[i] = ODRVal;
 8000756:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800075a:	b299      	uxth	r1, r3
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <generate_ODR_Buff+0x2b0>)
 800075e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000762:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		/* Loop over bias signal template buffer when end is reached*/
		biasLoc++;
 8000766:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800076a:	3301      	adds	r3, #1
 800076c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
		if (biasLoc >= BIAS_BUFF_SIZE)
 8000770:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000774:	2b07      	cmp	r3, #7
 8000776:	d902      	bls.n	800077e <generate_ODR_Buff+0x286>
			biasLoc = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	for (uint32_t i = 0; i < TX_BUFF_SIZE; i++)
 800077e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000782:	3301      	adds	r3, #1
 8000784:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8000788:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800078c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000790:	f4ff aedc 	bcc.w	800054c <generate_ODR_Buff+0x54>
	}
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	f507 7710 	add.w	r7, r7, #576	; 0x240
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08005540 	.word	0x08005540
 80007a4:	08005740 	.word	0x08005740
 80007a8:	20000028 	.word	0x20000028

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fd96 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f85e 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 fa62 	bl	8000c80 <MX_GPIO_Init>
  MX_LCD_Init();
 80007bc:	f000 f914 	bl	80009e8 <MX_LCD_Init>
  MX_ADC1_Init();
 80007c0:	f000 f8ac 	bl	800091c <MX_ADC1_Init>
  MX_TIM2_Init();
 80007c4:	f000 f948 	bl	8000a58 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80007c8:	f000 f9f8 	bl	8000bbc <MX_USART1_UART_Init>
  MX_DMA_Init();
 80007cc:	f000 fa26 	bl	8000c1c <MX_DMA_Init>
  MX_TIM6_Init();
 80007d0:	f000 f9be 	bl	8000b50 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  generate_ODR_Buff();
 80007d4:	f7ff fe90 	bl	80004f8 <generate_ODR_Buff>
  HAL_DMA_Start(&hdma_tim6_up, (uint32_t)&ODR_Buff, (uint32_t)&GPIOC->ODR, TX_BUFF_SIZE);
 80007d8:	4921      	ldr	r1, [pc, #132]	; (8000860 <main+0xb4>)
 80007da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007de:	4a21      	ldr	r2, [pc, #132]	; (8000864 <main+0xb8>)
 80007e0:	4821      	ldr	r0, [pc, #132]	; (8000868 <main+0xbc>)
 80007e2:	f001 fe9b 	bl	800251c <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <main+0xc0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <main+0xc0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007f4:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim6);
 80007f6:	481d      	ldr	r0, [pc, #116]	; (800086c <main+0xc0>)
 80007f8:	f003 fd2a 	bl	8004250 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER0, 0xffff, 0xffff);
 80007fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	2100      	movs	r1, #0
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <main+0xc4>)
 8000808:	f002 f9fc 	bl	8002c04 <HAL_LCD_Write>
	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER2, 0xffff, 0xffff);
 800080c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000814:	2102      	movs	r1, #2
 8000816:	4816      	ldr	r0, [pc, #88]	; (8000870 <main+0xc4>)
 8000818:	f002 f9f4 	bl	8002c04 <HAL_LCD_Write>
	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER4, 0xffff, 0xffff);
 800081c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000824:	2104      	movs	r1, #4
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <main+0xc4>)
 8000828:	f002 f9ec 	bl	8002c04 <HAL_LCD_Write>
	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER6, 0xffff, 0xffff);
 800082c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000834:	2106      	movs	r1, #6
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <main+0xc4>)
 8000838:	f002 f9e4 	bl	8002c04 <HAL_LCD_Write>
	  HAL_LCD_UpdateDisplayRequest(&hlcd);
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <main+0xc4>)
 800083e:	f002 fa92 	bl	8002d66 <HAL_LCD_UpdateDisplayRequest>
	  HAL_Delay(500);
 8000842:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000846:	f000 fdc7 	bl	80013d8 <HAL_Delay>
	  HAL_LCD_Clear(&hlcd);
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <main+0xc4>)
 800084c:	f002 fa35 	bl	8002cba <HAL_LCD_Clear>
	  HAL_LCD_UpdateDisplayRequest(&hlcd);
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <main+0xc4>)
 8000852:	f002 fa88 	bl	8002d66 <HAL_LCD_UpdateDisplayRequest>
	  HAL_Delay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f000 fdbd 	bl	80013d8 <HAL_Delay>
	  HAL_LCD_Write(&hlcd, LCD_RAM_REGISTER0, 0xffff, 0xffff);
 800085e:	e7cd      	b.n	80007fc <main+0x50>
 8000860:	20000028 	.word	0x20000028
 8000864:	48000814 	.word	0x48000814
 8000868:	20000510 	.word	0x20000510
 800086c:	200005a0 	.word	0x200005a0
 8000870:	200005ec 	.word	0x200005ec

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b096      	sub	sp, #88	; 0x58
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2244      	movs	r2, #68	; 0x44
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fe48 	bl	8005518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000896:	f44f 7000 	mov.w	r0, #512	; 0x200
 800089a:	f002 facd 	bl	8002e38 <HAL_PWREx_ControlVoltageScaling>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a4:	f000 fa5c 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008a8:	230a      	movs	r3, #10
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b2:	2310      	movs	r3, #16
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008b6:	2301      	movs	r3, #1
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008be:	2302      	movs	r3, #2
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008c6:	2308      	movs	r3, #8
 80008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ca:	2307      	movs	r3, #7
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fb02 	bl	8002ee4 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x76>
  {
    Error_Handler();
 80008e6:	f000 fa3b 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2303      	movs	r3, #3
 80008f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	2103      	movs	r1, #3
 8000902:	4618      	mov	r0, r3
 8000904:	f002 ff0e 	bl	8003724 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800090e:	f000 fa27 	bl	8000d60 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3758      	adds	r7, #88	; 0x58
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <MX_ADC1_Init+0xc4>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_ADC1_Init+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093e:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800094a:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_ADC1_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000952:	2204      	movs	r2, #4
 8000954:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_ADC1_Init+0xc0>)
 800095e:	2200      	movs	r2, #0
 8000960:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000964:	2201      	movs	r2, #1
 8000966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_ADC1_Init+0xc0>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000972:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_ADC1_Init+0xc0>)
 800097a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_ADC1_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000996:	4811      	ldr	r0, [pc, #68]	; (80009dc <MX_ADC1_Init+0xc0>)
 8000998:	f000 fece 	bl	8001738 <HAL_ADC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80009a2:	f000 f9dd 	bl	8000d60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_ADC1_Init+0xc8>)
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009aa:	2306      	movs	r3, #6
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009b2:	237f      	movs	r3, #127	; 0x7f
 80009b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009b6:	2304      	movs	r3, #4
 80009b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_ADC1_Init+0xc0>)
 80009c4:	f001 f800 	bl	80019c8 <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80009ce:	f000 f9c7 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000428 	.word	0x20000428
 80009e0:	50040000 	.word	0x50040000
 80009e4:	21800100 	.word	0x21800100

080009e8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_LCD_Init+0x68>)
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <MX_LCD_Init+0x6c>)
 80009f0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_LCD_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_LCD_Init+0x68>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a00:	220c      	movs	r2, #12
 8000a02:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_3;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_3;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a12:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000a16:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_ENABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_LCD_Init+0x68>)
 8000a3e:	f002 f821 	bl	8002a84 <HAL_LCD_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_LCD_Init+0x64>
  {
    Error_Handler();
 8000a48:	f000 f98a 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200005ec 	.word	0x200005ec
 8000a54:	40002400 	.word	0x40002400

08000a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7c:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a84:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000a92:	4a2e      	ldr	r2, [pc, #184]	; (8000b4c <MX_TIM2_Init+0xf4>)
 8000a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aa2:	4829      	ldr	r0, [pc, #164]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000aa4:	f003 fc20 	bl	80042e8 <HAL_TIM_PWM_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000aae:	f000 f957 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4821      	ldr	r0, [pc, #132]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000ac2:	f004 f85f 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000acc:	f000 f948 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad0:	2360      	movs	r3, #96	; 0x60
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4818      	ldr	r0, [pc, #96]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000ae8:	f003 fc56 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000af2:	f000 f935 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	2204      	movs	r2, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000afe:	f003 fc4b 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b08:	f000 f92a 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2208      	movs	r2, #8
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000b14:	f003 fc40 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000b1e:	f000 f91f 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	220c      	movs	r2, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000b2a:	f003 fc35 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000b34:	f000 f914 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <MX_TIM2_Init+0xf0>)
 8000b3a:	f000 faa9 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000628 	.word	0x20000628
 8000b4c:	000f4240 	.word	0x000f4240

08000b50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_TIM6_Init+0x64>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <MX_TIM6_Init+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1-1;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_TIM6_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_TIM6_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 246-1;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_TIM6_Init+0x64>)
 8000b74:	22f5      	movs	r2, #245	; 0xf5
 8000b76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_TIM6_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_TIM6_Init+0x64>)
 8000b80:	f003 fb0e 	bl	80041a0 <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b8a:	f000 f8e9 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_TIM6_Init+0x64>)
 8000b9c:	f003 fff2 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000ba6:	f000 f8db 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200005a0 	.word	0x200005a0
 8000bb8:	40001000 	.word	0x40001000

08000bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART1_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000c00:	f004 f826 	bl	8004c50 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f000 f8a9 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000048c 	.word	0x2000048c
 8000c18:	40013800 	.word	0x40013800

08000c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_DMA_Init+0x60>)
 8000c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <MX_DMA_Init+0x60>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6493      	str	r3, [r2, #72]	; 0x48
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_DMA_Init+0x60>)
 8000c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_DMA_Init+0x60>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <MX_DMA_Init+0x60>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6493      	str	r3, [r2, #72]	; 0x48
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_DMA_Init+0x60>)
 8000c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	200b      	movs	r0, #11
 8000c58:	f001 fb71 	bl	800233e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c5c:	200b      	movs	r0, #11
 8000c5e:	f001 fb8a 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	203b      	movs	r0, #59	; 0x3b
 8000c68:	f001 fb69 	bl	800233e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000c6c:	203b      	movs	r0, #59	; 0x3b
 8000c6e:	f001 fb82 	bl	8002376 <HAL_NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a29      	ldr	r2, [pc, #164]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_GPIO_Init+0xd8>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f641 71df 	movw	r1, #8159	; 0x1fdf
 8000ce4:	481d      	ldr	r0, [pc, #116]	; (8000d5c <MX_GPIO_Init+0xdc>)
 8000ce6:	f001 feb5 	bl	8002a54 <HAL_GPIO_WritePin>
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |BIAS_Pin|ADC_TRIG_OUT_Pin|PERIOD_Pin|TIMEBASE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHIELD_GPIO_Port, SHIELD_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2104      	movs	r1, #4
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f001 feaf 	bl	8002a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWM0_Pin PWM45_Pin PWM90_Pin PWM135_Pin
                           PWM180_Pin PWM225_Pin PWM270_Pin PWM315_Pin
                           BIAS_Pin ADC_TRIG_OUT_Pin PERIOD_Pin TIMEBASE_Pin */
  GPIO_InitStruct.Pin = PWM0_Pin|PWM45_Pin|PWM90_Pin|PWM135_Pin
 8000cf6:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8000cfa:	60fb      	str	r3, [r7, #12]
                          |PWM180_Pin|PWM225_Pin|PWM270_Pin|PWM315_Pin
                          |BIAS_Pin|ADC_TRIG_OUT_Pin|PERIOD_Pin|TIMEBASE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <MX_GPIO_Init+0xdc>)
 8000d10:	f001 fd26 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHIELD_Pin */
  GPIO_InitStruct.Pin = SHIELD_Pin;
 8000d14:	2304      	movs	r3, #4
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SHIELD_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f001 fd17 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_Pin PA11 */
  GPIO_InitStruct.Pin = BTN_Pin|GPIO_PIN_11;
 8000d32:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f001 fd08 	bl	8002760 <HAL_GPIO_Init>

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0a2      	sub	sp, #136	; 0x88
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2260      	movs	r2, #96	; 0x60
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fb9f 	bl	8005518 <memset>
  if(hadc->Instance==ADC1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d15f      	bne.n	8000ea4 <HAL_ADC_MspInit+0xf0>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000de8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000dea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000dee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 fe9b 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e00:	f7ff ffae 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_ADC_MspInit+0xfc>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <HAL_ADC_MspInit+0xfc>)
 8000e0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <HAL_ADC_MspInit+0xfc>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_ADC_MspInit+0xfc>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <HAL_ADC_MspInit+0xfc>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <HAL_ADC_MspInit+0xfc>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e34:	2308      	movs	r3, #8
 8000e36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e38:	230b      	movs	r3, #11
 8000e3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f001 fc89 	bl	8002760 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_ADC_MspInit+0x104>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e8a:	f001 fa8f 	bl	80023ac <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000e94:	f7ff ff64 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000e9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <HAL_ADC_MspInit+0x100>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3788      	adds	r7, #136	; 0x88
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	50040000 	.word	0x50040000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	20000558 	.word	0x20000558
 8000eb8:	40020008 	.word	0x40020008

08000ebc <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0a2      	sub	sp, #136	; 0x88
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2260      	movs	r2, #96	; 0x60
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fb1b 	bl	8005518 <memset>
  if(hlcd->Instance==LCD)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a31      	ldr	r2, [pc, #196]	; (8000fac <HAL_LCD_MspInit+0xf0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d15a      	bne.n	8000fa2 <HAL_LCD_MspInit+0xe6>
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fe17 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_LCD_MspInit+0x50>
    {
      Error_Handler();
 8000f08:	f7ff ff2a 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6593      	str	r3, [r2, #88]	; 0x58
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_LCD_MspInit+0xf4>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
    PA10     ------> LCD_COM2
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f54:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000f58:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f68:	230b      	movs	r3, #11
 8000f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f001 fbf2 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8000f7c:	f243 2337 	movw	r3, #12855	; 0x3237
 8000f80:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f90:	230b      	movs	r3, #11
 8000f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_LCD_MspInit+0xf8>)
 8000f9e:	f001 fbdf 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3788      	adds	r7, #136	; 0x88
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40002400 	.word	0x40002400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x38>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x38>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x38>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_TIM_Base_MspInit+0x8c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d137      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_TIM_Base_MspInit+0x90>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <HAL_TIM_Base_MspInit+0x90>)
 800100c:	f043 0310 	orr.w	r3, r3, #16
 8001010:	6593      	str	r3, [r2, #88]	; 0x58
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_TIM_Base_MspInit+0x90>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA2_Channel4;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 8001020:	4a1a      	ldr	r2, [pc, #104]	; (800108c <HAL_TIM_Base_MspInit+0x98>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_3;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 8001026:	2203      	movs	r2, #3
 8001028:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 800102c:	2210      	movs	r2, #16
 800102e:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 800103e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001042:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 8001046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104a:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 800104e:	2220      	movs	r2, #32
 8001050:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 8001054:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001058:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 800105c:	f001 f9a6 	bl	80023ac <HAL_DMA_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8001066:	f7ff fe7b 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 800106e:	621a      	str	r2, [r3, #32]
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <HAL_TIM_Base_MspInit+0x94>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40001000 	.word	0x40001000
 8001084:	40021000 	.word	0x40021000
 8001088:	20000510 	.word	0x20000510
 800108c:	40020444 	.word	0x40020444

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b0:	d139      	bne.n	8001126 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_TIM_MspPostInit+0xa0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <HAL_TIM_MspPostInit+0xa0>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_TIM_MspPostInit+0xa0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_TIM_MspPostInit+0xa0>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <HAL_TIM_MspPostInit+0xa0>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_TIM_MspPostInit+0xa0>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e2:	2303      	movs	r3, #3
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f2:	2301      	movs	r3, #1
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f001 fb2e 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001104:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001116:	2301      	movs	r3, #1
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <HAL_TIM_MspPostInit+0xa4>)
 8001122:	f001 fb1d 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0a2      	sub	sp, #136	; 0x88
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2260      	movs	r2, #96	; 0x60
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f004 f9dd 	bl	8005518 <memset>
  if(huart->Instance==USART1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_UART_MspInit+0xa8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d137      	bne.n	80011d8 <HAL_UART_MspInit+0xa0>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fcdb 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001180:	f7ff fdee 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_UART_MspInit+0xac>)
 8001186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001188:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <HAL_UART_MspInit+0xac>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118e:	6613      	str	r3, [r2, #96]	; 0x60
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_UART_MspInit+0xac>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_UART_MspInit+0xac>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_UART_MspInit+0xac>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_UART_MspInit+0xac>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b4:	23c0      	movs	r3, #192	; 0xc0
 80011b6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c6:	2307      	movs	r3, #7
 80011c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_UART_MspInit+0xb0>)
 80011d4:	f001 fac4 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3788      	adds	r7, #136	; 0x88
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000400 	.word	0x48000400

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001238:	f000 f8ae 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <DMA1_Channel1_IRQHandler+0x10>)
 8001246:	f001 f9ac 	bl	80025a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000558 	.word	0x20000558

08001254 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <DMA2_Channel4_IRQHandler+0x10>)
 800125a:	f001 f9a2 	bl	80025a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000510 	.word	0x20000510

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001290:	f7ff ffea 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	; (80012cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LoopForever+0xe>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	; (80012d8 <LoopForever+0x16>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f004 f8fb 	bl	80054b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012be:	f7ff fa75 	bl	80007ac <main>

080012c2 <LoopForever>:

LoopForever:
    b LoopForever
 80012c2:	e7fe      	b.n	80012c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012d0:	080057a0 	.word	0x080057a0
  ldr r2, =_sbss
 80012d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d8:	20000678 	.word	0x20000678

080012dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_Init+0x3c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_Init+0x3c>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f001 f816 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 f80f 	bl	8001320 <HAL_InitTick>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	e001      	b.n	8001312 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800130e:	f7ff fd2d 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001312:	79fb      	ldrb	r3, [r7, #7]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_InitTick+0x6c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_InitTick+0x70>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <HAL_InitTick+0x6c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f001 f821 	bl	8002392 <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10f      	bne.n	8001376 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d809      	bhi.n	8001370 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 ffeb 	bl	800233e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_InitTick+0x74>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e007      	b.n	8001380 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e004      	b.n	8001380 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e001      	b.n	8001380 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	20000000 	.word	0x20000000
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000674 	.word	0x20000674

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000674 	.word	0x20000674

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008

08001420 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3360      	adds	r3, #96	; 0x60
 800149a:	461a      	mov	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <LL_ADC_SetOffset+0x44>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014c0:	bf00      	nop
 80014c2:	371c      	adds	r7, #28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	03fff000 	.word	0x03fff000

080014d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3360      	adds	r3, #96	; 0x60
 80014de:	461a      	mov	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3360      	adds	r3, #96	; 0x60
 800150c:	461a      	mov	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001532:	b480      	push	{r7}
 8001534:	b087      	sub	sp, #28
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3330      	adds	r3, #48	; 0x30
 8001542:	461a      	mov	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	4413      	add	r3, r2
 8001550:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	211f      	movs	r1, #31
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0e9b      	lsrs	r3, r3, #26
 800156a:	f003 011f 	and.w	r1, r3, #31
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800158a:	b480      	push	{r7}
 800158c:	b087      	sub	sp, #28
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3314      	adds	r3, #20
 800159a:	461a      	mov	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	0e5b      	lsrs	r3, r3, #25
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	4413      	add	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	0d1b      	lsrs	r3, r3, #20
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	2107      	movs	r1, #7
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	0d1b      	lsrs	r3, r3, #20
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	431a      	orrs	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015d4:	bf00      	nop
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0318 	and.w	r3, r3, #24
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001604:	40d9      	lsrs	r1, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	400b      	ands	r3, r1
 800160a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160e:	431a      	orrs	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	0007ffff 	.word	0x0007ffff

08001628 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001638:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6093      	str	r3, [r2, #8]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800165c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001660:	d101      	bne.n	8001666 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001688:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <LL_ADC_IsEnabled+0x18>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_ADC_IsEnabled+0x1a>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d101      	bne.n	8001702 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b08      	cmp	r3, #8
 8001722:	d101      	bne.n	8001728 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e12c      	b.n	80019ac <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fb27 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff67 	bl	800164c <LL_ADC_IsDeepPowerDownEnabled>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff4d 	bl	8001628 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff82 	bl	800169c <LL_ADC_IsInternalRegulatorEnabled>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d115      	bne.n	80017ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff66 	bl	8001674 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a8:	4b82      	ldr	r3, [pc, #520]	; (80019b4 <HAL_ADC_Init+0x27c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	4a82      	ldr	r2, [pc, #520]	; (80019b8 <HAL_ADC_Init+0x280>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff64 	bl	800169c <LL_ADC_IsInternalRegulatorEnabled>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10d      	bne.n	80017f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	f043 0210 	orr.w	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff75 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 8001800:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 80c5 	bne.w	800199a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80c1 	bne.w	800199a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff49 	bl	80016c4 <LL_ADC_IsEnabled>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10b      	bne.n	8001850 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001838:	4860      	ldr	r0, [pc, #384]	; (80019bc <HAL_ADC_Init+0x284>)
 800183a:	f7ff ff43 	bl	80016c4 <LL_ADC_IsEnabled>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4619      	mov	r1, r3
 800184a:	485d      	ldr	r0, [pc, #372]	; (80019c0 <HAL_ADC_Init+0x288>)
 800184c:	f7ff fde8 	bl	8001420 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7e5b      	ldrb	r3, [r3, #25]
 8001854:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800185a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001860:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001866:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d106      	bne.n	800188c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	3b01      	subs	r3, #1
 8001884:	045b      	lsls	r3, r3, #17
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <HAL_ADC_Init+0x28c>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	69b9      	ldr	r1, [r7, #24]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff12 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 80018c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff1f 	bl	8001710 <LL_ADC_INJ_IsConversionOngoing>
 80018d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d13d      	bne.n	8001956 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d13a      	bne.n	8001956 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018fc:	f023 0302 	bic.w	r3, r3, #2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	69b9      	ldr	r1, [r7, #24]
 8001906:	430b      	orrs	r3, r1
 8001908:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001910:	2b01      	cmp	r3, #1
 8001912:	d118      	bne.n	8001946 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800192a:	4311      	orrs	r1, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001936:	430a      	orrs	r2, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	e007      	b.n	8001956 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d10c      	bne.n	8001978 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f023 010f 	bic.w	r1, r3, #15
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	1e5a      	subs	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
 8001976:	e007      	b.n	8001988 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 020f 	bic.w	r2, r2, #15
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f023 0303 	bic.w	r3, r3, #3
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
 8001998:	e007      	b.n	80019aa <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199e:	f043 0210 	orr.w	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000000 	.word	0x20000000
 80019b8:	053e2d63 	.word	0x053e2d63
 80019bc:	50040000 	.word	0x50040000
 80019c0:	50040300 	.word	0x50040300
 80019c4:	fff0c007 	.word	0xfff0c007

080019c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0b6      	sub	sp, #216	; 0xd8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x22>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e3b9      	b.n	800215e <HAL_ADC_ConfigChannel+0x796>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fe77 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 839e 	bne.w	8002140 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d824      	bhi.n	8001a56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	3b02      	subs	r3, #2
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d81b      	bhi.n	8001a4e <HAL_ADC_ConfigChannel+0x86>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <HAL_ADC_ConfigChannel+0x54>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a35 	.word	0x08001a35
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a45 	.word	0x08001a45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	220c      	movs	r2, #12
 8001a30:	605a      	str	r2, [r3, #4]
          break;
 8001a32:	e011      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2212      	movs	r2, #18
 8001a38:	605a      	str	r2, [r3, #4]
          break;
 8001a3a:	e00d      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2218      	movs	r2, #24
 8001a40:	605a      	str	r2, [r3, #4]
          break;
 8001a42:	e009      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4a:	605a      	str	r2, [r3, #4]
          break;
 8001a4c:	e004      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2206      	movs	r2, #6
 8001a52:	605a      	str	r2, [r3, #4]
          break;
 8001a54:	e000      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	f7ff fd64 	bl	8001532 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe3b 	bl	80016ea <LL_ADC_REG_IsConversionOngoing>
 8001a74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fe47 	bl	8001710 <LL_ADC_INJ_IsConversionOngoing>
 8001a82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 81a6 	bne.w	8001ddc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 81a1 	bne.w	8001ddc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f7ff fd6f 	bl	800158a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d00a      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ade:	f7ff fcd3 	bl	8001488 <LL_ADC_SetOffset>
 8001ae2:	e17b      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fcf0 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x148>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fce5 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 021f 	and.w	r2, r3, #31
 8001b0e:	e01e      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x186>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fcda 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e004      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x19e>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	e018      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1d0>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	e004      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d106      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fca9 	bl	80014fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fc8d 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x20e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc82 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	e01e      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x24c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fc77 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c04:	2320      	movs	r3, #32
 8001c06:	e004      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x264>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	e018      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x296>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e004      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d106      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fc46 	bl	80014fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2102      	movs	r1, #2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fc2a 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x2d4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fc1f 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	f003 021f 	and.w	r2, r3, #31
 8001c9a:	e01e      	b.n	8001cda <HAL_ADC_ConfigChannel+0x312>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fc14 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e004      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d105      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x32a>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0e9b      	lsrs	r3, r3, #26
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	e016      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x358>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d12:	2320      	movs	r3, #32
 8001d14:	e004      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d106      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fbe5 	bl	80014fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2103      	movs	r1, #3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fbc9 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10a      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x396>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fbbe 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	e017      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x3c6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2103      	movs	r1, #3
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fbb3 	bl	80014d0 <LL_ADC_GetOffsetChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e003      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x3de>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	e011      	b.n	8001dca <HAL_ADC_ConfigChannel+0x402>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d106      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2103      	movs	r1, #3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fb90 	bl	80014fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fc6f 	bl	80016c4 <LL_ADC_IsEnabled>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 813f 	bne.w	800206c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f7ff fbf0 	bl	80015e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <HAL_ADC_ConfigChannel+0x678>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	f040 8130 	bne.w	800206c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10b      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x46c>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e9b      	lsrs	r3, r3, #26
 8001e22:	3301      	adds	r3, #1
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e019      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x4a0>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2b09      	cmp	r3, #9
 8001e60:	bf94      	ite	ls
 8001e62:	2301      	movls	r3, #1
 8001e64:	2300      	movhi	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d079      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x4c0>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	3301      	adds	r3, #1
 8001e80:	069b      	lsls	r3, r3, #26
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e86:	e015      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x4ec>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e003      	b.n	8001eac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	069b      	lsls	r3, r3, #26
 8001eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x50c>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	e017      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x53c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	fa93 f3a3 	rbit	r3, r3
 8001ee0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001eec:	2320      	movs	r3, #32
 8001eee:	e003      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	ea42 0103 	orr.w	r1, r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x562>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	051b      	lsls	r3, r3, #20
 8001f28:	e018      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x594>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f42:	2320      	movs	r3, #32
 8001f44:	e003      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	e080      	b.n	8002062 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x5b4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	3301      	adds	r3, #1
 8001f74:	069b      	lsls	r3, r3, #26
 8001f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7a:	e015      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x5e0>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e003      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	069b      	lsls	r3, r3, #26
 8001fa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x600>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	e017      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x630>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	61fb      	str	r3, [r7, #28]
  return result;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e003      	b.n	8001fec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	ea42 0103 	orr.w	r1, r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x65c>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	3301      	adds	r3, #1
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	3b1e      	subs	r3, #30
 800201c:	051b      	lsls	r3, r3, #20
 800201e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002022:	e01d      	b.n	8002060 <HAL_ADC_ConfigChannel+0x698>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	613b      	str	r3, [r7, #16]
  return result;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e005      	b.n	800204c <HAL_ADC_ConfigChannel+0x684>
 8002040:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	3b1e      	subs	r3, #30
 800205a:	051b      	lsls	r3, r3, #20
 800205c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002060:	430b      	orrs	r3, r1
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6892      	ldr	r2, [r2, #8]
 8002066:	4619      	mov	r1, r3
 8002068:	f7ff fa8f 	bl	800158a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_ADC_ConfigChannel+0x7a0>)
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d06c      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002078:	483c      	ldr	r0, [pc, #240]	; (800216c <HAL_ADC_ConfigChannel+0x7a4>)
 800207a:	f7ff f9f7 	bl	800146c <LL_ADC_GetCommonPathInternalCh>
 800207e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <HAL_ADC_ConfigChannel+0x7a8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d127      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800208c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d121      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a35      	ldr	r2, [pc, #212]	; (8002174 <HAL_ADC_ConfigChannel+0x7ac>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d157      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020aa:	4619      	mov	r1, r3
 80020ac:	482f      	ldr	r0, [pc, #188]	; (800216c <HAL_ADC_ConfigChannel+0x7a4>)
 80020ae:	f7ff f9ca 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_ADC_ConfigChannel+0x7b0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	4a30      	ldr	r2, [pc, #192]	; (800217c <HAL_ADC_ConfigChannel+0x7b4>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	099b      	lsrs	r3, r3, #6
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020cc:	e002      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f9      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020da:	e03a      	b.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a27      	ldr	r2, [pc, #156]	; (8002180 <HAL_ADC_ConfigChannel+0x7b8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d113      	bne.n	800210e <HAL_ADC_ConfigChannel+0x746>
 80020e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_ADC_ConfigChannel+0x7ac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d12a      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002100:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002104:	4619      	mov	r1, r3
 8002106:	4819      	ldr	r0, [pc, #100]	; (800216c <HAL_ADC_ConfigChannel+0x7a4>)
 8002108:	f7ff f99d 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800210c:	e021      	b.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_ADC_ConfigChannel+0x7bc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d11c      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800211c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d116      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_ADC_ConfigChannel+0x7ac>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d111      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800212e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002136:	4619      	mov	r1, r3
 8002138:	480c      	ldr	r0, [pc, #48]	; (800216c <HAL_ADC_ConfigChannel+0x7a4>)
 800213a:	f7ff f984 	bl	8001446 <LL_ADC_SetCommonPathInternalCh>
 800213e:	e008      	b.n	8002152 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f043 0220 	orr.w	r2, r3, #32
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800215a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800215e:	4618      	mov	r0, r3
 8002160:	37d8      	adds	r7, #216	; 0xd8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	80080000 	.word	0x80080000
 800216c:	50040300 	.word	0x50040300
 8002170:	c7520000 	.word	0xc7520000
 8002174:	50040000 	.word	0x50040000
 8002178:	20000000 	.word	0x20000000
 800217c:	053e2d63 	.word	0x053e2d63
 8002180:	cb840000 	.word	0xcb840000
 8002184:	80000001 	.word	0x80000001

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <__NVIC_EnableIRQ+0x38>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f7ff ff8e 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff29 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002350:	f7ff ff3e 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 8002354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff ff8e 	bl	800227c <NVIC_EncodePriority>
 8002360:	4602      	mov	r2, r0
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5d 	bl	8002228 <__NVIC_SetPriority>
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff31 	bl	80021ec <__NVIC_EnableIRQ>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffa2 	bl	80022e4 <SysTick_Config>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e098      	b.n	80024f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_DMA_Init+0x150>)
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d80f      	bhi.n	80023ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_DMA_Init+0x154>)
 80023d2:	4413      	add	r3, r2
 80023d4:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <HAL_DMA_Init+0x158>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	009a      	lsls	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_DMA_Init+0x15c>)
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
 80023e8:	e00e      	b.n	8002408 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_DMA_Init+0x160>)
 80023f2:	4413      	add	r3, r2
 80023f4:	4a43      	ldr	r2, [pc, #268]	; (8002504 <HAL_DMA_Init+0x158>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	009a      	lsls	r2, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a42      	ldr	r2, [pc, #264]	; (8002510 <HAL_DMA_Init+0x164>)
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002462:	d039      	beq.n	80024d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_DMA_Init+0x15c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d11a      	bne.n	80024a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_DMA_Init+0x168>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f003 031c 	and.w	r3, r3, #28
 800247a:	210f      	movs	r1, #15
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	4924      	ldr	r1, [pc, #144]	; (8002514 <HAL_DMA_Init+0x168>)
 8002484:	4013      	ands	r3, r2
 8002486:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_DMA_Init+0x168>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f003 031c 	and.w	r3, r3, #28
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	491d      	ldr	r1, [pc, #116]	; (8002514 <HAL_DMA_Init+0x168>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
 80024a2:	e019      	b.n	80024d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_DMA_Init+0x16c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	f003 031c 	and.w	r3, r3, #28
 80024b0:	210f      	movs	r1, #15
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	4917      	ldr	r1, [pc, #92]	; (8002518 <HAL_DMA_Init+0x16c>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_DMA_Init+0x16c>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 031c 	and.w	r3, r3, #28
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	4911      	ldr	r1, [pc, #68]	; (8002518 <HAL_DMA_Init+0x16c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40020407 	.word	0x40020407
 8002500:	bffdfff8 	.word	0xbffdfff8
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	40020000 	.word	0x40020000
 800250c:	bffdfbf8 	.word	0xbffdfbf8
 8002510:	40020400 	.word	0x40020400
 8002514:	400200a8 	.word	0x400200a8
 8002518:	400204a8 	.word	0x400204a8

0800251c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_DMA_Start+0x20>
 8002538:	2302      	movs	r3, #2
 800253a:	e02e      	b.n	800259a <HAL_DMA_Start+0x7e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d11d      	bne.n	800258c <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f8c3 	bl	8002700 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e005      	b.n	8002598 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002598:	7dfb      	ldrb	r3, [r7, #23]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f003 031c 	and.w	r3, r3, #28
 80025c2:	2204      	movs	r2, #4
 80025c4:	409a      	lsls	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d026      	beq.n	800261c <HAL_DMA_IRQHandler+0x7a>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d021      	beq.n	800261c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0204 	bic.w	r2, r2, #4
 80025f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 021c 	and.w	r2, r3, #28
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2104      	movs	r1, #4
 8002604:	fa01 f202 	lsl.w	r2, r1, r2
 8002608:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	2b00      	cmp	r3, #0
 8002610:	d071      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800261a:	e06c      	b.n	80026f6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f003 031c 	and.w	r3, r3, #28
 8002624:	2202      	movs	r2, #2
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d02e      	beq.n	800268e <HAL_DMA_IRQHandler+0xec>
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d029      	beq.n	800268e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 020a 	bic.w	r2, r2, #10
 8002656:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f003 021c 	and.w	r2, r3, #28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	2102      	movs	r1, #2
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d038      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800268c:	e033      	b.n	80026f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f003 031c 	and.w	r3, r3, #28
 8002696:	2208      	movs	r2, #8
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d02a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x156>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d025      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020e 	bic.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	f003 021c 	and.w	r2, r3, #28
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
}
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 021c 	and.w	r2, r3, #28
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d108      	bne.n	8002744 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002742:	e007      	b.n	8002754 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	60da      	str	r2, [r3, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	e154      	b.n	8002a1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8146 	beq.w	8002a14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d005      	beq.n	80027a0 <HAL_GPIO_Init+0x40>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d130      	bne.n	8002802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027d6:	2201      	movs	r2, #1
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 0201 	and.w	r2, r3, #1
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b03      	cmp	r3, #3
 800280c:	d017      	beq.n	800283e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d123      	bne.n	8002892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	6939      	ldr	r1, [r7, #16]
 800288e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0203 	and.w	r2, r3, #3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80a0 	beq.w	8002a14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d4:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <HAL_GPIO_Init+0x2d8>)
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	4a57      	ldr	r2, [pc, #348]	; (8002a38 <HAL_GPIO_Init+0x2d8>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6613      	str	r3, [r2, #96]	; 0x60
 80028e0:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <HAL_GPIO_Init+0x2d8>)
 80028e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028ec:	4a53      	ldr	r2, [pc, #332]	; (8002a3c <HAL_GPIO_Init+0x2dc>)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002916:	d019      	beq.n	800294c <HAL_GPIO_Init+0x1ec>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a49      	ldr	r2, [pc, #292]	; (8002a40 <HAL_GPIO_Init+0x2e0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_GPIO_Init+0x1e8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a48      	ldr	r2, [pc, #288]	; (8002a44 <HAL_GPIO_Init+0x2e4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00d      	beq.n	8002944 <HAL_GPIO_Init+0x1e4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a47      	ldr	r2, [pc, #284]	; (8002a48 <HAL_GPIO_Init+0x2e8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x1e0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a46      	ldr	r2, [pc, #280]	; (8002a4c <HAL_GPIO_Init+0x2ec>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_GPIO_Init+0x1dc>
 8002938:	2304      	movs	r3, #4
 800293a:	e008      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 800293c:	2307      	movs	r3, #7
 800293e:	e006      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 8002940:	2303      	movs	r3, #3
 8002942:	e004      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 8002944:	2302      	movs	r3, #2
 8002946:	e002      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_GPIO_Init+0x1ee>
 800294c:	2300      	movs	r3, #0
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	f002 0203 	and.w	r2, r2, #3
 8002954:	0092      	lsls	r2, r2, #2
 8002956:	4093      	lsls	r3, r2
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800295e:	4937      	ldr	r1, [pc, #220]	; (8002a3c <HAL_GPIO_Init+0x2dc>)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3302      	adds	r3, #2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800296c:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002990:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029c0:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_GPIO_Init+0x2f0>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3301      	adds	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f47f aea3 	bne.w	8002770 <HAL_GPIO_Init+0x10>
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	48000400 	.word	0x48000400
 8002a44:	48000800 	.word	0x48000800
 8002a48:	48000c00 	.word	0x48000c00
 8002a4c:	48001000 	.word	0x48001000
 8002a50:	40010400 	.word	0x40010400

08002a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	4613      	mov	r3, r2
 8002a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0af      	b.n	8002bf6 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fa06 	bl	8000ebc <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e00a      	b.n	8002ae4 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	2200      	movs	r2, #0
 8002adc:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	d9f1      	bls.n	8002ace <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0204 	orr.w	r2, r2, #4
 8002af8:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_LCD_Init+0x17c>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6851      	ldr	r1, [r2, #4]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6892      	ldr	r2, [r2, #8]
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b12:	4311      	orrs	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b18:	4311      	orrs	r1, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	69d2      	ldr	r2, [r2, #28]
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6a12      	ldr	r2, [r2, #32]
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6992      	ldr	r2, [r2, #24]
 8002b2a:	4311      	orrs	r1, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	430b      	orrs	r3, r1
 8002b38:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f94c 	bl	8002dd8 <LCD_WaitForSynchro>
 8002b40:	4603      	mov	r3, r0
 8002b42:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_LCD_Init+0xca>
  {
    return status;
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	e053      	b.n	8002bf6 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002b86:	f7fe fc1b 	bl	80013c0 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002b8c:	e00c      	b.n	8002ba8 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002b8e:	f7fe fc17 	bl	80013c0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b9c:	d904      	bls.n	8002ba8 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e026      	b.n	8002bf6 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002bb6:	f7fe fc03 	bl	80013c0 <HAL_GetTick>
 8002bba:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002bbc:	e00c      	b.n	8002bd8 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002bbe:	f7fe fbff 	bl	80013c0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bcc:	d904      	bls.n	8002bd8 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e00e      	b.n	8002bf6 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d1eb      	bne.n	8002bbe <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	fc00000e 	.word	0xfc00000e

08002c04 <HAL_LCD_Write>:
  * @param RAMRegisterMask specifies the LCD RAM Register Data Mask.
  * @param Data specifies LCD Data Value to be written.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  HAL_LCD_StateTypeDef state = hlcd->State;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	75fb      	strb	r3, [r7, #23]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <HAL_LCD_Write+0x22>
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d144      	bne.n	8002cb0 <HAL_LCD_Write+0xac>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));

    if (hlcd->State == HAL_LCD_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d12a      	bne.n	8002c88 <HAL_LCD_Write+0x84>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_LCD_Write+0x3c>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e038      	b.n	8002cb2 <HAL_LCD_Write+0xae>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hlcd->State = HAL_LCD_STATE_BUSY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Get timeout */
      tickstart = HAL_GetTick();
 8002c50:	f7fe fbb6 	bl	80013c0 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /*!< Wait Until the LCD is ready */
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002c56:	e010      	b.n	8002c7a <HAL_LCD_Write+0x76>
      {
        if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002c58:	f7fe fbb2 	bl	80013c0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c66:	d908      	bls.n	8002c7a <HAL_LCD_Write+0x76>
        {
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e01b      	b.n	8002cb2 <HAL_LCD_Write+0xae>
      while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d0e7      	beq.n	8002c58 <HAL_LCD_Write+0x54>
        }
      }
    }

    /* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	401a      	ands	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_LCD_Write+0xae>
  }
  else
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8002cce:	7cbb      	ldrb	r3, [r7, #18]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d002      	beq.n	8002cda <HAL_LCD_Clear+0x20>
 8002cd4:	7cbb      	ldrb	r3, [r7, #18]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d140      	bne.n	8002d5c <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_LCD_Clear+0x2e>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e03a      	b.n	8002d5e <HAL_LCD_Clear+0xa4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe fb62 	bl	80013c0 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002cfe:	e010      	b.n	8002d22 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002d00:	f7fe fb5e 	bl	80013c0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d0e:	d908      	bls.n	8002d22 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e01d      	b.n	8002d5e <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d0e7      	beq.n	8002d00 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e00a      	b.n	8002d4c <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	2200      	movs	r2, #0
 8002d44:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b0f      	cmp	r3, #15
 8002d50:	d9f1      	bls.n	8002d36 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f807 	bl	8002d66 <HAL_LCD_UpdateDisplayRequest>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2208      	movs	r2, #8
 8002d74:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0204 	orr.w	r2, r2, #4
 8002d84:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002d86:	f7fe fb1b 	bl	80013c0 <HAL_GetTick>
 8002d8a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8002d8c:	e010      	b.n	8002db0 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002d8e:	f7fe fb17 	bl	80013c0 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9c:	d908      	bls.n	8002db0 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2204      	movs	r2, #4
 8002da2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e00f      	b.n	8002dd0 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d1e7      	bne.n	8002d8e <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8002de0:	f7fe faee 	bl	80013c0 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002de6:	e00c      	b.n	8002e02 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8002de8:	f7fe faea 	bl	80013c0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df6:	d904      	bls.n	8002e02 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e007      	b.n	8002e12 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d1eb      	bne.n	8002de8 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40007000 	.word	0x40007000

08002e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e46:	d130      	bne.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d038      	beq.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2232      	movs	r2, #50	; 0x32
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	0c9b      	lsrs	r3, r3, #18
 8002e78:	3301      	adds	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7c:	e002      	b.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e84:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e90:	d102      	bne.n	8002e98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f2      	bne.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea4:	d110      	bne.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e00f      	b.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	d007      	beq.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ec0:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	431bde83 	.word	0x431bde83

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f000 bc11 	b.w	800371a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef8:	4ba0      	ldr	r3, [pc, #640]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f02:	4b9e      	ldr	r3, [pc, #632]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80e4 	beq.w	80030e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4c>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	f040 808b 	bne.w	800303e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f040 8087 	bne.w	800303e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f30:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_OscConfig+0x64>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e3e8      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <HAL_RCC_OscConfig+0x7e>
 8002f58:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f60:	e005      	b.n	8002f6e <HAL_RCC_OscConfig+0x8a>
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d223      	bcs.n	8002fba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fd7a 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e3c9      	b.n	800371a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f86:	4b7d      	ldr	r3, [pc, #500]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7c      	ldr	r2, [pc, #496]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b7a      	ldr	r3, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4977      	ldr	r1, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa4:	4b75      	ldr	r3, [pc, #468]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	4972      	ldr	r1, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
 8002fb8:	e025      	b.n	8003006 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fba:	4b70      	ldr	r3, [pc, #448]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6f      	ldr	r2, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fc0:	f043 0308 	orr.w	r3, r3, #8
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	496a      	ldr	r1, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	4965      	ldr	r1, [pc, #404]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fd3a 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e389      	b.n	800371a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003006:	f000 fc6f 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b5b      	ldr	r3, [pc, #364]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	495a      	ldr	r1, [pc, #360]	; (8003180 <HAL_RCC_OscConfig+0x29c>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_OscConfig+0x2a0>)
 8003024:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003026:	4b58      	ldr	r3, [pc, #352]	; (8003188 <HAL_RCC_OscConfig+0x2a4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f978 	bl	8001320 <HAL_InitTick>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d052      	beq.n	80030e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	e36d      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d032      	beq.n	80030ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003046:	4b4d      	ldr	r3, [pc, #308]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a4c      	ldr	r2, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003052:	f7fe f9b5 	bl	80013c0 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800305a:	f7fe f9b1 	bl	80013c0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e356      	b.n	800371a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800306c:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003078:	4b40      	ldr	r3, [pc, #256]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3f      	ldr	r2, [pc, #252]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	493a      	ldr	r1, [pc, #232]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	4935      	ldr	r1, [pc, #212]	; (800317c <HAL_RCC_OscConfig+0x298>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
 80030aa:	e01a      	b.n	80030e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ac:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_RCC_OscConfig+0x298>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a32      	ldr	r2, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0x298>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030b8:	f7fe f982 	bl	80013c0 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c0:	f7fe f97e 	bl	80013c0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e323      	b.n	800371a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x298>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x1dc>
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d073      	beq.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_OscConfig+0x21c>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d10e      	bne.n	8003118 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d10b      	bne.n	8003118 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d063      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d15f      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e300      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x24c>
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a15      	ldr	r2, [pc, #84]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0x288>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x270>
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a0f      	ldr	r2, [pc, #60]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a0c      	ldr	r2, [pc, #48]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0x288>
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a08      	ldr	r2, [pc, #32]	; (800317c <HAL_RCC_OscConfig+0x298>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a05      	ldr	r2, [pc, #20]	; (800317c <HAL_RCC_OscConfig+0x298>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f924 	bl	80013c0 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317a:	e010      	b.n	800319e <HAL_RCC_OscConfig+0x2ba>
 800317c:	40021000 	.word	0x40021000
 8003180:	08005748 	.word	0x08005748
 8003184:	20000000 	.word	0x20000000
 8003188:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe f918 	bl	80013c0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e2bd      	b.n	800371a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319e:	4baf      	ldr	r3, [pc, #700]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x2a8>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f908 	bl	80013c0 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe f904 	bl	80013c0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e2a9      	b.n	800371a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031c6:	4ba5      	ldr	r3, [pc, #660]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x2d0>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d060      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_OscConfig+0x310>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d119      	bne.n	8003222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d116      	bne.n	8003222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f4:	4b99      	ldr	r3, [pc, #612]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_OscConfig+0x328>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e286      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b93      	ldr	r3, [pc, #588]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	4990      	ldr	r1, [pc, #576]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003220:	e040      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800322a:	4b8c      	ldr	r3, [pc, #560]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a8b      	ldr	r2, [pc, #556]	; (800345c <HAL_RCC_OscConfig+0x578>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fe f8c3 	bl	80013c0 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7fe f8bf 	bl	80013c0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e264      	b.n	800371a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003250:	4b82      	ldr	r3, [pc, #520]	; (800345c <HAL_RCC_OscConfig+0x578>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b7f      	ldr	r3, [pc, #508]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	497c      	ldr	r1, [pc, #496]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
 8003270:	e018      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003272:	4b7a      	ldr	r3, [pc, #488]	; (800345c <HAL_RCC_OscConfig+0x578>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a79      	ldr	r2, [pc, #484]	; (800345c <HAL_RCC_OscConfig+0x578>)
 8003278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fe f89f 	bl	80013c0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003286:	f7fe f89b 	bl	80013c0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e240      	b.n	800371a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003298:	4b70      	ldr	r3, [pc, #448]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03c      	beq.n	800332a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b8:	4b68      	ldr	r3, [pc, #416]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032be:	4a67      	ldr	r2, [pc, #412]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe f87a 	bl	80013c0 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe f876 	bl	80013c0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e21b      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e2:	4b5e      	ldr	r3, [pc, #376]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ef      	beq.n	80032d0 <HAL_RCC_OscConfig+0x3ec>
 80032f0:	e01b      	b.n	800332a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f2:	4b5a      	ldr	r3, [pc, #360]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80032f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe f85d 	bl	80013c0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe f859 	bl	80013c0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1fe      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800331e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1ef      	bne.n	800330a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a6 	beq.w	8003484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800333c:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10d      	bne.n	8003364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b44      	ldr	r3, [pc, #272]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	4a43      	ldr	r2, [pc, #268]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	; 0x58
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_OscConfig+0x578>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003360:	2301      	movs	r3, #1
 8003362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003364:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCC_OscConfig+0x57c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d118      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x57c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_RCC_OscConfig+0x57c>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337c:	f7fe f820 	bl	80013c0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe f81c 	bl	80013c0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1c1      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003396:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_RCC_OscConfig+0x57c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_OscConfig+0x4d8>
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	4a2a      	ldr	r2, [pc, #168]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ba:	e024      	b.n	8003406 <HAL_RCC_OscConfig+0x522>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d110      	bne.n	80033e6 <HAL_RCC_OscConfig+0x502>
 80033c4:	4b25      	ldr	r3, [pc, #148]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a24      	ldr	r2, [pc, #144]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e4:	e00f      	b.n	8003406 <HAL_RCC_OscConfig+0x522>
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	4a1b      	ldr	r2, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	4a17      	ldr	r2, [pc, #92]	; (800345c <HAL_RCC_OscConfig+0x578>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fd ffd7 	bl	80013c0 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fd ffd3 	bl	80013c0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e176      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_OscConfig+0x578>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ed      	beq.n	8003416 <HAL_RCC_OscConfig+0x532>
 800343a:	e01a      	b.n	8003472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fd ffc0 	bl	80013c0 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003442:	e00f      	b.n	8003464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fd ffbc 	bl	80013c0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d906      	bls.n	8003464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e15f      	b.n	800371a <HAL_RCC_OscConfig+0x836>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003464:	4baa      	ldr	r3, [pc, #680]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e8      	bne.n	8003444 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4ba5      	ldr	r3, [pc, #660]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4aa4      	ldr	r2, [pc, #656]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03c      	beq.n	800350a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003498:	4b9d      	ldr	r3, [pc, #628]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349e:	4a9c      	ldr	r2, [pc, #624]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fd ff8a 	bl	80013c0 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b0:	f7fd ff86 	bl	80013c0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e12b      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034c2:	4b93      	ldr	r3, [pc, #588]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80034c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <HAL_RCC_OscConfig+0x5cc>
 80034d0:	e01b      	b.n	800350a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034d2:	4b8f      	ldr	r3, [pc, #572]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80034d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d8:	4a8d      	ldr	r2, [pc, #564]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fd ff6d 	bl	80013c0 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ea:	f7fd ff69 	bl	80013c0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e10e      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034fc:	4b84      	ldr	r3, [pc, #528]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80034fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ef      	bne.n	80034ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8102 	beq.w	8003718 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	2b02      	cmp	r3, #2
 800351a:	f040 80c5 	bne.w	80036a8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800351e:	4b7c      	ldr	r3, [pc, #496]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f003 0203 	and.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	429a      	cmp	r2, r3
 8003530:	d12c      	bne.n	800358c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	3b01      	subs	r3, #1
 800353e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d123      	bne.n	800358c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d11b      	bne.n	800358c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d113      	bne.n	800358c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d109      	bne.n	800358c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	3b01      	subs	r3, #1
 8003586:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d067      	beq.n	800365c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d062      	beq.n	8003658 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003592:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0bb      	b.n	800371a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035a2:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5a      	ldr	r2, [pc, #360]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80035a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ae:	f7fd ff07 	bl	80013c0 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fd ff03 	bl	80013c0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0a8      	b.n	800371a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c8:	4b51      	ldr	r3, [pc, #324]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d4:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_RCC_OscConfig+0x830>)
 80035da:	4013      	ands	r3, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035e4:	3a01      	subs	r2, #1
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	4311      	orrs	r1, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ee:	0212      	lsls	r2, r2, #8
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035f6:	0852      	lsrs	r2, r2, #1
 80035f8:	3a01      	subs	r2, #1
 80035fa:	0552      	lsls	r2, r2, #21
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003602:	0852      	lsrs	r2, r2, #1
 8003604:	3a01      	subs	r2, #1
 8003606:	0652      	lsls	r2, r2, #25
 8003608:	4311      	orrs	r1, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800360e:	06d2      	lsls	r2, r2, #27
 8003610:	430a      	orrs	r2, r1
 8003612:	493f      	ldr	r1, [pc, #252]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003618:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3c      	ldr	r2, [pc, #240]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003624:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a39      	ldr	r2, [pc, #228]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800362a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003630:	f7fd fec6 	bl	80013c0 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7fd fec2 	bl	80013c0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e067      	b.n	800371a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	4b31      	ldr	r3, [pc, #196]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003656:	e05f      	b.n	8003718 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e05e      	b.n	800371a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365c:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d157      	bne.n	8003718 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800366e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003672:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003680:	f7fd fe9e 	bl	80013c0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fd fe9a 	bl	80013c0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e03f      	b.n	800371a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x7a4>
 80036a6:	e037      	b.n	8003718 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d02d      	beq.n	800370a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a11      	ldr	r2, [pc, #68]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036cc:	f023 0303 	bic.w	r3, r3, #3
 80036d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fd fe6d 	bl	80013c0 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fd fe69 	bl	80013c0 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e00e      	b.n	800371a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_RCC_OscConfig+0x82c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1f0      	bne.n	80036ea <HAL_RCC_OscConfig+0x806>
 8003708:	e006      	b.n	8003718 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e005      	b.n	800371a <HAL_RCC_OscConfig+0x836>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0c8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 0207 	bic.w	r2, r3, #7
 800374e:	4961      	ldr	r1, [pc, #388]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0b0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d04c      	beq.n	800380e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d107      	bne.n	800378c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377c:	4b56      	ldr	r3, [pc, #344]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d121      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e09e      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d115      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e092      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ac:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e086      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e07e      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037cc:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 0203 	bic.w	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	493f      	ldr	r1, [pc, #252]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fd fdef 	bl	80013c0 <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e6:	f7fd fdeb 	bl	80013c0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e066      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fc:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 020c 	and.w	r2, r3, #12
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	429a      	cmp	r2, r3
 800380c:	d1eb      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381a:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	492c      	ldr	r1, [pc, #176]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382c:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d210      	bcs.n	800385c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4924      	ldr	r1, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e036      	b.n	80038ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4918      	ldr	r1, [pc, #96]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4910      	ldr	r1, [pc, #64]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389a:	f000 f825 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490c      	ldr	r1, [pc, #48]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fd2e 	bl	8001320 <HAL_InitTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038c8:	7afb      	ldrb	r3, [r7, #11]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08005748 	.word	0x08005748
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d121      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11e      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003928:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e005      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d102      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e004      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d101      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 800396e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d134      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0xa6>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xac>
 800398c:	e005      	b.n	800399a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	e005      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003996:	617b      	str	r3, [r7, #20]
      break;
 8003998:	e002      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	617b      	str	r3, [r7, #20]
      break;
 800399e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	3301      	adds	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	fb02 f203 	mul.w	r2, r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	0e5b      	lsrs	r3, r3, #25
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039e0:	69bb      	ldr	r3, [r7, #24]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	08005760 	.word	0x08005760
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08005758 	.word	0x08005758

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a48:	f7ff ffda 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0adb      	lsrs	r3, r3, #11
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08005758 	.word	0x08005758

08003a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a88:	f7ff f9c8 	bl	8002e1c <HAL_PWREx_GetVoltageRange>
 8003a8c:	6178      	str	r0, [r7, #20]
 8003a8e:	e014      	b.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa8:	f7ff f9b8 	bl	8002e1c <HAL_PWREx_GetVoltageRange>
 8003aac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d10b      	bne.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d919      	bls.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2ba0      	cmp	r3, #160	; 0xa0
 8003acc:	d902      	bls.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ace:	2302      	movs	r3, #2
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e013      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e010      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d902      	bls.n	8003ae6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e00a      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d102      	bne.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	e004      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d101      	bne.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af8:	2301      	movs	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 0207 	bic.w	r2, r3, #7
 8003b04:	4909      	ldr	r1, [pc, #36]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40022000 	.word	0x40022000

08003b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d031      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b54:	d01a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b5a:	d814      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b64:	d10f      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b66:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b72:	e00c      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fa1e 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	74fb      	strb	r3, [r7, #19]
      break;
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b94:	4b51      	ldr	r3, [pc, #324]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	494e      	ldr	r1, [pc, #312]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003baa:	e001      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 809e 	beq.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc2:	4b46      	ldr	r3, [pc, #280]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b40      	ldr	r3, [pc, #256]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
 8003be4:	4b3d      	ldr	r3, [pc, #244]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a39      	ldr	r2, [pc, #228]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c00:	f7fd fbde 	bl	80013c0 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c06:	e009      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fd fbda 	bl	80013c0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d902      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	74fb      	strb	r3, [r7, #19]
        break;
 8003c1a:	e005      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ef      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d15a      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c2e:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01e      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d019      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c76:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d016      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd fb9a 	bl	80013c0 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd fb96 	bl	80013c0 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d902      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca6:	e006      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ec      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	4904      	ldr	r1, [pc, #16]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cd2:	e009      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce8:	7c7b      	ldrb	r3, [r7, #17]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4bb2      	ldr	r3, [pc, #712]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	4ab1      	ldr	r2, [pc, #708]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d06:	4bac      	ldr	r3, [pc, #688]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f023 0203 	bic.w	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	49a8      	ldr	r1, [pc, #672]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d28:	4ba3      	ldr	r3, [pc, #652]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 020c 	bic.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	49a0      	ldr	r1, [pc, #640]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d4a:	4b9b      	ldr	r3, [pc, #620]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	4997      	ldr	r1, [pc, #604]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d6c:	4b92      	ldr	r3, [pc, #584]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	498f      	ldr	r1, [pc, #572]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d8e:	4b8a      	ldr	r3, [pc, #552]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	4986      	ldr	r1, [pc, #536]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	497e      	ldr	r1, [pc, #504]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd2:	4b79      	ldr	r3, [pc, #484]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	4975      	ldr	r1, [pc, #468]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df4:	4b70      	ldr	r3, [pc, #448]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	496d      	ldr	r1, [pc, #436]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e16:	4b68      	ldr	r3, [pc, #416]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	4964      	ldr	r1, [pc, #400]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d028      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e38:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	495c      	ldr	r1, [pc, #368]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e56:	d106      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e58:	4b57      	ldr	r3, [pc, #348]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a56      	ldr	r2, [pc, #344]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e62:	60d3      	str	r3, [r2, #12]
 8003e64:	e011      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e6e:	d10c      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	2101      	movs	r1, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f8a0 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d028      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e96:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea4:	4944      	ldr	r1, [pc, #272]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb6:	4b40      	ldr	r3, [pc, #256]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec0:	60d3      	str	r3, [r2, #12]
 8003ec2:	e011      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f871 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d028      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	492d      	ldr	r1, [pc, #180]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f12:	d106      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f1e:	60d3      	str	r3, [r2, #12]
 8003f20:	e011      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f842 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01c      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f52:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	4915      	ldr	r1, [pc, #84]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f81f 	bl	8003fbc <RCCEx_PLLSAI1_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	4904      	ldr	r1, [pc, #16]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fae:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000

08003fbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fca:	4b74      	ldr	r3, [pc, #464]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d018      	beq.n	8004008 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fd6:	4b71      	ldr	r3, [pc, #452]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0203 	and.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d10d      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fee:	4b6b      	ldr	r3, [pc, #428]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d047      	beq.n	8004092 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	e044      	b.n	8004092 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d018      	beq.n	8004042 <RCCEx_PLLSAI1_Config+0x86>
 8004010:	2b03      	cmp	r3, #3
 8004012:	d825      	bhi.n	8004060 <RCCEx_PLLSAI1_Config+0xa4>
 8004014:	2b01      	cmp	r3, #1
 8004016:	d002      	beq.n	800401e <RCCEx_PLLSAI1_Config+0x62>
 8004018:	2b02      	cmp	r3, #2
 800401a:	d009      	beq.n	8004030 <RCCEx_PLLSAI1_Config+0x74>
 800401c:	e020      	b.n	8004060 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800401e:	4b5f      	ldr	r3, [pc, #380]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11d      	bne.n	8004066 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402e:	e01a      	b.n	8004066 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004030:	4b5a      	ldr	r3, [pc, #360]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d116      	bne.n	800406a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004040:	e013      	b.n	800406a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004042:	4b56      	ldr	r3, [pc, #344]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10f      	bne.n	800406e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800404e:	4b53      	ldr	r3, [pc, #332]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800405e:	e006      	b.n	800406e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	e004      	b.n	8004070 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800406e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10d      	bne.n	8004092 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004076:	4b49      	ldr	r3, [pc, #292]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	430b      	orrs	r3, r1
 800408c:	4943      	ldr	r1, [pc, #268]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 800408e:	4313      	orrs	r3, r2
 8004090:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d17c      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004098:	4b40      	ldr	r3, [pc, #256]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3f      	ldr	r2, [pc, #252]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 800409e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd f98c 	bl	80013c0 <HAL_GetTick>
 80040a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040aa:	e009      	b.n	80040c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ac:	f7fd f988 	bl	80013c0 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d902      	bls.n	80040c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	73fb      	strb	r3, [r7, #15]
        break;
 80040be:	e005      	b.n	80040cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040c0:	4b36      	ldr	r3, [pc, #216]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ef      	bne.n	80040ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d15f      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d110      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040d8:	4b30      	ldr	r3, [pc, #192]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80040e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6892      	ldr	r2, [r2, #8]
 80040e8:	0211      	lsls	r1, r2, #8
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68d2      	ldr	r2, [r2, #12]
 80040ee:	06d2      	lsls	r2, r2, #27
 80040f0:	430a      	orrs	r2, r1
 80040f2:	492a      	ldr	r1, [pc, #168]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	610b      	str	r3, [r1, #16]
 80040f8:	e027      	b.n	800414a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d112      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004100:	4b26      	ldr	r3, [pc, #152]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004108:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6892      	ldr	r2, [r2, #8]
 8004110:	0211      	lsls	r1, r2, #8
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6912      	ldr	r2, [r2, #16]
 8004116:	0852      	lsrs	r2, r2, #1
 8004118:	3a01      	subs	r2, #1
 800411a:	0552      	lsls	r2, r2, #21
 800411c:	430a      	orrs	r2, r1
 800411e:	491f      	ldr	r1, [pc, #124]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	610b      	str	r3, [r1, #16]
 8004124:	e011      	b.n	800414a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800412e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6892      	ldr	r2, [r2, #8]
 8004136:	0211      	lsls	r1, r2, #8
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6952      	ldr	r2, [r2, #20]
 800413c:	0852      	lsrs	r2, r2, #1
 800413e:	3a01      	subs	r2, #1
 8004140:	0652      	lsls	r2, r2, #25
 8004142:	430a      	orrs	r2, r1
 8004144:	4915      	ldr	r1, [pc, #84]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004150:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004154:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd f933 	bl	80013c0 <HAL_GetTick>
 800415a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800415c:	e009      	b.n	8004172 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800415e:	f7fd f92f 	bl	80013c0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d902      	bls.n	8004172 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	73fb      	strb	r3, [r7, #15]
          break;
 8004170:	e005      	b.n	800417e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004172:	4b0a      	ldr	r3, [pc, #40]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0ef      	beq.n	800415e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	4903      	ldr	r1, [pc, #12]	; (800419c <RCCEx_PLLSAI1_Config+0x1e0>)
 800418e:	4313      	orrs	r3, r2
 8004190:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000

080041a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e049      	b.n	8004246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc ff14 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 f9ee 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d001      	beq.n	8004268 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e033      	b.n	80042d0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_TIM_Base_Start+0x8c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIM_Base_Start+0x3e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d004      	beq.n	800428e <HAL_TIM_Base_Start+0x3e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <HAL_TIM_Base_Start+0x90>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d115      	bne.n	80042ba <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_TIM_Base_Start+0x94>)
 8004296:	4013      	ands	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b06      	cmp	r3, #6
 800429e:	d015      	beq.n	80042cc <HAL_TIM_Base_Start+0x7c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d011      	beq.n	80042cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	e008      	b.n	80042cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e000      	b.n	80042ce <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40014000 	.word	0x40014000
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e049      	b.n	800438e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fc fe52 	bl	8000fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f000 f94a 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0ff      	b.n	80045b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b14      	cmp	r3, #20
 80043c2:	f200 80f0 	bhi.w	80045a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	08004421 	.word	0x08004421
 80043d0:	080045a7 	.word	0x080045a7
 80043d4:	080045a7 	.word	0x080045a7
 80043d8:	080045a7 	.word	0x080045a7
 80043dc:	08004461 	.word	0x08004461
 80043e0:	080045a7 	.word	0x080045a7
 80043e4:	080045a7 	.word	0x080045a7
 80043e8:	080045a7 	.word	0x080045a7
 80043ec:	080044a3 	.word	0x080044a3
 80043f0:	080045a7 	.word	0x080045a7
 80043f4:	080045a7 	.word	0x080045a7
 80043f8:	080045a7 	.word	0x080045a7
 80043fc:	080044e3 	.word	0x080044e3
 8004400:	080045a7 	.word	0x080045a7
 8004404:	080045a7 	.word	0x080045a7
 8004408:	080045a7 	.word	0x080045a7
 800440c:	08004525 	.word	0x08004525
 8004410:	080045a7 	.word	0x080045a7
 8004414:	080045a7 	.word	0x080045a7
 8004418:	080045a7 	.word	0x080045a7
 800441c:	08004565 	.word	0x08004565
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f92e 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
      break;
 800445e:	e0a5      	b.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f98a 	bl	8004780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	619a      	str	r2, [r3, #24]
      break;
 80044a0:	e084      	b.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f9e3 	bl	8004874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0204 	bic.w	r2, r2, #4
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	61da      	str	r2, [r3, #28]
      break;
 80044e0:	e064      	b.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fa3b 	bl	8004964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	61da      	str	r2, [r3, #28]
      break;
 8004522:	e043      	b.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fa78 	bl	8004a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0208 	orr.w	r2, r2, #8
 800453e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0204 	bic.w	r2, r2, #4
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004562:	e023      	b.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fab0 	bl	8004ad0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	021a      	lsls	r2, r3, #8
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045a4:	e002      	b.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
      break;
 80045aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <TIM_Base_SetConfig+0xbc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x20>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d108      	bne.n	80045f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <TIM_Base_SetConfig+0xbc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00b      	beq.n	8004612 <TIM_Base_SetConfig+0x52>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d007      	beq.n	8004612 <TIM_Base_SetConfig+0x52>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_Base_SetConfig+0x52>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <TIM_Base_SetConfig+0xc4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d108      	bne.n	8004624 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0c      	ldr	r2, [pc, #48]	; (800467c <TIM_Base_SetConfig+0xbc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0xa0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a0b      	ldr	r2, [pc, #44]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0xa0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <TIM_Base_SetConfig+0xc4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d103      	bne.n	8004668 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	615a      	str	r2, [r3, #20]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 0302 	bic.w	r3, r3, #2
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a24      	ldr	r2, [pc, #144]	; (8004774 <TIM_OC1_SetConfig+0xec>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_OC1_SetConfig+0x70>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a23      	ldr	r2, [pc, #140]	; (8004778 <TIM_OC1_SetConfig+0xf0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC1_SetConfig+0x70>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a22      	ldr	r2, [pc, #136]	; (800477c <TIM_OC1_SetConfig+0xf4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10c      	bne.n	8004712 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0308 	bic.w	r3, r3, #8
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a17      	ldr	r2, [pc, #92]	; (8004774 <TIM_OC1_SetConfig+0xec>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d007      	beq.n	800472a <TIM_OC1_SetConfig+0xa2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a16      	ldr	r2, [pc, #88]	; (8004778 <TIM_OC1_SetConfig+0xf0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_OC1_SetConfig+0xa2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <TIM_OC1_SetConfig+0xf4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d111      	bne.n	800474e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	621a      	str	r2, [r3, #32]
}
 8004768:	bf00      	nop
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40014000 	.word	0x40014000
 800477c:	40014400 	.word	0x40014400

08004780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0210 	bic.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0320 	bic.w	r3, r3, #32
 80047ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a22      	ldr	r2, [pc, #136]	; (8004868 <TIM_OC2_SetConfig+0xe8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10d      	bne.n	8004800 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a19      	ldr	r2, [pc, #100]	; (8004868 <TIM_OC2_SetConfig+0xe8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_OC2_SetConfig+0x98>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a18      	ldr	r2, [pc, #96]	; (800486c <TIM_OC2_SetConfig+0xec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_OC2_SetConfig+0x98>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a17      	ldr	r2, [pc, #92]	; (8004870 <TIM_OC2_SetConfig+0xf0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d113      	bne.n	8004840 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800481e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400

08004874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a21      	ldr	r2, [pc, #132]	; (8004958 <TIM_OC3_SetConfig+0xe4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10d      	bne.n	80048f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a18      	ldr	r2, [pc, #96]	; (8004958 <TIM_OC3_SetConfig+0xe4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <TIM_OC3_SetConfig+0x96>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a17      	ldr	r2, [pc, #92]	; (800495c <TIM_OC3_SetConfig+0xe8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <TIM_OC3_SetConfig+0x96>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <TIM_OC3_SetConfig+0xec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d113      	bne.n	8004932 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400

08004964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	031b      	lsls	r3, r3, #12
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <TIM_OC4_SetConfig+0xb0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_OC4_SetConfig+0x74>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <TIM_OC4_SetConfig+0xb4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC4_SetConfig+0x74>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <TIM_OC4_SetConfig+0xb8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d109      	bne.n	80049ec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400

08004a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <TIM_OC5_SetConfig+0xa4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_OC5_SetConfig+0x6a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a12      	ldr	r2, [pc, #72]	; (8004ac8 <TIM_OC5_SetConfig+0xa8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_OC5_SetConfig+0x6a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a11      	ldr	r2, [pc, #68]	; (8004acc <TIM_OC5_SetConfig+0xac>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d109      	bne.n	8004a9e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400

08004ad0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	051b      	lsls	r3, r3, #20
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <TIM_OC6_SetConfig+0xa8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_OC6_SetConfig+0x6c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <TIM_OC6_SetConfig+0xac>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC6_SetConfig+0x6c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a12      	ldr	r2, [pc, #72]	; (8004b80 <TIM_OC6_SetConfig+0xb0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d109      	bne.n	8004b50 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400

08004b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e04f      	b.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a21      	ldr	r2, [pc, #132]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c04:	d004      	beq.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10c      	bne.n	8004c2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40014000 	.word	0x40014000

08004c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e040      	b.n	8004ce4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc fa60 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2224      	movs	r2, #36	; 0x24
 8004c7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f82c 	bl	8004cec <UART_SetConfig>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e022      	b.n	8004ce4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa54 	bl	8005154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fadb 	bl	8005298 <UART_CheckIdleState>
 8004ce2:	4603      	mov	r3, r0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	b5b0      	push	{r4, r5, r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4baa      	ldr	r3, [pc, #680]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	69f9      	ldr	r1, [r7, #28]
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a9f      	ldr	r2, [pc, #636]	; (8004fc4 <UART_SetConfig+0x2d8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a96      	ldr	r2, [pc, #600]	; (8004fc8 <UART_SetConfig+0x2dc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d121      	bne.n	8004db6 <UART_SetConfig+0xca>
 8004d72:	4b96      	ldr	r3, [pc, #600]	; (8004fcc <UART_SetConfig+0x2e0>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d817      	bhi.n	8004db0 <UART_SetConfig+0xc4>
 8004d80:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x9c>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004da5 	.word	0x08004da5
 8004d90:	08004d9f 	.word	0x08004d9f
 8004d94:	08004dab 	.word	0x08004dab
 8004d98:	2301      	movs	r3, #1
 8004d9a:	76fb      	strb	r3, [r7, #27]
 8004d9c:	e096      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	76fb      	strb	r3, [r7, #27]
 8004da2:	e093      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004da4:	2304      	movs	r3, #4
 8004da6:	76fb      	strb	r3, [r7, #27]
 8004da8:	e090      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004daa:	2308      	movs	r3, #8
 8004dac:	76fb      	strb	r3, [r7, #27]
 8004dae:	e08d      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004db0:	2310      	movs	r3, #16
 8004db2:	76fb      	strb	r3, [r7, #27]
 8004db4:	e08a      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a85      	ldr	r2, [pc, #532]	; (8004fd0 <UART_SetConfig+0x2e4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d132      	bne.n	8004e26 <UART_SetConfig+0x13a>
 8004dc0:	4b82      	ldr	r3, [pc, #520]	; (8004fcc <UART_SetConfig+0x2e0>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d828      	bhi.n	8004e20 <UART_SetConfig+0x134>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0xe8>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e21 	.word	0x08004e21
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e15 	.word	0x08004e15
 8004de8:	08004e21 	.word	0x08004e21
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004e0f 	.word	0x08004e0f
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e1b 	.word	0x08004e1b
 8004e08:	2300      	movs	r3, #0
 8004e0a:	76fb      	strb	r3, [r7, #27]
 8004e0c:	e05e      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	76fb      	strb	r3, [r7, #27]
 8004e12:	e05b      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e14:	2304      	movs	r3, #4
 8004e16:	76fb      	strb	r3, [r7, #27]
 8004e18:	e058      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	76fb      	strb	r3, [r7, #27]
 8004e1e:	e055      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e20:	2310      	movs	r3, #16
 8004e22:	76fb      	strb	r3, [r7, #27]
 8004e24:	e052      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a6a      	ldr	r2, [pc, #424]	; (8004fd4 <UART_SetConfig+0x2e8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d120      	bne.n	8004e72 <UART_SetConfig+0x186>
 8004e30:	4b66      	ldr	r3, [pc, #408]	; (8004fcc <UART_SetConfig+0x2e0>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e3a:	2b30      	cmp	r3, #48	; 0x30
 8004e3c:	d013      	beq.n	8004e66 <UART_SetConfig+0x17a>
 8004e3e:	2b30      	cmp	r3, #48	; 0x30
 8004e40:	d814      	bhi.n	8004e6c <UART_SetConfig+0x180>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d009      	beq.n	8004e5a <UART_SetConfig+0x16e>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d810      	bhi.n	8004e6c <UART_SetConfig+0x180>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <UART_SetConfig+0x168>
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d006      	beq.n	8004e60 <UART_SetConfig+0x174>
 8004e52:	e00b      	b.n	8004e6c <UART_SetConfig+0x180>
 8004e54:	2300      	movs	r3, #0
 8004e56:	76fb      	strb	r3, [r7, #27]
 8004e58:	e038      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	76fb      	strb	r3, [r7, #27]
 8004e5e:	e035      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e60:	2304      	movs	r3, #4
 8004e62:	76fb      	strb	r3, [r7, #27]
 8004e64:	e032      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e66:	2308      	movs	r3, #8
 8004e68:	76fb      	strb	r3, [r7, #27]
 8004e6a:	e02f      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	76fb      	strb	r3, [r7, #27]
 8004e70:	e02c      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a53      	ldr	r2, [pc, #332]	; (8004fc4 <UART_SetConfig+0x2d8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d125      	bne.n	8004ec8 <UART_SetConfig+0x1dc>
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <UART_SetConfig+0x2e0>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e8a:	d017      	beq.n	8004ebc <UART_SetConfig+0x1d0>
 8004e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e90:	d817      	bhi.n	8004ec2 <UART_SetConfig+0x1d6>
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e96:	d00b      	beq.n	8004eb0 <UART_SetConfig+0x1c4>
 8004e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9c:	d811      	bhi.n	8004ec2 <UART_SetConfig+0x1d6>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <UART_SetConfig+0x1be>
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea6:	d006      	beq.n	8004eb6 <UART_SetConfig+0x1ca>
 8004ea8:	e00b      	b.n	8004ec2 <UART_SetConfig+0x1d6>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	76fb      	strb	r3, [r7, #27]
 8004eae:	e00d      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	76fb      	strb	r3, [r7, #27]
 8004eb4:	e00a      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	76fb      	strb	r3, [r7, #27]
 8004eba:	e007      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	76fb      	strb	r3, [r7, #27]
 8004ec0:	e004      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	76fb      	strb	r3, [r7, #27]
 8004ec6:	e001      	b.n	8004ecc <UART_SetConfig+0x1e0>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3c      	ldr	r2, [pc, #240]	; (8004fc4 <UART_SetConfig+0x2d8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	f040 8082 	bne.w	8004fdc <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed8:	7efb      	ldrb	r3, [r7, #27]
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d823      	bhi.n	8004f26 <UART_SetConfig+0x23a>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <UART_SetConfig+0x1f8>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f17 	.word	0x08004f17
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f27 	.word	0x08004f27
 8004f00:	08004f27 	.word	0x08004f27
 8004f04:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7fe fd86 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	6178      	str	r0, [r7, #20]
        break;
 8004f0e:	e00f      	b.n	8004f30 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <UART_SetConfig+0x2ec>)
 8004f12:	617b      	str	r3, [r7, #20]
        break;
 8004f14:	e00c      	b.n	8004f30 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fe fce7 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8004f1a:	6178      	str	r0, [r7, #20]
        break;
 8004f1c:	e008      	b.n	8004f30 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f22:	617b      	str	r3, [r7, #20]
        break;
 8004f24:	e004      	b.n	8004f30 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	76bb      	strb	r3, [r7, #26]
        break;
 8004f2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8100 	beq.w	8005138 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d305      	bcc.n	8004f54 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d902      	bls.n	8004f5a <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	76bb      	strb	r3, [r7, #26]
 8004f58:	e0ee      	b.n	8005138 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	020b      	lsls	r3, r1, #8
 8004f6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f70:	0202      	lsls	r2, r0, #8
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	6849      	ldr	r1, [r1, #4]
 8004f76:	0849      	lsrs	r1, r1, #1
 8004f78:	4608      	mov	r0, r1
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	1814      	adds	r4, r2, r0
 8004f80:	eb43 0501 	adc.w	r5, r3, r1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	4620      	mov	r0, r4
 8004f90:	4629      	mov	r1, r5
 8004f92:	f7fb f91b 	bl	80001cc <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa4:	d308      	bcc.n	8004fb8 <UART_SetConfig+0x2cc>
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fac:	d204      	bcs.n	8004fb8 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	60da      	str	r2, [r3, #12]
 8004fb6:	e0bf      	b.n	8005138 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	76bb      	strb	r3, [r7, #26]
 8004fbc:	e0bc      	b.n	8005138 <UART_SetConfig+0x44c>
 8004fbe:	bf00      	nop
 8004fc0:	efff69f3 	.word	0xefff69f3
 8004fc4:	40008000 	.word	0x40008000
 8004fc8:	40013800 	.word	0x40013800
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40004400 	.word	0x40004400
 8004fd4:	40004800 	.word	0x40004800
 8004fd8:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe4:	d15b      	bne.n	800509e <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8004fe6:	7efb      	ldrb	r3, [r7, #27]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d828      	bhi.n	800503e <UART_SetConfig+0x352>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x308>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	0800503f 	.word	0x0800503f
 8005004:	0800502f 	.word	0x0800502f
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005018:	f7fe fcfe 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 800501c:	6178      	str	r0, [r7, #20]
        break;
 800501e:	e013      	b.n	8005048 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7fe fd10 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8005024:	6178      	str	r0, [r7, #20]
        break;
 8005026:	e00f      	b.n	8005048 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b49      	ldr	r3, [pc, #292]	; (8005150 <UART_SetConfig+0x464>)
 800502a:	617b      	str	r3, [r7, #20]
        break;
 800502c:	e00c      	b.n	8005048 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7fe fc5b 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8005032:	6178      	str	r0, [r7, #20]
        break;
 8005034:	e008      	b.n	8005048 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	617b      	str	r3, [r7, #20]
        break;
 800503c:	e004      	b.n	8005048 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	76bb      	strb	r3, [r7, #26]
        break;
 8005046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d074      	beq.n	8005138 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	005a      	lsls	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d916      	bls.n	8005098 <UART_SetConfig+0x3ac>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d212      	bcs.n	8005098 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f023 030f 	bic.w	r3, r3, #15
 800507a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	b29a      	uxth	r2, r3
 8005088:	89fb      	ldrh	r3, [r7, #14]
 800508a:	4313      	orrs	r3, r2
 800508c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	89fa      	ldrh	r2, [r7, #14]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e04f      	b.n	8005138 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	76bb      	strb	r3, [r7, #26]
 800509c:	e04c      	b.n	8005138 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800509e:	7efb      	ldrb	r3, [r7, #27]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d828      	bhi.n	80050f6 <UART_SetConfig+0x40a>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x3c0>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f7 	.word	0x080050f7
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050f7 	.word	0x080050f7
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	080050f7 	.word	0x080050f7
 80050cc:	080050ef 	.word	0x080050ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe fca2 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80050d4:	6178      	str	r0, [r7, #20]
        break;
 80050d6:	e013      	b.n	8005100 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe fcb4 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 80050dc:	6178      	str	r0, [r7, #20]
        break;
 80050de:	e00f      	b.n	8005100 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <UART_SetConfig+0x464>)
 80050e2:	617b      	str	r3, [r7, #20]
        break;
 80050e4:	e00c      	b.n	8005100 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e6:	f7fe fbff 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80050ea:	6178      	str	r0, [r7, #20]
        break;
 80050ec:	e008      	b.n	8005100 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f2:	617b      	str	r3, [r7, #20]
        break;
 80050f4:	e004      	b.n	8005100 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	76bb      	strb	r3, [r7, #26]
        break;
 80050fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d018      	beq.n	8005138 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	085a      	lsrs	r2, r3, #1
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	441a      	add	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b0f      	cmp	r3, #15
 800511e:	d909      	bls.n	8005134 <UART_SetConfig+0x448>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005126:	d205      	bcs.n	8005134 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	e001      	b.n	8005138 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005144:	7ebb      	ldrb	r3, [r7, #26]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bdb0      	pop	{r4, r5, r7, pc}
 800514e:	bf00      	nop
 8005150:	00f42400 	.word	0x00f42400

08005154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01a      	beq.n	800526a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005252:	d10a      	bne.n	800526a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af02      	add	r7, sp, #8
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052a8:	f7fc f88a 	bl	80013c0 <HAL_GetTick>
 80052ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d10e      	bne.n	80052da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f82d 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e023      	b.n	8005322 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d10e      	bne.n	8005306 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f817 	bl	800532a <UART_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e00d      	b.n	8005322 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b09c      	sub	sp, #112	; 0x70
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533a:	e0a5      	b.n	8005488 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	f000 80a1 	beq.w	8005488 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005346:	f7fc f83b 	bl	80013c0 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <UART_WaitOnFlagUntilTimeout+0x32>
 8005356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005358:	2b00      	cmp	r3, #0
 800535a:	d13e      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800536a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005370:	667b      	str	r3, [r7, #100]	; 0x64
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800537a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e6      	bne.n	800535c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	663b      	str	r3, [r7, #96]	; 0x60
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e067      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d04f      	beq.n	8005488 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f6:	d147      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005400:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
 8005422:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3308      	adds	r3, #8
 800543a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	613b      	str	r3, [r7, #16]
   return(result);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	66bb      	str	r3, [r7, #104]	; 0x68
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005454:	623a      	str	r2, [r7, #32]
 8005456:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	69f9      	ldr	r1, [r7, #28]
 800545a:	6a3a      	ldr	r2, [r7, #32]
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	61bb      	str	r3, [r7, #24]
   return(result);
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e010      	b.n	80054aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	f43f af4a 	beq.w	800533c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3770      	adds	r7, #112	; 0x70
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <__libc_init_array>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4d0d      	ldr	r5, [pc, #52]	; (80054ec <__libc_init_array+0x38>)
 80054b8:	4c0d      	ldr	r4, [pc, #52]	; (80054f0 <__libc_init_array+0x3c>)
 80054ba:	1b64      	subs	r4, r4, r5
 80054bc:	10a4      	asrs	r4, r4, #2
 80054be:	2600      	movs	r6, #0
 80054c0:	42a6      	cmp	r6, r4
 80054c2:	d109      	bne.n	80054d8 <__libc_init_array+0x24>
 80054c4:	4d0b      	ldr	r5, [pc, #44]	; (80054f4 <__libc_init_array+0x40>)
 80054c6:	4c0c      	ldr	r4, [pc, #48]	; (80054f8 <__libc_init_array+0x44>)
 80054c8:	f000 f82e 	bl	8005528 <_init>
 80054cc:	1b64      	subs	r4, r4, r5
 80054ce:	10a4      	asrs	r4, r4, #2
 80054d0:	2600      	movs	r6, #0
 80054d2:	42a6      	cmp	r6, r4
 80054d4:	d105      	bne.n	80054e2 <__libc_init_array+0x2e>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054dc:	4798      	blx	r3
 80054de:	3601      	adds	r6, #1
 80054e0:	e7ee      	b.n	80054c0 <__libc_init_array+0xc>
 80054e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e6:	4798      	blx	r3
 80054e8:	3601      	adds	r6, #1
 80054ea:	e7f2      	b.n	80054d2 <__libc_init_array+0x1e>
 80054ec:	08005798 	.word	0x08005798
 80054f0:	08005798 	.word	0x08005798
 80054f4:	08005798 	.word	0x08005798
 80054f8:	0800579c 	.word	0x0800579c

080054fc <memcpy>:
 80054fc:	440a      	add	r2, r1
 80054fe:	4291      	cmp	r1, r2
 8005500:	f100 33ff 	add.w	r3, r0, #4294967295
 8005504:	d100      	bne.n	8005508 <memcpy+0xc>
 8005506:	4770      	bx	lr
 8005508:	b510      	push	{r4, lr}
 800550a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800550e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005512:	4291      	cmp	r1, r2
 8005514:	d1f9      	bne.n	800550a <memcpy+0xe>
 8005516:	bd10      	pop	{r4, pc}

08005518 <memset>:
 8005518:	4402      	add	r2, r0
 800551a:	4603      	mov	r3, r0
 800551c:	4293      	cmp	r3, r2
 800551e:	d100      	bne.n	8005522 <memset+0xa>
 8005520:	4770      	bx	lr
 8005522:	f803 1b01 	strb.w	r1, [r3], #1
 8005526:	e7f9      	b.n	800551c <memset+0x4>

08005528 <_init>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr

08005534 <_fini>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr
